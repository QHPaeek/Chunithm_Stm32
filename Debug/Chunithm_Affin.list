
Chunithm_Affin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c80c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c9b0  0800c9b0  0001c9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf14  0800cf14  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf1c  0800cf1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf1c  0800cf1c  0001cf1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf20  0800cf20  0001cf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cf24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fcc  200001e4  0800d108  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051b0  0800d108  000251b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021518  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b3e  00000000  00000000  0004172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00046270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c18  00000000  00000000  00048068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dba5  00000000  00000000  00049c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f9d  00000000  00000000  00067825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9c90  00000000  00000000  0008a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094a4  00000000  00000000  001344a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c994 	.word	0x0800c994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c994 	.word	0x0800c994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_DMA_Init+0x6c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <MX_DMA_Init+0x6c>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_DMA_Init+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800113e:	f7ff ff63 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001142:	4603      	mov	r3, r0
 8001144:	2200      	movs	r2, #0
 8001146:	2105      	movs	r1, #5
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffb3 	bl	80010b4 <NVIC_EncodePriority>
 800114e:	4603      	mov	r3, r0
 8001150:	4619      	mov	r1, r3
 8001152:	200b      	movs	r0, #11
 8001154:	f7ff ff84 	bl	8001060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001158:	200b      	movs	r0, #11
 800115a:	f7ff ff63 	bl	8001024 <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800115e:	f7ff ff53 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001162:	4603      	mov	r3, r0
 8001164:	2200      	movs	r2, #0
 8001166:	2105      	movs	r1, #5
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ffa3 	bl	80010b4 <NVIC_EncodePriority>
 800116e:	4603      	mov	r3, r0
 8001170:	4619      	mov	r1, r3
 8001172:	200c      	movs	r0, #12
 8001174:	f7ff ff74 	bl	8001060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001178:	200c      	movs	r0, #12
 800117a:	f7ff ff53 	bl	8001024 <__NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <MX_FREERTOS_Init+0x28>)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_FREERTOS_Init+0x2c>)
 8001196:	f004 f9e5 	bl	8005564 <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <MX_FREERTOS_Init+0x30>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of MPR121A */
  MPR121AHandle = osThreadNew(StartTask02, NULL, &MPR121A_attributes);
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <MX_FREERTOS_Init+0x34>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_FREERTOS_Init+0x38>)
 80011a6:	f004 f9dd 	bl	8005564 <osThreadNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <MX_FREERTOS_Init+0x3c>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800c9fc 	.word	0x0800c9fc
 80011b8:	080011cd 	.word	0x080011cd
 80011bc:	20000200 	.word	0x20000200
 80011c0:	0800ca20 	.word	0x0800ca20
 80011c4:	080011dd 	.word	0x080011dd
 80011c8:	20000204 	.word	0x20000204

080011cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f004 fa57 	bl	8005688 <osDelay>
 80011da:	e7fb      	b.n	80011d4 <StartDefaultTask+0x8>

080011dc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t status1 = MPR121_Init(I2C1);
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <StartTask02+0x28>)
 80011e6:	f000 fe39 	bl	8001e5c <MPR121_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
	  if(status1 == 0)
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <StartTask02+0x20>
	  {
		  printf("init faild\r\n");
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <StartTask02+0x2c>)
 80011f6:	f007 fde1 	bl	8008dbc <puts>
 80011fa:	e7f3      	b.n	80011e4 <StartTask02+0x8>
	  }
	  else
	  {
		  printf("init successful\r\n");
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <StartTask02+0x30>)
 80011fe:	f007 fddd 	bl	8008dbc <puts>
  {
 8001202:	e7ef      	b.n	80011e4 <StartTask02+0x8>
 8001204:	40005400 	.word	0x40005400
 8001208:	0800c9c4 	.word	0x0800c9c4
 800120c:	0800c9d0 	.word	0x0800c9d0

08001210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <MX_GPIO_Init+0xc4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xc4>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <MX_GPIO_Init+0xc4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_GPIO_Init+0xc4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001296:	2324      	movs	r3, #36	; 0x24
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0xc8>)
 80012ac:	f001 fb20 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xcc>)
 80012c8:	f001 fb12 	bl	80028f0 <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020000 	.word	0x40020000

080012e0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60da      	str	r2, [r3, #12]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f023 0201 	bic.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60da      	str	r2, [r3, #12]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40023800 	.word	0x40023800

08001398 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40023800 	.word	0x40023800

080013c8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LL_DMA_SetDataTransferDirection+0x44>)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80013e8:	4908      	ldr	r1, [pc, #32]	; (800140c <LL_DMA_SetDataTransferDirection+0x44>)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	440b      	add	r3, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	440b      	add	r3, r1
 80013f6:	4619      	mov	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	0800ca44 	.word	0x0800ca44

08001410 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LL_DMA_SetMode+0x44>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001430:	4908      	ldr	r1, [pc, #32]	; (8001454 <LL_DMA_SetMode+0x44>)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	440b      	add	r3, r1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	440b      	add	r3, r1
 800143e:	4619      	mov	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0800ca44 	.word	0x0800ca44

08001458 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <LL_DMA_SetPeriphIncMode+0x44>)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001478:	4908      	ldr	r1, [pc, #32]	; (800149c <LL_DMA_SetPeriphIncMode+0x44>)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	440b      	add	r3, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	440b      	add	r3, r1
 8001486:	4619      	mov	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	0800ca44 	.word	0x0800ca44

080014a0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014c0:	4908      	ldr	r1, [pc, #32]	; (80014e4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	440b      	add	r3, r1
 80014ce:	4619      	mov	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0800ca44 	.word	0x0800ca44

080014e8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LL_DMA_SetPeriphSize+0x44>)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001508:	4908      	ldr	r1, [pc, #32]	; (800152c <LL_DMA_SetPeriphSize+0x44>)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	440b      	add	r3, r1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	440b      	add	r3, r1
 8001516:	4619      	mov	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	0800ca44 	.word	0x0800ca44

08001530 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LL_DMA_SetMemorySize+0x44>)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001550:	4908      	ldr	r1, [pc, #32]	; (8001574 <LL_DMA_SetMemorySize+0x44>)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	440b      	add	r3, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	440b      	add	r3, r1
 800155e:	4619      	mov	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	0800ca44 	.word	0x0800ca44

08001578 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001598:	4908      	ldr	r1, [pc, #32]	; (80015bc <LL_DMA_SetStreamPriorityLevel+0x44>)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	440b      	add	r3, r1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	440b      	add	r3, r1
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0800ca44 	.word	0x0800ca44

080015c0 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LL_DMA_SetChannelSelection+0x44>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80015e0:	4908      	ldr	r1, [pc, #32]	; (8001604 <LL_DMA_SetChannelSelection+0x44>)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	440b      	add	r3, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	440b      	add	r3, r1
 80015ee:	4619      	mov	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	0800ca44 	.word	0x0800ca44

08001608 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LL_DMA_DisableFifoMode+0x3c>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <LL_DMA_DisableFifoMode+0x3c>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	440a      	add	r2, r1
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	4611      	mov	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	440a      	add	r2, r1
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6153      	str	r3, [r2, #20]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	0800ca44 	.word	0x0800ca44

08001648 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fcc0 	bl	8007fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800166c:	2002      	movs	r0, #2
 800166e:	f7ff fe7b 	bl	8001368 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001672:	23c0      	movs	r3, #192	; 0xc0
 8001674:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001676:	2302      	movs	r3, #2
 8001678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001686:	2304      	movs	r3, #4
 8001688:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4843      	ldr	r0, [pc, #268]	; (800179c <MX_I2C1_Init+0x154>)
 8001690:	f003 f8e5 	bl	800485e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001694:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001698:	f7ff fe7e 	bl	8001398 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_0, LL_DMA_CHANNEL_1);
 800169c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a0:	2100      	movs	r1, #0
 80016a2:	483f      	ldr	r0, [pc, #252]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016a4:	f7ff ff8c 	bl	80015c0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	483c      	ldr	r0, [pc, #240]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016ae:	f7ff fe8b 	bl	80013c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	483a      	ldr	r0, [pc, #232]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016b8:	f7ff ff5e 	bl	8001578 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	4837      	ldr	r0, [pc, #220]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016c2:	f7ff fea5 	bl	8001410 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	4835      	ldr	r0, [pc, #212]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016cc:	f7ff fec4 	bl	8001458 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80016d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d4:	2100      	movs	r1, #0
 80016d6:	4832      	ldr	r0, [pc, #200]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016d8:	f7ff fee2 	bl	80014a0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	482f      	ldr	r0, [pc, #188]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016e2:	f7ff ff01 	bl	80014e8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	482d      	ldr	r0, [pc, #180]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016ec:	f7ff ff20 	bl	8001530 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	482b      	ldr	r0, [pc, #172]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016f4:	f7ff ff88 	bl	8001608 <LL_DMA_DisableFifoMode>

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2101      	movs	r1, #1
 80016fc:	4828      	ldr	r0, [pc, #160]	; (80017a0 <MX_I2C1_Init+0x158>)
 80016fe:	f7ff ff5f 	bl	80015c0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	2101      	movs	r1, #1
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <MX_I2C1_Init+0x158>)
 8001708:	f7ff fe5e 	bl	80013c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 800170c:	2200      	movs	r2, #0
 800170e:	2101      	movs	r1, #1
 8001710:	4823      	ldr	r0, [pc, #140]	; (80017a0 <MX_I2C1_Init+0x158>)
 8001712:	f7ff ff31 	bl	8001578 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	4821      	ldr	r0, [pc, #132]	; (80017a0 <MX_I2C1_Init+0x158>)
 800171c:	f7ff fe78 	bl	8001410 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_I2C1_Init+0x158>)
 8001726:	f7ff fe97 	bl	8001458 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 800172a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172e:	2101      	movs	r1, #1
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_I2C1_Init+0x158>)
 8001732:	f7ff feb5 	bl	80014a0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	4819      	ldr	r0, [pc, #100]	; (80017a0 <MX_I2C1_Init+0x158>)
 800173c:	f7ff fed4 	bl	80014e8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8001740:	2200      	movs	r2, #0
 8001742:	2101      	movs	r1, #1
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <MX_I2C1_Init+0x158>)
 8001746:	f7ff fef3 	bl	8001530 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 800174a:	2101      	movs	r1, #1
 800174c:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_I2C1_Init+0x158>)
 800174e:	f7ff ff5b 	bl	8001608 <LL_DMA_DisableFifoMode>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_I2C1_Init+0x15c>)
 8001754:	f7ff fdf7 	bl	8001346 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x15c>)
 800175a:	f7ff fdd1 	bl	8001300 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <MX_I2C1_Init+0x15c>)
 8001760:	f7ff fdbe 	bl	80012e0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C1_Init+0x160>)
 800176a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800177a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_I2C1_Init+0x15c>)
 8001788:	f003 f9e8 	bl	8004b5c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_I2C1_Init+0x15c>)
 8001790:	f7ff fdc6 	bl	8001320 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020400 	.word	0x40020400
 80017a0:	40026000 	.word	0x40026000
 80017a4:	40005400 	.word	0x40005400
 80017a8:	00061a80 	.word	0x00061a80

080017ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C2_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <MX_I2C2_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C2_Init+0x50>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_I2C2_Init+0x58>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C2_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_I2C2_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_I2C2_Init+0x50>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_I2C2_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_I2C2_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_I2C2_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_I2C2_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_I2C2_Init+0x50>)
 80017ea:	f001 fa05 	bl	8002bf8 <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017f4:	f000 f97a 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000208 	.word	0x20000208
 8001800:	40005800 	.word	0x40005800
 8001804:	00061a80 	.word	0x00061a80

08001808 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_I2C3_Init+0x50>)
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <MX_I2C3_Init+0x54>)
 8001810:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_I2C3_Init+0x50>)
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_I2C3_Init+0x58>)
 8001816:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_I2C3_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_I2C3_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_I2C3_Init+0x50>)
 8001826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_I2C3_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_I2C3_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_I2C3_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_I2C3_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_I2C3_Init+0x50>)
 8001846:	f001 f9d7 	bl	8002bf8 <HAL_I2C_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001850:	f000 f94c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000025c 	.word	0x2000025c
 800185c:	40005c00 	.word	0x40005c00
 8001860:	00061a80 	.word	0x00061a80

08001864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_I2C_MspInit+0x148>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d13d      	bne.n	8001902 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	483d      	ldr	r0, [pc, #244]	; (80019b4 <HAL_I2C_MspInit+0x150>)
 80018c0:	f001 f816 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018c4:	2308      	movs	r3, #8
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018d4:	2309      	movs	r3, #9
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4835      	ldr	r0, [pc, #212]	; (80019b4 <HAL_I2C_MspInit+0x150>)
 80018e0:	f001 f806 	bl	80028f0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a30      	ldr	r2, [pc, #192]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 80018ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001900:	e04f      	b.n	80019a2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <HAL_I2C_MspInit+0x154>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d14a      	bne.n	80019a2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194a:	2312      	movs	r3, #18
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001956:	2304      	movs	r3, #4
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4816      	ldr	r0, [pc, #88]	; (80019bc <HAL_I2C_MspInit+0x158>)
 8001962:	f000 ffc5 	bl	80028f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001966:	2310      	movs	r3, #16
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001976:	2309      	movs	r3, #9
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <HAL_I2C_MspInit+0x150>)
 8001982:	f000 ffb5 	bl	80028f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_I2C_MspInit+0x14c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
}
 80019a2:	bf00      	nop
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40005800 	.word	0x40005800
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40005c00 	.word	0x40005c00
 80019bc:	40020000 	.word	0x40020000

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c4:	f000 fe4c 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c8:	f000 f816 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019cc:	f7ff fc20 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d0:	f7ff fba4 	bl	800111c <MX_DMA_Init>
  MX_I2C1_Init();
 80019d4:	f7ff fe38 	bl	8001648 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019d8:	f000 fd2c 	bl	8002434 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80019dc:	f7ff fee6 	bl	80017ac <MX_I2C2_Init>
  MX_I2C3_Init();
 80019e0:	f7ff ff12 	bl	8001808 <MX_I2C3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019e4:	f000 fd98 	bl	8002518 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019e8:	f003 fd72 	bl	80054d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019ec:	f7ff fbce 	bl	800118c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019f0:	f003 fd92 	bl	8005518 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x34>
	...

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	; 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	2230      	movs	r2, #48	; 0x30
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 fae8 	bl	8007fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <SystemClock_Config+0xc8>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <SystemClock_Config+0xc8>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <SystemClock_Config+0xc8>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <SystemClock_Config+0xcc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <SystemClock_Config+0xcc>)
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <SystemClock_Config+0xcc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a68:	2319      	movs	r3, #25
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a6c:	23c0      	movs	r3, #192	; 0xc0
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a74:	2304      	movs	r3, #4
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fb1d 	bl	80030bc <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a88:	f000 f830 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fd7f 	bl	80035ac <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ab4:	f000 f81a 	bl	8001aec <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ada:	f000 fde3 	bl	80026a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010000 	.word	0x40010000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>

08001af6 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b80      	cmp	r3, #128	; 0x80
 8001b08:	bf0c      	ite	eq
 8001b0a:	2301      	moveq	r3, #1
 8001b0c:	2300      	movne	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	b2db      	uxtb	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <I2C1_Write>:
	#define TOU_THRESH    3        //触摸阈值 0x0F     10//15//30//10//3
	#define    REL_THRESH    2     //释放阈值 0x0A     08//08//25//08//2


void I2C1_Write(int devaddr,int regaddr,int data)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	while(LL_I2C_IsActiveFlag_BUSY(I2C1)){}//等待I2C总线空闲
 8001cb4:	bf00      	nop
 8001cb6:	482c      	ldr	r0, [pc, #176]	; (8001d68 <I2C1_Write+0xc0>)
 8001cb8:	f7ff ff7c 	bl	8001bb4 <LL_I2C_IsActiveFlag_BUSY>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f9      	bne.n	8001cb6 <I2C1_Write+0xe>
	osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f003 fce0 	bl	8005688 <osDelay>
	LL_I2C_GenerateStartCondition(I2C1);//发送开始信号
 8001cc8:	4827      	ldr	r0, [pc, #156]	; (8001d68 <I2C1_Write+0xc0>)
 8001cca:	f7ff ffab 	bl	8001c24 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1)){}//等待开始信号发送完成
 8001cce:	bf00      	nop
 8001cd0:	4825      	ldr	r0, [pc, #148]	; (8001d68 <I2C1_Write+0xc0>)
 8001cd2:	f7ff ff49 	bl	8001b68 <LL_I2C_IsActiveFlag_SB>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f9      	beq.n	8001cd0 <I2C1_Write+0x28>
	osDelay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f003 fcd3 	bl	8005688 <osDelay>
	LL_I2C_TransmitData8(I2C1,devaddr << 1);//发送地址
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	481e      	ldr	r0, [pc, #120]	; (8001d68 <I2C1_Write+0xc0>)
 8001cee:	f7ff ffc6 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1)){}//当发送完成后，ADDR位自动被置1.等待地址发送完成
 8001cf2:	bf00      	nop
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <I2C1_Write+0xc0>)
 8001cf6:	f7ff ff4a 	bl	8001b8e <LL_I2C_IsActiveFlag_ADDR>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f9      	beq.n	8001cf4 <I2C1_Write+0x4c>
	LL_I2C_ClearFlag_ADDR(I2C1);//清除ADDR寄存器的数值，才能进行下一步操作
 8001d00:	4819      	ldr	r0, [pc, #100]	; (8001d68 <I2C1_Write+0xc0>)
 8001d02:	f7ff ff6a 	bl	8001bda <LL_I2C_ClearFlag_ADDR>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1)){}	  //地址位置1之后TXE也会完成
 8001d06:	bf00      	nop
 8001d08:	4817      	ldr	r0, [pc, #92]	; (8001d68 <I2C1_Write+0xc0>)
 8001d0a:	f7ff fef4 	bl	8001af6 <LL_I2C_IsActiveFlag_TXE>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f9      	beq.n	8001d08 <I2C1_Write+0x60>
	osDelay(1);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f003 fcb7 	bl	8005688 <osDelay>
	LL_I2C_TransmitData8(I2C1,regaddr);//写入寄存器地址
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4811      	ldr	r0, [pc, #68]	; (8001d68 <I2C1_Write+0xc0>)
 8001d22:	f7ff ffac 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1)){}//等待从机发送应答信号
 8001d26:	bf00      	nop
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <I2C1_Write+0xc0>)
 8001d2a:	f7ff fee4 	bl	8001af6 <LL_I2C_IsActiveFlag_TXE>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f9      	beq.n	8001d28 <I2C1_Write+0x80>
	osDelay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f003 fca7 	bl	8005688 <osDelay>
	LL_I2C_TransmitData8(I2C1,data);//发送写入的数据
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <I2C1_Write+0xc0>)
 8001d42:	f7ff ff9c 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1)){}//等待写入完成从机发送应答
 8001d46:	bf00      	nop
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <I2C1_Write+0xc0>)
 8001d4a:	f7ff fee7 	bl	8001b1c <LL_I2C_IsActiveFlag_BTF>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f9      	beq.n	8001d48 <I2C1_Write+0xa0>
	LL_I2C_GenerateStopCondition(I2C1);
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <I2C1_Write+0xc0>)
 8001d56:	f7ff ff75 	bl	8001c44 <LL_I2C_GenerateStopCondition>
	osDelay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f003 fc94 	bl	8005688 <osDelay>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40005400 	.word	0x40005400

08001d6c <I2C1_Read>:
int I2C1_Read(int devaddr,int regaddr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	uint8_t data = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
	while(LL_I2C_IsActiveFlag_BUSY(I2C1)){}//等待I2C总线空闲
 8001d7a:	bf00      	nop
 8001d7c:	4836      	ldr	r0, [pc, #216]	; (8001e58 <I2C1_Read+0xec>)
 8001d7e:	f7ff ff19 	bl	8001bb4 <LL_I2C_IsActiveFlag_BUSY>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <I2C1_Read+0x10>
	LL_I2C_GenerateStartCondition(I2C1);//发送开始信号
 8001d88:	4833      	ldr	r0, [pc, #204]	; (8001e58 <I2C1_Read+0xec>)
 8001d8a:	f7ff ff4b 	bl	8001c24 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1)){}//等待开始信号发送完成
 8001d8e:	bf00      	nop
 8001d90:	4831      	ldr	r0, [pc, #196]	; (8001e58 <I2C1_Read+0xec>)
 8001d92:	f7ff fee9 	bl	8001b68 <LL_I2C_IsActiveFlag_SB>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f9      	beq.n	8001d90 <I2C1_Read+0x24>
	LL_I2C_TransmitData8(I2C1,devaddr << 1);//发送地址
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	482c      	ldr	r0, [pc, #176]	; (8001e58 <I2C1_Read+0xec>)
 8001da8:	f7ff ff69 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1)){}//当发送完成后，ADDR位自动被置1.等待地址发送完成
 8001dac:	bf00      	nop
 8001dae:	482a      	ldr	r0, [pc, #168]	; (8001e58 <I2C1_Read+0xec>)
 8001db0:	f7ff feed 	bl	8001b8e <LL_I2C_IsActiveFlag_ADDR>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f9      	beq.n	8001dae <I2C1_Read+0x42>
	LL_I2C_ClearFlag_ADDR(I2C1);//清除ADDR寄存器的数值，才能进行下一步操作
 8001dba:	4827      	ldr	r0, [pc, #156]	; (8001e58 <I2C1_Read+0xec>)
 8001dbc:	f7ff ff0d 	bl	8001bda <LL_I2C_ClearFlag_ADDR>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1)){}	  //地址位置1之后TXE也会完成
 8001dc0:	bf00      	nop
 8001dc2:	4825      	ldr	r0, [pc, #148]	; (8001e58 <I2C1_Read+0xec>)
 8001dc4:	f7ff fe97 	bl	8001af6 <LL_I2C_IsActiveFlag_TXE>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f9      	beq.n	8001dc2 <I2C1_Read+0x56>
	LL_I2C_TransmitData8(I2C1,regaddr);//写入寄存器地址
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4820      	ldr	r0, [pc, #128]	; (8001e58 <I2C1_Read+0xec>)
 8001dd6:	f7ff ff52 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1)){}//等待从机发送应答信号
 8001dda:	bf00      	nop
 8001ddc:	481e      	ldr	r0, [pc, #120]	; (8001e58 <I2C1_Read+0xec>)
 8001dde:	f7ff fe8a 	bl	8001af6 <LL_I2C_IsActiveFlag_TXE>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f9      	beq.n	8001ddc <I2C1_Read+0x70>
//	LL_I2C_GenerateStopCondition(I2C1);
	LL_I2C_GenerateStartCondition(I2C1);//发送重启信号
 8001de8:	481b      	ldr	r0, [pc, #108]	; (8001e58 <I2C1_Read+0xec>)
 8001dea:	f7ff ff1b 	bl	8001c24 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1)){}//等待重启信号发送完成
 8001dee:	bf00      	nop
 8001df0:	4819      	ldr	r0, [pc, #100]	; (8001e58 <I2C1_Read+0xec>)
 8001df2:	f7ff feb9 	bl	8001b68 <LL_I2C_IsActiveFlag_SB>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f9      	beq.n	8001df0 <I2C1_Read+0x84>
	LL_I2C_TransmitData8(I2C1,devaddr << 1 | 0x01);//重新发送地址，并且读写位置1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <I2C1_Read+0xec>)
 8001e0e:	f7ff ff36 	bl	8001c7e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1)){}
 8001e12:	bf00      	nop
 8001e14:	4810      	ldr	r0, [pc, #64]	; (8001e58 <I2C1_Read+0xec>)
 8001e16:	f7ff feba 	bl	8001b8e <LL_I2C_IsActiveFlag_ADDR>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f9      	beq.n	8001e14 <I2C1_Read+0xa8>
	LL_I2C_AcknowledgeNextData(I2C1,LL_I2C_NACK);//发送NACK信号
 8001e20:	2100      	movs	r1, #0
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <I2C1_Read+0xec>)
 8001e24:	f7ff feeb 	bl	8001bfe <LL_I2C_AcknowledgeNextData>
	LL_I2C_ClearFlag_ADDR(I2C1);//清除ADDR位
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <I2C1_Read+0xec>)
 8001e2a:	f7ff fed6 	bl	8001bda <LL_I2C_ClearFlag_ADDR>
	LL_I2C_GenerateStopCondition(I2C1);//发送停止条件
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <I2C1_Read+0xec>)
 8001e30:	f7ff ff08 	bl	8001c44 <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_RXNE(I2C1)){}//当RXNE位置1之后，表示数据接收完成并且放置到DR寄存器中
 8001e34:	bf00      	nop
 8001e36:	4808      	ldr	r0, [pc, #32]	; (8001e58 <I2C1_Read+0xec>)
 8001e38:	f7ff fe83 	bl	8001b42 <LL_I2C_IsActiveFlag_RXNE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f9      	beq.n	8001e36 <I2C1_Read+0xca>
	data = LL_I2C_ReceiveData8(I2C1);//这里实际上是读取DR寄存器中接收到的数据
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <I2C1_Read+0xec>)
 8001e44:	f7ff ff0e 	bl	8001c64 <LL_I2C_ReceiveData8>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
	return data;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005400 	.word	0x40005400

08001e5c <MPR121_Init>:
int MPR121_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
	I2C1_Write(0x5A,0x80,0x63);
 8001e62:	2263      	movs	r2, #99	; 0x63
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	205a      	movs	r0, #90	; 0x5a
 8001e68:	f7ff ff1e 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x5E,0x00);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	215e      	movs	r1, #94	; 0x5e
 8001e70:	205a      	movs	r0, #90	; 0x5a
 8001e72:	f7ff ff19 	bl	8001ca8 <I2C1_Write>
	uint8_t status = I2C1_Read(0x5A,0x5D);
 8001e76:	215d      	movs	r1, #93	; 0x5d
 8001e78:	205a      	movs	r0, #90	; 0x5a
 8001e7a:	f7ff ff77 	bl	8001d6c <I2C1_Read>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	if(status != 0x24)
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b24      	cmp	r3, #36	; 0x24
 8001e86:	d001      	beq.n	8001e8c <MPR121_Init+0x30>
	{
		return(0);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e118      	b.n	80020be <MPR121_Init+0x262>
	}
	  // Section A  // 该组控制过滤。 data is > baseline.
	I2C1_Write(0x5A,MHD_R, 0x01);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	212b      	movs	r1, #43	; 0x2b
 8001e90:	205a      	movs	r0, #90	; 0x5a
 8001e92:	f7ff ff09 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,NHD_R, 0x01);
 8001e96:	2201      	movs	r2, #1
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	205a      	movs	r0, #90	; 0x5a
 8001e9c:	f7ff ff04 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,NCL_R, 0x00);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	212d      	movs	r1, #45	; 0x2d
 8001ea4:	205a      	movs	r0, #90	; 0x5a
 8001ea6:	f7ff feff 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,FDL_R, 0x00);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	212e      	movs	r1, #46	; 0x2e
 8001eae:	205a      	movs	r0, #90	; 0x5a
 8001eb0:	f7ff fefa 	bl	8001ca8 <I2C1_Write>

	    // Section B  // 该组控制过滤。data is < baseline.
	I2C1_Write(0x5A,MHD_F, 0x01);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	212f      	movs	r1, #47	; 0x2f
 8001eb8:	205a      	movs	r0, #90	; 0x5a
 8001eba:	f7ff fef5 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,NHD_F, 0x01);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2130      	movs	r1, #48	; 0x30
 8001ec2:	205a      	movs	r0, #90	; 0x5a
 8001ec4:	f7ff fef0 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,NCL_F, 0xFF);
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	2131      	movs	r1, #49	; 0x31
 8001ecc:	205a      	movs	r0, #90	; 0x5a
 8001ece:	f7ff feeb 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,FDL_F, 0x00);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2132      	movs	r1, #50	; 0x32
 8001ed6:	205a      	movs	r0, #90	; 0x5a
 8001ed8:	f7ff fee6 	bl	8001ca8 <I2C1_Write>

	    //基线过滤控制寄存器
	I2C1_Write(0x5A,0x33, 0x00);    //noise half delta touched
 8001edc:	2200      	movs	r2, #0
 8001ede:	2133      	movs	r1, #51	; 0x33
 8001ee0:	205a      	movs	r0, #90	; 0x5a
 8001ee2:	f7ff fee1 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x34, 0x00);    //noise counts touched
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2134      	movs	r1, #52	; 0x34
 8001eea:	205a      	movs	r0, #90	; 0x5a
 8001eec:	f7ff fedc 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x35, 0x00);    //filter delay touched
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2135      	movs	r1, #53	; 0x35
 8001ef4:	205a      	movs	r0, #90	; 0x5a
 8001ef6:	f7ff fed7 	bl	8001ca8 <I2C1_Write>

	I2C1_Write(0x5A,0x36, 0x0F);
 8001efa:	220f      	movs	r2, #15
 8001efc:	2136      	movs	r1, #54	; 0x36
 8001efe:	205a      	movs	r0, #90	; 0x5a
 8001f00:	f7ff fed2 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x37, 0x0F);
 8001f04:	220f      	movs	r2, #15
 8001f06:	2137      	movs	r1, #55	; 0x37
 8001f08:	205a      	movs	r0, #90	; 0x5a
 8001f0a:	f7ff fecd 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x38, 0x00);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2138      	movs	r1, #56	; 0x38
 8001f12:	205a      	movs	r0, #90	; 0x5a
 8001f14:	f7ff fec8 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x39, 0x00);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2139      	movs	r1, #57	; 0x39
 8001f1c:	205a      	movs	r0, #90	; 0x5a
 8001f1e:	f7ff fec3 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3A, 0x01);
 8001f22:	2201      	movs	r2, #1
 8001f24:	213a      	movs	r1, #58	; 0x3a
 8001f26:	205a      	movs	r0, #90	; 0x5a
 8001f28:	f7ff febe 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3B, 0x01);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	213b      	movs	r1, #59	; 0x3b
 8001f30:	205a      	movs	r0, #90	; 0x5a
 8001f32:	f7ff feb9 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3C, 0xFF);
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	213c      	movs	r1, #60	; 0x3c
 8001f3a:	205a      	movs	r0, #90	; 0x5a
 8001f3c:	f7ff feb4 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3D, 0xFF);
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	213d      	movs	r1, #61	; 0x3d
 8001f44:	205a      	movs	r0, #90	; 0x5a
 8001f46:	f7ff feaf 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3E, 0x00);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	213e      	movs	r1, #62	; 0x3e
 8001f4e:	205a      	movs	r0, #90	; 0x5a
 8001f50:	f7ff feaa 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x3F, 0x00);
 8001f54:	2200      	movs	r2, #0
 8001f56:	213f      	movs	r1, #63	; 0x3f
 8001f58:	205a      	movs	r0, #90	; 0x5a
 8001f5a:	f7ff fea5 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x40, 0x00);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	; 0x40
 8001f62:	205a      	movs	r0, #90	; 0x5a
 8001f64:	f7ff fea0 	bl	8001ca8 <I2C1_Write>

	    // Section C  // 该组为每个电极设置触摸和释放阈值
	I2C1_Write(0x5A,ELE0_T, TOU_THRESH);
 8001f68:	2203      	movs	r2, #3
 8001f6a:	2141      	movs	r1, #65	; 0x41
 8001f6c:	205a      	movs	r0, #90	; 0x5a
 8001f6e:	f7ff fe9b 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE0_R, REL_THRESH);
 8001f72:	2202      	movs	r2, #2
 8001f74:	2142      	movs	r1, #66	; 0x42
 8001f76:	205a      	movs	r0, #90	; 0x5a
 8001f78:	f7ff fe96 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE1_T, TOU_THRESH);
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	2143      	movs	r1, #67	; 0x43
 8001f80:	205a      	movs	r0, #90	; 0x5a
 8001f82:	f7ff fe91 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE1_R, REL_THRESH);
 8001f86:	2202      	movs	r2, #2
 8001f88:	2144      	movs	r1, #68	; 0x44
 8001f8a:	205a      	movs	r0, #90	; 0x5a
 8001f8c:	f7ff fe8c 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE2_T, TOU_THRESH);
 8001f90:	2203      	movs	r2, #3
 8001f92:	2145      	movs	r1, #69	; 0x45
 8001f94:	205a      	movs	r0, #90	; 0x5a
 8001f96:	f7ff fe87 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE2_R, REL_THRESH);
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	2146      	movs	r1, #70	; 0x46
 8001f9e:	205a      	movs	r0, #90	; 0x5a
 8001fa0:	f7ff fe82 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE3_T, TOU_THRESH);
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	2147      	movs	r1, #71	; 0x47
 8001fa8:	205a      	movs	r0, #90	; 0x5a
 8001faa:	f7ff fe7d 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE3_R, REL_THRESH);
 8001fae:	2202      	movs	r2, #2
 8001fb0:	2148      	movs	r1, #72	; 0x48
 8001fb2:	205a      	movs	r0, #90	; 0x5a
 8001fb4:	f7ff fe78 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE4_T, TOU_THRESH);
 8001fb8:	2203      	movs	r2, #3
 8001fba:	2149      	movs	r1, #73	; 0x49
 8001fbc:	205a      	movs	r0, #90	; 0x5a
 8001fbe:	f7ff fe73 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE4_R, REL_THRESH);
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	214a      	movs	r1, #74	; 0x4a
 8001fc6:	205a      	movs	r0, #90	; 0x5a
 8001fc8:	f7ff fe6e 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE5_T, TOU_THRESH);
 8001fcc:	2203      	movs	r2, #3
 8001fce:	214b      	movs	r1, #75	; 0x4b
 8001fd0:	205a      	movs	r0, #90	; 0x5a
 8001fd2:	f7ff fe69 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE5_R, REL_THRESH);
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	214c      	movs	r1, #76	; 0x4c
 8001fda:	205a      	movs	r0, #90	; 0x5a
 8001fdc:	f7ff fe64 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE6_T, TOU_THRESH);
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	214d      	movs	r1, #77	; 0x4d
 8001fe4:	205a      	movs	r0, #90	; 0x5a
 8001fe6:	f7ff fe5f 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE6_R, REL_THRESH);
 8001fea:	2202      	movs	r2, #2
 8001fec:	214e      	movs	r1, #78	; 0x4e
 8001fee:	205a      	movs	r0, #90	; 0x5a
 8001ff0:	f7ff fe5a 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE7_T, TOU_THRESH);
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	214f      	movs	r1, #79	; 0x4f
 8001ff8:	205a      	movs	r0, #90	; 0x5a
 8001ffa:	f7ff fe55 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE7_R, REL_THRESH);
 8001ffe:	2202      	movs	r2, #2
 8002000:	2150      	movs	r1, #80	; 0x50
 8002002:	205a      	movs	r0, #90	; 0x5a
 8002004:	f7ff fe50 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE8_T, TOU_THRESH);
 8002008:	2203      	movs	r2, #3
 800200a:	2151      	movs	r1, #81	; 0x51
 800200c:	205a      	movs	r0, #90	; 0x5a
 800200e:	f7ff fe4b 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE8_R, REL_THRESH);
 8002012:	2202      	movs	r2, #2
 8002014:	2152      	movs	r1, #82	; 0x52
 8002016:	205a      	movs	r0, #90	; 0x5a
 8002018:	f7ff fe46 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE9_T, TOU_THRESH);
 800201c:	2203      	movs	r2, #3
 800201e:	2153      	movs	r1, #83	; 0x53
 8002020:	205a      	movs	r0, #90	; 0x5a
 8002022:	f7ff fe41 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE9_R, REL_THRESH);
 8002026:	2202      	movs	r2, #2
 8002028:	2154      	movs	r1, #84	; 0x54
 800202a:	205a      	movs	r0, #90	; 0x5a
 800202c:	f7ff fe3c 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE10_T, TOU_THRESH);
 8002030:	2203      	movs	r2, #3
 8002032:	2155      	movs	r1, #85	; 0x55
 8002034:	205a      	movs	r0, #90	; 0x5a
 8002036:	f7ff fe37 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE10_R, REL_THRESH);
 800203a:	2202      	movs	r2, #2
 800203c:	2156      	movs	r1, #86	; 0x56
 800203e:	205a      	movs	r0, #90	; 0x5a
 8002040:	f7ff fe32 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE11_T, TOU_THRESH);
 8002044:	2203      	movs	r2, #3
 8002046:	2157      	movs	r1, #87	; 0x57
 8002048:	205a      	movs	r0, #90	; 0x5a
 800204a:	f7ff fe2d 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,ELE11_R, REL_THRESH);
 800204e:	2202      	movs	r2, #2
 8002050:	2158      	movs	r1, #88	; 0x58
 8002052:	205a      	movs	r0, #90	; 0x5a
 8002054:	f7ff fe28 	bl	8001ca8 <I2C1_Write>

	I2C1_Write(0x5A,0x59, 0x02);
 8002058:	2202      	movs	r2, #2
 800205a:	2159      	movs	r1, #89	; 0x59
 800205c:	205a      	movs	r0, #90	; 0x5a
 800205e:	f7ff fe23 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x5A, 0x01);
 8002062:	2201      	movs	r2, #1
 8002064:	215a      	movs	r1, #90	; 0x5a
 8002066:	205a      	movs	r0, #90	; 0x5a
 8002068:	f7ff fe1e 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x5B, 0x00);
 800206c:	2200      	movs	r2, #0
 800206e:	215b      	movs	r1, #91	; 0x5b
 8002070:	205a      	movs	r0, #90	; 0x5a
 8002072:	f7ff fe19 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x5C, 0x3F);
 8002076:	223f      	movs	r2, #63	; 0x3f
 8002078:	215c      	movs	r1, #92	; 0x5c
 800207a:	205a      	movs	r0, #90	; 0x5a
 800207c:	f7ff fe14 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x5D, 0x00);
 8002080:	2200      	movs	r2, #0
 8002082:	215d      	movs	r1, #93	; 0x5d
 8002084:	205a      	movs	r0, #90	; 0x5a
 8002086:	f7ff fe0f 	bl	8001ca8 <I2C1_Write>

	    // 启用自动配置和自动重新配置
	I2C1_Write(0x5A,0x7B, 0x0B);
 800208a:	220b      	movs	r2, #11
 800208c:	217b      	movs	r1, #123	; 0x7b
 800208e:	205a      	movs	r0, #90	; 0x5a
 8002090:	f7ff fe0a 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x7D, 0xC8);
 8002094:	22c8      	movs	r2, #200	; 0xc8
 8002096:	217d      	movs	r1, #125	; 0x7d
 8002098:	205a      	movs	r0, #90	; 0x5a
 800209a:	f7ff fe05 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x7E, 0x82);
 800209e:	2282      	movs	r2, #130	; 0x82
 80020a0:	217e      	movs	r1, #126	; 0x7e
 80020a2:	205a      	movs	r0, #90	; 0x5a
 80020a4:	f7ff fe00 	bl	8001ca8 <I2C1_Write>
	I2C1_Write(0x5A,0x7F, 0xB4);
 80020a8:	22b4      	movs	r2, #180	; 0xb4
 80020aa:	217f      	movs	r1, #127	; 0x7f
 80020ac:	205a      	movs	r0, #90	; 0x5a
 80020ae:	f7ff fdfb 	bl	8001ca8 <I2C1_Write>

	    //电极配置（重要）
	I2C1_Write(0x5A,0x5E, 0xBC);//1011,1100。启用基线跟踪，启用接近检测，启用所有12个电极
 80020b2:	22bc      	movs	r2, #188	; 0xbc
 80020b4:	215e      	movs	r1, #94	; 0x5e
 80020b6:	205a      	movs	r0, #90	; 0x5a
 80020b8:	f7ff fdf6 	bl	8001ca8 <I2C1_Write>
	return(1);
 80020bc:	2301      	movs	r3, #1
	}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_MspInit+0x54>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_MspInit+0x54>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_MspInit+0x54>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_MspInit+0x54>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_MspInit+0x54>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_MspInit+0x54>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	210f      	movs	r1, #15
 800210a:	f06f 0001 	mvn.w	r0, #1
 800210e:	f000 fbc5 	bl	800289c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_InitTick+0xd0>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <HAL_InitTick+0xd0>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6453      	str	r3, [r2, #68]	; 0x44
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_InitTick+0xd0>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f001 fc08 	bl	800396c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800215c:	f001 fbf2 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8002160:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_InitTick+0xd4>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	3b01      	subs	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_InitTick+0xd8>)
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_InitTick+0xdc>)
 8002174:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_InitTick+0xd8>)
 8002178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_InitTick+0xd8>)
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_InitTick+0xd8>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_InitTick+0xd8>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_InitTick+0xd8>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002196:	4818      	ldr	r0, [pc, #96]	; (80021f8 <HAL_InitTick+0xd8>)
 8002198:	f001 fc1a 	bl	80039d0 <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11b      	bne.n	80021e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021aa:	4813      	ldr	r0, [pc, #76]	; (80021f8 <HAL_InitTick+0xd8>)
 80021ac:	f001 fc6a 	bl	8003a84 <HAL_TIM_Base_Start_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d111      	bne.n	80021e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021be:	2019      	movs	r0, #25
 80021c0:	f000 fb88 	bl	80028d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d808      	bhi.n	80021dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80021ca:	2200      	movs	r2, #0
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	2019      	movs	r0, #25
 80021d0:	f000 fb64 	bl	800289c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_InitTick+0xe0>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e002      	b.n	80021e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	200002b0 	.word	0x200002b0
 80021fc:	40010000 	.word	0x40010000
 8002200:	20000004 	.word	0x20000004

08002204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <NMI_Handler+0x4>

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002252:	f001 fc79 	bl	8003b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002b0 	.word	0x200002b0

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227a:	f005 fe77 	bl	8007f6c <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
  return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
  }

  return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f889 	bl	8002410 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
  }
  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
  return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f005 fddc 	bl	8007f6c <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20020000 	.word	0x20020000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200002f8 	.word	0x200002f8
 80023e8:	200051b0 	.word	0x200051b0

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8002418:	1d39      	adds	r1, r7, #4
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	2201      	movs	r2, #1
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <__io_putchar+0x20>)
 8002422:	f001 fda2 	bl	8003f6a <HAL_UART_Transmit>
    return ch;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200002fc 	.word	0x200002fc

08002434 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART1_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART1_UART_Init+0x4c>)
 800246c:	f001 fd30 	bl	8003ed0 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff fb39 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002fc 	.word	0x200002fc
 8002484:	40011000 	.word	0x40011000

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_UART_MspInit+0x84>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12c      	bne.n	8002504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f4:	2307      	movs	r3, #7
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_UART_MspInit+0x8c>)
 8002500:	f000 f9f6 	bl	80028f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40011000 	.word	0x40011000
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000

08002518 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002526:	2204      	movs	r2, #4
 8002528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252c:	2202      	movs	r2, #2
 800252e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002538:	2202      	movs	r2, #2
 800253a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255c:	f000 fc90 	bl	8002e80 <HAL_PCD_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002566:	f7ff fac1 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000340 	.word	0x20000340

08002574 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002594:	d132      	bne.n	80025fc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_PCD_MspInit+0x90>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025c4:	230a      	movs	r3, #10
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <HAL_PCD_MspInit+0x94>)
 80025d0:	f000 f98e 	bl	80028f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025de:	6353      	str	r3, [r2, #52]	; 0x34
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ee:	6453      	str	r3, [r2, #68]	; 0x44
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_PCD_MspInit+0x90>)
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002636:	f7ff fed9 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f005 fc9d 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7ff f9bf 	bl	80019c0 <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002650:	0800cf24 	.word	0x0800cf24
  ldr r2, =_sbss
 8002654:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002658:	200051b0 	.word	0x200051b0

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_Init+0x40>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_Init+0x40>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x40>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f8fc 	bl	8002886 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	200f      	movs	r0, #15
 8002690:	f7ff fd46 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fd18 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000008 	.word	0x20000008
 80026c8:	2000084c 	.word	0x2000084c

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000084c 	.word	0x2000084c

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000008 	.word	0x20000008

0800272c <__NVIC_SetPriorityGrouping>:
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4c 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ae:	f7ff ff61 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f7ff ffb1 	bl	8002820 <NVIC_EncodePriority>
 80028be:	4602      	mov	r2, r0
 80028c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff80 	bl	80027cc <__NVIC_SetPriority>
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff54 	bl	8002790 <__NVIC_EnableIRQ>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	e159      	b.n	8002bc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 8148 	bne.w	8002bba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d005      	beq.n	8002942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	2b02      	cmp	r3, #2
 8002940:	d130      	bne.n	80029a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 0201 	and.w	r2, r3, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d017      	beq.n	80029e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d123      	bne.n	8002a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	08da      	lsrs	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3208      	adds	r2, #8
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80a2 	beq.w	8002bba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_GPIO_Init+0x2e8>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_GPIO_Init+0x2e8>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <HAL_GPIO_Init+0x2e8>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a92:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_GPIO_Init+0x2ec>)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <HAL_GPIO_Init+0x2f0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x202>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a48      	ldr	r2, [pc, #288]	; (8002be4 <HAL_GPIO_Init+0x2f4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x1fe>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a47      	ldr	r2, [pc, #284]	; (8002be8 <HAL_GPIO_Init+0x2f8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a46      	ldr	r2, [pc, #280]	; (8002bec <HAL_GPIO_Init+0x2fc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x1f6>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x1f2>
 8002ade:	2304      	movs	r3, #4
 8002ae0:	e008      	b.n	8002af4 <HAL_GPIO_Init+0x204>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x204>
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e004      	b.n	8002af4 <HAL_GPIO_Init+0x204>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_Init+0x204>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_GPIO_Init+0x204>
 8002af2:	2300      	movs	r3, #0
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f002 0203 	and.w	r2, r2, #3
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	4093      	lsls	r3, r2
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b04:	4935      	ldr	r1, [pc, #212]	; (8002bdc <HAL_GPIO_Init+0x2ec>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b12:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b36:	4a2f      	ldr	r2, [pc, #188]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb4:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	f67f aea2 	bls.w	800290c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40013c00 	.word	0x40013c00

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fe20 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f000 fe5e 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	; (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	b08f      	sub	sp, #60	; 0x3c
 8002e84:	af0a      	add	r7, sp, #40	; 0x28
 8002e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e10f      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fb61 	bl	8002574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 f818 	bl	8004f06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	687e      	ldr	r6, [r7, #4]
 8002ede:	466d      	mov	r5, sp
 8002ee0:	f106 0410 	add.w	r4, r6, #16
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ef4:	1d33      	adds	r3, r6, #4
 8002ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f001 ffa3 	bl	8004e44 <USB_CoreInit>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0d0      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 f806 	bl	8004f28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e04a      	b.n	8002fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	333d      	adds	r3, #61	; 0x3d
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	333c      	adds	r3, #60	; 0x3c
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3344      	adds	r3, #68	; 0x44
 8002f5e:	4602      	mov	r2, r0
 8002f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3340      	adds	r3, #64	; 0x40
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3348      	adds	r3, #72	; 0x48
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334c      	adds	r3, #76	; 0x4c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3354      	adds	r3, #84	; 0x54
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3af      	bcc.n	8002f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e044      	b.n	8003052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3b5      	bcc.n	8002fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	687e      	ldr	r6, [r7, #4]
 8003064:	466d      	mov	r5, sp
 8003066:	f106 0410 	add.w	r4, r6, #16
 800306a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003076:	e885 0003 	stmia.w	r5, {r0, r1}
 800307a:	1d33      	adds	r3, r6, #4
 800307c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307e:	6838      	ldr	r0, [r7, #0]
 8003080:	f001 ff9e 	bl	8004fc0 <USB_DevInit>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00d      	b.n	80030b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f969 	bl	8005382 <USB_DevDisconnect>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e267      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d075      	beq.n	80031c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030da:	4b88      	ldr	r3, [pc, #544]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d00c      	beq.n	8003100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b85      	ldr	r3, [pc, #532]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d112      	bne.n	8003118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b82      	ldr	r3, [pc, #520]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x108>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e242      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x74>
 8003122:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x98>
 800313a:	4b70      	ldr	r3, [pc, #448]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6f      	ldr	r2, [pc, #444]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6c      	ldr	r2, [pc, #432]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003154:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a68      	ldr	r2, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7ff faaa 	bl	80026cc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7ff faa6 	bl	80026cc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e207      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xc0>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7ff fa96 	bl	80026cc <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff fa92 	bl	80026cc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e1f3      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0xe8>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d11c      	bne.n	8003224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_RCC_OscConfig+0x152>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e1c7      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	e03a      	b.n	800329a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_OscConfig+0x244>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7ff fa4b 	bl	80026cc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323a:	f7ff fa47 	bl	80026cc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1a8      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4925      	ldr	r1, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x244>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7ff fa2a 	bl	80026cc <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327c:	f7ff fa26 	bl	80026cc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e187      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d036      	beq.n	8003314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x248>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7ff fa0a 	bl	80026cc <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032bc:	f7ff fa06 	bl	80026cc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e167      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_OscConfig+0x240>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x200>
 80032da:	e01b      	b.n	8003314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x248>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e2:	f7ff f9f3 	bl	80026cc <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	e00e      	b.n	8003308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ea:	f7ff f9ef 	bl	80026cc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d907      	bls.n	8003308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e150      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
 8003304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ea      	bne.n	80032ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8097 	beq.w	8003450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	4b7d      	ldr	r3, [pc, #500]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a7c      	ldr	r2, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b77      	ldr	r3, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d118      	bne.n	8003390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b74      	ldr	r3, [pc, #464]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a73      	ldr	r2, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7ff f9af 	bl	80026cc <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7ff f9ab 	bl	80026cc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e10c      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x474>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2ea>
 8003398:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	e01c      	b.n	80033e0 <HAL_RCC_OscConfig+0x324>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x30c>
 80033ae:	4b5f      	ldr	r3, [pc, #380]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5e      	ldr	r2, [pc, #376]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0x324>
 80033c8:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a54      	ldr	r2, [pc, #336]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7ff f970 	bl	80026cc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7ff f96c 	bl	80026cc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0cb      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	4b49      	ldr	r3, [pc, #292]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ee      	beq.n	80033f0 <HAL_RCC_OscConfig+0x334>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7ff f95a 	bl	80026cc <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7ff f956 	bl	80026cc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0b5      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ee      	bne.n	800341c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	4a38      	ldr	r2, [pc, #224]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a1 	beq.w	800359c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x470>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d05c      	beq.n	8003520 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d141      	bne.n	80034f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b31      	ldr	r3, [pc, #196]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff f92a 	bl	80026cc <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7ff f926 	bl	80026cc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e087      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7ff f8ff 	bl	80026cc <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7ff f8fb 	bl	80026cc <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e05c      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_RCC_OscConfig+0x470>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x416>
 80034f0:	e054      	b.n	800359c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_RCC_OscConfig+0x478>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7ff f8e8 	bl	80026cc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7ff f8e4 	bl	80026cc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e045      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_OscConfig+0x470>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x444>
 800351e:	e03d      	b.n	800359c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e038      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
 8003534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4ec>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d028      	beq.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d121      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0cc      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b68      	ldr	r3, [pc, #416]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d90c      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b8      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a58      	ldr	r2, [pc, #352]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800360a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a52      	ldr	r2, [pc, #328]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	494d      	ldr	r1, [pc, #308]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d044      	beq.n	80036cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d119      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d003      	beq.n	800366a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003666:	2b03      	cmp	r3, #3
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e067      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4934      	ldr	r1, [pc, #208]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800369c:	f7ff f816 	bl	80026cc <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7ff f812 	bl	80026cc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e04f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d20c      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e032      	b.n	800375a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4916      	ldr	r1, [pc, #88]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	490e      	ldr	r1, [pc, #56]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003732:	f000 f821 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003736:	4602      	mov	r2, r0
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	5ccb      	ldrb	r3, [r1, r3]
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fce4 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00
 8003768:	40023800 	.word	0x40023800
 800376c:	0800ca4c 	.word	0x0800ca4c
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b090      	sub	sp, #64	; 0x40
 800377e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
 8003784:	2300      	movs	r3, #0
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003788:	2300      	movs	r3, #0
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d00d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x40>
 800379c:	2b08      	cmp	r3, #8
 800379e:	f200 80a1 	bhi.w	80038e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037aa:	e09b      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_GetSysClockFreq+0x184>)
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037b0:	e09b      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b6:	e098      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c2:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d028      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	627a      	str	r2, [r7, #36]	; 0x24
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037e0:	2100      	movs	r1, #0
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e4:	fb03 f201 	mul.w	r2, r3, r1
 80037e8:	2300      	movs	r3, #0
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	4a43      	ldr	r2, [pc, #268]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037f2:	fba0 1202 	umull	r1, r2, r0, r2
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	460a      	mov	r2, r1
 80037fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80037fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fe:	4413      	add	r3, r2
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	2200      	movs	r2, #0
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	61fa      	str	r2, [r7, #28]
 800380a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003812:	f7fd fa41 	bl	8000c98 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4613      	mov	r3, r2
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381e:	e053      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	2200      	movs	r2, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	617a      	str	r2, [r7, #20]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003832:	f04f 0b00 	mov.w	fp, #0
 8003836:	4652      	mov	r2, sl
 8003838:	465b      	mov	r3, fp
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003848:	0150      	lsls	r0, r2, #5
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	ebb2 080a 	subs.w	r8, r2, sl
 8003852:	eb63 090b 	sbc.w	r9, r3, fp
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800386a:	ebb2 0408 	subs.w	r4, r2, r8
 800386e:	eb63 0509 	sbc.w	r5, r3, r9
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	00eb      	lsls	r3, r5, #3
 800387c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003880:	00e2      	lsls	r2, r4, #3
 8003882:	4614      	mov	r4, r2
 8003884:	461d      	mov	r5, r3
 8003886:	eb14 030a 	adds.w	r3, r4, sl
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	eb45 030b 	adc.w	r3, r5, fp
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389e:	4629      	mov	r1, r5
 80038a0:	028b      	lsls	r3, r1, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a8:	4621      	mov	r1, r4
 80038aa:	028a      	lsls	r2, r1, #10
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	2200      	movs	r2, #0
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038bc:	f7fd f9ec 	bl	8000c98 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	3301      	adds	r3, #1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetSysClockFreq+0x184>)
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3740      	adds	r7, #64	; 0x40
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	017d7840 	.word	0x017d7840

08003904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	0800ca5c 	.word	0x0800ca5c

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffdc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0b5b      	lsrs	r3, r3, #13
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	0800ca5c 	.word	0x0800ca5c

0800396c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	220f      	movs	r2, #15
 800397a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCC_GetClockConfig+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0207 	and.w	r2, r3, #7
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e041      	b.n	8003a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f839 	bl	8003a6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 f9ca 	bl	8003da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e044      	b.n	8003b26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_TIM_Base_Start_IT+0xb0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x6c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d013      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x6c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <HAL_TIM_Base_Start_IT+0xc0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d010      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b12:	e007      	b.n	8003b24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40014000 	.word	0x40014000

08003b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0202 	mvn.w	r2, #2
 8003b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8ee 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8e0 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f8f1 	bl	8003d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0204 	mvn.w	r2, #4
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8c4 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8b6 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8c7 	bl	8003d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0208 	mvn.w	r2, #8
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2204      	movs	r2, #4
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f89a 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f88c 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f89d 	bl	8003d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2208      	movs	r2, #8
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f870 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f862 	bl	8003d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f873 	bl	8003d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0201 	mvn.w	r2, #1
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fefe 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8e2 	bl	8003ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f838 	bl	8003d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0220 	mvn.w	r2, #32
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8ac 	bl	8003ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a34      	ldr	r2, [pc, #208]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00f      	beq.n	8003de0 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d00b      	beq.n	8003de0 <TIM_Base_SetConfig+0x38>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <TIM_Base_SetConfig+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <TIM_Base_SetConfig+0x38>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a30      	ldr	r2, [pc, #192]	; (8003e94 <TIM_Base_SetConfig+0xec>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <TIM_Base_SetConfig+0xf0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01b      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d017      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <TIM_Base_SetConfig+0xe8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <TIM_Base_SetConfig+0xec>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00f      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <TIM_Base_SetConfig+0xf0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00b      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <TIM_Base_SetConfig+0xf4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <TIM_Base_SetConfig+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <TIM_Base_SetConfig+0xfc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d108      	bne.n	8003e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800

08003ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe fac6 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f929 	bl	800416c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08a      	sub	sp, #40	; 0x28
 8003f6e:	af02      	add	r7, sp, #8
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d17c      	bne.n	8004084 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_UART_Transmit+0x2c>
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e075      	b.n	8004086 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit+0x3e>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e06e      	b.n	8004086 <HAL_UART_Transmit+0x11c>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	; 0x21
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fe fb85 	bl	80026cc <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Transmit+0x82>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ffc:	e02a      	b.n	8004054 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f840 	bl	800408e <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e036      	b.n	8004086 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3302      	adds	r3, #2
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e007      	b.n	8004046 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1cf      	bne.n	8003ffe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	; 0x40
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f810 	bl	800408e <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b090      	sub	sp, #64	; 0x40
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409e:	e050      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d04c      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x30>
 80040ae:	f7fe fb0d 	bl	80026cc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d241      	bcs.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040de:	637a      	str	r2, [r7, #52]	; 0x34
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004112:	623a      	str	r2, [r7, #32]
 8004114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d09f      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3740      	adds	r7, #64	; 0x40
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b0c0      	sub	sp, #256	; 0x100
 8004172:	af00      	add	r7, sp, #0
 8004174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	68d9      	ldr	r1, [r3, #12]
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	ea40 0301 	orr.w	r3, r0, r1
 8004194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041c4:	f021 010c 	bic.w	r1, r1, #12
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041d2:	430b      	orrs	r3, r1
 80041d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	6999      	ldr	r1, [r3, #24]
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	ea40 0301 	orr.w	r3, r0, r1
 80041f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b8f      	ldr	r3, [pc, #572]	; (8004438 <UART_SetConfig+0x2cc>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d005      	beq.n	800420c <UART_SetConfig+0xa0>
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <UART_SetConfig+0x2d0>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d104      	bne.n	8004216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7ff fb9a 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8004210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004214:	e003      	b.n	800421e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7ff fb81 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800421a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	f040 810c 	bne.w	8004444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800423a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	1891      	adds	r1, r2, r2
 8004244:	65b9      	str	r1, [r7, #88]	; 0x58
 8004246:	415b      	adcs	r3, r3
 8004248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800424e:	4621      	mov	r1, r4
 8004250:	eb12 0801 	adds.w	r8, r2, r1
 8004254:	4629      	mov	r1, r5
 8004256:	eb43 0901 	adc.w	r9, r3, r1
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426e:	4690      	mov	r8, r2
 8004270:	4699      	mov	r9, r3
 8004272:	4623      	mov	r3, r4
 8004274:	eb18 0303 	adds.w	r3, r8, r3
 8004278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800427c:	462b      	mov	r3, r5
 800427e:	eb49 0303 	adc.w	r3, r9, r3
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800429a:	460b      	mov	r3, r1
 800429c:	18db      	adds	r3, r3, r3
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
 80042a0:	4613      	mov	r3, r2
 80042a2:	eb42 0303 	adc.w	r3, r2, r3
 80042a6:	657b      	str	r3, [r7, #84]	; 0x54
 80042a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042b0:	f7fc fcf2 	bl	8000c98 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <UART_SetConfig+0x2d4>)
 80042ba:	fba3 2302 	umull	r2, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	011c      	lsls	r4, r3, #4
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	64b9      	str	r1, [r7, #72]	; 0x48
 80042dc:	415b      	adcs	r3, r3
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042e4:	4641      	mov	r1, r8
 80042e6:	eb12 0a01 	adds.w	sl, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb43 0b01 	adc.w	fp, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	4692      	mov	sl, r2
 8004306:	469b      	mov	fp, r3
 8004308:	4643      	mov	r3, r8
 800430a:	eb1a 0303 	adds.w	r3, sl, r3
 800430e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004312:	464b      	mov	r3, r9
 8004314:	eb4b 0303 	adc.w	r3, fp, r3
 8004318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800432c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004330:	460b      	mov	r3, r1
 8004332:	18db      	adds	r3, r3, r3
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
 8004336:	4613      	mov	r3, r2
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	647b      	str	r3, [r7, #68]	; 0x44
 800433e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004346:	f7fc fca7 	bl	8000c98 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4611      	mov	r1, r2
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <UART_SetConfig+0x2d4>)
 8004352:	fba3 2301 	umull	r2, r3, r3, r1
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2264      	movs	r2, #100	; 0x64
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	1acb      	subs	r3, r1, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004366:	4b36      	ldr	r3, [pc, #216]	; (8004440 <UART_SetConfig+0x2d4>)
 8004368:	fba3 2302 	umull	r2, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004374:	441c      	add	r4, r3
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004390:	415b      	adcs	r3, r3
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6339      	str	r1, [r7, #48]	; 0x30
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043ec:	460b      	mov	r3, r1
 80043ee:	18db      	adds	r3, r3, r3
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f2:	4613      	mov	r3, r2
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004402:	f7fc fc49 	bl	8000c98 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <UART_SetConfig+0x2d4>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <UART_SetConfig+0x2d4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 0207 	and.w	r2, r3, #7
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4422      	add	r2, r4
 8004432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004434:	e105      	b.n	8004642 <UART_SetConfig+0x4d6>
 8004436:	bf00      	nop
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800444e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004456:	4642      	mov	r2, r8
 8004458:	464b      	mov	r3, r9
 800445a:	1891      	adds	r1, r2, r2
 800445c:	6239      	str	r1, [r7, #32]
 800445e:	415b      	adcs	r3, r3
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004466:	4641      	mov	r1, r8
 8004468:	1854      	adds	r4, r2, r1
 800446a:	4649      	mov	r1, r9
 800446c:	eb43 0501 	adc.w	r5, r3, r1
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	00eb      	lsls	r3, r5, #3
 800447a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447e:	00e2      	lsls	r2, r4, #3
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	4643      	mov	r3, r8
 8004486:	18e3      	adds	r3, r4, r3
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800448c:	464b      	mov	r3, r9
 800448e:	eb45 0303 	adc.w	r3, r5, r3
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044b2:	4629      	mov	r1, r5
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044bc:	4621      	mov	r1, r4
 80044be:	008a      	lsls	r2, r1, #2
 80044c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044c4:	f7fc fbe8 	bl	8000c98 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b60      	ldr	r3, [pc, #384]	; (8004650 <UART_SetConfig+0x4e4>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011c      	lsls	r4, r3, #4
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	61b9      	str	r1, [r7, #24]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6139      	str	r1, [r7, #16]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	67bb      	str	r3, [r7, #120]	; 0x78
 8004542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004550:	4649      	mov	r1, r9
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455a:	4641      	mov	r1, r8
 800455c:	008a      	lsls	r2, r1, #2
 800455e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004562:	f7fc fb99 	bl	8000c98 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b39      	ldr	r3, [pc, #228]	; (8004650 <UART_SetConfig+0x4e4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	; 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a34      	ldr	r2, [pc, #208]	; (8004650 <UART_SetConfig+0x4e4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	441c      	add	r4, r3
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	673b      	str	r3, [r7, #112]	; 0x70
 8004594:	677a      	str	r2, [r7, #116]	; 0x74
 8004596:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045aa:	4641      	mov	r1, r8
 80045ac:	1851      	adds	r1, r2, r1
 80045ae:	6039      	str	r1, [r7, #0]
 80045b0:	4649      	mov	r1, r9
 80045b2:	414b      	adcs	r3, r1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c2:	4659      	mov	r1, fp
 80045c4:	00cb      	lsls	r3, r1, #3
 80045c6:	4651      	mov	r1, sl
 80045c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045cc:	4651      	mov	r1, sl
 80045ce:	00ca      	lsls	r2, r1, #3
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	4603      	mov	r3, r0
 80045d6:	4642      	mov	r2, r8
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	66bb      	str	r3, [r7, #104]	; 0x68
 80045dc:	464b      	mov	r3, r9
 80045de:	460a      	mov	r2, r1
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	663b      	str	r3, [r7, #96]	; 0x60
 80045f0:	667a      	str	r2, [r7, #100]	; 0x64
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045fe:	4649      	mov	r1, r9
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	4641      	mov	r1, r8
 8004604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004608:	4641      	mov	r1, r8
 800460a:	008a      	lsls	r2, r1, #2
 800460c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004610:	f7fc fb42 	bl	8000c98 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <UART_SetConfig+0x4e4>)
 800461a:	fba3 1302 	umull	r1, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2164      	movs	r1, #100	; 0x64
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	3332      	adds	r3, #50	; 0x32
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <UART_SetConfig+0x4e4>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 020f 	and.w	r2, r3, #15
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4422      	add	r2, r4
 8004640:	609a      	str	r2, [r3, #8]
}
 8004642:	bf00      	nop
 8004644:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	51eb851f 	.word	0x51eb851f

08004654 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	613b      	str	r3, [r7, #16]
  return result;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2103      	movs	r1, #3
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	61bb      	str	r3, [r7, #24]
  return result;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b089      	sub	sp, #36	; 0x24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	613b      	str	r3, [r7, #16]
  return result;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2103      	movs	r1, #3
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	401a      	ands	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	61bb      	str	r3, [r7, #24]
  return result;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	431a      	orrs	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	; 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	613b      	str	r3, [r7, #16]
  return result;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2103      	movs	r1, #3
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	61bb      	str	r3, [r7, #24]
  return result;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	60da      	str	r2, [r3, #12]
}
 8004792:	bf00      	nop
 8004794:	3724      	adds	r7, #36	; 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800479e:	b480      	push	{r7}
 80047a0:	b089      	sub	sp, #36	; 0x24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1a      	ldr	r2, [r3, #32]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	613b      	str	r3, [r7, #16]
  return result;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	210f      	movs	r1, #15
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	401a      	ands	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	61bb      	str	r3, [r7, #24]
  return result;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80047f0:	bf00      	nop
 80047f2:	3724      	adds	r7, #36	; 0x24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	613b      	str	r3, [r7, #16]
  return result;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	210f      	movs	r1, #15
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	401a      	ands	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	61bb      	str	r3, [r7, #24]
  return result;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004852:	bf00      	nop
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	613b      	str	r3, [r7, #16]
  return result;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004888:	e050      	b.n	800492c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2101      	movs	r1, #1
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d042      	beq.n	8004926 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d003      	beq.n	80048b0 <LL_GPIO_Init+0x52>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d10d      	bne.n	80048cc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	461a      	mov	r2, r3
 80048b6:	69b9      	ldr	r1, [r7, #24]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff12 	bl	80046e2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	461a      	mov	r2, r3
 80048c4:	69b9      	ldr	r1, [r7, #24]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fef3 	bl	80046b2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	461a      	mov	r2, r3
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff33 	bl	8004740 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d11a      	bne.n	8004918 <LL_GPIO_Init+0xba>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	60bb      	str	r3, [r7, #8]
  return result;
 80048ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b07      	cmp	r3, #7
 80048f8:	d807      	bhi.n	800490a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	461a      	mov	r2, r3
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff ff4b 	bl	800479e <LL_GPIO_SetAFPin_0_7>
 8004908:	e006      	b.n	8004918 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	461a      	mov	r2, r3
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ff72 	bl	80047fc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	69b9      	ldr	r1, [r7, #24]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fe97 	bl	8004654 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1a7      	bne.n	800488a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <LL_I2C_Enable>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_I2C_Disable>:
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 0201 	bic.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <LL_I2C_ConfigFilters>:
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f023 021f 	bic.w	r2, r3, #31
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	430b      	orrs	r3, r1
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_I2C_SetOwnAddress1>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	431a      	orrs	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_I2C_ConfigSpeed>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <LL_I2C_ConfigSpeed+0x124>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9b      	lsrs	r3, r3, #18
 8004a00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	493a      	ldr	r1, [pc, #232]	; (8004b08 <LL_I2C_ConfigSpeed+0x128>)
 8004a1e:	428b      	cmp	r3, r1
 8004a20:	d802      	bhi.n	8004a28 <LL_I2C_ConfigSpeed+0x48>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	e009      	b.n	8004a3c <LL_I2C_ConfigSpeed+0x5c>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4936      	ldr	r1, [pc, #216]	; (8004b0c <LL_I2C_ConfigSpeed+0x12c>)
 8004a34:	fba1 1303 	umull	r1, r3, r1, r3
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <LL_I2C_ConfigSpeed+0x128>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d939      	bls.n	8004abe <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d117      	bne.n	8004a80 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a78:	e01d      	b.n	8004ab6 <LL_I2C_ConfigSpeed+0xd6>
 8004a7a:	f248 0301 	movw	r3, #32769	; 0x8001
 8004a7e:	e01a      	b.n	8004ab6 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009a      	lsls	r2, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009a      	lsls	r2, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	e001      	b.n	8004ab6 <LL_I2C_ConfigSpeed+0xd6>
 8004ab2:	f248 0301 	movw	r3, #32769	; 0x8001
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e011      	b.n	8004ae2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004acc:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	e000      	b.n	8004ae0 <LL_I2C_ConfigSpeed+0x100>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	61da      	str	r2, [r3, #28]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	431bde83 	.word	0x431bde83
 8004b08:	000186a0 	.word	0x000186a0
 8004b0c:	10624dd3 	.word	0x10624dd3

08004b10 <LL_I2C_SetMode>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 021a 	bic.w	r2, r3, #26
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_I2C_AcknowledgeNextData>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fefc 	bl	8004964 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f89d 	bl	8004cb0 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68d9      	ldr	r1, [r3, #12]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff feff 	bl	8004984 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004b86:	6939      	ldr	r1, [r7, #16]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff25 	bl	80049e0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6959      	ldr	r1, [r3, #20]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff05 	bl	80049b0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ffaf 	bl	8004b10 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fec6 	bl	8004944 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffb9 	bl	8004b36 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <LL_RCC_GetSysClkSource+0x18>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800

08004bec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <LL_RCC_GetAHBPrescaler+0x18>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800

08004c24 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <LL_RCC_GetAPB2Prescaler+0x18>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <LL_RCC_PLL_GetMainSource+0x18>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800

08004c5c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <LL_RCC_PLL_GetN+0x18>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40023800 	.word	0x40023800

08004c78 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004c7c:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <LL_RCC_PLL_GetP+0x18>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800

08004c94 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <LL_RCC_PLL_GetDivider+0x18>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800

08004cb0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004cb8:	f000 f820 	bl	8004cfc <RCC_GetSystemClockFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f840 	bl	8004d4c <RCC_GetHCLKClockFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f84e 	bl	8004d78 <RCC_GetPCLK1ClockFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f85a 	bl	8004da0 <RCC_GetPCLK2ClockFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60da      	str	r2, [r3, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004d06:	f7ff ff63 	bl	8004bd0 <LL_RCC_GetSysClkSource>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d00c      	beq.n	8004d2a <RCC_GetSystemClockFreq+0x2e>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d80f      	bhi.n	8004d34 <RCC_GetSystemClockFreq+0x38>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <RCC_GetSystemClockFreq+0x22>
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d003      	beq.n	8004d24 <RCC_GetSystemClockFreq+0x28>
 8004d1c:	e00a      	b.n	8004d34 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <RCC_GetSystemClockFreq+0x48>)
 8004d20:	607b      	str	r3, [r7, #4]
      break;
 8004d22:	e00a      	b.n	8004d3a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <RCC_GetSystemClockFreq+0x4c>)
 8004d26:	607b      	str	r3, [r7, #4]
      break;
 8004d28:	e007      	b.n	8004d3a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004d2a:	2008      	movs	r0, #8
 8004d2c:	f000 f84c 	bl	8004dc8 <RCC_PLL_GetFreqDomain_SYS>
 8004d30:	6078      	str	r0, [r7, #4]
      break;
 8004d32:	e002      	b.n	8004d3a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <RCC_GetSystemClockFreq+0x48>)
 8004d36:	607b      	str	r3, [r7, #4]
      break;
 8004d38:	bf00      	nop
  }

  return frequency;
 8004d3a:	687b      	ldr	r3, [r7, #4]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	017d7840 	.word	0x017d7840

08004d4c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004d54:	f7ff ff4a 	bl	8004bec <LL_RCC_GetAHBPrescaler>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <RCC_GetHCLKClockFreq+0x28>)
 8004d62:	5cd3      	ldrb	r3, [r2, r3]
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	40d3      	lsrs	r3, r2
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	0800ca4c 	.word	0x0800ca4c

08004d78 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004d80:	f7ff ff42 	bl	8004c08 <LL_RCC_GetAPB1Prescaler>
 8004d84:	4603      	mov	r3, r0
 8004d86:	0a9b      	lsrs	r3, r3, #10
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <RCC_GetPCLK1ClockFreq+0x24>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	40d3      	lsrs	r3, r2
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0800ca5c 	.word	0x0800ca5c

08004da0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004da8:	f7ff ff3c 	bl	8004c24 <LL_RCC_GetAPB2Prescaler>
 8004dac:	4603      	mov	r3, r0
 8004dae:	0b5b      	lsrs	r3, r3, #13
 8004db0:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004db2:	5cd3      	ldrb	r3, [r2, r3]
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	40d3      	lsrs	r3, r2
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0800ca5c 	.word	0x0800ca5c

08004dc8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ddc:	f7ff ff30 	bl	8004c40 <LL_RCC_PLL_GetMainSource>
 8004de0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dee:	d003      	beq.n	8004df8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004df0:	e005      	b.n	8004dfe <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004df4:	617b      	str	r3, [r7, #20]
      break;
 8004df6:	e005      	b.n	8004e04 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004dfa:	617b      	str	r3, [r7, #20]
      break;
 8004dfc:	e002      	b.n	8004e04 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004e00:	617b      	str	r3, [r7, #20]
      break;
 8004e02:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d113      	bne.n	8004e32 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004e0a:	f7ff ff43 	bl	8004c94 <LL_RCC_PLL_GetDivider>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	fbb3 f4f2 	udiv	r4, r3, r2
 8004e16:	f7ff ff21 	bl	8004c5c <LL_RCC_PLL_GetN>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	fb03 f404 	mul.w	r4, r3, r4
 8004e20:	f7ff ff2a 	bl	8004c78 <LL_RCC_PLL_GetP>
 8004e24:	4603      	mov	r3, r0
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	3301      	adds	r3, #1
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004e30:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004e32:	693b      	ldr	r3, [r7, #16]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd90      	pop	{r4, r7, pc}
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	017d7840 	.word	0x017d7840

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d122      	bne.n	8004ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 faa2 	bl	80053e0 <USB_CoreReset>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e01a      	b.n	8004ed8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa96 	bl	80053e0 <USB_CoreReset>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eca:	e005      	b.n	8004ed8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10b      	bne.n	8004ef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f043 0206 	orr.w	r2, r3, #6
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f02:	b004      	add	sp, #16
 8004f04:	4770      	bx	lr

08004f06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d115      	bne.n	8004f76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f56:	2001      	movs	r0, #1
 8004f58:	f7fd fbc4 	bl	80026e4 <HAL_Delay>
      ms++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa2e 	bl	80053c4 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d01e      	beq.n	8004fac <USB_SetCurrentMode+0x84>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b31      	cmp	r3, #49	; 0x31
 8004f72:	d9f0      	bls.n	8004f56 <USB_SetCurrentMode+0x2e>
 8004f74:	e01a      	b.n	8004fac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d115      	bne.n	8004fa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f7fd fbab 	bl	80026e4 <HAL_Delay>
      ms++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fa15 	bl	80053c4 <USB_GetMode>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <USB_SetCurrentMode+0x84>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b31      	cmp	r3, #49	; 0x31
 8004fa4:	d9f0      	bls.n	8004f88 <USB_SetCurrentMode+0x60>
 8004fa6:	e001      	b.n	8004fac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e005      	b.n	8004fb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b32      	cmp	r3, #50	; 0x32
 8004fb0:	d101      	bne.n	8004fb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e009      	b.n	8004ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3340      	adds	r3, #64	; 0x40
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0e      	cmp	r3, #14
 8004ff8:	d9f2      	bls.n	8004fe0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11c      	bne.n	800503a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
 8005038:	e00b      	b.n	8005052 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005058:	461a      	mov	r2, r3
 800505a:	2300      	movs	r3, #0
 800505c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	4619      	mov	r1, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	461a      	mov	r2, r3
 800506e:	680b      	ldr	r3, [r1, #0]
 8005070:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800507e:	2100      	movs	r1, #0
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f965 	bl	8005350 <USB_SetDevSpeed>
 8005086:	e008      	b.n	800509a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005088:	2101      	movs	r1, #1
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f960 	bl	8005350 <USB_SetDevSpeed>
 8005090:	e003      	b.n	800509a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005092:	2103      	movs	r1, #3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f95b 	bl	8005350 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800509a:	2110      	movs	r1, #16
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8f3 	bl	8005288 <USB_FlushTxFifo>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f91f 	bl	80052f0 <USB_FlushRxFifo>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e043      	b.n	800516e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fc:	d118      	bne.n	8005130 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e013      	b.n	8005142 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e008      	b.n	8005142 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005166:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3301      	adds	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3b7      	bcc.n	80050e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e043      	b.n	8005204 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800518e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005192:	d118      	bne.n	80051c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e013      	b.n	80051d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e008      	b.n	80051d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3b7      	bcc.n	800517c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800522c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f043 0210 	orr.w	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <USB_DevInit+0x2c4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f043 0208 	orr.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005280:	b004      	add	sp, #16
 8005282:	4770      	bx	lr
 8005284:	803c3800 	.word	0x803c3800

08005288 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a13      	ldr	r2, [pc, #76]	; (80052ec <USB_FlushTxFifo+0x64>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e01b      	b.n	80052e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	daf2      	bge.n	8005296 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	019b      	lsls	r3, r3, #6
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a08      	ldr	r2, [pc, #32]	; (80052ec <USB_FlushTxFifo+0x64>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e006      	b.n	80052e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d0f0      	beq.n	80052c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	00030d40 	.word	0x00030d40

080052f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a11      	ldr	r2, [pc, #68]	; (800534c <USB_FlushRxFifo+0x5c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e018      	b.n	8005340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	daf2      	bge.n	80052fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2210      	movs	r2, #16
 800531e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4a08      	ldr	r2, [pc, #32]	; (800534c <USB_FlushRxFifo+0x5c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e006      	b.n	8005340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b10      	cmp	r3, #16
 800533c:	d0f0      	beq.n	8005320 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	00030d40 	.word	0x00030d40

08005350 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005370:	4313      	orrs	r3, r2
 8005372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800539c:	f023 0303 	bic.w	r3, r3, #3
 80053a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <USB_CoreReset+0x64>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e01b      	b.n	8005436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	daf2      	bge.n	80053ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f043 0201 	orr.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <USB_CoreReset+0x64>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e006      	b.n	8005436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d0f0      	beq.n	8005416 <USB_CoreReset+0x36>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	00030d40 	.word	0x00030d40

08005448 <__NVIC_SetPriority>:
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db0a      	blt.n	8005472 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <__NVIC_SetPriority+0x4c>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	440b      	add	r3, r1
 800546c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005470:	e00a      	b.n	8005488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4908      	ldr	r1, [pc, #32]	; (8005498 <__NVIC_SetPriority+0x50>)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	3b04      	subs	r3, #4
 8005480:	0112      	lsls	r2, r2, #4
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	440b      	add	r3, r1
 8005486:	761a      	strb	r2, [r3, #24]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000e100 	.word	0xe000e100
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <SysTick_Handler+0x1c>)
 80054a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054a4:	f001 fcfe 	bl	8006ea4 <xTaskGetSchedulerState>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054ae:	f002 fae3 	bl	8007a78 <xPortSysTickHandler>
  }
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	e000e010 	.word	0xe000e010

080054bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054c0:	2100      	movs	r1, #0
 80054c2:	f06f 0004 	mvn.w	r0, #4
 80054c6:	f7ff ffbf 	bl	8005448 <__NVIC_SetPriority>
#endif
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d6:	f3ef 8305 	mrs	r3, IPSR
 80054da:	603b      	str	r3, [r7, #0]
  return(result);
 80054dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054e2:	f06f 0305 	mvn.w	r3, #5
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	e00c      	b.n	8005504 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <osKernelInitialize+0x44>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d105      	bne.n	80054fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <osKernelInitialize+0x44>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	e002      	b.n	8005504 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005504:	687b      	ldr	r3, [r7, #4]
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000850 	.word	0x20000850

08005518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551e:	f3ef 8305 	mrs	r3, IPSR
 8005522:	603b      	str	r3, [r7, #0]
  return(result);
 8005524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <osKernelStart+0x1a>
    stat = osErrorISR;
 800552a:	f06f 0305 	mvn.w	r3, #5
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e010      	b.n	8005554 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <osKernelStart+0x48>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d109      	bne.n	800554e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800553a:	f7ff ffbf 	bl	80054bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <osKernelStart+0x48>)
 8005540:	2202      	movs	r2, #2
 8005542:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005544:	f001 f866 	bl	8006614 <vTaskStartScheduler>
      stat = osOK;
 8005548:	2300      	movs	r3, #0
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e002      	b.n	8005554 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295
 8005552:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005554:	687b      	ldr	r3, [r7, #4]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000850 	.word	0x20000850

08005564 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af04      	add	r7, sp, #16
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005574:	f3ef 8305 	mrs	r3, IPSR
 8005578:	617b      	str	r3, [r7, #20]
  return(result);
 800557a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800557c:	2b00      	cmp	r3, #0
 800557e:	d17e      	bne.n	800567e <osThreadNew+0x11a>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d07b      	beq.n	800567e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800558a:	2318      	movs	r3, #24
 800558c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d045      	beq.n	800562a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <osThreadNew+0x48>
        name = attr->name;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <osThreadNew+0x6e>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b38      	cmp	r3, #56	; 0x38
 80055c4:	d805      	bhi.n	80055d2 <osThreadNew+0x6e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <osThreadNew+0x72>
        return (NULL);
 80055d2:	2300      	movs	r3, #0
 80055d4:	e054      	b.n	8005680 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00e      	beq.n	800560c <osThreadNew+0xa8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b5b      	cmp	r3, #91	; 0x5b
 80055f4:	d90a      	bls.n	800560c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <osThreadNew+0xa8>
        mem = 1;
 8005606:	2301      	movs	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e010      	b.n	800562e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10c      	bne.n	800562e <osThreadNew+0xca>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d108      	bne.n	800562e <osThreadNew+0xca>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <osThreadNew+0xca>
          mem = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e001      	b.n	800562e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d110      	bne.n	8005656 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fe0c 	bl	8006268 <xTaskCreateStatic>
 8005650:	4603      	mov	r3, r0
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	e013      	b.n	800567e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	b29a      	uxth	r2, r3
 8005660:	f107 0310 	add.w	r3, r7, #16
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fe57 	bl	8006322 <xTaskCreate>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d001      	beq.n	800567e <osThreadNew+0x11a>
            hTask = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800567e:	693b      	ldr	r3, [r7, #16]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3728      	adds	r7, #40	; 0x28
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005690:	f3ef 8305 	mrs	r3, IPSR
 8005694:	60bb      	str	r3, [r7, #8]
  return(result);
 8005696:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <osDelay+0x1c>
    stat = osErrorISR;
 800569c:	f06f 0305 	mvn.w	r3, #5
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e007      	b.n	80056b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 ff7c 	bl	80065ac <vTaskDelay>
    }
  }

  return (stat);
 80056b4:	68fb      	ldr	r3, [r7, #12]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a07      	ldr	r2, [pc, #28]	; (80056ec <vApplicationGetIdleTaskMemory+0x2c>)
 80056d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <vApplicationGetIdleTaskMemory+0x30>)
 80056d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	601a      	str	r2, [r3, #0]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000854 	.word	0x20000854
 80056f0:	200008b0 	.word	0x200008b0

080056f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <vApplicationGetTimerTaskMemory+0x2c>)
 8005704:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a06      	ldr	r2, [pc, #24]	; (8005724 <vApplicationGetTimerTaskMemory+0x30>)
 800570a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20000ab0 	.word	0x20000ab0
 8005724:	20000b0c 	.word	0x20000b0c

08005728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f103 0208 	add.w	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f04f 32ff 	mov.w	r2, #4294967295
 8005740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f103 0208 	add.w	r2, r3, #8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f103 0208 	add.w	r2, r3, #8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d103      	bne.n	80057ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e00c      	b.n	8005804 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3308      	adds	r3, #8
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e002      	b.n	80057f8 <vListInsert+0x2e>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d2f6      	bcs.n	80057f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	601a      	str	r2, [r3, #0]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6852      	ldr	r2, [r2, #4]
 800585c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d103      	bne.n	8005870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	1e5a      	subs	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058ba:	f002 f84b 	bl	8007954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	3b01      	subs	r3, #1
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	441a      	add	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d114      	bne.n	800593a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01a      	beq.n	800594e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3310      	adds	r3, #16
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f903 	bl	8006b28 <xTaskRemoveFromEventList>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d012      	beq.n	800594e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <xQueueGenericReset+0xcc>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	e009      	b.n	800594e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3310      	adds	r3, #16
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fef2 	bl	8005728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3324      	adds	r3, #36	; 0x24
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff feed 	bl	8005728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f002 f831 	bl	80079b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005952:	2301      	movs	r3, #1
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	; 0x38
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <xQueueGenericCreateStatic+0x52>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <xQueueGenericCreateStatic+0x56>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericCreateStatic+0x58>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	623b      	str	r3, [r7, #32]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <xQueueGenericCreateStatic+0x7e>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericCreateStatic+0x82>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericCreateStatic+0x84>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059fe:	2350      	movs	r3, #80	; 0x50
 8005a00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d00a      	beq.n	8005a1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	61bb      	str	r3, [r7, #24]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f805 	bl	8005a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3730      	adds	r7, #48	; 0x30
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e002      	b.n	8005a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a7e:	2101      	movs	r1, #1
 8005a80:	69b8      	ldr	r0, [r7, #24]
 8005a82:	f7ff ff05 	bl	8005890 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08e      	sub	sp, #56	; 0x38
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSend+0x32>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <xQueueGenericSend+0x40>
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <xQueueGenericSend+0x44>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <xQueueGenericSend+0x46>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x6e>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <xQueueGenericSend+0x72>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericSend+0x74>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b26:	f001 f9bd 	bl	8006ea4 <xTaskGetSchedulerState>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xQueueGenericSend+0x9e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <xQueueGenericSend+0xa2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <xQueueGenericSend+0xa4>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61fb      	str	r3, [r7, #28]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b56:	f001 fefd 	bl	8007954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <xQueueGenericSend+0xd4>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d129      	bne.n	8005bc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b72:	f000 fa0b 	bl	8005f8c <prvCopyDataToQueue>
 8005b76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ffcf 	bl	8006b28 <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b90:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e00a      	b.n	8005bb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bb8:	f001 fefc 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e063      	b.n	8005c88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc6:	f001 fef5 	bl	80079b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e05c      	b.n	8005c88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 f809 	bl	8006bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005be2:	f001 fee7 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be6:	f000 fd7b 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bea:	f001 feb3 	bl	8007954 <vPortEnterCritical>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d103      	bne.n	8005c04 <xQueueGenericSend+0x16c>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d103      	bne.n	8005c1a <xQueueGenericSend+0x182>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c1a:	f001 fecb 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c1e:	1d3a      	adds	r2, r7, #4
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fff8 	bl	8006c1c <xTaskCheckForTimeOut>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d124      	bne.n	8005c7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c34:	f000 faa2 	bl	800617c <prvIsQueueFull>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	3310      	adds	r3, #16
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 ff1e 	bl	8006a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4e:	f000 fa2d 	bl	80060ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f000 fd53 	bl	80066fc <xTaskResumeAll>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af7c 	bne.w	8005b56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xQueueGenericSend+0x1f8>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	e772      	b.n	8005b56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c72:	f000 fa1b 	bl	80060ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c76:	f000 fd41 	bl	80066fc <xTaskResumeAll>
 8005c7a:	e76c      	b.n	8005b56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7e:	f000 fa15 	bl	80060ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c82:	f000 fd3b 	bl	80066fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3738      	adds	r7, #56	; 0x38
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b090      	sub	sp, #64	; 0x40
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x3c>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <xQueueGenericSendFromISR+0x40>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <xQueueGenericSendFromISR+0x42>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d103      	bne.n	8005cfe <xQueueGenericSendFromISR+0x6a>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <xQueueGenericSendFromISR+0x6e>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <xQueueGenericSendFromISR+0x70>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	623b      	str	r3, [r7, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d1e:	f001 fefb 	bl	8007b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d22:	f3ef 8211 	mrs	r2, BASEPRI
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	61fa      	str	r2, [r7, #28]
 8005d38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <xQueueGenericSendFromISR+0xbc>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d12f      	bne.n	8005db0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d66:	f000 f911 	bl	8005f8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d112      	bne.n	8005d9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d016      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fed1 	bl	8006b28 <xTaskRemoveFromEventList>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e007      	b.n	8005daa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	b25a      	sxtb	r2, r3
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005daa:	2301      	movs	r3, #1
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005dae:	e001      	b.n	8005db4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3740      	adds	r7, #64	; 0x40
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xQueueReceive+0x30>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	623b      	str	r3, [r7, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x3e>
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <xQueueReceive+0x42>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueReceive+0x44>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueReceive+0x5e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	61fb      	str	r3, [r7, #28]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2a:	f001 f83b 	bl	8006ea4 <xTaskGetSchedulerState>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <xQueueReceive+0x6e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueReceive+0x72>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueReceive+0x74>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueReceive+0x8e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61bb      	str	r3, [r7, #24]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5a:	f001 fd7b 	bl	8007954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01f      	beq.n	8005eaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6e:	f000 f8f7 	bl	8006060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	3310      	adds	r3, #16
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fe4e 	bl	8006b28 <xTaskRemoveFromEventList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e92:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <xQueueReceive+0x1bc>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ea2:	f001 fd87 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e069      	b.n	8005f7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eb0:	f001 fd80 	bl	80079b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e062      	b.n	8005f7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ebe:	f107 0310 	add.w	r3, r7, #16
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fe94 	bl	8006bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ecc:	f001 fd72 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed0:	f000 fc06 	bl	80066e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed4:	f001 fd3e 	bl	8007954 <vPortEnterCritical>
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d103      	bne.n	8005eee <xQueueReceive+0x122>
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d103      	bne.n	8005f04 <xQueueReceive+0x138>
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f04:	f001 fd56 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f08:	1d3a      	adds	r2, r7, #4
 8005f0a:	f107 0310 	add.w	r3, r7, #16
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fe83 	bl	8006c1c <xTaskCheckForTimeOut>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d123      	bne.n	8005f64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1e:	f000 f917 	bl	8006150 <prvIsQueueEmpty>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fda9 	bl	8006a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f38:	f000 f8b8 	bl	80060ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f3c:	f000 fbde 	bl	80066fc <xTaskResumeAll>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d189      	bne.n	8005e5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <xQueueReceive+0x1bc>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	e780      	b.n	8005e5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5a:	f000 f8a7 	bl	80060ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f5e:	f000 fbcd 	bl	80066fc <xTaskResumeAll>
 8005f62:	e77a      	b.n	8005e5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f000 f8a1 	bl	80060ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6a:	f000 fbc7 	bl	80066fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f70:	f000 f8ee 	bl	8006150 <prvIsQueueEmpty>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f43f af6f 	beq.w	8005e5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3730      	adds	r7, #48	; 0x30
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10d      	bne.n	8005fc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d14d      	bne.n	800604e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 ff92 	bl	8006ee0 <xTaskPriorityDisinherit>
 8005fbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	e043      	b.n	800604e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d119      	bne.n	8006000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6858      	ldr	r0, [r3, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	f001 fff2 	bl	8007fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d32b      	bcc.n	800604e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	e026      	b.n	800604e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68d8      	ldr	r0, [r3, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	461a      	mov	r2, r3
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	f001 ffd8 	bl	8007fc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	425b      	negs	r3, r3
 800601a:	441a      	add	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d207      	bcs.n	800603c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	425b      	negs	r3, r3
 8006036:	441a      	add	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d105      	bne.n	800604e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	3b01      	subs	r3, #1
 800604c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006056:	697b      	ldr	r3, [r7, #20]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d018      	beq.n	80060a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	d303      	bcc.n	8006094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68d9      	ldr	r1, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	461a      	mov	r2, r3
 800609e:	6838      	ldr	r0, [r7, #0]
 80060a0:	f001 ff8e 	bl	8007fc0 <memcpy>
	}
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060b4:	f001 fc4e 	bl	8007954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c0:	e011      	b.n	80060e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d012      	beq.n	80060f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fd2a 	bl	8006b28 <xTaskRemoveFromEventList>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060da:	f000 fe01 	bl	8006ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dce9      	bgt.n	80060c2 <prvUnlockQueue+0x16>
 80060ee:	e000      	b.n	80060f2 <prvUnlockQueue+0x46>
					break;
 80060f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060fa:	f001 fc5b 	bl	80079b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060fe:	f001 fc29 	bl	8007954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800610a:	e011      	b.n	8006130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3310      	adds	r3, #16
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fd05 	bl	8006b28 <xTaskRemoveFromEventList>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006124:	f000 fddc 	bl	8006ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	3b01      	subs	r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dce9      	bgt.n	800610c <prvUnlockQueue+0x60>
 8006138:	e000      	b.n	800613c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800613a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006144:	f001 fc36 	bl	80079b4 <vPortExitCritical>
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006158:	f001 fbfc 	bl	8007954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e001      	b.n	800616e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800616e:	f001 fc21 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006184:	f001 fbe6 	bl	8007954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006190:	429a      	cmp	r2, r3
 8006192:	d102      	bne.n	800619a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e001      	b.n	800619e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619e:	f001 fc09 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 80061a2:	68fb      	ldr	r3, [r7, #12]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e014      	b.n	80061e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061bc:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <vQueueAddToRegistry+0x50>)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061c8:	490c      	ldr	r1, [pc, #48]	; (80061fc <vQueueAddToRegistry+0x50>)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <vQueueAddToRegistry+0x50>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4413      	add	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061de:	e006      	b.n	80061ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b07      	cmp	r3, #7
 80061ea:	d9e7      	bls.n	80061bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000f0c 	.word	0x20000f0c

08006200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006210:	f001 fba0 	bl	8007954 <vPortEnterCritical>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800621a:	b25b      	sxtb	r3, r3
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d103      	bne.n	800622a <vQueueWaitForMessageRestricted+0x2a>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006230:	b25b      	sxtb	r3, r3
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d103      	bne.n	8006240 <vQueueWaitForMessageRestricted+0x40>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006240:	f001 fbb8 	bl	80079b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3324      	adds	r3, #36	; 0x24
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fc3b 	bl	8006ad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7ff ff26 	bl	80060ac <prvUnlockQueue>
	}
 8006260:	bf00      	nop
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08e      	sub	sp, #56	; 0x38
 800626c:	af04      	add	r7, sp, #16
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xTaskCreateStatic+0x2a>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	623b      	str	r3, [r7, #32]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xTaskCreateStatic+0x46>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61fb      	str	r3, [r7, #28]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062ae:	235c      	movs	r3, #92	; 0x5c
 80062b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b5c      	cmp	r3, #92	; 0x5c
 80062b6:	d00a      	beq.n	80062ce <xTaskCreateStatic+0x66>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	61bb      	str	r3, [r7, #24]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01e      	beq.n	8006314 <xTaskCreateStatic+0xac>
 80062d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062ee:	2300      	movs	r3, #0
 80062f0:	9303      	str	r3, [sp, #12]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	9302      	str	r3, [sp, #8]
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f850 	bl	80063ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800630c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800630e:	f000 f8dd 	bl	80064cc <prvAddNewTaskToReadyList>
 8006312:	e001      	b.n	8006318 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006318:	697b      	ldr	r3, [r7, #20]
	}
 800631a:	4618      	mov	r0, r3
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006322:	b580      	push	{r7, lr}
 8006324:	b08c      	sub	sp, #48	; 0x30
 8006326:	af04      	add	r7, sp, #16
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fc2e 	bl	8007b98 <pvPortMalloc>
 800633c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00e      	beq.n	8006362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006344:	205c      	movs	r0, #92	; 0x5c
 8006346:	f001 fc27 	bl	8007b98 <pvPortMalloc>
 800634a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
 8006358:	e005      	b.n	8006366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f001 fce8 	bl	8007d30 <vPortFree>
 8006360:	e001      	b.n	8006366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	2300      	movs	r3, #0
 8006378:	9303      	str	r3, [sp, #12]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	9302      	str	r3, [sp, #8]
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f80e 	bl	80063ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006390:	69f8      	ldr	r0, [r7, #28]
 8006392:	f000 f89b 	bl	80064cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006396:	2301      	movs	r3, #1
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e002      	b.n	80063a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063a2:	69bb      	ldr	r3, [r7, #24]
	}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	461a      	mov	r2, r3
 80063c4:	21a5      	movs	r1, #165	; 0xa5
 80063c6:	f001 fe09 	bl	8007fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063d4:	3b01      	subs	r3, #1
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f023 0307 	bic.w	r3, r3, #7
 80063e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01f      	beq.n	800644a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	e012      	b.n	8006436 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	7819      	ldrb	r1, [r3, #0]
 8006418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	3334      	adds	r3, #52	; 0x34
 8006420:	460a      	mov	r2, r1
 8006422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d006      	beq.n	800643e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d9e9      	bls.n	8006410 <prvInitialiseNewTask+0x64>
 800643c:	e000      	b.n	8006440 <prvInitialiseNewTask+0x94>
			{
				break;
 800643e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006448:	e003      	b.n	8006452 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	2b37      	cmp	r3, #55	; 0x37
 8006456:	d901      	bls.n	800645c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006458:	2337      	movs	r3, #55	; 0x37
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	3304      	adds	r3, #4
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff f978 	bl	8005768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	3318      	adds	r3, #24
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff f973 	bl	8005768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	2200      	movs	r2, #0
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	69b8      	ldr	r0, [r7, #24]
 80064ac:	f001 f928 	bl	8007700 <pxPortInitialiseStack>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c2:	bf00      	nop
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064d4:	f001 fa3e 	bl	8007954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064d8:	4b2d      	ldr	r3, [pc, #180]	; (8006590 <prvAddNewTaskToReadyList+0xc4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	4a2c      	ldr	r2, [pc, #176]	; (8006590 <prvAddNewTaskToReadyList+0xc4>)
 80064e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064e2:	4b2c      	ldr	r3, [pc, #176]	; (8006594 <prvAddNewTaskToReadyList+0xc8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ea:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <prvAddNewTaskToReadyList+0xc8>)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <prvAddNewTaskToReadyList+0xc4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d110      	bne.n	800651a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064f8:	f000 fc16 	bl	8006d28 <prvInitialiseTaskLists>
 80064fc:	e00d      	b.n	800651a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064fe:	4b26      	ldr	r3, [pc, #152]	; (8006598 <prvAddNewTaskToReadyList+0xcc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006506:	4b23      	ldr	r3, [pc, #140]	; (8006594 <prvAddNewTaskToReadyList+0xc8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	429a      	cmp	r2, r3
 8006512:	d802      	bhi.n	800651a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006514:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <prvAddNewTaskToReadyList+0xc8>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800651a:	4b20      	ldr	r3, [pc, #128]	; (800659c <prvAddNewTaskToReadyList+0xd0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3301      	adds	r3, #1
 8006520:	4a1e      	ldr	r2, [pc, #120]	; (800659c <prvAddNewTaskToReadyList+0xd0>)
 8006522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <prvAddNewTaskToReadyList+0xd0>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	4b1b      	ldr	r3, [pc, #108]	; (80065a0 <prvAddNewTaskToReadyList+0xd4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d903      	bls.n	8006540 <prvAddNewTaskToReadyList+0x74>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <prvAddNewTaskToReadyList+0xd4>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <prvAddNewTaskToReadyList+0xd8>)
 800654e:	441a      	add	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7ff f913 	bl	8005782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800655c:	f001 fa2a 	bl	80079b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <prvAddNewTaskToReadyList+0xcc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00e      	beq.n	8006586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvAddNewTaskToReadyList+0xc8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	429a      	cmp	r2, r3
 8006574:	d207      	bcs.n	8006586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvAddNewTaskToReadyList+0xdc>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20001420 	.word	0x20001420
 8006594:	20000f4c 	.word	0x20000f4c
 8006598:	2000142c 	.word	0x2000142c
 800659c:	2000143c 	.word	0x2000143c
 80065a0:	20001428 	.word	0x20001428
 80065a4:	20000f50 	.word	0x20000f50
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <vTaskDelay+0x60>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <vTaskDelay+0x30>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60bb      	str	r3, [r7, #8]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065dc:	f000 f880 	bl	80066e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065e0:	2100      	movs	r1, #0
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fcea 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065e8:	f000 f888 	bl	80066fc <xTaskResumeAll>
 80065ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d107      	bne.n	8006604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <vTaskDelay+0x64>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20001448 	.word	0x20001448
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006622:	463a      	mov	r2, r7
 8006624:	1d39      	adds	r1, r7, #4
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff f848 	bl	80056c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	9202      	str	r2, [sp, #8]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	460a      	mov	r2, r1
 8006642:	4921      	ldr	r1, [pc, #132]	; (80066c8 <vTaskStartScheduler+0xb4>)
 8006644:	4821      	ldr	r0, [pc, #132]	; (80066cc <vTaskStartScheduler+0xb8>)
 8006646:	f7ff fe0f 	bl	8006268 <xTaskCreateStatic>
 800664a:	4603      	mov	r3, r0
 800664c:	4a20      	ldr	r2, [pc, #128]	; (80066d0 <vTaskStartScheduler+0xbc>)
 800664e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006650:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <vTaskStartScheduler+0xbc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e001      	b.n	8006662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d102      	bne.n	800666e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006668:	f000 fcfc 	bl	8007064 <xTimerCreateTimerTask>
 800666c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d116      	bne.n	80066a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	613b      	str	r3, [r7, #16]
}
 8006686:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006688:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <vTaskStartScheduler+0xc0>)
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <vTaskStartScheduler+0xc4>)
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <vTaskStartScheduler+0xc8>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800669c:	f001 f8b8 	bl	8007810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066a0:	e00e      	b.n	80066c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d10a      	bne.n	80066c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60fb      	str	r3, [r7, #12]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vTaskStartScheduler+0xaa>
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	0800c9e4 	.word	0x0800c9e4
 80066cc:	08006cf9 	.word	0x08006cf9
 80066d0:	20001444 	.word	0x20001444
 80066d4:	20001440 	.word	0x20001440
 80066d8:	2000142c 	.word	0x2000142c
 80066dc:	20001424 	.word	0x20001424

080066e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a03      	ldr	r2, [pc, #12]	; (80066f8 <vTaskSuspendAll+0x18>)
 80066ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20001448 	.word	0x20001448

080066fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670a:	4b42      	ldr	r3, [pc, #264]	; (8006814 <xTaskResumeAll+0x118>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xTaskResumeAll+0x2c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	603b      	str	r3, [r7, #0]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006728:	f001 f914 	bl	8007954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800672c:	4b39      	ldr	r3, [pc, #228]	; (8006814 <xTaskResumeAll+0x118>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3b01      	subs	r3, #1
 8006732:	4a38      	ldr	r2, [pc, #224]	; (8006814 <xTaskResumeAll+0x118>)
 8006734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <xTaskResumeAll+0x118>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d162      	bne.n	8006804 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <xTaskResumeAll+0x11c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d05e      	beq.n	8006804 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006746:	e02f      	b.n	80067a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <xTaskResumeAll+0x120>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3318      	adds	r3, #24
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff f871 	bl	800583c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff f86c 	bl	800583c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <xTaskResumeAll+0x124>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d903      	bls.n	8006778 <xTaskResumeAll+0x7c>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <xTaskResumeAll+0x124>)
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <xTaskResumeAll+0x128>)
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fe fff7 	bl	8005782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4b23      	ldr	r3, [pc, #140]	; (8006828 <xTaskResumeAll+0x12c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <xTaskResumeAll+0x130>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a8:	4b1c      	ldr	r3, [pc, #112]	; (800681c <xTaskResumeAll+0x120>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1cb      	bne.n	8006748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b6:	f000 fb55 	bl	8006e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067ba:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <xTaskResumeAll+0x134>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c6:	f000 f847 	bl	8006858 <xTaskIncrementTick>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <xTaskResumeAll+0x130>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f1      	bne.n	80067c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <xTaskResumeAll+0x134>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <xTaskResumeAll+0x130>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <xTaskResumeAll+0x138>)
 80067f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006804:	f001 f8d6 	bl	80079b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006808:	68bb      	ldr	r3, [r7, #8]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20001448 	.word	0x20001448
 8006818:	20001420 	.word	0x20001420
 800681c:	200013e0 	.word	0x200013e0
 8006820:	20001428 	.word	0x20001428
 8006824:	20000f50 	.word	0x20000f50
 8006828:	20000f4c 	.word	0x20000f4c
 800682c:	20001434 	.word	0x20001434
 8006830:	20001430 	.word	0x20001430
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <xTaskGetTickCount+0x1c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006844:	687b      	ldr	r3, [r7, #4]
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20001424 	.word	0x20001424

08006858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006862:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <xTaskIncrementTick+0x148>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 808f 	bne.w	800698a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800686c:	4b4d      	ldr	r3, [pc, #308]	; (80069a4 <xTaskIncrementTick+0x14c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006874:	4a4b      	ldr	r2, [pc, #300]	; (80069a4 <xTaskIncrementTick+0x14c>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d120      	bne.n	80068c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006880:	4b49      	ldr	r3, [pc, #292]	; (80069a8 <xTaskIncrementTick+0x150>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <xTaskIncrementTick+0x46>
 80068a0:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <xTaskIncrementTick+0x150>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	4b41      	ldr	r3, [pc, #260]	; (80069ac <xTaskIncrementTick+0x154>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <xTaskIncrementTick+0x150>)
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <xTaskIncrementTick+0x154>)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xTaskIncrementTick+0x158>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	4a3d      	ldr	r2, [pc, #244]	; (80069b0 <xTaskIncrementTick+0x158>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	f000 fad1 	bl	8006e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068c2:	4b3c      	ldr	r3, [pc, #240]	; (80069b4 <xTaskIncrementTick+0x15c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d349      	bcc.n	8006960 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <xTaskIncrementTick+0x150>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d6:	4b37      	ldr	r3, [pc, #220]	; (80069b4 <xTaskIncrementTick+0x15c>)
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	601a      	str	r2, [r3, #0]
					break;
 80068de:	e03f      	b.n	8006960 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e0:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <xTaskIncrementTick+0x150>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d203      	bcs.n	8006900 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068f8:	4a2e      	ldr	r2, [pc, #184]	; (80069b4 <xTaskIncrementTick+0x15c>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068fe:	e02f      	b.n	8006960 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	3304      	adds	r3, #4
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe ff99 	bl	800583c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3318      	adds	r3, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe ff90 	bl	800583c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <xTaskIncrementTick+0x160>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d903      	bls.n	8006930 <xTaskIncrementTick+0xd8>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a22      	ldr	r2, [pc, #136]	; (80069b8 <xTaskIncrementTick+0x160>)
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <xTaskIncrementTick+0x164>)
 800693e:	441a      	add	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe ff1b 	bl	8005782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <xTaskIncrementTick+0x168>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d3b8      	bcc.n	80068cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800695e:	e7b5      	b.n	80068cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <xTaskIncrementTick+0x168>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006966:	4915      	ldr	r1, [pc, #84]	; (80069bc <xTaskIncrementTick+0x164>)
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d901      	bls.n	800697c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800697c:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <xTaskIncrementTick+0x16c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	e004      	b.n	8006994 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <xTaskIncrementTick+0x170>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3301      	adds	r3, #1
 8006990:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <xTaskIncrementTick+0x170>)
 8006992:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006994:	697b      	ldr	r3, [r7, #20]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20001448 	.word	0x20001448
 80069a4:	20001424 	.word	0x20001424
 80069a8:	200013d8 	.word	0x200013d8
 80069ac:	200013dc 	.word	0x200013dc
 80069b0:	20001438 	.word	0x20001438
 80069b4:	20001440 	.word	0x20001440
 80069b8:	20001428 	.word	0x20001428
 80069bc:	20000f50 	.word	0x20000f50
 80069c0:	20000f4c 	.word	0x20000f4c
 80069c4:	20001434 	.word	0x20001434
 80069c8:	20001430 	.word	0x20001430

080069cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069d2:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <vTaskSwitchContext+0xa8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069da:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <vTaskSwitchContext+0xac>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069e0:	e041      	b.n	8006a66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069e2:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <vTaskSwitchContext+0xac>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e8:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <vTaskSwitchContext+0xb0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e010      	b.n	8006a12 <vTaskSwitchContext+0x46>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <vTaskSwitchContext+0x40>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskSwitchContext+0x3e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	491b      	ldr	r1, [pc, #108]	; (8006a80 <vTaskSwitchContext+0xb4>)
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0e4      	beq.n	80069f0 <vTaskSwitchContext+0x24>
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <vTaskSwitchContext+0xb4>)
 8006a32:	4413      	add	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	605a      	str	r2, [r3, #4]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3308      	adds	r3, #8
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d104      	bne.n	8006a56 <vTaskSwitchContext+0x8a>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vTaskSwitchContext+0xb8>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4a06      	ldr	r2, [pc, #24]	; (8006a7c <vTaskSwitchContext+0xb0>)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20001448 	.word	0x20001448
 8006a78:	20001434 	.word	0x20001434
 8006a7c:	20001428 	.word	0x20001428
 8006a80:	20000f50 	.word	0x20000f50
 8006a84:	20000f4c 	.word	0x20000f4c

08006a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aae:	4b07      	ldr	r3, [pc, #28]	; (8006acc <vTaskPlaceOnEventList+0x44>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fe fe87 	bl	80057ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006abc:	2101      	movs	r1, #1
 8006abe:	6838      	ldr	r0, [r7, #0]
 8006ac0:	f000 fa7c 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000f4c 	.word	0x20000f4c

08006ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	617b      	str	r3, [r7, #20]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3318      	adds	r3, #24
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7fe fe3e 	bl	8005782 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	68b8      	ldr	r0, [r7, #8]
 8006b16:	f000 fa51 	bl	8006fbc <prvAddCurrentTaskToDelayedList>
	}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000f4c 	.word	0x20000f4c

08006b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	3318      	adds	r3, #24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fe6f 	bl	800583c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <xTaskRemoveFromEventList+0xb0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11d      	bne.n	8006ba2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fe66 	bl	800583c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <xTaskRemoveFromEventList+0xb4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d903      	bls.n	8006b84 <xTaskRemoveFromEventList+0x5c>
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <xTaskRemoveFromEventList+0xb4>)
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <xTaskRemoveFromEventList+0xb8>)
 8006b92:	441a      	add	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fe fdf1 	bl	8005782 <vListInsertEnd>
 8006ba0:	e005      	b.n	8006bae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3318      	adds	r3, #24
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	480e      	ldr	r0, [pc, #56]	; (8006be4 <xTaskRemoveFromEventList+0xbc>)
 8006baa:	f7fe fdea 	bl	8005782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <xTaskRemoveFromEventList+0xc0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d905      	bls.n	8006bc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <xTaskRemoveFromEventList+0xc4>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e001      	b.n	8006bcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001448 	.word	0x20001448
 8006bdc:	20001428 	.word	0x20001428
 8006be0:	20000f50 	.word	0x20000f50
 8006be4:	200013e0 	.word	0x200013e0
 8006be8:	20000f4c 	.word	0x20000f4c
 8006bec:	20001434 	.word	0x20001434

08006bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <vTaskInternalSetTimeOutState+0x24>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <vTaskInternalSetTimeOutState+0x28>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	20001438 	.word	0x20001438
 8006c18:	20001424 	.word	0x20001424

08006c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	613b      	str	r3, [r7, #16]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60fb      	str	r3, [r7, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c5e:	f000 fe79 	bl	8007954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c62:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <xTaskCheckForTimeOut+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d102      	bne.n	8006c82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	e023      	b.n	8006cca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <xTaskCheckForTimeOut+0xc0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d007      	beq.n	8006c9e <xTaskCheckForTimeOut+0x82>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e015      	b.n	8006cca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d20b      	bcs.n	8006cc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ff9b 	bl	8006bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	e004      	b.n	8006cca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cca:	f000 fe73 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 8006cce:	69fb      	ldr	r3, [r7, #28]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20001424 	.word	0x20001424
 8006cdc:	20001438 	.word	0x20001438

08006ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <vTaskMissedYield+0x14>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	bf00      	nop
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20001434 	.word	0x20001434

08006cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d00:	f000 f852 	bl	8006da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <prvIdleTask+0x28>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d9f9      	bls.n	8006d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <prvIdleTask+0x2c>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d1c:	e7f0      	b.n	8006d00 <prvIdleTask+0x8>
 8006d1e:	bf00      	nop
 8006d20:	20000f50 	.word	0x20000f50
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d2e:	2300      	movs	r3, #0
 8006d30:	607b      	str	r3, [r7, #4]
 8006d32:	e00c      	b.n	8006d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <prvInitialiseTaskLists+0x60>)
 8006d40:	4413      	add	r3, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fcf0 	bl	8005728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b37      	cmp	r3, #55	; 0x37
 8006d52:	d9ef      	bls.n	8006d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d54:	480d      	ldr	r0, [pc, #52]	; (8006d8c <prvInitialiseTaskLists+0x64>)
 8006d56:	f7fe fce7 	bl	8005728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d5a:	480d      	ldr	r0, [pc, #52]	; (8006d90 <prvInitialiseTaskLists+0x68>)
 8006d5c:	f7fe fce4 	bl	8005728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <prvInitialiseTaskLists+0x6c>)
 8006d62:	f7fe fce1 	bl	8005728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d66:	480c      	ldr	r0, [pc, #48]	; (8006d98 <prvInitialiseTaskLists+0x70>)
 8006d68:	f7fe fcde 	bl	8005728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d6c:	480b      	ldr	r0, [pc, #44]	; (8006d9c <prvInitialiseTaskLists+0x74>)
 8006d6e:	f7fe fcdb 	bl	8005728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d72:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <prvInitialiseTaskLists+0x78>)
 8006d74:	4a05      	ldr	r2, [pc, #20]	; (8006d8c <prvInitialiseTaskLists+0x64>)
 8006d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <prvInitialiseTaskLists+0x7c>)
 8006d7a:	4a05      	ldr	r2, [pc, #20]	; (8006d90 <prvInitialiseTaskLists+0x68>)
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000f50 	.word	0x20000f50
 8006d8c:	200013b0 	.word	0x200013b0
 8006d90:	200013c4 	.word	0x200013c4
 8006d94:	200013e0 	.word	0x200013e0
 8006d98:	200013f4 	.word	0x200013f4
 8006d9c:	2000140c 	.word	0x2000140c
 8006da0:	200013d8 	.word	0x200013d8
 8006da4:	200013dc 	.word	0x200013dc

08006da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dae:	e019      	b.n	8006de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006db0:	f000 fdd0 	bl	8007954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db4:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <prvCheckTasksWaitingTermination+0x50>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe fd3b 	bl	800583c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <prvCheckTasksWaitingTermination+0x54>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	4a0b      	ldr	r2, [pc, #44]	; (8006dfc <prvCheckTasksWaitingTermination+0x54>)
 8006dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvCheckTasksWaitingTermination+0x58>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <prvCheckTasksWaitingTermination+0x58>)
 8006dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dda:	f000 fdeb 	bl	80079b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f810 	bl	8006e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvCheckTasksWaitingTermination+0x58>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e1      	bne.n	8006db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200013f4 	.word	0x200013f4
 8006dfc:	20001420 	.word	0x20001420
 8006e00:	20001408 	.word	0x20001408

08006e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 ff88 	bl	8007d30 <vPortFree>
				vPortFree( pxTCB );
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 ff85 	bl	8007d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e26:	e018      	b.n	8006e5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d103      	bne.n	8006e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 ff7c 	bl	8007d30 <vPortFree>
	}
 8006e38:	e00f      	b.n	8006e5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d00a      	beq.n	8006e5a <prvDeleteTCB+0x56>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60fb      	str	r3, [r7, #12]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <prvDeleteTCB+0x54>
	}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <prvResetNextTaskUnblockTime+0x38>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e7c:	e008      	b.n	8006e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvResetNextTaskUnblockTime+0x38>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4a04      	ldr	r2, [pc, #16]	; (8006ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e8e:	6013      	str	r3, [r2, #0]
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	200013d8 	.word	0x200013d8
 8006ea0:	20001440 	.word	0x20001440

08006ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <xTaskGetSchedulerState+0x34>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	607b      	str	r3, [r7, #4]
 8006eb6:	e008      	b.n	8006eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb8:	4b08      	ldr	r3, [pc, #32]	; (8006edc <xTaskGetSchedulerState+0x38>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	607b      	str	r3, [r7, #4]
 8006ec4:	e001      	b.n	8006eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eca:	687b      	ldr	r3, [r7, #4]
	}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	2000142c 	.word	0x2000142c
 8006edc:	20001448 	.word	0x20001448

08006ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d056      	beq.n	8006fa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ef6:	4b2e      	ldr	r3, [pc, #184]	; (8006fb0 <xTaskPriorityDisinherit+0xd0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d00a      	beq.n	8006f16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60bb      	str	r3, [r7, #8]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	1e5a      	subs	r2, r3, #1
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d02c      	beq.n	8006fa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d128      	bne.n	8006fa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fc70 	bl	800583c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <xTaskPriorityDisinherit+0xd4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d903      	bls.n	8006f84 <xTaskPriorityDisinherit+0xa4>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <xTaskPriorityDisinherit+0xd4>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <xTaskPriorityDisinherit+0xd8>)
 8006f92:	441a      	add	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe fbf1 	bl	8005782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fa4:	697b      	ldr	r3, [r7, #20]
	}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000f4c 	.word	0x20000f4c
 8006fb4:	20001428 	.word	0x20001428
 8006fb8:	20000f50 	.word	0x20000f50

08006fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fc6:	4b21      	ldr	r3, [pc, #132]	; (800704c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fcc:	4b20      	ldr	r3, [pc, #128]	; (8007050 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fc32 	bl	800583c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d10a      	bne.n	8006ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4819      	ldr	r0, [pc, #100]	; (8007054 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ff0:	f7fe fbc7 	bl	8005782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ff4:	e026      	b.n	8007044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <prvAddCurrentTaskToDelayedList+0x94>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	429a      	cmp	r2, r3
 800700c:	d209      	bcs.n	8007022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700e:	4b12      	ldr	r3, [pc, #72]	; (8007058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <prvAddCurrentTaskToDelayedList+0x94>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fbd5 	bl	80057ca <vListInsert>
}
 8007020:	e010      	b.n	8007044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007022:	4b0e      	ldr	r3, [pc, #56]	; (800705c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <prvAddCurrentTaskToDelayedList+0x94>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3304      	adds	r3, #4
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7fe fbcb 	bl	80057ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d202      	bcs.n	8007044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800703e:	4a08      	ldr	r2, [pc, #32]	; (8007060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6013      	str	r3, [r2, #0]
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20001424 	.word	0x20001424
 8007050:	20000f4c 	.word	0x20000f4c
 8007054:	2000140c 	.word	0x2000140c
 8007058:	200013dc 	.word	0x200013dc
 800705c:	200013d8 	.word	0x200013d8
 8007060:	20001440 	.word	0x20001440

08007064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800706e:	f000 fb07 	bl	8007680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <xTimerCreateTimerTask+0x80>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d021      	beq.n	80070be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007082:	1d3a      	adds	r2, r7, #4
 8007084:	f107 0108 	add.w	r1, r7, #8
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fb31 	bl	80056f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	9202      	str	r2, [sp, #8]
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	2302      	movs	r3, #2
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	2300      	movs	r3, #0
 80070a2:	460a      	mov	r2, r1
 80070a4:	4910      	ldr	r1, [pc, #64]	; (80070e8 <xTimerCreateTimerTask+0x84>)
 80070a6:	4811      	ldr	r0, [pc, #68]	; (80070ec <xTimerCreateTimerTask+0x88>)
 80070a8:	f7ff f8de 	bl	8006268 <xTaskCreateStatic>
 80070ac:	4603      	mov	r3, r0
 80070ae:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <xTimerCreateTimerTask+0x8c>)
 80070b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <xTimerCreateTimerTask+0x8c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070da:	697b      	ldr	r3, [r7, #20]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	2000147c 	.word	0x2000147c
 80070e8:	0800c9ec 	.word	0x0800c9ec
 80070ec:	08007229 	.word	0x08007229
 80070f0:	20001480 	.word	0x20001480

080070f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007102:	2300      	movs	r3, #0
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTimerGenericCommand+0x2e>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <xTimerGenericCommand+0x98>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02a      	beq.n	8007180 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b05      	cmp	r3, #5
 800713a:	dc18      	bgt.n	800716e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800713c:	f7ff feb2 	bl	8006ea4 <xTaskGetSchedulerState>
 8007140:	4603      	mov	r3, r0
 8007142:	2b02      	cmp	r3, #2
 8007144:	d109      	bne.n	800715a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <xTimerGenericCommand+0x98>)
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f107 0110 	add.w	r1, r7, #16
 800714e:	2300      	movs	r3, #0
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	f7fe fca1 	bl	8005a98 <xQueueGenericSend>
 8007156:	6278      	str	r0, [r7, #36]	; 0x24
 8007158:	e012      	b.n	8007180 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <xTimerGenericCommand+0x98>)
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f107 0110 	add.w	r1, r7, #16
 8007162:	2300      	movs	r3, #0
 8007164:	2200      	movs	r2, #0
 8007166:	f7fe fc97 	bl	8005a98 <xQueueGenericSend>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24
 800716c:	e008      	b.n	8007180 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <xTimerGenericCommand+0x98>)
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f107 0110 	add.w	r1, r7, #16
 8007176:	2300      	movs	r3, #0
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	f7fe fd8b 	bl	8005c94 <xQueueGenericSendFromISR>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	2000147c 	.word	0x2000147c

08007190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <prvProcessExpiredTimer+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe fb47 	bl	800583c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d022      	beq.n	8007202 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	18d1      	adds	r1, r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	6978      	ldr	r0, [r7, #20]
 80071ca:	f000 f8d1 	bl	8007370 <prvInsertTimerInActiveList>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01f      	beq.n	8007214 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071d4:	2300      	movs	r3, #0
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2300      	movs	r3, #0
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	2100      	movs	r1, #0
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	f7ff ff88 	bl	80070f4 <xTimerGenericCommand>
 80071e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d113      	bne.n	8007214 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	b2da      	uxtb	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	4798      	blx	r3
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20001474 	.word	0x20001474

08007228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f857 	bl	80072e8 <prvGetNextExpireTime>
 800723a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f803 	bl	800724c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007246:	f000 f8d5 	bl	80073f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800724a:	e7f1      	b.n	8007230 <prvTimerTask+0x8>

0800724c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007256:	f7ff fa43 	bl	80066e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f866 	bl	8007330 <prvSampleTimeNow>
 8007264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d130      	bne.n	80072ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d806      	bhi.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800727a:	f7ff fa3f 	bl	80066fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ff85 	bl	8007190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007286:	e024      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <prvProcessTimerOrBlockTask+0x90>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <prvProcessTimerOrBlockTask+0x50>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <prvProcessTimerOrBlockTask+0x52>
 800729c:	2300      	movs	r3, #0
 800729e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <prvProcessTimerOrBlockTask+0x94>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7fe ffa7 	bl	8006200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072b2:	f7ff fa23 	bl	80066fc <xTaskResumeAll>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvProcessTimerOrBlockTask+0x98>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
}
 80072cc:	e001      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ce:	f7ff fa15 	bl	80066fc <xTaskResumeAll>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20001478 	.word	0x20001478
 80072e0:	2000147c 	.word	0x2000147c
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <prvGetNextExpireTime+0x44>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <prvGetNextExpireTime+0x16>
 80072fa:	2201      	movs	r2, #1
 80072fc:	e000      	b.n	8007300 <prvGetNextExpireTime+0x18>
 80072fe:	2200      	movs	r2, #0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e001      	b.n	800731c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800731c:	68fb      	ldr	r3, [r7, #12]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20001474 	.word	0x20001474

08007330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007338:	f7ff fa7e 	bl	8006838 <xTaskGetTickCount>
 800733c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <prvSampleTimeNow+0x3c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d205      	bcs.n	8007354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007348:	f000 f936 	bl	80075b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e002      	b.n	800735a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <prvSampleTimeNow+0x3c>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20001484 	.word	0x20001484

08007370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d812      	bhi.n	80073bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e01b      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <prvInsertTimerInActiveList+0x7c>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fe fa08 	bl	80057ca <vListInsert>
 80073ba:	e012      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d206      	bcs.n	80073d2 <prvInsertTimerInActiveList+0x62>
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d302      	bcc.n	80073d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e007      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <prvInsertTimerInActiveList+0x80>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe f9f4 	bl	80057ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20001478 	.word	0x20001478
 80073f0:	20001474 	.word	0x20001474

080073f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	; 0x38
 80073f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073fa:	e0ca      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da18      	bge.n	8007434 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	3304      	adds	r3, #4
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61fb      	str	r3, [r7, #28]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742a:	6850      	ldr	r0, [r2, #4]
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	6892      	ldr	r2, [r2, #8]
 8007430:	4611      	mov	r1, r2
 8007432:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f2c0 80aa 	blt.w	8007590 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe f9f5 	bl	800583c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007452:	463b      	mov	r3, r7
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff ff6b 	bl	8007330 <prvSampleTimeNow>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b09      	cmp	r3, #9
 8007460:	f200 8097 	bhi.w	8007592 <prvProcessReceivedCommands+0x19e>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <prvProcessReceivedCommands+0x78>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007495 	.word	0x08007495
 8007470:	08007495 	.word	0x08007495
 8007474:	08007495 	.word	0x08007495
 8007478:	08007509 	.word	0x08007509
 800747c:	0800751d 	.word	0x0800751d
 8007480:	08007567 	.word	0x08007567
 8007484:	08007495 	.word	0x08007495
 8007488:	08007495 	.word	0x08007495
 800748c:	08007509 	.word	0x08007509
 8007490:	0800751d 	.word	0x0800751d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	18d1      	adds	r1, r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b4:	f7ff ff5c 	bl	8007370 <prvInsertTimerInActiveList>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d069      	beq.n	8007592 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d05e      	beq.n	8007592 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	f7ff fe05 	bl	80070f4 <xTimerGenericCommand>
 80074ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d14f      	bne.n	8007592 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	61bb      	str	r3, [r7, #24]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750e:	f023 0301 	bic.w	r3, r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800751a:	e03a      	b.n	8007592 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	617b      	str	r3, [r7, #20]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	18d1      	adds	r1, r2, r3
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007560:	f7ff ff06 	bl	8007370 <prvInsertTimerInActiveList>
					break;
 8007564:	e015      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007576:	f000 fbdb 	bl	8007d30 <vPortFree>
 800757a:	e00a      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800758e:	e000      	b.n	8007592 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007592:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <prvProcessReceivedCommands+0x1c0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	1d39      	adds	r1, r7, #4
 8007598:	2200      	movs	r2, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fc16 	bl	8005dcc <xQueueReceive>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f af2a 	bne.w	80073fc <prvProcessReceivedCommands+0x8>
	}
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3730      	adds	r7, #48	; 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	2000147c 	.word	0x2000147c

080075b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075be:	e048      	b.n	8007652 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <prvSwitchTimerLists+0xc0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b2b      	ldr	r3, [pc, #172]	; (8007678 <prvSwitchTimerLists+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe f92f 	bl	800583c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02e      	beq.n	8007652 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d90e      	bls.n	8007624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f7fe f8d4 	bl	80057ca <vListInsert>
 8007622:	e016      	b.n	8007652 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fd60 	bl	80070f4 <xTimerGenericCommand>
 8007634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	603b      	str	r3, [r7, #0]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1b1      	bne.n	80075c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <prvSwitchTimerLists+0xc0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <prvSwitchTimerLists+0xc4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a04      	ldr	r2, [pc, #16]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007668:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800766a:	4a04      	ldr	r2, [pc, #16]	; (800767c <prvSwitchTimerLists+0xc4>)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6013      	str	r3, [r2, #0]
}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20001474 	.word	0x20001474
 800767c:	20001478 	.word	0x20001478

08007680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007686:	f000 f965 	bl	8007954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800768a:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d120      	bne.n	80076d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007692:	4814      	ldr	r0, [pc, #80]	; (80076e4 <prvCheckForValidListAndQueue+0x64>)
 8007694:	f7fe f848 	bl	8005728 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007698:	4813      	ldr	r0, [pc, #76]	; (80076e8 <prvCheckForValidListAndQueue+0x68>)
 800769a:	f7fe f845 	bl	8005728 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <prvCheckForValidListAndQueue+0x6c>)
 80076a0:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <prvCheckForValidListAndQueue+0x64>)
 80076a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a4:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <prvCheckForValidListAndQueue+0x70>)
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <prvCheckForValidListAndQueue+0x68>)
 80076a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <prvCheckForValidListAndQueue+0x74>)
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <prvCheckForValidListAndQueue+0x78>)
 80076b2:	2110      	movs	r1, #16
 80076b4:	200a      	movs	r0, #10
 80076b6:	f7fe f953 	bl	8005960 <xQueueGenericCreateStatic>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	490b      	ldr	r1, [pc, #44]	; (80076fc <prvCheckForValidListAndQueue+0x7c>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fd6c 	bl	80061ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d4:	f000 f96e 	bl	80079b4 <vPortExitCritical>
}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	2000147c 	.word	0x2000147c
 80076e4:	2000144c 	.word	0x2000144c
 80076e8:	20001460 	.word	0x20001460
 80076ec:	20001474 	.word	0x20001474
 80076f0:	20001478 	.word	0x20001478
 80076f4:	20001528 	.word	0x20001528
 80076f8:	20001488 	.word	0x20001488
 80076fc:	0800c9f4 	.word	0x0800c9f4

08007700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b04      	subs	r3, #4
 8007710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007730:	4a0c      	ldr	r2, [pc, #48]	; (8007764 <pxPortInitialiseStack+0x64>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b14      	subs	r3, #20
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3b04      	subs	r3, #4
 8007746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f06f 0202 	mvn.w	r2, #2
 800774e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b20      	subs	r3, #32
 8007754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	08007769 	.word	0x08007769

08007768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <prvTaskExitError+0x54>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d00a      	beq.n	8007792 <prvTaskExitError+0x2a>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60fb      	str	r3, [r7, #12]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <prvTaskExitError+0x28>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
}
 80077a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077a6:	bf00      	nop
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0fc      	beq.n	80077a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	2000000c 	.word	0x2000000c

080077c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <pxCurrentTCBConst2>)
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	f380 8809 	msr	PSP, r0
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8811 	msr	BASEPRI, r0
 80077da:	4770      	bx	lr
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst2>:
 80077e0:	20000f4c 	.word	0x20000f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077e8:	4808      	ldr	r0, [pc, #32]	; (800780c <prvPortStartFirstTask+0x24>)
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f380 8808 	msr	MSP, r0
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8814 	msr	CONTROL, r0
 80077fa:	b662      	cpsie	i
 80077fc:	b661      	cpsie	f
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	df00      	svc	0
 8007808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800780a:	bf00      	nop
 800780c:	e000ed08 	.word	0xe000ed08

08007810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007816:	4b46      	ldr	r3, [pc, #280]	; (8007930 <xPortStartScheduler+0x120>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a46      	ldr	r2, [pc, #280]	; (8007934 <xPortStartScheduler+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10a      	bne.n	8007836 <xPortStartScheduler+0x26>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	613b      	str	r3, [r7, #16]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007836:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <xPortStartScheduler+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <xPortStartScheduler+0x128>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10a      	bne.n	8007856 <xPortStartScheduler+0x46>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60fb      	str	r3, [r7, #12]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007856:	4b39      	ldr	r3, [pc, #228]	; (800793c <xPortStartScheduler+0x12c>)
 8007858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	22ff      	movs	r2, #255	; 0xff
 8007866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007878:	b2da      	uxtb	r2, r3
 800787a:	4b31      	ldr	r3, [pc, #196]	; (8007940 <xPortStartScheduler+0x130>)
 800787c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800787e:	4b31      	ldr	r3, [pc, #196]	; (8007944 <xPortStartScheduler+0x134>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007884:	e009      	b.n	800789a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007886:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <xPortStartScheduler+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <xPortStartScheduler+0x134>)
 800788e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	b2db      	uxtb	r3, r3
 8007898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d0ef      	beq.n	8007886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078a6:	4b27      	ldr	r3, [pc, #156]	; (8007944 <xPortStartScheduler+0x134>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1c3 0307 	rsb	r3, r3, #7
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d00a      	beq.n	80078c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60bb      	str	r3, [r7, #8]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078c8:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <xPortStartScheduler+0x134>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <xPortStartScheduler+0x134>)
 80078d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <xPortStartScheduler+0x134>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078da:	4a1a      	ldr	r2, [pc, #104]	; (8007944 <xPortStartScheduler+0x134>)
 80078dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <xPortStartScheduler+0x138>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <xPortStartScheduler+0x138>)
 80078ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <xPortStartScheduler+0x138>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a14      	ldr	r2, [pc, #80]	; (8007948 <xPortStartScheduler+0x138>)
 80078f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078fe:	f000 f8dd 	bl	8007abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <xPortStartScheduler+0x13c>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007908:	f000 f8fc 	bl	8007b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <xPortStartScheduler+0x140>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a0f      	ldr	r2, [pc, #60]	; (8007950 <xPortStartScheduler+0x140>)
 8007912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007918:	f7ff ff66 	bl	80077e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800791c:	f7ff f856 	bl	80069cc <vTaskSwitchContext>
	prvTaskExitError();
 8007920:	f7ff ff22 	bl	8007768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	e000ed00 	.word	0xe000ed00
 8007934:	410fc271 	.word	0x410fc271
 8007938:	410fc270 	.word	0x410fc270
 800793c:	e000e400 	.word	0xe000e400
 8007940:	20001578 	.word	0x20001578
 8007944:	2000157c 	.word	0x2000157c
 8007948:	e000ed20 	.word	0xe000ed20
 800794c:	2000000c 	.word	0x2000000c
 8007950:	e000ef34 	.word	0xe000ef34

08007954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	607b      	str	r3, [r7, #4]
}
 800796c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <vPortEnterCritical+0x58>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	4a0d      	ldr	r2, [pc, #52]	; (80079ac <vPortEnterCritical+0x58>)
 8007976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007978:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <vPortEnterCritical+0x58>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10f      	bne.n	80079a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortEnterCritical+0x5c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	603b      	str	r3, [r7, #0]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <vPortEnterCritical+0x4a>
	}
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ba:	4b12      	ldr	r3, [pc, #72]	; (8007a04 <vPortExitCritical+0x50>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <vPortExitCritical+0x24>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	607b      	str	r3, [r7, #4]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079d8:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <vPortExitCritical+0x50>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <vPortExitCritical+0x50>)
 80079e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <vPortExitCritical+0x50>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d105      	bne.n	80079f6 <vPortExitCritical+0x42>
 80079ea:	2300      	movs	r3, #0
 80079ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f383 8811 	msr	BASEPRI, r3
}
 80079f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	2000000c 	.word	0x2000000c
	...

08007a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a10:	f3ef 8009 	mrs	r0, PSP
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4b15      	ldr	r3, [pc, #84]	; (8007a70 <pxCurrentTCBConst>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f01e 0f10 	tst.w	lr, #16
 8007a20:	bf08      	it	eq
 8007a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	6010      	str	r0, [r2, #0]
 8007a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a34:	f380 8811 	msr	BASEPRI, r0
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f7fe ffc4 	bl	80069cc <vTaskSwitchContext>
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f380 8811 	msr	BASEPRI, r0
 8007a4c:	bc09      	pop	{r0, r3}
 8007a4e:	6819      	ldr	r1, [r3, #0]
 8007a50:	6808      	ldr	r0, [r1, #0]
 8007a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a56:	f01e 0f10 	tst.w	lr, #16
 8007a5a:	bf08      	it	eq
 8007a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a60:	f380 8809 	msr	PSP, r0
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst>:
 8007a70:	20000f4c 	.word	0x20000f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
}
 8007a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a92:	f7fe fee1 	bl	8006858 <xTaskIncrementTick>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a9c:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <xPortSysTickHandler+0x40>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f383 8811 	msr	BASEPRI, r3
}
 8007aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <vPortSetupTimerInterrupt+0x38>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <vPortSetupTimerInterrupt+0x3c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <vPortSetupTimerInterrupt+0x40>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <vPortSetupTimerInterrupt+0x44>)
 8007ada:	3b01      	subs	r3, #1
 8007adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <vPortSetupTimerInterrupt+0x34>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	e000e010 	.word	0xe000e010
 8007af4:	e000e018 	.word	0xe000e018
 8007af8:	20000000 	.word	0x20000000
 8007afc:	10624dd3 	.word	0x10624dd3
 8007b00:	e000e014 	.word	0xe000e014

08007b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b14 <vPortEnableVFP+0x10>
 8007b08:	6801      	ldr	r1, [r0, #0]
 8007b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b0e:	6001      	str	r1, [r0, #0]
 8007b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b12:	bf00      	nop
 8007b14:	e000ed88 	.word	0xe000ed88

08007b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b1e:	f3ef 8305 	mrs	r3, IPSR
 8007b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d914      	bls.n	8007b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b2a:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <vPortValidateInterruptPriority+0x70>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b34:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <vPortValidateInterruptPriority+0x74>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	7afa      	ldrb	r2, [r7, #11]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d20a      	bcs.n	8007b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	607b      	str	r3, [r7, #4]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <vPortValidateInterruptPriority+0x78>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <vPortValidateInterruptPriority+0x7c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d90a      	bls.n	8007b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	603b      	str	r3, [r7, #0]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <vPortValidateInterruptPriority+0x60>
	}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	e000e3f0 	.word	0xe000e3f0
 8007b8c:	20001578 	.word	0x20001578
 8007b90:	e000ed0c 	.word	0xe000ed0c
 8007b94:	2000157c 	.word	0x2000157c

08007b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ba4:	f7fe fd9c 	bl	80066e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba8:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <pvPortMalloc+0x180>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bb0:	f000 f920 	bl	8007df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bb4:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <pvPortMalloc+0x184>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8093 	bne.w	8007ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01d      	beq.n	8007c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bc8:	2208      	movs	r2, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <pvPortMalloc+0x6c>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	617b      	str	r3, [r7, #20]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06e      	beq.n	8007ce8 <pvPortMalloc+0x150>
 8007c0a:	4b45      	ldr	r3, [pc, #276]	; (8007d20 <pvPortMalloc+0x188>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d869      	bhi.n	8007ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c14:	4b43      	ldr	r3, [pc, #268]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c18:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1e:	e004      	b.n	8007c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d903      	bls.n	8007c3c <pvPortMalloc+0xa4>
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f1      	bne.n	8007c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c3c:	4b36      	ldr	r3, [pc, #216]	; (8007d18 <pvPortMalloc+0x180>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d050      	beq.n	8007ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	2308      	movs	r3, #8
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d91f      	bls.n	8007ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <pvPortMalloc+0xf8>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	613b      	str	r3, [r7, #16]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ca2:	69b8      	ldr	r0, [r7, #24]
 8007ca4:	f000 f908 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <pvPortMalloc+0x188>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <pvPortMalloc+0x190>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d203      	bcs.n	8007cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cc2:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <pvPortMalloc+0x188>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <pvPortMalloc+0x190>)
 8007cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x184>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce8:	f7fe fd08 	bl	80066fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <pvPortMalloc+0x174>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <pvPortMalloc+0x172>
	return pvReturn;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20005188 	.word	0x20005188
 8007d1c:	2000519c 	.word	0x2000519c
 8007d20:	2000518c 	.word	0x2000518c
 8007d24:	20005180 	.word	0x20005180
 8007d28:	20005190 	.word	0x20005190
 8007d2c:	20005194 	.word	0x20005194

08007d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d04d      	beq.n	8007dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d42:	2308      	movs	r3, #8
 8007d44:	425b      	negs	r3, r3
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <vPortFree+0xb8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <vPortFree+0x44>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <vPortFree+0x62>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60bb      	str	r3, [r7, #8]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <vPortFree+0xb8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <vPortFree+0xb8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	401a      	ands	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db8:	f7fe fc92 	bl	80066e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vPortFree+0xbc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <vPortFree+0xbc>)
 8007dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f000 f874 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <vPortFree+0xc0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <vPortFree+0xc0>)
 8007dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dda:	f7fe fc8f 	bl	80066fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	2000519c 	.word	0x2000519c
 8007dec:	2000518c 	.word	0x2000518c
 8007df0:	20005198 	.word	0x20005198

08007df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e00:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <prvHeapInit+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <prvHeapInit+0xac>)
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <prvHeapInit+0xb8>)
 8007e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <prvHeapInit+0xbc>)
 8007e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <prvHeapInit+0xc0>)
 8007e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20001580 	.word	0x20001580
 8007ea4:	20005180 	.word	0x20005180
 8007ea8:	20005188 	.word	0x20005188
 8007eac:	20005190 	.word	0x20005190
 8007eb0:	2000518c 	.word	0x2000518c
 8007eb4:	2000519c 	.word	0x2000519c

08007eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x14>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d8f7      	bhi.n	8007ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d108      	bne.n	8007efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d118      	bne.n	8007f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00d      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e008      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d002      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20005180 	.word	0x20005180
 8007f68:	20005188 	.word	0x20005188

08007f6c <__errno>:
 8007f6c:	4b01      	ldr	r3, [pc, #4]	; (8007f74 <__errno+0x8>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000010 	.word	0x20000010

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	; (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	; (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	; (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	; (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f004 fd02 	bl	800c994 <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	0800cf1c 	.word	0x0800cf1c
 8007fb4:	0800cf1c 	.word	0x0800cf1c
 8007fb8:	0800cf1c 	.word	0x0800cf1c
 8007fbc:	0800cf20 	.word	0x0800cf20

08007fc0 <memcpy>:
 8007fc0:	440a      	add	r2, r1
 8007fc2:	4291      	cmp	r1, r2
 8007fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fc8:	d100      	bne.n	8007fcc <memcpy+0xc>
 8007fca:	4770      	bx	lr
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	d1f9      	bne.n	8007fce <memcpy+0xe>
 8007fda:	bd10      	pop	{r4, pc}

08007fdc <memset>:
 8007fdc:	4402      	add	r2, r0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d100      	bne.n	8007fe6 <memset+0xa>
 8007fe4:	4770      	bx	lr
 8007fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fea:	e7f9      	b.n	8007fe0 <memset+0x4>

08007fec <__cvt>:
 8007fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	ec55 4b10 	vmov	r4, r5, d0
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	bfbb      	ittet	lt
 8007ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008002:	461d      	movlt	r5, r3
 8008004:	2300      	movge	r3, #0
 8008006:	232d      	movlt	r3, #45	; 0x2d
 8008008:	700b      	strb	r3, [r1, #0]
 800800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008010:	4691      	mov	r9, r2
 8008012:	f023 0820 	bic.w	r8, r3, #32
 8008016:	bfbc      	itt	lt
 8008018:	4622      	movlt	r2, r4
 800801a:	4614      	movlt	r4, r2
 800801c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008020:	d005      	beq.n	800802e <__cvt+0x42>
 8008022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008026:	d100      	bne.n	800802a <__cvt+0x3e>
 8008028:	3601      	adds	r6, #1
 800802a:	2102      	movs	r1, #2
 800802c:	e000      	b.n	8008030 <__cvt+0x44>
 800802e:	2103      	movs	r1, #3
 8008030:	ab03      	add	r3, sp, #12
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	ab02      	add	r3, sp, #8
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	ec45 4b10 	vmov	d0, r4, r5
 800803c:	4653      	mov	r3, sl
 800803e:	4632      	mov	r2, r6
 8008040:	f001 fee2 	bl	8009e08 <_dtoa_r>
 8008044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008048:	4607      	mov	r7, r0
 800804a:	d102      	bne.n	8008052 <__cvt+0x66>
 800804c:	f019 0f01 	tst.w	r9, #1
 8008050:	d022      	beq.n	8008098 <__cvt+0xac>
 8008052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008056:	eb07 0906 	add.w	r9, r7, r6
 800805a:	d110      	bne.n	800807e <__cvt+0x92>
 800805c:	783b      	ldrb	r3, [r7, #0]
 800805e:	2b30      	cmp	r3, #48	; 0x30
 8008060:	d10a      	bne.n	8008078 <__cvt+0x8c>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800806e:	b918      	cbnz	r0, 8008078 <__cvt+0x8c>
 8008070:	f1c6 0601 	rsb	r6, r6, #1
 8008074:	f8ca 6000 	str.w	r6, [sl]
 8008078:	f8da 3000 	ldr.w	r3, [sl]
 800807c:	4499      	add	r9, r3
 800807e:	2200      	movs	r2, #0
 8008080:	2300      	movs	r3, #0
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800808a:	b108      	cbz	r0, 8008090 <__cvt+0xa4>
 800808c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008090:	2230      	movs	r2, #48	; 0x30
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	454b      	cmp	r3, r9
 8008096:	d307      	bcc.n	80080a8 <__cvt+0xbc>
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800809c:	1bdb      	subs	r3, r3, r7
 800809e:	4638      	mov	r0, r7
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	b004      	add	sp, #16
 80080a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a8:	1c59      	adds	r1, r3, #1
 80080aa:	9103      	str	r1, [sp, #12]
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e7f0      	b.n	8008092 <__cvt+0xa6>

080080b0 <__exponent>:
 80080b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b2:	4603      	mov	r3, r0
 80080b4:	2900      	cmp	r1, #0
 80080b6:	bfb8      	it	lt
 80080b8:	4249      	neglt	r1, r1
 80080ba:	f803 2b02 	strb.w	r2, [r3], #2
 80080be:	bfb4      	ite	lt
 80080c0:	222d      	movlt	r2, #45	; 0x2d
 80080c2:	222b      	movge	r2, #43	; 0x2b
 80080c4:	2909      	cmp	r1, #9
 80080c6:	7042      	strb	r2, [r0, #1]
 80080c8:	dd2a      	ble.n	8008120 <__exponent+0x70>
 80080ca:	f10d 0407 	add.w	r4, sp, #7
 80080ce:	46a4      	mov	ip, r4
 80080d0:	270a      	movs	r7, #10
 80080d2:	46a6      	mov	lr, r4
 80080d4:	460a      	mov	r2, r1
 80080d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80080da:	fb07 1516 	mls	r5, r7, r6, r1
 80080de:	3530      	adds	r5, #48	; 0x30
 80080e0:	2a63      	cmp	r2, #99	; 0x63
 80080e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80080e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080ea:	4631      	mov	r1, r6
 80080ec:	dcf1      	bgt.n	80080d2 <__exponent+0x22>
 80080ee:	3130      	adds	r1, #48	; 0x30
 80080f0:	f1ae 0502 	sub.w	r5, lr, #2
 80080f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080f8:	1c44      	adds	r4, r0, #1
 80080fa:	4629      	mov	r1, r5
 80080fc:	4561      	cmp	r1, ip
 80080fe:	d30a      	bcc.n	8008116 <__exponent+0x66>
 8008100:	f10d 0209 	add.w	r2, sp, #9
 8008104:	eba2 020e 	sub.w	r2, r2, lr
 8008108:	4565      	cmp	r5, ip
 800810a:	bf88      	it	hi
 800810c:	2200      	movhi	r2, #0
 800810e:	4413      	add	r3, r2
 8008110:	1a18      	subs	r0, r3, r0
 8008112:	b003      	add	sp, #12
 8008114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800811a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800811e:	e7ed      	b.n	80080fc <__exponent+0x4c>
 8008120:	2330      	movs	r3, #48	; 0x30
 8008122:	3130      	adds	r1, #48	; 0x30
 8008124:	7083      	strb	r3, [r0, #2]
 8008126:	70c1      	strb	r1, [r0, #3]
 8008128:	1d03      	adds	r3, r0, #4
 800812a:	e7f1      	b.n	8008110 <__exponent+0x60>

0800812c <_printf_float>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	ed2d 8b02 	vpush	{d8}
 8008134:	b08d      	sub	sp, #52	; 0x34
 8008136:	460c      	mov	r4, r1
 8008138:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800813c:	4616      	mov	r6, r2
 800813e:	461f      	mov	r7, r3
 8008140:	4605      	mov	r5, r0
 8008142:	f003 f975 	bl	800b430 <_localeconv_r>
 8008146:	f8d0 a000 	ldr.w	sl, [r0]
 800814a:	4650      	mov	r0, sl
 800814c:	f7f8 f848 	bl	80001e0 <strlen>
 8008150:	2300      	movs	r3, #0
 8008152:	930a      	str	r3, [sp, #40]	; 0x28
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	f8d8 3000 	ldr.w	r3, [r8]
 800815c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008160:	3307      	adds	r3, #7
 8008162:	f023 0307 	bic.w	r3, r3, #7
 8008166:	f103 0208 	add.w	r2, r3, #8
 800816a:	f8c8 2000 	str.w	r2, [r8]
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008176:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800817a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f8cd 8018 	str.w	r8, [sp, #24]
 8008184:	ee08 0a10 	vmov	s16, r0
 8008188:	4b9f      	ldr	r3, [pc, #636]	; (8008408 <_printf_float+0x2dc>)
 800818a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	f7f8 fcd3 	bl	8000b3c <__aeabi_dcmpun>
 8008196:	bb88      	cbnz	r0, 80081fc <_printf_float+0xd0>
 8008198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800819c:	4b9a      	ldr	r3, [pc, #616]	; (8008408 <_printf_float+0x2dc>)
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	f7f8 fcad 	bl	8000b00 <__aeabi_dcmple>
 80081a6:	bb48      	cbnz	r0, 80081fc <_printf_float+0xd0>
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80081b4:	b110      	cbz	r0, 80081bc <_printf_float+0x90>
 80081b6:	232d      	movs	r3, #45	; 0x2d
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081bc:	4b93      	ldr	r3, [pc, #588]	; (800840c <_printf_float+0x2e0>)
 80081be:	4894      	ldr	r0, [pc, #592]	; (8008410 <_printf_float+0x2e4>)
 80081c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081c4:	bf94      	ite	ls
 80081c6:	4698      	movls	r8, r3
 80081c8:	4680      	movhi	r8, r0
 80081ca:	2303      	movs	r3, #3
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	f023 0204 	bic.w	r2, r3, #4
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	9700      	str	r7, [sp, #0]
 80081dc:	4633      	mov	r3, r6
 80081de:	aa0b      	add	r2, sp, #44	; 0x2c
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f9d8 	bl	8008598 <_printf_common>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f040 8090 	bne.w	800830e <_printf_float+0x1e2>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	b00d      	add	sp, #52	; 0x34
 80081f4:	ecbd 8b02 	vpop	{d8}
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fc9a 	bl	8000b3c <__aeabi_dcmpun>
 8008208:	b140      	cbz	r0, 800821c <_printf_float+0xf0>
 800820a:	464b      	mov	r3, r9
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfbc      	itt	lt
 8008210:	232d      	movlt	r3, #45	; 0x2d
 8008212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008216:	487f      	ldr	r0, [pc, #508]	; (8008414 <_printf_float+0x2e8>)
 8008218:	4b7f      	ldr	r3, [pc, #508]	; (8008418 <_printf_float+0x2ec>)
 800821a:	e7d1      	b.n	80081c0 <_printf_float+0x94>
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008222:	9206      	str	r2, [sp, #24]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	d13f      	bne.n	80082a8 <_printf_float+0x17c>
 8008228:	2306      	movs	r3, #6
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	6861      	ldr	r1, [r4, #4]
 8008230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008234:	2300      	movs	r3, #0
 8008236:	9303      	str	r3, [sp, #12]
 8008238:	ab0a      	add	r3, sp, #40	; 0x28
 800823a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800823e:	ab09      	add	r3, sp, #36	; 0x24
 8008240:	ec49 8b10 	vmov	d0, r8, r9
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	6022      	str	r2, [r4, #0]
 8008248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800824c:	4628      	mov	r0, r5
 800824e:	f7ff fecd 	bl	8007fec <__cvt>
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008256:	2b47      	cmp	r3, #71	; 0x47
 8008258:	4680      	mov	r8, r0
 800825a:	d108      	bne.n	800826e <_printf_float+0x142>
 800825c:	1cc8      	adds	r0, r1, #3
 800825e:	db02      	blt.n	8008266 <_printf_float+0x13a>
 8008260:	6863      	ldr	r3, [r4, #4]
 8008262:	4299      	cmp	r1, r3
 8008264:	dd41      	ble.n	80082ea <_printf_float+0x1be>
 8008266:	f1ab 0b02 	sub.w	fp, fp, #2
 800826a:	fa5f fb8b 	uxtb.w	fp, fp
 800826e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008272:	d820      	bhi.n	80082b6 <_printf_float+0x18a>
 8008274:	3901      	subs	r1, #1
 8008276:	465a      	mov	r2, fp
 8008278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800827c:	9109      	str	r1, [sp, #36]	; 0x24
 800827e:	f7ff ff17 	bl	80080b0 <__exponent>
 8008282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008284:	1813      	adds	r3, r2, r0
 8008286:	2a01      	cmp	r2, #1
 8008288:	4681      	mov	r9, r0
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	dc02      	bgt.n	8008294 <_printf_float+0x168>
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	07d2      	lsls	r2, r2, #31
 8008292:	d501      	bpl.n	8008298 <_printf_float+0x16c>
 8008294:	3301      	adds	r3, #1
 8008296:	6123      	str	r3, [r4, #16]
 8008298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800829c:	2b00      	cmp	r3, #0
 800829e:	d09c      	beq.n	80081da <_printf_float+0xae>
 80082a0:	232d      	movs	r3, #45	; 0x2d
 80082a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a6:	e798      	b.n	80081da <_printf_float+0xae>
 80082a8:	9a06      	ldr	r2, [sp, #24]
 80082aa:	2a47      	cmp	r2, #71	; 0x47
 80082ac:	d1be      	bne.n	800822c <_printf_float+0x100>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1bc      	bne.n	800822c <_printf_float+0x100>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e7b9      	b.n	800822a <_printf_float+0xfe>
 80082b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082ba:	d118      	bne.n	80082ee <_printf_float+0x1c2>
 80082bc:	2900      	cmp	r1, #0
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	dd0b      	ble.n	80082da <_printf_float+0x1ae>
 80082c2:	6121      	str	r1, [r4, #16]
 80082c4:	b913      	cbnz	r3, 80082cc <_printf_float+0x1a0>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	07d0      	lsls	r0, r2, #31
 80082ca:	d502      	bpl.n	80082d2 <_printf_float+0x1a6>
 80082cc:	3301      	adds	r3, #1
 80082ce:	440b      	add	r3, r1
 80082d0:	6123      	str	r3, [r4, #16]
 80082d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	e7de      	b.n	8008298 <_printf_float+0x16c>
 80082da:	b913      	cbnz	r3, 80082e2 <_printf_float+0x1b6>
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	07d2      	lsls	r2, r2, #31
 80082e0:	d501      	bpl.n	80082e6 <_printf_float+0x1ba>
 80082e2:	3302      	adds	r3, #2
 80082e4:	e7f4      	b.n	80082d0 <_printf_float+0x1a4>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e7f2      	b.n	80082d0 <_printf_float+0x1a4>
 80082ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	4299      	cmp	r1, r3
 80082f2:	db05      	blt.n	8008300 <_printf_float+0x1d4>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	6121      	str	r1, [r4, #16]
 80082f8:	07d8      	lsls	r0, r3, #31
 80082fa:	d5ea      	bpl.n	80082d2 <_printf_float+0x1a6>
 80082fc:	1c4b      	adds	r3, r1, #1
 80082fe:	e7e7      	b.n	80082d0 <_printf_float+0x1a4>
 8008300:	2900      	cmp	r1, #0
 8008302:	bfd4      	ite	le
 8008304:	f1c1 0202 	rsble	r2, r1, #2
 8008308:	2201      	movgt	r2, #1
 800830a:	4413      	add	r3, r2
 800830c:	e7e0      	b.n	80082d0 <_printf_float+0x1a4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	055a      	lsls	r2, r3, #21
 8008312:	d407      	bmi.n	8008324 <_printf_float+0x1f8>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	4642      	mov	r2, r8
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	d12c      	bne.n	800837c <_printf_float+0x250>
 8008322:	e764      	b.n	80081ee <_printf_float+0xc2>
 8008324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008328:	f240 80e0 	bls.w	80084ec <_printf_float+0x3c0>
 800832c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	f7f8 fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008338:	2800      	cmp	r0, #0
 800833a:	d034      	beq.n	80083a6 <_printf_float+0x27a>
 800833c:	4a37      	ldr	r2, [pc, #220]	; (800841c <_printf_float+0x2f0>)
 800833e:	2301      	movs	r3, #1
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	f43f af51 	beq.w	80081ee <_printf_float+0xc2>
 800834c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008350:	429a      	cmp	r2, r3
 8008352:	db02      	blt.n	800835a <_printf_float+0x22e>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	07d8      	lsls	r0, r3, #31
 8008358:	d510      	bpl.n	800837c <_printf_float+0x250>
 800835a:	ee18 3a10 	vmov	r3, s16
 800835e:	4652      	mov	r2, sl
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af41 	beq.w	80081ee <_printf_float+0xc2>
 800836c:	f04f 0800 	mov.w	r8, #0
 8008370:	f104 091a 	add.w	r9, r4, #26
 8008374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008376:	3b01      	subs	r3, #1
 8008378:	4543      	cmp	r3, r8
 800837a:	dc09      	bgt.n	8008390 <_printf_float+0x264>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	079b      	lsls	r3, r3, #30
 8008380:	f100 8105 	bmi.w	800858e <_printf_float+0x462>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e730      	b.n	80081f2 <_printf_float+0xc6>
 8008390:	2301      	movs	r3, #1
 8008392:	464a      	mov	r2, r9
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af27 	beq.w	80081ee <_printf_float+0xc2>
 80083a0:	f108 0801 	add.w	r8, r8, #1
 80083a4:	e7e6      	b.n	8008374 <_printf_float+0x248>
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc39      	bgt.n	8008420 <_printf_float+0x2f4>
 80083ac:	4a1b      	ldr	r2, [pc, #108]	; (800841c <_printf_float+0x2f0>)
 80083ae:	2301      	movs	r3, #1
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af19 	beq.w	80081ee <_printf_float+0xc2>
 80083bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c0:	4313      	orrs	r3, r2
 80083c2:	d102      	bne.n	80083ca <_printf_float+0x29e>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07d9      	lsls	r1, r3, #31
 80083c8:	d5d8      	bpl.n	800837c <_printf_float+0x250>
 80083ca:	ee18 3a10 	vmov	r3, s16
 80083ce:	4652      	mov	r2, sl
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af09 	beq.w	80081ee <_printf_float+0xc2>
 80083dc:	f04f 0900 	mov.w	r9, #0
 80083e0:	f104 0a1a 	add.w	sl, r4, #26
 80083e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e6:	425b      	negs	r3, r3
 80083e8:	454b      	cmp	r3, r9
 80083ea:	dc01      	bgt.n	80083f0 <_printf_float+0x2c4>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ee:	e792      	b.n	8008316 <_printf_float+0x1ea>
 80083f0:	2301      	movs	r3, #1
 80083f2:	4652      	mov	r2, sl
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f aef7 	beq.w	80081ee <_printf_float+0xc2>
 8008400:	f109 0901 	add.w	r9, r9, #1
 8008404:	e7ee      	b.n	80083e4 <_printf_float+0x2b8>
 8008406:	bf00      	nop
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	0800ca68 	.word	0x0800ca68
 8008410:	0800ca6c 	.word	0x0800ca6c
 8008414:	0800ca74 	.word	0x0800ca74
 8008418:	0800ca70 	.word	0x0800ca70
 800841c:	0800ca78 	.word	0x0800ca78
 8008420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008424:	429a      	cmp	r2, r3
 8008426:	bfa8      	it	ge
 8008428:	461a      	movge	r2, r3
 800842a:	2a00      	cmp	r2, #0
 800842c:	4691      	mov	r9, r2
 800842e:	dc37      	bgt.n	80084a0 <_printf_float+0x374>
 8008430:	f04f 0b00 	mov.w	fp, #0
 8008434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008438:	f104 021a 	add.w	r2, r4, #26
 800843c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	eba3 0309 	sub.w	r3, r3, r9
 8008444:	455b      	cmp	r3, fp
 8008446:	dc33      	bgt.n	80084b0 <_printf_float+0x384>
 8008448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800844c:	429a      	cmp	r2, r3
 800844e:	db3b      	blt.n	80084c8 <_printf_float+0x39c>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d438      	bmi.n	80084c8 <_printf_float+0x39c>
 8008456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008458:	9a05      	ldr	r2, [sp, #20]
 800845a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800845c:	1a9a      	subs	r2, r3, r2
 800845e:	eba3 0901 	sub.w	r9, r3, r1
 8008462:	4591      	cmp	r9, r2
 8008464:	bfa8      	it	ge
 8008466:	4691      	movge	r9, r2
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	dc35      	bgt.n	80084da <_printf_float+0x3ae>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008476:	f104 0a1a 	add.w	sl, r4, #26
 800847a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	eba3 0309 	sub.w	r3, r3, r9
 8008484:	4543      	cmp	r3, r8
 8008486:	f77f af79 	ble.w	800837c <_printf_float+0x250>
 800848a:	2301      	movs	r3, #1
 800848c:	4652      	mov	r2, sl
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	f43f aeaa 	beq.w	80081ee <_printf_float+0xc2>
 800849a:	f108 0801 	add.w	r8, r8, #1
 800849e:	e7ec      	b.n	800847a <_printf_float+0x34e>
 80084a0:	4613      	mov	r3, r2
 80084a2:	4631      	mov	r1, r6
 80084a4:	4642      	mov	r2, r8
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	d1c0      	bne.n	8008430 <_printf_float+0x304>
 80084ae:	e69e      	b.n	80081ee <_printf_float+0xc2>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f ae97 	beq.w	80081ee <_printf_float+0xc2>
 80084c0:	9a05      	ldr	r2, [sp, #20]
 80084c2:	f10b 0b01 	add.w	fp, fp, #1
 80084c6:	e7b9      	b.n	800843c <_printf_float+0x310>
 80084c8:	ee18 3a10 	vmov	r3, s16
 80084cc:	4652      	mov	r2, sl
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1be      	bne.n	8008456 <_printf_float+0x32a>
 80084d8:	e689      	b.n	80081ee <_printf_float+0xc2>
 80084da:	9a05      	ldr	r2, [sp, #20]
 80084dc:	464b      	mov	r3, r9
 80084de:	4442      	add	r2, r8
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	d1c1      	bne.n	800846e <_printf_float+0x342>
 80084ea:	e680      	b.n	80081ee <_printf_float+0xc2>
 80084ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ee:	2a01      	cmp	r2, #1
 80084f0:	dc01      	bgt.n	80084f6 <_printf_float+0x3ca>
 80084f2:	07db      	lsls	r3, r3, #31
 80084f4:	d538      	bpl.n	8008568 <_printf_float+0x43c>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4642      	mov	r2, r8
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae74 	beq.w	80081ee <_printf_float+0xc2>
 8008506:	ee18 3a10 	vmov	r3, s16
 800850a:	4652      	mov	r2, sl
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f ae6b 	beq.w	80081ee <_printf_float+0xc2>
 8008518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	f7f8 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8008524:	b9d8      	cbnz	r0, 800855e <_printf_float+0x432>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	f108 0201 	add.w	r2, r8, #1
 800852c:	3b01      	subs	r3, #1
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	d10e      	bne.n	8008556 <_printf_float+0x42a>
 8008538:	e659      	b.n	80081ee <_printf_float+0xc2>
 800853a:	2301      	movs	r3, #1
 800853c:	4652      	mov	r2, sl
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	f43f ae52 	beq.w	80081ee <_printf_float+0xc2>
 800854a:	f108 0801 	add.w	r8, r8, #1
 800854e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008550:	3b01      	subs	r3, #1
 8008552:	4543      	cmp	r3, r8
 8008554:	dcf1      	bgt.n	800853a <_printf_float+0x40e>
 8008556:	464b      	mov	r3, r9
 8008558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800855c:	e6dc      	b.n	8008318 <_printf_float+0x1ec>
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	f104 0a1a 	add.w	sl, r4, #26
 8008566:	e7f2      	b.n	800854e <_printf_float+0x422>
 8008568:	2301      	movs	r3, #1
 800856a:	4642      	mov	r2, r8
 800856c:	e7df      	b.n	800852e <_printf_float+0x402>
 800856e:	2301      	movs	r3, #1
 8008570:	464a      	mov	r2, r9
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	f43f ae38 	beq.w	80081ee <_printf_float+0xc2>
 800857e:	f108 0801 	add.w	r8, r8, #1
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008586:	1a5b      	subs	r3, r3, r1
 8008588:	4543      	cmp	r3, r8
 800858a:	dcf0      	bgt.n	800856e <_printf_float+0x442>
 800858c:	e6fa      	b.n	8008384 <_printf_float+0x258>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	f104 0919 	add.w	r9, r4, #25
 8008596:	e7f4      	b.n	8008582 <_printf_float+0x456>

08008598 <_printf_common>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	4616      	mov	r6, r2
 800859e:	4699      	mov	r9, r3
 80085a0:	688a      	ldr	r2, [r1, #8]
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	bfb8      	it	lt
 80085ac:	4613      	movlt	r3, r2
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b4:	4607      	mov	r7, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b10a      	cbz	r2, 80085be <_printf_common+0x26>
 80085ba:	3301      	adds	r3, #1
 80085bc:	6033      	str	r3, [r6, #0]
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	0699      	lsls	r1, r3, #26
 80085c2:	bf42      	ittt	mi
 80085c4:	6833      	ldrmi	r3, [r6, #0]
 80085c6:	3302      	addmi	r3, #2
 80085c8:	6033      	strmi	r3, [r6, #0]
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	f015 0506 	ands.w	r5, r5, #6
 80085d0:	d106      	bne.n	80085e0 <_printf_common+0x48>
 80085d2:	f104 0a19 	add.w	sl, r4, #25
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	6832      	ldr	r2, [r6, #0]
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dc26      	bgt.n	800862e <_printf_common+0x96>
 80085e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e4:	1e13      	subs	r3, r2, #0
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	bf18      	it	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	0692      	lsls	r2, r2, #26
 80085ee:	d42b      	bmi.n	8008648 <_printf_common+0xb0>
 80085f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f4:	4649      	mov	r1, r9
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d01e      	beq.n	800863c <_printf_common+0xa4>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	68e5      	ldr	r5, [r4, #12]
 8008602:	6832      	ldr	r2, [r6, #0]
 8008604:	f003 0306 	and.w	r3, r3, #6
 8008608:	2b04      	cmp	r3, #4
 800860a:	bf08      	it	eq
 800860c:	1aad      	subeq	r5, r5, r2
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	6922      	ldr	r2, [r4, #16]
 8008612:	bf0c      	ite	eq
 8008614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008618:	2500      	movne	r5, #0
 800861a:	4293      	cmp	r3, r2
 800861c:	bfc4      	itt	gt
 800861e:	1a9b      	subgt	r3, r3, r2
 8008620:	18ed      	addgt	r5, r5, r3
 8008622:	2600      	movs	r6, #0
 8008624:	341a      	adds	r4, #26
 8008626:	42b5      	cmp	r5, r6
 8008628:	d11a      	bne.n	8008660 <_printf_common+0xc8>
 800862a:	2000      	movs	r0, #0
 800862c:	e008      	b.n	8008640 <_printf_common+0xa8>
 800862e:	2301      	movs	r3, #1
 8008630:	4652      	mov	r2, sl
 8008632:	4649      	mov	r1, r9
 8008634:	4638      	mov	r0, r7
 8008636:	47c0      	blx	r8
 8008638:	3001      	adds	r0, #1
 800863a:	d103      	bne.n	8008644 <_printf_common+0xac>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	3501      	adds	r5, #1
 8008646:	e7c6      	b.n	80085d6 <_printf_common+0x3e>
 8008648:	18e1      	adds	r1, r4, r3
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	2030      	movs	r0, #48	; 0x30
 800864e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008652:	4422      	add	r2, r4
 8008654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800865c:	3302      	adds	r3, #2
 800865e:	e7c7      	b.n	80085f0 <_printf_common+0x58>
 8008660:	2301      	movs	r3, #1
 8008662:	4622      	mov	r2, r4
 8008664:	4649      	mov	r1, r9
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	3001      	adds	r0, #1
 800866c:	d0e6      	beq.n	800863c <_printf_common+0xa4>
 800866e:	3601      	adds	r6, #1
 8008670:	e7d9      	b.n	8008626 <_printf_common+0x8e>
	...

08008674 <_printf_i>:
 8008674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	7e0f      	ldrb	r7, [r1, #24]
 800867a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800867c:	2f78      	cmp	r7, #120	; 0x78
 800867e:	4691      	mov	r9, r2
 8008680:	4680      	mov	r8, r0
 8008682:	460c      	mov	r4, r1
 8008684:	469a      	mov	sl, r3
 8008686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800868a:	d807      	bhi.n	800869c <_printf_i+0x28>
 800868c:	2f62      	cmp	r7, #98	; 0x62
 800868e:	d80a      	bhi.n	80086a6 <_printf_i+0x32>
 8008690:	2f00      	cmp	r7, #0
 8008692:	f000 80d8 	beq.w	8008846 <_printf_i+0x1d2>
 8008696:	2f58      	cmp	r7, #88	; 0x58
 8008698:	f000 80a3 	beq.w	80087e2 <_printf_i+0x16e>
 800869c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a4:	e03a      	b.n	800871c <_printf_i+0xa8>
 80086a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086aa:	2b15      	cmp	r3, #21
 80086ac:	d8f6      	bhi.n	800869c <_printf_i+0x28>
 80086ae:	a101      	add	r1, pc, #4	; (adr r1, 80086b4 <_printf_i+0x40>)
 80086b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	08008721 	.word	0x08008721
 80086bc:	0800869d 	.word	0x0800869d
 80086c0:	0800869d 	.word	0x0800869d
 80086c4:	0800869d 	.word	0x0800869d
 80086c8:	0800869d 	.word	0x0800869d
 80086cc:	08008721 	.word	0x08008721
 80086d0:	0800869d 	.word	0x0800869d
 80086d4:	0800869d 	.word	0x0800869d
 80086d8:	0800869d 	.word	0x0800869d
 80086dc:	0800869d 	.word	0x0800869d
 80086e0:	0800882d 	.word	0x0800882d
 80086e4:	08008751 	.word	0x08008751
 80086e8:	0800880f 	.word	0x0800880f
 80086ec:	0800869d 	.word	0x0800869d
 80086f0:	0800869d 	.word	0x0800869d
 80086f4:	0800884f 	.word	0x0800884f
 80086f8:	0800869d 	.word	0x0800869d
 80086fc:	08008751 	.word	0x08008751
 8008700:	0800869d 	.word	0x0800869d
 8008704:	0800869d 	.word	0x0800869d
 8008708:	08008817 	.word	0x08008817
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	602a      	str	r2, [r5, #0]
 8008714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800871c:	2301      	movs	r3, #1
 800871e:	e0a3      	b.n	8008868 <_printf_i+0x1f4>
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	6829      	ldr	r1, [r5, #0]
 8008724:	0606      	lsls	r6, r0, #24
 8008726:	f101 0304 	add.w	r3, r1, #4
 800872a:	d50a      	bpl.n	8008742 <_printf_i+0xce>
 800872c:	680e      	ldr	r6, [r1, #0]
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	2e00      	cmp	r6, #0
 8008732:	da03      	bge.n	800873c <_printf_i+0xc8>
 8008734:	232d      	movs	r3, #45	; 0x2d
 8008736:	4276      	negs	r6, r6
 8008738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873c:	485e      	ldr	r0, [pc, #376]	; (80088b8 <_printf_i+0x244>)
 800873e:	230a      	movs	r3, #10
 8008740:	e019      	b.n	8008776 <_printf_i+0x102>
 8008742:	680e      	ldr	r6, [r1, #0]
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800874a:	bf18      	it	ne
 800874c:	b236      	sxthne	r6, r6
 800874e:	e7ef      	b.n	8008730 <_printf_i+0xbc>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6029      	str	r1, [r5, #0]
 8008758:	0601      	lsls	r1, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xec>
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	e002      	b.n	8008766 <_printf_i+0xf2>
 8008760:	0646      	lsls	r6, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xe8>
 8008764:	881e      	ldrh	r6, [r3, #0]
 8008766:	4854      	ldr	r0, [pc, #336]	; (80088b8 <_printf_i+0x244>)
 8008768:	2f6f      	cmp	r7, #111	; 0x6f
 800876a:	bf0c      	ite	eq
 800876c:	2308      	moveq	r3, #8
 800876e:	230a      	movne	r3, #10
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008776:	6865      	ldr	r5, [r4, #4]
 8008778:	60a5      	str	r5, [r4, #8]
 800877a:	2d00      	cmp	r5, #0
 800877c:	bfa2      	ittt	ge
 800877e:	6821      	ldrge	r1, [r4, #0]
 8008780:	f021 0104 	bicge.w	r1, r1, #4
 8008784:	6021      	strge	r1, [r4, #0]
 8008786:	b90e      	cbnz	r6, 800878c <_printf_i+0x118>
 8008788:	2d00      	cmp	r5, #0
 800878a:	d04d      	beq.n	8008828 <_printf_i+0x1b4>
 800878c:	4615      	mov	r5, r2
 800878e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008792:	fb03 6711 	mls	r7, r3, r1, r6
 8008796:	5dc7      	ldrb	r7, [r0, r7]
 8008798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800879c:	4637      	mov	r7, r6
 800879e:	42bb      	cmp	r3, r7
 80087a0:	460e      	mov	r6, r1
 80087a2:	d9f4      	bls.n	800878e <_printf_i+0x11a>
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d10b      	bne.n	80087c0 <_printf_i+0x14c>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	07de      	lsls	r6, r3, #31
 80087ac:	d508      	bpl.n	80087c0 <_printf_i+0x14c>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4299      	cmp	r1, r3
 80087b4:	bfde      	ittt	le
 80087b6:	2330      	movle	r3, #48	; 0x30
 80087b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087c0:	1b52      	subs	r2, r2, r5
 80087c2:	6122      	str	r2, [r4, #16]
 80087c4:	f8cd a000 	str.w	sl, [sp]
 80087c8:	464b      	mov	r3, r9
 80087ca:	aa03      	add	r2, sp, #12
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fee2 	bl	8008598 <_printf_common>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d14c      	bne.n	8008872 <_printf_i+0x1fe>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	b004      	add	sp, #16
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	4835      	ldr	r0, [pc, #212]	; (80088b8 <_printf_i+0x244>)
 80087e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087e8:	6829      	ldr	r1, [r5, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80087f0:	6029      	str	r1, [r5, #0]
 80087f2:	061d      	lsls	r5, r3, #24
 80087f4:	d514      	bpl.n	8008820 <_printf_i+0x1ac>
 80087f6:	07df      	lsls	r7, r3, #31
 80087f8:	bf44      	itt	mi
 80087fa:	f043 0320 	orrmi.w	r3, r3, #32
 80087fe:	6023      	strmi	r3, [r4, #0]
 8008800:	b91e      	cbnz	r6, 800880a <_printf_i+0x196>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f023 0320 	bic.w	r3, r3, #32
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	2310      	movs	r3, #16
 800880c:	e7b0      	b.n	8008770 <_printf_i+0xfc>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f043 0320 	orr.w	r3, r3, #32
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	2378      	movs	r3, #120	; 0x78
 8008818:	4828      	ldr	r0, [pc, #160]	; (80088bc <_printf_i+0x248>)
 800881a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800881e:	e7e3      	b.n	80087e8 <_printf_i+0x174>
 8008820:	0659      	lsls	r1, r3, #25
 8008822:	bf48      	it	mi
 8008824:	b2b6      	uxthmi	r6, r6
 8008826:	e7e6      	b.n	80087f6 <_printf_i+0x182>
 8008828:	4615      	mov	r5, r2
 800882a:	e7bb      	b.n	80087a4 <_printf_i+0x130>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	6826      	ldr	r6, [r4, #0]
 8008830:	6961      	ldr	r1, [r4, #20]
 8008832:	1d18      	adds	r0, r3, #4
 8008834:	6028      	str	r0, [r5, #0]
 8008836:	0635      	lsls	r5, r6, #24
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	d501      	bpl.n	8008840 <_printf_i+0x1cc>
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	e002      	b.n	8008846 <_printf_i+0x1d2>
 8008840:	0670      	lsls	r0, r6, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0x1c8>
 8008844:	8019      	strh	r1, [r3, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	4615      	mov	r5, r2
 800884c:	e7ba      	b.n	80087c4 <_printf_i+0x150>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	602a      	str	r2, [r5, #0]
 8008854:	681d      	ldr	r5, [r3, #0]
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	2100      	movs	r1, #0
 800885a:	4628      	mov	r0, r5
 800885c:	f7f7 fcc8 	bl	80001f0 <memchr>
 8008860:	b108      	cbz	r0, 8008866 <_printf_i+0x1f2>
 8008862:	1b40      	subs	r0, r0, r5
 8008864:	6060      	str	r0, [r4, #4]
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	2300      	movs	r3, #0
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008870:	e7a8      	b.n	80087c4 <_printf_i+0x150>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	462a      	mov	r2, r5
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	47d0      	blx	sl
 800887c:	3001      	adds	r0, #1
 800887e:	d0ab      	beq.n	80087d8 <_printf_i+0x164>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	079b      	lsls	r3, r3, #30
 8008884:	d413      	bmi.n	80088ae <_printf_i+0x23a>
 8008886:	68e0      	ldr	r0, [r4, #12]
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	4298      	cmp	r0, r3
 800888c:	bfb8      	it	lt
 800888e:	4618      	movlt	r0, r3
 8008890:	e7a4      	b.n	80087dc <_printf_i+0x168>
 8008892:	2301      	movs	r3, #1
 8008894:	4632      	mov	r2, r6
 8008896:	4649      	mov	r1, r9
 8008898:	4640      	mov	r0, r8
 800889a:	47d0      	blx	sl
 800889c:	3001      	adds	r0, #1
 800889e:	d09b      	beq.n	80087d8 <_printf_i+0x164>
 80088a0:	3501      	adds	r5, #1
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	9903      	ldr	r1, [sp, #12]
 80088a6:	1a5b      	subs	r3, r3, r1
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dcf2      	bgt.n	8008892 <_printf_i+0x21e>
 80088ac:	e7eb      	b.n	8008886 <_printf_i+0x212>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f104 0619 	add.w	r6, r4, #25
 80088b4:	e7f5      	b.n	80088a2 <_printf_i+0x22e>
 80088b6:	bf00      	nop
 80088b8:	0800ca7a 	.word	0x0800ca7a
 80088bc:	0800ca8b 	.word	0x0800ca8b

080088c0 <_scanf_float>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	b087      	sub	sp, #28
 80088c6:	4617      	mov	r7, r2
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	688b      	ldr	r3, [r1, #8]
 80088cc:	1e5a      	subs	r2, r3, #1
 80088ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088d2:	bf83      	ittte	hi
 80088d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088d8:	195b      	addhi	r3, r3, r5
 80088da:	9302      	strhi	r3, [sp, #8]
 80088dc:	2300      	movls	r3, #0
 80088de:	bf86      	itte	hi
 80088e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088e4:	608b      	strhi	r3, [r1, #8]
 80088e6:	9302      	strls	r3, [sp, #8]
 80088e8:	680b      	ldr	r3, [r1, #0]
 80088ea:	468b      	mov	fp, r1
 80088ec:	2500      	movs	r5, #0
 80088ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80088f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088fa:	4680      	mov	r8, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	465e      	mov	r6, fp
 8008900:	46aa      	mov	sl, r5
 8008902:	46a9      	mov	r9, r5
 8008904:	9501      	str	r5, [sp, #4]
 8008906:	68a2      	ldr	r2, [r4, #8]
 8008908:	b152      	cbz	r2, 8008920 <_scanf_float+0x60>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b4e      	cmp	r3, #78	; 0x4e
 8008910:	d864      	bhi.n	80089dc <_scanf_float+0x11c>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d83c      	bhi.n	8008990 <_scanf_float+0xd0>
 8008916:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800891a:	b2c8      	uxtb	r0, r1
 800891c:	280e      	cmp	r0, #14
 800891e:	d93a      	bls.n	8008996 <_scanf_float+0xd6>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	d003      	beq.n	800892e <_scanf_float+0x6e>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008932:	f1ba 0f01 	cmp.w	sl, #1
 8008936:	f200 8113 	bhi.w	8008b60 <_scanf_float+0x2a0>
 800893a:	455e      	cmp	r6, fp
 800893c:	f200 8105 	bhi.w	8008b4a <_scanf_float+0x28a>
 8008940:	2501      	movs	r5, #1
 8008942:	4628      	mov	r0, r5
 8008944:	b007      	add	sp, #28
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800894e:	2a0d      	cmp	r2, #13
 8008950:	d8e6      	bhi.n	8008920 <_scanf_float+0x60>
 8008952:	a101      	add	r1, pc, #4	; (adr r1, 8008958 <_scanf_float+0x98>)
 8008954:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008958:	08008a97 	.word	0x08008a97
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008921 	.word	0x08008921
 8008968:	08008af7 	.word	0x08008af7
 800896c:	08008acf 	.word	0x08008acf
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008aa5 	.word	0x08008aa5
 800897c:	08008921 	.word	0x08008921
 8008980:	08008921 	.word	0x08008921
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a5d 	.word	0x08008a5d
 8008990:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008994:	e7db      	b.n	800894e <_scanf_float+0x8e>
 8008996:	290e      	cmp	r1, #14
 8008998:	d8c2      	bhi.n	8008920 <_scanf_float+0x60>
 800899a:	a001      	add	r0, pc, #4	; (adr r0, 80089a0 <_scanf_float+0xe0>)
 800899c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80089a0:	08008a4f 	.word	0x08008a4f
 80089a4:	08008921 	.word	0x08008921
 80089a8:	08008a4f 	.word	0x08008a4f
 80089ac:	08008ae3 	.word	0x08008ae3
 80089b0:	08008921 	.word	0x08008921
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	08008a39 	.word	0x08008a39
 80089bc:	08008a39 	.word	0x08008a39
 80089c0:	08008a39 	.word	0x08008a39
 80089c4:	08008a39 	.word	0x08008a39
 80089c8:	08008a39 	.word	0x08008a39
 80089cc:	08008a39 	.word	0x08008a39
 80089d0:	08008a39 	.word	0x08008a39
 80089d4:	08008a39 	.word	0x08008a39
 80089d8:	08008a39 	.word	0x08008a39
 80089dc:	2b6e      	cmp	r3, #110	; 0x6e
 80089de:	d809      	bhi.n	80089f4 <_scanf_float+0x134>
 80089e0:	2b60      	cmp	r3, #96	; 0x60
 80089e2:	d8b2      	bhi.n	800894a <_scanf_float+0x8a>
 80089e4:	2b54      	cmp	r3, #84	; 0x54
 80089e6:	d077      	beq.n	8008ad8 <_scanf_float+0x218>
 80089e8:	2b59      	cmp	r3, #89	; 0x59
 80089ea:	d199      	bne.n	8008920 <_scanf_float+0x60>
 80089ec:	2d07      	cmp	r5, #7
 80089ee:	d197      	bne.n	8008920 <_scanf_float+0x60>
 80089f0:	2508      	movs	r5, #8
 80089f2:	e029      	b.n	8008a48 <_scanf_float+0x188>
 80089f4:	2b74      	cmp	r3, #116	; 0x74
 80089f6:	d06f      	beq.n	8008ad8 <_scanf_float+0x218>
 80089f8:	2b79      	cmp	r3, #121	; 0x79
 80089fa:	e7f6      	b.n	80089ea <_scanf_float+0x12a>
 80089fc:	6821      	ldr	r1, [r4, #0]
 80089fe:	05c8      	lsls	r0, r1, #23
 8008a00:	d51a      	bpl.n	8008a38 <_scanf_float+0x178>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a08:	6021      	str	r1, [r4, #0]
 8008a0a:	f109 0901 	add.w	r9, r9, #1
 8008a0e:	b11b      	cbz	r3, 8008a18 <_scanf_float+0x158>
 8008a10:	3b01      	subs	r3, #1
 8008a12:	3201      	adds	r2, #1
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	60a2      	str	r2, [r4, #8]
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	60a3      	str	r3, [r4, #8]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	f340 8084 	ble.w	8008b38 <_scanf_float+0x278>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	e766      	b.n	8008906 <_scanf_float+0x46>
 8008a38:	eb1a 0f05 	cmn.w	sl, r5
 8008a3c:	f47f af70 	bne.w	8008920 <_scanf_float+0x60>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	f806 3b01 	strb.w	r3, [r6], #1
 8008a4c:	e7e4      	b.n	8008a18 <_scanf_float+0x158>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	0610      	lsls	r0, r2, #24
 8008a52:	f57f af65 	bpl.w	8008920 <_scanf_float+0x60>
 8008a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a5a:	e7f4      	b.n	8008a46 <_scanf_float+0x186>
 8008a5c:	f1ba 0f00 	cmp.w	sl, #0
 8008a60:	d10e      	bne.n	8008a80 <_scanf_float+0x1c0>
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	d10e      	bne.n	8008a86 <_scanf_float+0x1c6>
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a72:	d108      	bne.n	8008a86 <_scanf_float+0x1c6>
 8008a74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	f04f 0a01 	mov.w	sl, #1
 8008a7e:	e7e3      	b.n	8008a48 <_scanf_float+0x188>
 8008a80:	f1ba 0f02 	cmp.w	sl, #2
 8008a84:	d055      	beq.n	8008b32 <_scanf_float+0x272>
 8008a86:	2d01      	cmp	r5, #1
 8008a88:	d002      	beq.n	8008a90 <_scanf_float+0x1d0>
 8008a8a:	2d04      	cmp	r5, #4
 8008a8c:	f47f af48 	bne.w	8008920 <_scanf_float+0x60>
 8008a90:	3501      	adds	r5, #1
 8008a92:	b2ed      	uxtb	r5, r5
 8008a94:	e7d8      	b.n	8008a48 <_scanf_float+0x188>
 8008a96:	f1ba 0f01 	cmp.w	sl, #1
 8008a9a:	f47f af41 	bne.w	8008920 <_scanf_float+0x60>
 8008a9e:	f04f 0a02 	mov.w	sl, #2
 8008aa2:	e7d1      	b.n	8008a48 <_scanf_float+0x188>
 8008aa4:	b97d      	cbnz	r5, 8008ac6 <_scanf_float+0x206>
 8008aa6:	f1b9 0f00 	cmp.w	r9, #0
 8008aaa:	f47f af3c 	bne.w	8008926 <_scanf_float+0x66>
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ab4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ab8:	f47f af39 	bne.w	800892e <_scanf_float+0x6e>
 8008abc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ac0:	6022      	str	r2, [r4, #0]
 8008ac2:	2501      	movs	r5, #1
 8008ac4:	e7c0      	b.n	8008a48 <_scanf_float+0x188>
 8008ac6:	2d03      	cmp	r5, #3
 8008ac8:	d0e2      	beq.n	8008a90 <_scanf_float+0x1d0>
 8008aca:	2d05      	cmp	r5, #5
 8008acc:	e7de      	b.n	8008a8c <_scanf_float+0x1cc>
 8008ace:	2d02      	cmp	r5, #2
 8008ad0:	f47f af26 	bne.w	8008920 <_scanf_float+0x60>
 8008ad4:	2503      	movs	r5, #3
 8008ad6:	e7b7      	b.n	8008a48 <_scanf_float+0x188>
 8008ad8:	2d06      	cmp	r5, #6
 8008ada:	f47f af21 	bne.w	8008920 <_scanf_float+0x60>
 8008ade:	2507      	movs	r5, #7
 8008ae0:	e7b2      	b.n	8008a48 <_scanf_float+0x188>
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	0591      	lsls	r1, r2, #22
 8008ae6:	f57f af1b 	bpl.w	8008920 <_scanf_float+0x60>
 8008aea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008af4:	e7a8      	b.n	8008a48 <_scanf_float+0x188>
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008afc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b00:	d006      	beq.n	8008b10 <_scanf_float+0x250>
 8008b02:	0550      	lsls	r0, r2, #21
 8008b04:	f57f af0c 	bpl.w	8008920 <_scanf_float+0x60>
 8008b08:	f1b9 0f00 	cmp.w	r9, #0
 8008b0c:	f43f af0f 	beq.w	800892e <_scanf_float+0x6e>
 8008b10:	0591      	lsls	r1, r2, #22
 8008b12:	bf58      	it	pl
 8008b14:	9901      	ldrpl	r1, [sp, #4]
 8008b16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b1a:	bf58      	it	pl
 8008b1c:	eba9 0101 	subpl.w	r1, r9, r1
 8008b20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b24:	bf58      	it	pl
 8008b26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b2a:	6022      	str	r2, [r4, #0]
 8008b2c:	f04f 0900 	mov.w	r9, #0
 8008b30:	e78a      	b.n	8008a48 <_scanf_float+0x188>
 8008b32:	f04f 0a03 	mov.w	sl, #3
 8008b36:	e787      	b.n	8008a48 <_scanf_float+0x188>
 8008b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4798      	blx	r3
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f43f aedf 	beq.w	8008906 <_scanf_float+0x46>
 8008b48:	e6ea      	b.n	8008920 <_scanf_float+0x60>
 8008b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b52:	463a      	mov	r2, r7
 8008b54:	4640      	mov	r0, r8
 8008b56:	4798      	blx	r3
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	e6ec      	b.n	800893a <_scanf_float+0x7a>
 8008b60:	1e6b      	subs	r3, r5, #1
 8008b62:	2b06      	cmp	r3, #6
 8008b64:	d825      	bhi.n	8008bb2 <_scanf_float+0x2f2>
 8008b66:	2d02      	cmp	r5, #2
 8008b68:	d836      	bhi.n	8008bd8 <_scanf_float+0x318>
 8008b6a:	455e      	cmp	r6, fp
 8008b6c:	f67f aee8 	bls.w	8008940 <_scanf_float+0x80>
 8008b70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4798      	blx	r3
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	6123      	str	r3, [r4, #16]
 8008b84:	e7f1      	b.n	8008b6a <_scanf_float+0x2aa>
 8008b86:	9802      	ldr	r0, [sp, #8]
 8008b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b90:	9002      	str	r0, [sp, #8]
 8008b92:	463a      	mov	r2, r7
 8008b94:	4640      	mov	r0, r8
 8008b96:	4798      	blx	r3
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ba2:	fa5f fa8a 	uxtb.w	sl, sl
 8008ba6:	f1ba 0f02 	cmp.w	sl, #2
 8008baa:	d1ec      	bne.n	8008b86 <_scanf_float+0x2c6>
 8008bac:	3d03      	subs	r5, #3
 8008bae:	b2ed      	uxtb	r5, r5
 8008bb0:	1b76      	subs	r6, r6, r5
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	05da      	lsls	r2, r3, #23
 8008bb6:	d52f      	bpl.n	8008c18 <_scanf_float+0x358>
 8008bb8:	055b      	lsls	r3, r3, #21
 8008bba:	d510      	bpl.n	8008bde <_scanf_float+0x31e>
 8008bbc:	455e      	cmp	r6, fp
 8008bbe:	f67f aebf 	bls.w	8008940 <_scanf_float+0x80>
 8008bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bca:	463a      	mov	r2, r7
 8008bcc:	4640      	mov	r0, r8
 8008bce:	4798      	blx	r3
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	e7f1      	b.n	8008bbc <_scanf_float+0x2fc>
 8008bd8:	46aa      	mov	sl, r5
 8008bda:	9602      	str	r6, [sp, #8]
 8008bdc:	e7df      	b.n	8008b9e <_scanf_float+0x2de>
 8008bde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	2965      	cmp	r1, #101	; 0x65
 8008be6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bea:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	d00c      	beq.n	8008c0c <_scanf_float+0x34c>
 8008bf2:	2945      	cmp	r1, #69	; 0x45
 8008bf4:	d00a      	beq.n	8008c0c <_scanf_float+0x34c>
 8008bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bfa:	463a      	mov	r2, r7
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4798      	blx	r3
 8008c00:	6923      	ldr	r3, [r4, #16]
 8008c02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	1eb5      	subs	r5, r6, #2
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c10:	463a      	mov	r2, r7
 8008c12:	4640      	mov	r0, r8
 8008c14:	4798      	blx	r3
 8008c16:	462e      	mov	r6, r5
 8008c18:	6825      	ldr	r5, [r4, #0]
 8008c1a:	f015 0510 	ands.w	r5, r5, #16
 8008c1e:	d159      	bne.n	8008cd4 <_scanf_float+0x414>
 8008c20:	7035      	strb	r5, [r6, #0]
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2c:	d11b      	bne.n	8008c66 <_scanf_float+0x3a6>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	454b      	cmp	r3, r9
 8008c32:	eba3 0209 	sub.w	r2, r3, r9
 8008c36:	d123      	bne.n	8008c80 <_scanf_float+0x3c0>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	4640      	mov	r0, r8
 8008c3e:	f000 ff0d 	bl	8009a5c <_strtod_r>
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	f012 0f02 	tst.w	r2, #2
 8008c4a:	ec57 6b10 	vmov	r6, r7, d0
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	d021      	beq.n	8008c96 <_scanf_float+0x3d6>
 8008c52:	9903      	ldr	r1, [sp, #12]
 8008c54:	1d1a      	adds	r2, r3, #4
 8008c56:	600a      	str	r2, [r1, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	e9c3 6700 	strd	r6, r7, [r3]
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60e3      	str	r3, [r4, #12]
 8008c64:	e66d      	b.n	8008942 <_scanf_float+0x82>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0e5      	beq.n	8008c38 <_scanf_float+0x378>
 8008c6c:	9905      	ldr	r1, [sp, #20]
 8008c6e:	230a      	movs	r3, #10
 8008c70:	462a      	mov	r2, r5
 8008c72:	3101      	adds	r1, #1
 8008c74:	4640      	mov	r0, r8
 8008c76:	f000 ff79 	bl	8009b6c <_strtol_r>
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	9e05      	ldr	r6, [sp, #20]
 8008c7e:	1ac2      	subs	r2, r0, r3
 8008c80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c84:	429e      	cmp	r6, r3
 8008c86:	bf28      	it	cs
 8008c88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c8c:	4912      	ldr	r1, [pc, #72]	; (8008cd8 <_scanf_float+0x418>)
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f000 f8a2 	bl	8008dd8 <siprintf>
 8008c94:	e7d0      	b.n	8008c38 <_scanf_float+0x378>
 8008c96:	9903      	ldr	r1, [sp, #12]
 8008c98:	f012 0f04 	tst.w	r2, #4
 8008c9c:	f103 0204 	add.w	r2, r3, #4
 8008ca0:	600a      	str	r2, [r1, #0]
 8008ca2:	d1d9      	bne.n	8008c58 <_scanf_float+0x398>
 8008ca4:	f8d3 8000 	ldr.w	r8, [r3]
 8008ca8:	ee10 2a10 	vmov	r2, s0
 8008cac:	ee10 0a10 	vmov	r0, s0
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 ff42 	bl	8000b3c <__aeabi_dcmpun>
 8008cb8:	b128      	cbz	r0, 8008cc6 <_scanf_float+0x406>
 8008cba:	4808      	ldr	r0, [pc, #32]	; (8008cdc <_scanf_float+0x41c>)
 8008cbc:	f000 f886 	bl	8008dcc <nanf>
 8008cc0:	ed88 0a00 	vstr	s0, [r8]
 8008cc4:	e7cb      	b.n	8008c5e <_scanf_float+0x39e>
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 ff95 	bl	8000bf8 <__aeabi_d2f>
 8008cce:	f8c8 0000 	str.w	r0, [r8]
 8008cd2:	e7c4      	b.n	8008c5e <_scanf_float+0x39e>
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	e634      	b.n	8008942 <_scanf_float+0x82>
 8008cd8:	0800ca9c 	.word	0x0800ca9c
 8008cdc:	0800cf10 	.word	0x0800cf10

08008ce0 <_puts_r>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	460e      	mov	r6, r1
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	b118      	cbz	r0, 8008cf0 <_puts_r+0x10>
 8008ce8:	6983      	ldr	r3, [r0, #24]
 8008cea:	b90b      	cbnz	r3, 8008cf0 <_puts_r+0x10>
 8008cec:	f001 ff94 	bl	800ac18 <__sinit>
 8008cf0:	69ab      	ldr	r3, [r5, #24]
 8008cf2:	68ac      	ldr	r4, [r5, #8]
 8008cf4:	b913      	cbnz	r3, 8008cfc <_puts_r+0x1c>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f001 ff8e 	bl	800ac18 <__sinit>
 8008cfc:	4b2c      	ldr	r3, [pc, #176]	; (8008db0 <_puts_r+0xd0>)
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	d120      	bne.n	8008d44 <_puts_r+0x64>
 8008d02:	686c      	ldr	r4, [r5, #4]
 8008d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d06:	07db      	lsls	r3, r3, #31
 8008d08:	d405      	bmi.n	8008d16 <_puts_r+0x36>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	0598      	lsls	r0, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_puts_r+0x36>
 8008d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d12:	f002 fb92 	bl	800b43a <__retarget_lock_acquire_recursive>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	0719      	lsls	r1, r3, #28
 8008d1a:	d51d      	bpl.n	8008d58 <_puts_r+0x78>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	b1db      	cbz	r3, 8008d58 <_puts_r+0x78>
 8008d20:	3e01      	subs	r6, #1
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	bb39      	cbnz	r1, 8008d7e <_puts_r+0x9e>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	da38      	bge.n	8008da4 <_puts_r+0xc4>
 8008d32:	4622      	mov	r2, r4
 8008d34:	210a      	movs	r1, #10
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 ff1a 	bl	8009b70 <__swbuf_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d011      	beq.n	8008d64 <_puts_r+0x84>
 8008d40:	250a      	movs	r5, #10
 8008d42:	e011      	b.n	8008d68 <_puts_r+0x88>
 8008d44:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <_puts_r+0xd4>)
 8008d46:	429c      	cmp	r4, r3
 8008d48:	d101      	bne.n	8008d4e <_puts_r+0x6e>
 8008d4a:	68ac      	ldr	r4, [r5, #8]
 8008d4c:	e7da      	b.n	8008d04 <_puts_r+0x24>
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <_puts_r+0xd8>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	bf08      	it	eq
 8008d54:	68ec      	ldreq	r4, [r5, #12]
 8008d56:	e7d5      	b.n	8008d04 <_puts_r+0x24>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 ff5a 	bl	8009c14 <__swsetup_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0dd      	beq.n	8008d20 <_puts_r+0x40>
 8008d64:	f04f 35ff 	mov.w	r5, #4294967295
 8008d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d6a:	07da      	lsls	r2, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_puts_r+0x9a>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	059b      	lsls	r3, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_puts_r+0x9a>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f002 fb61 	bl	800b43c <__retarget_lock_release_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da04      	bge.n	8008d8c <_puts_r+0xac>
 8008d82:	69a2      	ldr	r2, [r4, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	dc06      	bgt.n	8008d96 <_puts_r+0xb6>
 8008d88:	290a      	cmp	r1, #10
 8008d8a:	d004      	beq.n	8008d96 <_puts_r+0xb6>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	7019      	strb	r1, [r3, #0]
 8008d94:	e7c5      	b.n	8008d22 <_puts_r+0x42>
 8008d96:	4622      	mov	r2, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 fee9 	bl	8009b70 <__swbuf_r>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d1bf      	bne.n	8008d22 <_puts_r+0x42>
 8008da2:	e7df      	b.n	8008d64 <_puts_r+0x84>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	250a      	movs	r5, #10
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	701d      	strb	r5, [r3, #0]
 8008dae:	e7db      	b.n	8008d68 <_puts_r+0x88>
 8008db0:	0800ccac 	.word	0x0800ccac
 8008db4:	0800cccc 	.word	0x0800cccc
 8008db8:	0800cc8c 	.word	0x0800cc8c

08008dbc <puts>:
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <puts+0xc>)
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	f7ff bf8d 	b.w	8008ce0 <_puts_r>
 8008dc6:	bf00      	nop
 8008dc8:	20000010 	.word	0x20000010

08008dcc <nanf>:
 8008dcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dd4 <nanf+0x8>
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	7fc00000 	.word	0x7fc00000

08008dd8 <siprintf>:
 8008dd8:	b40e      	push	{r1, r2, r3}
 8008dda:	b500      	push	{lr}
 8008ddc:	b09c      	sub	sp, #112	; 0x70
 8008dde:	ab1d      	add	r3, sp, #116	; 0x74
 8008de0:	9002      	str	r0, [sp, #8]
 8008de2:	9006      	str	r0, [sp, #24]
 8008de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008de8:	4809      	ldr	r0, [pc, #36]	; (8008e10 <siprintf+0x38>)
 8008dea:	9107      	str	r1, [sp, #28]
 8008dec:	9104      	str	r1, [sp, #16]
 8008dee:	4909      	ldr	r1, [pc, #36]	; (8008e14 <siprintf+0x3c>)
 8008df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df4:	9105      	str	r1, [sp, #20]
 8008df6:	6800      	ldr	r0, [r0, #0]
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	a902      	add	r1, sp, #8
 8008dfc:	f003 f9b2 	bl	800c164 <_svfiprintf_r>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	b01c      	add	sp, #112	; 0x70
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	20000010 	.word	0x20000010
 8008e14:	ffff0208 	.word	0xffff0208

08008e18 <sulp>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	ec45 4b10 	vmov	d0, r4, r5
 8008e22:	4616      	mov	r6, r2
 8008e24:	f002 fefc 	bl	800bc20 <__ulp>
 8008e28:	ec51 0b10 	vmov	r0, r1, d0
 8008e2c:	b17e      	cbz	r6, 8008e4e <sulp+0x36>
 8008e2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dd09      	ble.n	8008e4e <sulp+0x36>
 8008e3a:	051b      	lsls	r3, r3, #20
 8008e3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e40:	2400      	movs	r4, #0
 8008e42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e46:	4622      	mov	r2, r4
 8008e48:	462b      	mov	r3, r5
 8008e4a:	f7f7 fbdd 	bl	8000608 <__aeabi_dmul>
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <_strtod_l>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b02 	vpush	{d8}
 8008e58:	b09d      	sub	sp, #116	; 0x74
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9318      	str	r3, [sp, #96]	; 0x60
 8008e60:	4ba2      	ldr	r3, [pc, #648]	; (80090ec <_strtod_l+0x29c>)
 8008e62:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	4688      	mov	r8, r1
 8008e6e:	f7f7 f9b7 	bl	80001e0 <strlen>
 8008e72:	f04f 0a00 	mov.w	sl, #0
 8008e76:	4605      	mov	r5, r0
 8008e78:	f04f 0b00 	mov.w	fp, #0
 8008e7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	2a2b      	cmp	r2, #43	; 0x2b
 8008e86:	d04e      	beq.n	8008f26 <_strtod_l+0xd6>
 8008e88:	d83b      	bhi.n	8008f02 <_strtod_l+0xb2>
 8008e8a:	2a0d      	cmp	r2, #13
 8008e8c:	d834      	bhi.n	8008ef8 <_strtod_l+0xa8>
 8008e8e:	2a08      	cmp	r2, #8
 8008e90:	d834      	bhi.n	8008efc <_strtod_l+0xac>
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d03e      	beq.n	8008f14 <_strtod_l+0xc4>
 8008e96:	2300      	movs	r3, #0
 8008e98:	930a      	str	r3, [sp, #40]	; 0x28
 8008e9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e9c:	7833      	ldrb	r3, [r6, #0]
 8008e9e:	2b30      	cmp	r3, #48	; 0x30
 8008ea0:	f040 80b0 	bne.w	8009004 <_strtod_l+0x1b4>
 8008ea4:	7873      	ldrb	r3, [r6, #1]
 8008ea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008eaa:	2b58      	cmp	r3, #88	; 0x58
 8008eac:	d168      	bne.n	8008f80 <_strtod_l+0x130>
 8008eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	ab18      	add	r3, sp, #96	; 0x60
 8008eb4:	9702      	str	r7, [sp, #8]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4a8d      	ldr	r2, [pc, #564]	; (80090f0 <_strtod_l+0x2a0>)
 8008eba:	ab19      	add	r3, sp, #100	; 0x64
 8008ebc:	a917      	add	r1, sp, #92	; 0x5c
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 ffae 	bl	800ae20 <__gethex>
 8008ec4:	f010 0707 	ands.w	r7, r0, #7
 8008ec8:	4605      	mov	r5, r0
 8008eca:	d005      	beq.n	8008ed8 <_strtod_l+0x88>
 8008ecc:	2f06      	cmp	r7, #6
 8008ece:	d12c      	bne.n	8008f2a <_strtod_l+0xda>
 8008ed0:	3601      	adds	r6, #1
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 8590 	bne.w	8009a00 <_strtod_l+0xbb0>
 8008ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee2:	b1eb      	cbz	r3, 8008f20 <_strtod_l+0xd0>
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008eea:	ec43 2b10 	vmov	d0, r2, r3
 8008eee:	b01d      	add	sp, #116	; 0x74
 8008ef0:	ecbd 8b02 	vpop	{d8}
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	2a20      	cmp	r2, #32
 8008efa:	d1cc      	bne.n	8008e96 <_strtod_l+0x46>
 8008efc:	3301      	adds	r3, #1
 8008efe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f00:	e7be      	b.n	8008e80 <_strtod_l+0x30>
 8008f02:	2a2d      	cmp	r2, #45	; 0x2d
 8008f04:	d1c7      	bne.n	8008e96 <_strtod_l+0x46>
 8008f06:	2201      	movs	r2, #1
 8008f08:	920a      	str	r2, [sp, #40]	; 0x28
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1c2      	bne.n	8008e9a <_strtod_l+0x4a>
 8008f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f040 856e 	bne.w	80099fc <_strtod_l+0xbac>
 8008f20:	4652      	mov	r2, sl
 8008f22:	465b      	mov	r3, fp
 8008f24:	e7e1      	b.n	8008eea <_strtod_l+0x9a>
 8008f26:	2200      	movs	r2, #0
 8008f28:	e7ee      	b.n	8008f08 <_strtod_l+0xb8>
 8008f2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f2c:	b13a      	cbz	r2, 8008f3e <_strtod_l+0xee>
 8008f2e:	2135      	movs	r1, #53	; 0x35
 8008f30:	a81a      	add	r0, sp, #104	; 0x68
 8008f32:	f002 ff80 	bl	800be36 <__copybits>
 8008f36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f002 fb3f 	bl	800b5bc <_Bfree>
 8008f3e:	3f01      	subs	r7, #1
 8008f40:	2f04      	cmp	r7, #4
 8008f42:	d806      	bhi.n	8008f52 <_strtod_l+0x102>
 8008f44:	e8df f007 	tbb	[pc, r7]
 8008f48:	1714030a 	.word	0x1714030a
 8008f4c:	0a          	.byte	0x0a
 8008f4d:	00          	.byte	0x00
 8008f4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008f52:	0728      	lsls	r0, r5, #28
 8008f54:	d5c0      	bpl.n	8008ed8 <_strtod_l+0x88>
 8008f56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008f5a:	e7bd      	b.n	8008ed8 <_strtod_l+0x88>
 8008f5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008f60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f6e:	e7f0      	b.n	8008f52 <_strtod_l+0x102>
 8008f70:	f8df b180 	ldr.w	fp, [pc, #384]	; 80090f4 <_strtod_l+0x2a4>
 8008f74:	e7ed      	b.n	8008f52 <_strtod_l+0x102>
 8008f76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f7a:	f04f 3aff 	mov.w	sl, #4294967295
 8008f7e:	e7e8      	b.n	8008f52 <_strtod_l+0x102>
 8008f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2b30      	cmp	r3, #48	; 0x30
 8008f8a:	d0f9      	beq.n	8008f80 <_strtod_l+0x130>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0a3      	beq.n	8008ed8 <_strtod_l+0x88>
 8008f90:	2301      	movs	r3, #1
 8008f92:	f04f 0900 	mov.w	r9, #0
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f9a:	9308      	str	r3, [sp, #32]
 8008f9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fa0:	464f      	mov	r7, r9
 8008fa2:	220a      	movs	r2, #10
 8008fa4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008fa6:	7806      	ldrb	r6, [r0, #0]
 8008fa8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008fac:	b2d9      	uxtb	r1, r3
 8008fae:	2909      	cmp	r1, #9
 8008fb0:	d92a      	bls.n	8009008 <_strtod_l+0x1b8>
 8008fb2:	9905      	ldr	r1, [sp, #20]
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	f003 fa32 	bl	800c41e <strncmp>
 8008fba:	b398      	cbz	r0, 8009024 <_strtod_l+0x1d4>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	463d      	mov	r5, r7
 8008fc2:	9005      	str	r0, [sp, #20]
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2a65      	cmp	r2, #101	; 0x65
 8008fc8:	d001      	beq.n	8008fce <_strtod_l+0x17e>
 8008fca:	2a45      	cmp	r2, #69	; 0x45
 8008fcc:	d118      	bne.n	8009000 <_strtod_l+0x1b0>
 8008fce:	b91d      	cbnz	r5, 8008fd8 <_strtod_l+0x188>
 8008fd0:	9a04      	ldr	r2, [sp, #16]
 8008fd2:	4302      	orrs	r2, r0
 8008fd4:	d09e      	beq.n	8008f14 <_strtod_l+0xc4>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008fdc:	f108 0201 	add.w	r2, r8, #1
 8008fe0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fe2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008fe6:	2a2b      	cmp	r2, #43	; 0x2b
 8008fe8:	d075      	beq.n	80090d6 <_strtod_l+0x286>
 8008fea:	2a2d      	cmp	r2, #45	; 0x2d
 8008fec:	d07b      	beq.n	80090e6 <_strtod_l+0x296>
 8008fee:	f04f 0c00 	mov.w	ip, #0
 8008ff2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ff6:	2909      	cmp	r1, #9
 8008ff8:	f240 8082 	bls.w	8009100 <_strtod_l+0x2b0>
 8008ffc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009000:	2600      	movs	r6, #0
 8009002:	e09d      	b.n	8009140 <_strtod_l+0x2f0>
 8009004:	2300      	movs	r3, #0
 8009006:	e7c4      	b.n	8008f92 <_strtod_l+0x142>
 8009008:	2f08      	cmp	r7, #8
 800900a:	bfd8      	it	le
 800900c:	9907      	ldrle	r1, [sp, #28]
 800900e:	f100 0001 	add.w	r0, r0, #1
 8009012:	bfda      	itte	le
 8009014:	fb02 3301 	mlale	r3, r2, r1, r3
 8009018:	9307      	strle	r3, [sp, #28]
 800901a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800901e:	3701      	adds	r7, #1
 8009020:	9017      	str	r0, [sp, #92]	; 0x5c
 8009022:	e7bf      	b.n	8008fa4 <_strtod_l+0x154>
 8009024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009026:	195a      	adds	r2, r3, r5
 8009028:	9217      	str	r2, [sp, #92]	; 0x5c
 800902a:	5d5a      	ldrb	r2, [r3, r5]
 800902c:	2f00      	cmp	r7, #0
 800902e:	d037      	beq.n	80090a0 <_strtod_l+0x250>
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	463d      	mov	r5, r7
 8009034:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009038:	2b09      	cmp	r3, #9
 800903a:	d912      	bls.n	8009062 <_strtod_l+0x212>
 800903c:	2301      	movs	r3, #1
 800903e:	e7c2      	b.n	8008fc6 <_strtod_l+0x176>
 8009040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	9217      	str	r2, [sp, #92]	; 0x5c
 8009046:	785a      	ldrb	r2, [r3, #1]
 8009048:	3001      	adds	r0, #1
 800904a:	2a30      	cmp	r2, #48	; 0x30
 800904c:	d0f8      	beq.n	8009040 <_strtod_l+0x1f0>
 800904e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009052:	2b08      	cmp	r3, #8
 8009054:	f200 84d9 	bhi.w	8009a0a <_strtod_l+0xbba>
 8009058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800905a:	9005      	str	r0, [sp, #20]
 800905c:	2000      	movs	r0, #0
 800905e:	9308      	str	r3, [sp, #32]
 8009060:	4605      	mov	r5, r0
 8009062:	3a30      	subs	r2, #48	; 0x30
 8009064:	f100 0301 	add.w	r3, r0, #1
 8009068:	d014      	beq.n	8009094 <_strtod_l+0x244>
 800906a:	9905      	ldr	r1, [sp, #20]
 800906c:	4419      	add	r1, r3
 800906e:	9105      	str	r1, [sp, #20]
 8009070:	462b      	mov	r3, r5
 8009072:	eb00 0e05 	add.w	lr, r0, r5
 8009076:	210a      	movs	r1, #10
 8009078:	4573      	cmp	r3, lr
 800907a:	d113      	bne.n	80090a4 <_strtod_l+0x254>
 800907c:	182b      	adds	r3, r5, r0
 800907e:	2b08      	cmp	r3, #8
 8009080:	f105 0501 	add.w	r5, r5, #1
 8009084:	4405      	add	r5, r0
 8009086:	dc1c      	bgt.n	80090c2 <_strtod_l+0x272>
 8009088:	9907      	ldr	r1, [sp, #28]
 800908a:	230a      	movs	r3, #10
 800908c:	fb03 2301 	mla	r3, r3, r1, r2
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	2300      	movs	r3, #0
 8009094:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009096:	1c51      	adds	r1, r2, #1
 8009098:	9117      	str	r1, [sp, #92]	; 0x5c
 800909a:	7852      	ldrb	r2, [r2, #1]
 800909c:	4618      	mov	r0, r3
 800909e:	e7c9      	b.n	8009034 <_strtod_l+0x1e4>
 80090a0:	4638      	mov	r0, r7
 80090a2:	e7d2      	b.n	800904a <_strtod_l+0x1fa>
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	dc04      	bgt.n	80090b2 <_strtod_l+0x262>
 80090a8:	9e07      	ldr	r6, [sp, #28]
 80090aa:	434e      	muls	r6, r1
 80090ac:	9607      	str	r6, [sp, #28]
 80090ae:	3301      	adds	r3, #1
 80090b0:	e7e2      	b.n	8009078 <_strtod_l+0x228>
 80090b2:	f103 0c01 	add.w	ip, r3, #1
 80090b6:	f1bc 0f10 	cmp.w	ip, #16
 80090ba:	bfd8      	it	le
 80090bc:	fb01 f909 	mulle.w	r9, r1, r9
 80090c0:	e7f5      	b.n	80090ae <_strtod_l+0x25e>
 80090c2:	2d10      	cmp	r5, #16
 80090c4:	bfdc      	itt	le
 80090c6:	230a      	movle	r3, #10
 80090c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80090cc:	e7e1      	b.n	8009092 <_strtod_l+0x242>
 80090ce:	2300      	movs	r3, #0
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	2301      	movs	r3, #1
 80090d4:	e77c      	b.n	8008fd0 <_strtod_l+0x180>
 80090d6:	f04f 0c00 	mov.w	ip, #0
 80090da:	f108 0202 	add.w	r2, r8, #2
 80090de:	9217      	str	r2, [sp, #92]	; 0x5c
 80090e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80090e4:	e785      	b.n	8008ff2 <_strtod_l+0x1a2>
 80090e6:	f04f 0c01 	mov.w	ip, #1
 80090ea:	e7f6      	b.n	80090da <_strtod_l+0x28a>
 80090ec:	0800cd54 	.word	0x0800cd54
 80090f0:	0800caa4 	.word	0x0800caa4
 80090f4:	7ff00000 	.word	0x7ff00000
 80090f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090fa:	1c51      	adds	r1, r2, #1
 80090fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80090fe:	7852      	ldrb	r2, [r2, #1]
 8009100:	2a30      	cmp	r2, #48	; 0x30
 8009102:	d0f9      	beq.n	80090f8 <_strtod_l+0x2a8>
 8009104:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009108:	2908      	cmp	r1, #8
 800910a:	f63f af79 	bhi.w	8009000 <_strtod_l+0x1b0>
 800910e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009112:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009114:	9206      	str	r2, [sp, #24]
 8009116:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009118:	1c51      	adds	r1, r2, #1
 800911a:	9117      	str	r1, [sp, #92]	; 0x5c
 800911c:	7852      	ldrb	r2, [r2, #1]
 800911e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009122:	2e09      	cmp	r6, #9
 8009124:	d937      	bls.n	8009196 <_strtod_l+0x346>
 8009126:	9e06      	ldr	r6, [sp, #24]
 8009128:	1b89      	subs	r1, r1, r6
 800912a:	2908      	cmp	r1, #8
 800912c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009130:	dc02      	bgt.n	8009138 <_strtod_l+0x2e8>
 8009132:	4576      	cmp	r6, lr
 8009134:	bfa8      	it	ge
 8009136:	4676      	movge	r6, lr
 8009138:	f1bc 0f00 	cmp.w	ip, #0
 800913c:	d000      	beq.n	8009140 <_strtod_l+0x2f0>
 800913e:	4276      	negs	r6, r6
 8009140:	2d00      	cmp	r5, #0
 8009142:	d14d      	bne.n	80091e0 <_strtod_l+0x390>
 8009144:	9904      	ldr	r1, [sp, #16]
 8009146:	4301      	orrs	r1, r0
 8009148:	f47f aec6 	bne.w	8008ed8 <_strtod_l+0x88>
 800914c:	2b00      	cmp	r3, #0
 800914e:	f47f aee1 	bne.w	8008f14 <_strtod_l+0xc4>
 8009152:	2a69      	cmp	r2, #105	; 0x69
 8009154:	d027      	beq.n	80091a6 <_strtod_l+0x356>
 8009156:	dc24      	bgt.n	80091a2 <_strtod_l+0x352>
 8009158:	2a49      	cmp	r2, #73	; 0x49
 800915a:	d024      	beq.n	80091a6 <_strtod_l+0x356>
 800915c:	2a4e      	cmp	r2, #78	; 0x4e
 800915e:	f47f aed9 	bne.w	8008f14 <_strtod_l+0xc4>
 8009162:	499f      	ldr	r1, [pc, #636]	; (80093e0 <_strtod_l+0x590>)
 8009164:	a817      	add	r0, sp, #92	; 0x5c
 8009166:	f002 f8b3 	bl	800b2d0 <__match>
 800916a:	2800      	cmp	r0, #0
 800916c:	f43f aed2 	beq.w	8008f14 <_strtod_l+0xc4>
 8009170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b28      	cmp	r3, #40	; 0x28
 8009176:	d12d      	bne.n	80091d4 <_strtod_l+0x384>
 8009178:	499a      	ldr	r1, [pc, #616]	; (80093e4 <_strtod_l+0x594>)
 800917a:	aa1a      	add	r2, sp, #104	; 0x68
 800917c:	a817      	add	r0, sp, #92	; 0x5c
 800917e:	f002 f8bb 	bl	800b2f8 <__hexnan>
 8009182:	2805      	cmp	r0, #5
 8009184:	d126      	bne.n	80091d4 <_strtod_l+0x384>
 8009186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009188:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800918c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009190:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009194:	e6a0      	b.n	8008ed8 <_strtod_l+0x88>
 8009196:	210a      	movs	r1, #10
 8009198:	fb01 2e0e 	mla	lr, r1, lr, r2
 800919c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80091a0:	e7b9      	b.n	8009116 <_strtod_l+0x2c6>
 80091a2:	2a6e      	cmp	r2, #110	; 0x6e
 80091a4:	e7db      	b.n	800915e <_strtod_l+0x30e>
 80091a6:	4990      	ldr	r1, [pc, #576]	; (80093e8 <_strtod_l+0x598>)
 80091a8:	a817      	add	r0, sp, #92	; 0x5c
 80091aa:	f002 f891 	bl	800b2d0 <__match>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f43f aeb0 	beq.w	8008f14 <_strtod_l+0xc4>
 80091b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b6:	498d      	ldr	r1, [pc, #564]	; (80093ec <_strtod_l+0x59c>)
 80091b8:	3b01      	subs	r3, #1
 80091ba:	a817      	add	r0, sp, #92	; 0x5c
 80091bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80091be:	f002 f887 	bl	800b2d0 <__match>
 80091c2:	b910      	cbnz	r0, 80091ca <_strtod_l+0x37a>
 80091c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091c6:	3301      	adds	r3, #1
 80091c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80091ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80093fc <_strtod_l+0x5ac>
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	e681      	b.n	8008ed8 <_strtod_l+0x88>
 80091d4:	4886      	ldr	r0, [pc, #536]	; (80093f0 <_strtod_l+0x5a0>)
 80091d6:	f003 f8c7 	bl	800c368 <nan>
 80091da:	ec5b ab10 	vmov	sl, fp, d0
 80091de:	e67b      	b.n	8008ed8 <_strtod_l+0x88>
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	9807      	ldr	r0, [sp, #28]
 80091e4:	1af3      	subs	r3, r6, r3
 80091e6:	2f00      	cmp	r7, #0
 80091e8:	bf08      	it	eq
 80091ea:	462f      	moveq	r7, r5
 80091ec:	2d10      	cmp	r5, #16
 80091ee:	9306      	str	r3, [sp, #24]
 80091f0:	46a8      	mov	r8, r5
 80091f2:	bfa8      	it	ge
 80091f4:	f04f 0810 	movge.w	r8, #16
 80091f8:	f7f7 f98c 	bl	8000514 <__aeabi_ui2d>
 80091fc:	2d09      	cmp	r5, #9
 80091fe:	4682      	mov	sl, r0
 8009200:	468b      	mov	fp, r1
 8009202:	dd13      	ble.n	800922c <_strtod_l+0x3dc>
 8009204:	4b7b      	ldr	r3, [pc, #492]	; (80093f4 <_strtod_l+0x5a4>)
 8009206:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800920a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800920e:	f7f7 f9fb 	bl	8000608 <__aeabi_dmul>
 8009212:	4682      	mov	sl, r0
 8009214:	4648      	mov	r0, r9
 8009216:	468b      	mov	fp, r1
 8009218:	f7f7 f97c 	bl	8000514 <__aeabi_ui2d>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	f7f7 f83a 	bl	800029c <__adddf3>
 8009228:	4682      	mov	sl, r0
 800922a:	468b      	mov	fp, r1
 800922c:	2d0f      	cmp	r5, #15
 800922e:	dc38      	bgt.n	80092a2 <_strtod_l+0x452>
 8009230:	9b06      	ldr	r3, [sp, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f43f ae50 	beq.w	8008ed8 <_strtod_l+0x88>
 8009238:	dd24      	ble.n	8009284 <_strtod_l+0x434>
 800923a:	2b16      	cmp	r3, #22
 800923c:	dc0b      	bgt.n	8009256 <_strtod_l+0x406>
 800923e:	496d      	ldr	r1, [pc, #436]	; (80093f4 <_strtod_l+0x5a4>)
 8009240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009248:	4652      	mov	r2, sl
 800924a:	465b      	mov	r3, fp
 800924c:	f7f7 f9dc 	bl	8000608 <__aeabi_dmul>
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	e640      	b.n	8008ed8 <_strtod_l+0x88>
 8009256:	9a06      	ldr	r2, [sp, #24]
 8009258:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800925c:	4293      	cmp	r3, r2
 800925e:	db20      	blt.n	80092a2 <_strtod_l+0x452>
 8009260:	4c64      	ldr	r4, [pc, #400]	; (80093f4 <_strtod_l+0x5a4>)
 8009262:	f1c5 050f 	rsb	r5, r5, #15
 8009266:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009272:	f7f7 f9c9 	bl	8000608 <__aeabi_dmul>
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	1b5d      	subs	r5, r3, r5
 800927a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800927e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009282:	e7e3      	b.n	800924c <_strtod_l+0x3fc>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	3316      	adds	r3, #22
 8009288:	db0b      	blt.n	80092a2 <_strtod_l+0x452>
 800928a:	9b05      	ldr	r3, [sp, #20]
 800928c:	1b9e      	subs	r6, r3, r6
 800928e:	4b59      	ldr	r3, [pc, #356]	; (80093f4 <_strtod_l+0x5a4>)
 8009290:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009294:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009298:	4650      	mov	r0, sl
 800929a:	4659      	mov	r1, fp
 800929c:	f7f7 fade 	bl	800085c <__aeabi_ddiv>
 80092a0:	e7d6      	b.n	8009250 <_strtod_l+0x400>
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	eba5 0808 	sub.w	r8, r5, r8
 80092a8:	4498      	add	r8, r3
 80092aa:	f1b8 0f00 	cmp.w	r8, #0
 80092ae:	dd74      	ble.n	800939a <_strtod_l+0x54a>
 80092b0:	f018 030f 	ands.w	r3, r8, #15
 80092b4:	d00a      	beq.n	80092cc <_strtod_l+0x47c>
 80092b6:	494f      	ldr	r1, [pc, #316]	; (80093f4 <_strtod_l+0x5a4>)
 80092b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092bc:	4652      	mov	r2, sl
 80092be:	465b      	mov	r3, fp
 80092c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	f038 080f 	bics.w	r8, r8, #15
 80092d0:	d04f      	beq.n	8009372 <_strtod_l+0x522>
 80092d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80092d6:	dd22      	ble.n	800931e <_strtod_l+0x4ce>
 80092d8:	2500      	movs	r5, #0
 80092da:	462e      	mov	r6, r5
 80092dc:	9507      	str	r5, [sp, #28]
 80092de:	9505      	str	r5, [sp, #20]
 80092e0:	2322      	movs	r3, #34	; 0x22
 80092e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80093fc <_strtod_l+0x5ac>
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	f04f 0a00 	mov.w	sl, #0
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f43f adf2 	beq.w	8008ed8 <_strtod_l+0x88>
 80092f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092f6:	4620      	mov	r0, r4
 80092f8:	f002 f960 	bl	800b5bc <_Bfree>
 80092fc:	9905      	ldr	r1, [sp, #20]
 80092fe:	4620      	mov	r0, r4
 8009300:	f002 f95c 	bl	800b5bc <_Bfree>
 8009304:	4631      	mov	r1, r6
 8009306:	4620      	mov	r0, r4
 8009308:	f002 f958 	bl	800b5bc <_Bfree>
 800930c:	9907      	ldr	r1, [sp, #28]
 800930e:	4620      	mov	r0, r4
 8009310:	f002 f954 	bl	800b5bc <_Bfree>
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	f002 f950 	bl	800b5bc <_Bfree>
 800931c:	e5dc      	b.n	8008ed8 <_strtod_l+0x88>
 800931e:	4b36      	ldr	r3, [pc, #216]	; (80093f8 <_strtod_l+0x5a8>)
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	2300      	movs	r3, #0
 8009324:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009328:	4650      	mov	r0, sl
 800932a:	4659      	mov	r1, fp
 800932c:	4699      	mov	r9, r3
 800932e:	f1b8 0f01 	cmp.w	r8, #1
 8009332:	dc21      	bgt.n	8009378 <_strtod_l+0x528>
 8009334:	b10b      	cbz	r3, 800933a <_strtod_l+0x4ea>
 8009336:	4682      	mov	sl, r0
 8009338:	468b      	mov	fp, r1
 800933a:	4b2f      	ldr	r3, [pc, #188]	; (80093f8 <_strtod_l+0x5a8>)
 800933c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009340:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009344:	4652      	mov	r2, sl
 8009346:	465b      	mov	r3, fp
 8009348:	e9d9 0100 	ldrd	r0, r1, [r9]
 800934c:	f7f7 f95c 	bl	8000608 <__aeabi_dmul>
 8009350:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <_strtod_l+0x5ac>)
 8009352:	460a      	mov	r2, r1
 8009354:	400b      	ands	r3, r1
 8009356:	492a      	ldr	r1, [pc, #168]	; (8009400 <_strtod_l+0x5b0>)
 8009358:	428b      	cmp	r3, r1
 800935a:	4682      	mov	sl, r0
 800935c:	d8bc      	bhi.n	80092d8 <_strtod_l+0x488>
 800935e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009362:	428b      	cmp	r3, r1
 8009364:	bf86      	itte	hi
 8009366:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009404 <_strtod_l+0x5b4>
 800936a:	f04f 3aff 	movhi.w	sl, #4294967295
 800936e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009372:	2300      	movs	r3, #0
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	e084      	b.n	8009482 <_strtod_l+0x632>
 8009378:	f018 0f01 	tst.w	r8, #1
 800937c:	d005      	beq.n	800938a <_strtod_l+0x53a>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f7f7 f940 	bl	8000608 <__aeabi_dmul>
 8009388:	2301      	movs	r3, #1
 800938a:	9a04      	ldr	r2, [sp, #16]
 800938c:	3208      	adds	r2, #8
 800938e:	f109 0901 	add.w	r9, r9, #1
 8009392:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009396:	9204      	str	r2, [sp, #16]
 8009398:	e7c9      	b.n	800932e <_strtod_l+0x4de>
 800939a:	d0ea      	beq.n	8009372 <_strtod_l+0x522>
 800939c:	f1c8 0800 	rsb	r8, r8, #0
 80093a0:	f018 020f 	ands.w	r2, r8, #15
 80093a4:	d00a      	beq.n	80093bc <_strtod_l+0x56c>
 80093a6:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <_strtod_l+0x5a4>)
 80093a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f7f7 fa52 	bl	800085c <__aeabi_ddiv>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80093c0:	d0d7      	beq.n	8009372 <_strtod_l+0x522>
 80093c2:	f1b8 0f1f 	cmp.w	r8, #31
 80093c6:	dd1f      	ble.n	8009408 <_strtod_l+0x5b8>
 80093c8:	2500      	movs	r5, #0
 80093ca:	462e      	mov	r6, r5
 80093cc:	9507      	str	r5, [sp, #28]
 80093ce:	9505      	str	r5, [sp, #20]
 80093d0:	2322      	movs	r3, #34	; 0x22
 80093d2:	f04f 0a00 	mov.w	sl, #0
 80093d6:	f04f 0b00 	mov.w	fp, #0
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	e786      	b.n	80092ec <_strtod_l+0x49c>
 80093de:	bf00      	nop
 80093e0:	0800ca75 	.word	0x0800ca75
 80093e4:	0800cab8 	.word	0x0800cab8
 80093e8:	0800ca6d 	.word	0x0800ca6d
 80093ec:	0800cbfc 	.word	0x0800cbfc
 80093f0:	0800cf10 	.word	0x0800cf10
 80093f4:	0800cdf0 	.word	0x0800cdf0
 80093f8:	0800cdc8 	.word	0x0800cdc8
 80093fc:	7ff00000 	.word	0x7ff00000
 8009400:	7ca00000 	.word	0x7ca00000
 8009404:	7fefffff 	.word	0x7fefffff
 8009408:	f018 0310 	ands.w	r3, r8, #16
 800940c:	bf18      	it	ne
 800940e:	236a      	movne	r3, #106	; 0x6a
 8009410:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80097c0 <_strtod_l+0x970>
 8009414:	9304      	str	r3, [sp, #16]
 8009416:	4650      	mov	r0, sl
 8009418:	4659      	mov	r1, fp
 800941a:	2300      	movs	r3, #0
 800941c:	f018 0f01 	tst.w	r8, #1
 8009420:	d004      	beq.n	800942c <_strtod_l+0x5dc>
 8009422:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009426:	f7f7 f8ef 	bl	8000608 <__aeabi_dmul>
 800942a:	2301      	movs	r3, #1
 800942c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009430:	f109 0908 	add.w	r9, r9, #8
 8009434:	d1f2      	bne.n	800941c <_strtod_l+0x5cc>
 8009436:	b10b      	cbz	r3, 800943c <_strtod_l+0x5ec>
 8009438:	4682      	mov	sl, r0
 800943a:	468b      	mov	fp, r1
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	b1c3      	cbz	r3, 8009472 <_strtod_l+0x622>
 8009440:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009444:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009448:	2b00      	cmp	r3, #0
 800944a:	4659      	mov	r1, fp
 800944c:	dd11      	ble.n	8009472 <_strtod_l+0x622>
 800944e:	2b1f      	cmp	r3, #31
 8009450:	f340 8124 	ble.w	800969c <_strtod_l+0x84c>
 8009454:	2b34      	cmp	r3, #52	; 0x34
 8009456:	bfde      	ittt	le
 8009458:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800945c:	f04f 33ff 	movle.w	r3, #4294967295
 8009460:	fa03 f202 	lslle.w	r2, r3, r2
 8009464:	f04f 0a00 	mov.w	sl, #0
 8009468:	bfcc      	ite	gt
 800946a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800946e:	ea02 0b01 	andle.w	fp, r2, r1
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	4650      	mov	r0, sl
 8009478:	4659      	mov	r1, fp
 800947a:	f7f7 fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800947e:	2800      	cmp	r0, #0
 8009480:	d1a2      	bne.n	80093c8 <_strtod_l+0x578>
 8009482:	9b07      	ldr	r3, [sp, #28]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	9908      	ldr	r1, [sp, #32]
 8009488:	462b      	mov	r3, r5
 800948a:	463a      	mov	r2, r7
 800948c:	4620      	mov	r0, r4
 800948e:	f002 f8fd 	bl	800b68c <__s2b>
 8009492:	9007      	str	r0, [sp, #28]
 8009494:	2800      	cmp	r0, #0
 8009496:	f43f af1f 	beq.w	80092d8 <_strtod_l+0x488>
 800949a:	9b05      	ldr	r3, [sp, #20]
 800949c:	1b9e      	subs	r6, r3, r6
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bfb4      	ite	lt
 80094a4:	4633      	movlt	r3, r6
 80094a6:	2300      	movge	r3, #0
 80094a8:	930c      	str	r3, [sp, #48]	; 0x30
 80094aa:	9b06      	ldr	r3, [sp, #24]
 80094ac:	2500      	movs	r5, #0
 80094ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80094b2:	9312      	str	r3, [sp, #72]	; 0x48
 80094b4:	462e      	mov	r6, r5
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	4620      	mov	r0, r4
 80094ba:	6859      	ldr	r1, [r3, #4]
 80094bc:	f002 f83e 	bl	800b53c <_Balloc>
 80094c0:	9005      	str	r0, [sp, #20]
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f43f af0c 	beq.w	80092e0 <_strtod_l+0x490>
 80094c8:	9b07      	ldr	r3, [sp, #28]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	3202      	adds	r2, #2
 80094ce:	f103 010c 	add.w	r1, r3, #12
 80094d2:	0092      	lsls	r2, r2, #2
 80094d4:	300c      	adds	r0, #12
 80094d6:	f7fe fd73 	bl	8007fc0 <memcpy>
 80094da:	ec4b ab10 	vmov	d0, sl, fp
 80094de:	aa1a      	add	r2, sp, #104	; 0x68
 80094e0:	a919      	add	r1, sp, #100	; 0x64
 80094e2:	4620      	mov	r0, r4
 80094e4:	f002 fc18 	bl	800bd18 <__d2b>
 80094e8:	ec4b ab18 	vmov	d8, sl, fp
 80094ec:	9018      	str	r0, [sp, #96]	; 0x60
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f aef6 	beq.w	80092e0 <_strtod_l+0x490>
 80094f4:	2101      	movs	r1, #1
 80094f6:	4620      	mov	r0, r4
 80094f8:	f002 f962 	bl	800b7c0 <__i2b>
 80094fc:	4606      	mov	r6, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f aeee 	beq.w	80092e0 <_strtod_l+0x490>
 8009504:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009506:	9904      	ldr	r1, [sp, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	bfab      	itete	ge
 800950c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800950e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009510:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009512:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009516:	bfac      	ite	ge
 8009518:	eb03 0902 	addge.w	r9, r3, r2
 800951c:	1ad7      	sublt	r7, r2, r3
 800951e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009520:	eba3 0801 	sub.w	r8, r3, r1
 8009524:	4490      	add	r8, r2
 8009526:	4ba1      	ldr	r3, [pc, #644]	; (80097ac <_strtod_l+0x95c>)
 8009528:	f108 38ff 	add.w	r8, r8, #4294967295
 800952c:	4598      	cmp	r8, r3
 800952e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009532:	f280 80c7 	bge.w	80096c4 <_strtod_l+0x874>
 8009536:	eba3 0308 	sub.w	r3, r3, r8
 800953a:	2b1f      	cmp	r3, #31
 800953c:	eba2 0203 	sub.w	r2, r2, r3
 8009540:	f04f 0101 	mov.w	r1, #1
 8009544:	f300 80b1 	bgt.w	80096aa <_strtod_l+0x85a>
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	930d      	str	r3, [sp, #52]	; 0x34
 800954e:	2300      	movs	r3, #0
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	eb09 0802 	add.w	r8, r9, r2
 8009556:	9b04      	ldr	r3, [sp, #16]
 8009558:	45c1      	cmp	r9, r8
 800955a:	4417      	add	r7, r2
 800955c:	441f      	add	r7, r3
 800955e:	464b      	mov	r3, r9
 8009560:	bfa8      	it	ge
 8009562:	4643      	movge	r3, r8
 8009564:	42bb      	cmp	r3, r7
 8009566:	bfa8      	it	ge
 8009568:	463b      	movge	r3, r7
 800956a:	2b00      	cmp	r3, #0
 800956c:	bfc2      	ittt	gt
 800956e:	eba8 0803 	subgt.w	r8, r8, r3
 8009572:	1aff      	subgt	r7, r7, r3
 8009574:	eba9 0903 	subgt.w	r9, r9, r3
 8009578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd17      	ble.n	80095ae <_strtod_l+0x75e>
 800957e:	4631      	mov	r1, r6
 8009580:	461a      	mov	r2, r3
 8009582:	4620      	mov	r0, r4
 8009584:	f002 f9dc 	bl	800b940 <__pow5mult>
 8009588:	4606      	mov	r6, r0
 800958a:	2800      	cmp	r0, #0
 800958c:	f43f aea8 	beq.w	80092e0 <_strtod_l+0x490>
 8009590:	4601      	mov	r1, r0
 8009592:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009594:	4620      	mov	r0, r4
 8009596:	f002 f929 	bl	800b7ec <__multiply>
 800959a:	900b      	str	r0, [sp, #44]	; 0x2c
 800959c:	2800      	cmp	r0, #0
 800959e:	f43f ae9f 	beq.w	80092e0 <_strtod_l+0x490>
 80095a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095a4:	4620      	mov	r0, r4
 80095a6:	f002 f809 	bl	800b5bc <_Bfree>
 80095aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ac:	9318      	str	r3, [sp, #96]	; 0x60
 80095ae:	f1b8 0f00 	cmp.w	r8, #0
 80095b2:	f300 808c 	bgt.w	80096ce <_strtod_l+0x87e>
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dd08      	ble.n	80095ce <_strtod_l+0x77e>
 80095bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095be:	9905      	ldr	r1, [sp, #20]
 80095c0:	4620      	mov	r0, r4
 80095c2:	f002 f9bd 	bl	800b940 <__pow5mult>
 80095c6:	9005      	str	r0, [sp, #20]
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f43f ae89 	beq.w	80092e0 <_strtod_l+0x490>
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	dd08      	ble.n	80095e4 <_strtod_l+0x794>
 80095d2:	9905      	ldr	r1, [sp, #20]
 80095d4:	463a      	mov	r2, r7
 80095d6:	4620      	mov	r0, r4
 80095d8:	f002 fa0c 	bl	800b9f4 <__lshift>
 80095dc:	9005      	str	r0, [sp, #20]
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f ae7e 	beq.w	80092e0 <_strtod_l+0x490>
 80095e4:	f1b9 0f00 	cmp.w	r9, #0
 80095e8:	dd08      	ble.n	80095fc <_strtod_l+0x7ac>
 80095ea:	4631      	mov	r1, r6
 80095ec:	464a      	mov	r2, r9
 80095ee:	4620      	mov	r0, r4
 80095f0:	f002 fa00 	bl	800b9f4 <__lshift>
 80095f4:	4606      	mov	r6, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f ae72 	beq.w	80092e0 <_strtod_l+0x490>
 80095fc:	9a05      	ldr	r2, [sp, #20]
 80095fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009600:	4620      	mov	r0, r4
 8009602:	f002 fa83 	bl	800bb0c <__mdiff>
 8009606:	4605      	mov	r5, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	f43f ae69 	beq.w	80092e0 <_strtod_l+0x490>
 800960e:	68c3      	ldr	r3, [r0, #12]
 8009610:	930b      	str	r3, [sp, #44]	; 0x2c
 8009612:	2300      	movs	r3, #0
 8009614:	60c3      	str	r3, [r0, #12]
 8009616:	4631      	mov	r1, r6
 8009618:	f002 fa5c 	bl	800bad4 <__mcmp>
 800961c:	2800      	cmp	r0, #0
 800961e:	da60      	bge.n	80096e2 <_strtod_l+0x892>
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	ea53 030a 	orrs.w	r3, r3, sl
 8009626:	f040 8082 	bne.w	800972e <_strtod_l+0x8de>
 800962a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800962e:	2b00      	cmp	r3, #0
 8009630:	d17d      	bne.n	800972e <_strtod_l+0x8de>
 8009632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009636:	0d1b      	lsrs	r3, r3, #20
 8009638:	051b      	lsls	r3, r3, #20
 800963a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800963e:	d976      	bls.n	800972e <_strtod_l+0x8de>
 8009640:	696b      	ldr	r3, [r5, #20]
 8009642:	b913      	cbnz	r3, 800964a <_strtod_l+0x7fa>
 8009644:	692b      	ldr	r3, [r5, #16]
 8009646:	2b01      	cmp	r3, #1
 8009648:	dd71      	ble.n	800972e <_strtod_l+0x8de>
 800964a:	4629      	mov	r1, r5
 800964c:	2201      	movs	r2, #1
 800964e:	4620      	mov	r0, r4
 8009650:	f002 f9d0 	bl	800b9f4 <__lshift>
 8009654:	4631      	mov	r1, r6
 8009656:	4605      	mov	r5, r0
 8009658:	f002 fa3c 	bl	800bad4 <__mcmp>
 800965c:	2800      	cmp	r0, #0
 800965e:	dd66      	ble.n	800972e <_strtod_l+0x8de>
 8009660:	9904      	ldr	r1, [sp, #16]
 8009662:	4a53      	ldr	r2, [pc, #332]	; (80097b0 <_strtod_l+0x960>)
 8009664:	465b      	mov	r3, fp
 8009666:	2900      	cmp	r1, #0
 8009668:	f000 8081 	beq.w	800976e <_strtod_l+0x91e>
 800966c:	ea02 010b 	and.w	r1, r2, fp
 8009670:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009674:	dc7b      	bgt.n	800976e <_strtod_l+0x91e>
 8009676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800967a:	f77f aea9 	ble.w	80093d0 <_strtod_l+0x580>
 800967e:	4b4d      	ldr	r3, [pc, #308]	; (80097b4 <_strtod_l+0x964>)
 8009680:	4650      	mov	r0, sl
 8009682:	4659      	mov	r1, fp
 8009684:	2200      	movs	r2, #0
 8009686:	f7f6 ffbf 	bl	8000608 <__aeabi_dmul>
 800968a:	460b      	mov	r3, r1
 800968c:	4303      	orrs	r3, r0
 800968e:	bf08      	it	eq
 8009690:	2322      	moveq	r3, #34	; 0x22
 8009692:	4682      	mov	sl, r0
 8009694:	468b      	mov	fp, r1
 8009696:	bf08      	it	eq
 8009698:	6023      	streq	r3, [r4, #0]
 800969a:	e62b      	b.n	80092f4 <_strtod_l+0x4a4>
 800969c:	f04f 32ff 	mov.w	r2, #4294967295
 80096a0:	fa02 f303 	lsl.w	r3, r2, r3
 80096a4:	ea03 0a0a 	and.w	sl, r3, sl
 80096a8:	e6e3      	b.n	8009472 <_strtod_l+0x622>
 80096aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80096ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80096b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80096b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80096ba:	fa01 f308 	lsl.w	r3, r1, r8
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	910d      	str	r1, [sp, #52]	; 0x34
 80096c2:	e746      	b.n	8009552 <_strtod_l+0x702>
 80096c4:	2300      	movs	r3, #0
 80096c6:	9308      	str	r3, [sp, #32]
 80096c8:	2301      	movs	r3, #1
 80096ca:	930d      	str	r3, [sp, #52]	; 0x34
 80096cc:	e741      	b.n	8009552 <_strtod_l+0x702>
 80096ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096d0:	4642      	mov	r2, r8
 80096d2:	4620      	mov	r0, r4
 80096d4:	f002 f98e 	bl	800b9f4 <__lshift>
 80096d8:	9018      	str	r0, [sp, #96]	; 0x60
 80096da:	2800      	cmp	r0, #0
 80096dc:	f47f af6b 	bne.w	80095b6 <_strtod_l+0x766>
 80096e0:	e5fe      	b.n	80092e0 <_strtod_l+0x490>
 80096e2:	465f      	mov	r7, fp
 80096e4:	d16e      	bne.n	80097c4 <_strtod_l+0x974>
 80096e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096ec:	b342      	cbz	r2, 8009740 <_strtod_l+0x8f0>
 80096ee:	4a32      	ldr	r2, [pc, #200]	; (80097b8 <_strtod_l+0x968>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d128      	bne.n	8009746 <_strtod_l+0x8f6>
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	4651      	mov	r1, sl
 80096f8:	b1eb      	cbz	r3, 8009736 <_strtod_l+0x8e6>
 80096fa:	4b2d      	ldr	r3, [pc, #180]	; (80097b0 <_strtod_l+0x960>)
 80096fc:	403b      	ands	r3, r7
 80096fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009702:	f04f 32ff 	mov.w	r2, #4294967295
 8009706:	d819      	bhi.n	800973c <_strtod_l+0x8ec>
 8009708:	0d1b      	lsrs	r3, r3, #20
 800970a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	4299      	cmp	r1, r3
 8009714:	d117      	bne.n	8009746 <_strtod_l+0x8f6>
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <_strtod_l+0x96c>)
 8009718:	429f      	cmp	r7, r3
 800971a:	d102      	bne.n	8009722 <_strtod_l+0x8d2>
 800971c:	3101      	adds	r1, #1
 800971e:	f43f addf 	beq.w	80092e0 <_strtod_l+0x490>
 8009722:	4b23      	ldr	r3, [pc, #140]	; (80097b0 <_strtod_l+0x960>)
 8009724:	403b      	ands	r3, r7
 8009726:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800972a:	f04f 0a00 	mov.w	sl, #0
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1a4      	bne.n	800967e <_strtod_l+0x82e>
 8009734:	e5de      	b.n	80092f4 <_strtod_l+0x4a4>
 8009736:	f04f 33ff 	mov.w	r3, #4294967295
 800973a:	e7ea      	b.n	8009712 <_strtod_l+0x8c2>
 800973c:	4613      	mov	r3, r2
 800973e:	e7e8      	b.n	8009712 <_strtod_l+0x8c2>
 8009740:	ea53 030a 	orrs.w	r3, r3, sl
 8009744:	d08c      	beq.n	8009660 <_strtod_l+0x810>
 8009746:	9b08      	ldr	r3, [sp, #32]
 8009748:	b1db      	cbz	r3, 8009782 <_strtod_l+0x932>
 800974a:	423b      	tst	r3, r7
 800974c:	d0ef      	beq.n	800972e <_strtod_l+0x8de>
 800974e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009750:	9a04      	ldr	r2, [sp, #16]
 8009752:	4650      	mov	r0, sl
 8009754:	4659      	mov	r1, fp
 8009756:	b1c3      	cbz	r3, 800978a <_strtod_l+0x93a>
 8009758:	f7ff fb5e 	bl	8008e18 <sulp>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	ec51 0b18 	vmov	r0, r1, d8
 8009764:	f7f6 fd9a 	bl	800029c <__adddf3>
 8009768:	4682      	mov	sl, r0
 800976a:	468b      	mov	fp, r1
 800976c:	e7df      	b.n	800972e <_strtod_l+0x8de>
 800976e:	4013      	ands	r3, r2
 8009770:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009774:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009778:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800977c:	f04f 3aff 	mov.w	sl, #4294967295
 8009780:	e7d5      	b.n	800972e <_strtod_l+0x8de>
 8009782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009784:	ea13 0f0a 	tst.w	r3, sl
 8009788:	e7e0      	b.n	800974c <_strtod_l+0x8fc>
 800978a:	f7ff fb45 	bl	8008e18 <sulp>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	ec51 0b18 	vmov	r0, r1, d8
 8009796:	f7f6 fd7f 	bl	8000298 <__aeabi_dsub>
 800979a:	2200      	movs	r2, #0
 800979c:	2300      	movs	r3, #0
 800979e:	4682      	mov	sl, r0
 80097a0:	468b      	mov	fp, r1
 80097a2:	f7f7 f999 	bl	8000ad8 <__aeabi_dcmpeq>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d0c1      	beq.n	800972e <_strtod_l+0x8de>
 80097aa:	e611      	b.n	80093d0 <_strtod_l+0x580>
 80097ac:	fffffc02 	.word	0xfffffc02
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	39500000 	.word	0x39500000
 80097b8:	000fffff 	.word	0x000fffff
 80097bc:	7fefffff 	.word	0x7fefffff
 80097c0:	0800cad0 	.word	0x0800cad0
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	f002 fb02 	bl	800bdd0 <__ratio>
 80097cc:	ec59 8b10 	vmov	r8, r9, d0
 80097d0:	ee10 0a10 	vmov	r0, s0
 80097d4:	2200      	movs	r2, #0
 80097d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f7 f990 	bl	8000b00 <__aeabi_dcmple>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d07a      	beq.n	80098da <_strtod_l+0xa8a>
 80097e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d04a      	beq.n	8009880 <_strtod_l+0xa30>
 80097ea:	4b95      	ldr	r3, [pc, #596]	; (8009a40 <_strtod_l+0xbf0>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a40 <_strtod_l+0xbf0>
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	4b92      	ldr	r3, [pc, #584]	; (8009a44 <_strtod_l+0xbf4>)
 80097fc:	403b      	ands	r3, r7
 80097fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009802:	4b91      	ldr	r3, [pc, #580]	; (8009a48 <_strtod_l+0xbf8>)
 8009804:	429a      	cmp	r2, r3
 8009806:	f040 80b0 	bne.w	800996a <_strtod_l+0xb1a>
 800980a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800980e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009812:	ec4b ab10 	vmov	d0, sl, fp
 8009816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800981a:	f002 fa01 	bl	800bc20 <__ulp>
 800981e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009822:	ec53 2b10 	vmov	r2, r3, d0
 8009826:	f7f6 feef 	bl	8000608 <__aeabi_dmul>
 800982a:	4652      	mov	r2, sl
 800982c:	465b      	mov	r3, fp
 800982e:	f7f6 fd35 	bl	800029c <__adddf3>
 8009832:	460b      	mov	r3, r1
 8009834:	4983      	ldr	r1, [pc, #524]	; (8009a44 <_strtod_l+0xbf4>)
 8009836:	4a85      	ldr	r2, [pc, #532]	; (8009a4c <_strtod_l+0xbfc>)
 8009838:	4019      	ands	r1, r3
 800983a:	4291      	cmp	r1, r2
 800983c:	4682      	mov	sl, r0
 800983e:	d960      	bls.n	8009902 <_strtod_l+0xab2>
 8009840:	ee18 3a90 	vmov	r3, s17
 8009844:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009848:	4293      	cmp	r3, r2
 800984a:	d104      	bne.n	8009856 <_strtod_l+0xa06>
 800984c:	ee18 3a10 	vmov	r3, s16
 8009850:	3301      	adds	r3, #1
 8009852:	f43f ad45 	beq.w	80092e0 <_strtod_l+0x490>
 8009856:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009a58 <_strtod_l+0xc08>
 800985a:	f04f 3aff 	mov.w	sl, #4294967295
 800985e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009860:	4620      	mov	r0, r4
 8009862:	f001 feab 	bl	800b5bc <_Bfree>
 8009866:	9905      	ldr	r1, [sp, #20]
 8009868:	4620      	mov	r0, r4
 800986a:	f001 fea7 	bl	800b5bc <_Bfree>
 800986e:	4631      	mov	r1, r6
 8009870:	4620      	mov	r0, r4
 8009872:	f001 fea3 	bl	800b5bc <_Bfree>
 8009876:	4629      	mov	r1, r5
 8009878:	4620      	mov	r0, r4
 800987a:	f001 fe9f 	bl	800b5bc <_Bfree>
 800987e:	e61a      	b.n	80094b6 <_strtod_l+0x666>
 8009880:	f1ba 0f00 	cmp.w	sl, #0
 8009884:	d11b      	bne.n	80098be <_strtod_l+0xa6e>
 8009886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800988a:	b9f3      	cbnz	r3, 80098ca <_strtod_l+0xa7a>
 800988c:	4b6c      	ldr	r3, [pc, #432]	; (8009a40 <_strtod_l+0xbf0>)
 800988e:	2200      	movs	r2, #0
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f7 f92a 	bl	8000aec <__aeabi_dcmplt>
 8009898:	b9d0      	cbnz	r0, 80098d0 <_strtod_l+0xa80>
 800989a:	4640      	mov	r0, r8
 800989c:	4649      	mov	r1, r9
 800989e:	4b6c      	ldr	r3, [pc, #432]	; (8009a50 <_strtod_l+0xc00>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	f7f6 feb1 	bl	8000608 <__aeabi_dmul>
 80098a6:	4680      	mov	r8, r0
 80098a8:	4689      	mov	r9, r1
 80098aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80098b2:	9315      	str	r3, [sp, #84]	; 0x54
 80098b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80098b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098bc:	e79d      	b.n	80097fa <_strtod_l+0x9aa>
 80098be:	f1ba 0f01 	cmp.w	sl, #1
 80098c2:	d102      	bne.n	80098ca <_strtod_l+0xa7a>
 80098c4:	2f00      	cmp	r7, #0
 80098c6:	f43f ad83 	beq.w	80093d0 <_strtod_l+0x580>
 80098ca:	4b62      	ldr	r3, [pc, #392]	; (8009a54 <_strtod_l+0xc04>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	e78e      	b.n	80097ee <_strtod_l+0x99e>
 80098d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009a50 <_strtod_l+0xc00>
 80098d4:	f04f 0800 	mov.w	r8, #0
 80098d8:	e7e7      	b.n	80098aa <_strtod_l+0xa5a>
 80098da:	4b5d      	ldr	r3, [pc, #372]	; (8009a50 <_strtod_l+0xc00>)
 80098dc:	4640      	mov	r0, r8
 80098de:	4649      	mov	r1, r9
 80098e0:	2200      	movs	r2, #0
 80098e2:	f7f6 fe91 	bl	8000608 <__aeabi_dmul>
 80098e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e8:	4680      	mov	r8, r0
 80098ea:	4689      	mov	r9, r1
 80098ec:	b933      	cbnz	r3, 80098fc <_strtod_l+0xaac>
 80098ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098f2:	900e      	str	r0, [sp, #56]	; 0x38
 80098f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80098f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80098fa:	e7dd      	b.n	80098b8 <_strtod_l+0xa68>
 80098fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009900:	e7f9      	b.n	80098f6 <_strtod_l+0xaa6>
 8009902:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1a8      	bne.n	800985e <_strtod_l+0xa0e>
 800990c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009912:	0d1b      	lsrs	r3, r3, #20
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	429a      	cmp	r2, r3
 8009918:	d1a1      	bne.n	800985e <_strtod_l+0xa0e>
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f7 f9d3 	bl	8000cc8 <__aeabi_d2lz>
 8009922:	f7f6 fe43 	bl	80005ac <__aeabi_l2d>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4640      	mov	r0, r8
 800992c:	4649      	mov	r1, r9
 800992e:	f7f6 fcb3 	bl	8000298 <__aeabi_dsub>
 8009932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009938:	ea43 030a 	orr.w	r3, r3, sl
 800993c:	4313      	orrs	r3, r2
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	d055      	beq.n	80099f0 <_strtod_l+0xba0>
 8009944:	a336      	add	r3, pc, #216	; (adr r3, 8009a20 <_strtod_l+0xbd0>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f7 f8cf 	bl	8000aec <__aeabi_dcmplt>
 800994e:	2800      	cmp	r0, #0
 8009950:	f47f acd0 	bne.w	80092f4 <_strtod_l+0x4a4>
 8009954:	a334      	add	r3, pc, #208	; (adr r3, 8009a28 <_strtod_l+0xbd8>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f7 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 8009962:	2800      	cmp	r0, #0
 8009964:	f43f af7b 	beq.w	800985e <_strtod_l+0xa0e>
 8009968:	e4c4      	b.n	80092f4 <_strtod_l+0x4a4>
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	b333      	cbz	r3, 80099bc <_strtod_l+0xb6c>
 800996e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009970:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009974:	d822      	bhi.n	80099bc <_strtod_l+0xb6c>
 8009976:	a32e      	add	r3, pc, #184	; (adr r3, 8009a30 <_strtod_l+0xbe0>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	4640      	mov	r0, r8
 800997e:	4649      	mov	r1, r9
 8009980:	f7f7 f8be 	bl	8000b00 <__aeabi_dcmple>
 8009984:	b1a0      	cbz	r0, 80099b0 <_strtod_l+0xb60>
 8009986:	4649      	mov	r1, r9
 8009988:	4640      	mov	r0, r8
 800998a:	f7f7 f915 	bl	8000bb8 <__aeabi_d2uiz>
 800998e:	2801      	cmp	r0, #1
 8009990:	bf38      	it	cc
 8009992:	2001      	movcc	r0, #1
 8009994:	f7f6 fdbe 	bl	8000514 <__aeabi_ui2d>
 8009998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999a:	4680      	mov	r8, r0
 800999c:	4689      	mov	r9, r1
 800999e:	bb23      	cbnz	r3, 80099ea <_strtod_l+0xb9a>
 80099a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099a4:	9010      	str	r0, [sp, #64]	; 0x40
 80099a6:	9311      	str	r3, [sp, #68]	; 0x44
 80099a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80099b8:	1a9b      	subs	r3, r3, r2
 80099ba:	9309      	str	r3, [sp, #36]	; 0x24
 80099bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099c0:	eeb0 0a48 	vmov.f32	s0, s16
 80099c4:	eef0 0a68 	vmov.f32	s1, s17
 80099c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099cc:	f002 f928 	bl	800bc20 <__ulp>
 80099d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099d4:	ec53 2b10 	vmov	r2, r3, d0
 80099d8:	f7f6 fe16 	bl	8000608 <__aeabi_dmul>
 80099dc:	ec53 2b18 	vmov	r2, r3, d8
 80099e0:	f7f6 fc5c 	bl	800029c <__adddf3>
 80099e4:	4682      	mov	sl, r0
 80099e6:	468b      	mov	fp, r1
 80099e8:	e78d      	b.n	8009906 <_strtod_l+0xab6>
 80099ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80099ee:	e7db      	b.n	80099a8 <_strtod_l+0xb58>
 80099f0:	a311      	add	r3, pc, #68	; (adr r3, 8009a38 <_strtod_l+0xbe8>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f7 f879 	bl	8000aec <__aeabi_dcmplt>
 80099fa:	e7b2      	b.n	8009962 <_strtod_l+0xb12>
 80099fc:	2300      	movs	r3, #0
 80099fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	f7ff ba6b 	b.w	8008ee0 <_strtod_l+0x90>
 8009a0a:	2a65      	cmp	r2, #101	; 0x65
 8009a0c:	f43f ab5f 	beq.w	80090ce <_strtod_l+0x27e>
 8009a10:	2a45      	cmp	r2, #69	; 0x45
 8009a12:	f43f ab5c 	beq.w	80090ce <_strtod_l+0x27e>
 8009a16:	2301      	movs	r3, #1
 8009a18:	f7ff bb94 	b.w	8009144 <_strtod_l+0x2f4>
 8009a1c:	f3af 8000 	nop.w
 8009a20:	94a03595 	.word	0x94a03595
 8009a24:	3fdfffff 	.word	0x3fdfffff
 8009a28:	35afe535 	.word	0x35afe535
 8009a2c:	3fe00000 	.word	0x3fe00000
 8009a30:	ffc00000 	.word	0xffc00000
 8009a34:	41dfffff 	.word	0x41dfffff
 8009a38:	94a03595 	.word	0x94a03595
 8009a3c:	3fcfffff 	.word	0x3fcfffff
 8009a40:	3ff00000 	.word	0x3ff00000
 8009a44:	7ff00000 	.word	0x7ff00000
 8009a48:	7fe00000 	.word	0x7fe00000
 8009a4c:	7c9fffff 	.word	0x7c9fffff
 8009a50:	3fe00000 	.word	0x3fe00000
 8009a54:	bff00000 	.word	0xbff00000
 8009a58:	7fefffff 	.word	0x7fefffff

08009a5c <_strtod_r>:
 8009a5c:	4b01      	ldr	r3, [pc, #4]	; (8009a64 <_strtod_r+0x8>)
 8009a5e:	f7ff b9f7 	b.w	8008e50 <_strtod_l>
 8009a62:	bf00      	nop
 8009a64:	20000078 	.word	0x20000078

08009a68 <_strtol_l.constprop.0>:
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6e:	d001      	beq.n	8009a74 <_strtol_l.constprop.0+0xc>
 8009a70:	2b24      	cmp	r3, #36	; 0x24
 8009a72:	d906      	bls.n	8009a82 <_strtol_l.constprop.0+0x1a>
 8009a74:	f7fe fa7a 	bl	8007f6c <__errno>
 8009a78:	2316      	movs	r3, #22
 8009a7a:	6003      	str	r3, [r0, #0]
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b68 <_strtol_l.constprop.0+0x100>
 8009a86:	460d      	mov	r5, r1
 8009a88:	462e      	mov	r6, r5
 8009a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009a92:	f017 0708 	ands.w	r7, r7, #8
 8009a96:	d1f7      	bne.n	8009a88 <_strtol_l.constprop.0+0x20>
 8009a98:	2c2d      	cmp	r4, #45	; 0x2d
 8009a9a:	d132      	bne.n	8009b02 <_strtol_l.constprop.0+0x9a>
 8009a9c:	782c      	ldrb	r4, [r5, #0]
 8009a9e:	2701      	movs	r7, #1
 8009aa0:	1cb5      	adds	r5, r6, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d05b      	beq.n	8009b5e <_strtol_l.constprop.0+0xf6>
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d109      	bne.n	8009abe <_strtol_l.constprop.0+0x56>
 8009aaa:	2c30      	cmp	r4, #48	; 0x30
 8009aac:	d107      	bne.n	8009abe <_strtol_l.constprop.0+0x56>
 8009aae:	782c      	ldrb	r4, [r5, #0]
 8009ab0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ab4:	2c58      	cmp	r4, #88	; 0x58
 8009ab6:	d14d      	bne.n	8009b54 <_strtol_l.constprop.0+0xec>
 8009ab8:	786c      	ldrb	r4, [r5, #1]
 8009aba:	2310      	movs	r3, #16
 8009abc:	3502      	adds	r5, #2
 8009abe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ac2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ace:	4666      	mov	r6, ip
 8009ad0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ad4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ad8:	f1be 0f09 	cmp.w	lr, #9
 8009adc:	d816      	bhi.n	8009b0c <_strtol_l.constprop.0+0xa4>
 8009ade:	4674      	mov	r4, lr
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	dd24      	ble.n	8009b2e <_strtol_l.constprop.0+0xc6>
 8009ae4:	f1bc 0f00 	cmp.w	ip, #0
 8009ae8:	db1e      	blt.n	8009b28 <_strtol_l.constprop.0+0xc0>
 8009aea:	45b1      	cmp	r9, r6
 8009aec:	d31c      	bcc.n	8009b28 <_strtol_l.constprop.0+0xc0>
 8009aee:	d101      	bne.n	8009af4 <_strtol_l.constprop.0+0x8c>
 8009af0:	45a2      	cmp	sl, r4
 8009af2:	db19      	blt.n	8009b28 <_strtol_l.constprop.0+0xc0>
 8009af4:	fb06 4603 	mla	r6, r6, r3, r4
 8009af8:	f04f 0c01 	mov.w	ip, #1
 8009afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b00:	e7e8      	b.n	8009ad4 <_strtol_l.constprop.0+0x6c>
 8009b02:	2c2b      	cmp	r4, #43	; 0x2b
 8009b04:	bf04      	itt	eq
 8009b06:	782c      	ldrbeq	r4, [r5, #0]
 8009b08:	1cb5      	addeq	r5, r6, #2
 8009b0a:	e7ca      	b.n	8009aa2 <_strtol_l.constprop.0+0x3a>
 8009b0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009b10:	f1be 0f19 	cmp.w	lr, #25
 8009b14:	d801      	bhi.n	8009b1a <_strtol_l.constprop.0+0xb2>
 8009b16:	3c37      	subs	r4, #55	; 0x37
 8009b18:	e7e2      	b.n	8009ae0 <_strtol_l.constprop.0+0x78>
 8009b1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009b1e:	f1be 0f19 	cmp.w	lr, #25
 8009b22:	d804      	bhi.n	8009b2e <_strtol_l.constprop.0+0xc6>
 8009b24:	3c57      	subs	r4, #87	; 0x57
 8009b26:	e7db      	b.n	8009ae0 <_strtol_l.constprop.0+0x78>
 8009b28:	f04f 3cff 	mov.w	ip, #4294967295
 8009b2c:	e7e6      	b.n	8009afc <_strtol_l.constprop.0+0x94>
 8009b2e:	f1bc 0f00 	cmp.w	ip, #0
 8009b32:	da05      	bge.n	8009b40 <_strtol_l.constprop.0+0xd8>
 8009b34:	2322      	movs	r3, #34	; 0x22
 8009b36:	6003      	str	r3, [r0, #0]
 8009b38:	4646      	mov	r6, r8
 8009b3a:	b942      	cbnz	r2, 8009b4e <_strtol_l.constprop.0+0xe6>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	e79e      	b.n	8009a7e <_strtol_l.constprop.0+0x16>
 8009b40:	b107      	cbz	r7, 8009b44 <_strtol_l.constprop.0+0xdc>
 8009b42:	4276      	negs	r6, r6
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	d0f9      	beq.n	8009b3c <_strtol_l.constprop.0+0xd4>
 8009b48:	f1bc 0f00 	cmp.w	ip, #0
 8009b4c:	d000      	beq.n	8009b50 <_strtol_l.constprop.0+0xe8>
 8009b4e:	1e69      	subs	r1, r5, #1
 8009b50:	6011      	str	r1, [r2, #0]
 8009b52:	e7f3      	b.n	8009b3c <_strtol_l.constprop.0+0xd4>
 8009b54:	2430      	movs	r4, #48	; 0x30
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1b1      	bne.n	8009abe <_strtol_l.constprop.0+0x56>
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	e7af      	b.n	8009abe <_strtol_l.constprop.0+0x56>
 8009b5e:	2c30      	cmp	r4, #48	; 0x30
 8009b60:	d0a5      	beq.n	8009aae <_strtol_l.constprop.0+0x46>
 8009b62:	230a      	movs	r3, #10
 8009b64:	e7ab      	b.n	8009abe <_strtol_l.constprop.0+0x56>
 8009b66:	bf00      	nop
 8009b68:	0800caf9 	.word	0x0800caf9

08009b6c <_strtol_r>:
 8009b6c:	f7ff bf7c 	b.w	8009a68 <_strtol_l.constprop.0>

08009b70 <__swbuf_r>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	460e      	mov	r6, r1
 8009b74:	4614      	mov	r4, r2
 8009b76:	4605      	mov	r5, r0
 8009b78:	b118      	cbz	r0, 8009b82 <__swbuf_r+0x12>
 8009b7a:	6983      	ldr	r3, [r0, #24]
 8009b7c:	b90b      	cbnz	r3, 8009b82 <__swbuf_r+0x12>
 8009b7e:	f001 f84b 	bl	800ac18 <__sinit>
 8009b82:	4b21      	ldr	r3, [pc, #132]	; (8009c08 <__swbuf_r+0x98>)
 8009b84:	429c      	cmp	r4, r3
 8009b86:	d12b      	bne.n	8009be0 <__swbuf_r+0x70>
 8009b88:	686c      	ldr	r4, [r5, #4]
 8009b8a:	69a3      	ldr	r3, [r4, #24]
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	071a      	lsls	r2, r3, #28
 8009b92:	d52f      	bpl.n	8009bf4 <__swbuf_r+0x84>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	b36b      	cbz	r3, 8009bf4 <__swbuf_r+0x84>
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	1ac0      	subs	r0, r0, r3
 8009b9e:	6963      	ldr	r3, [r4, #20]
 8009ba0:	b2f6      	uxtb	r6, r6
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	4637      	mov	r7, r6
 8009ba6:	dc04      	bgt.n	8009bb2 <__swbuf_r+0x42>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 ffa0 	bl	800aaf0 <_fflush_r>
 8009bb0:	bb30      	cbnz	r0, 8009c00 <__swbuf_r+0x90>
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	701e      	strb	r6, [r3, #0]
 8009bc0:	6963      	ldr	r3, [r4, #20]
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	4283      	cmp	r3, r0
 8009bc6:	d004      	beq.n	8009bd2 <__swbuf_r+0x62>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d506      	bpl.n	8009bdc <__swbuf_r+0x6c>
 8009bce:	2e0a      	cmp	r6, #10
 8009bd0:	d104      	bne.n	8009bdc <__swbuf_r+0x6c>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 ff8b 	bl	800aaf0 <_fflush_r>
 8009bda:	b988      	cbnz	r0, 8009c00 <__swbuf_r+0x90>
 8009bdc:	4638      	mov	r0, r7
 8009bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <__swbuf_r+0x9c>)
 8009be2:	429c      	cmp	r4, r3
 8009be4:	d101      	bne.n	8009bea <__swbuf_r+0x7a>
 8009be6:	68ac      	ldr	r4, [r5, #8]
 8009be8:	e7cf      	b.n	8009b8a <__swbuf_r+0x1a>
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <__swbuf_r+0xa0>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	bf08      	it	eq
 8009bf0:	68ec      	ldreq	r4, [r5, #12]
 8009bf2:	e7ca      	b.n	8009b8a <__swbuf_r+0x1a>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 f80c 	bl	8009c14 <__swsetup_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0cb      	beq.n	8009b98 <__swbuf_r+0x28>
 8009c00:	f04f 37ff 	mov.w	r7, #4294967295
 8009c04:	e7ea      	b.n	8009bdc <__swbuf_r+0x6c>
 8009c06:	bf00      	nop
 8009c08:	0800ccac 	.word	0x0800ccac
 8009c0c:	0800cccc 	.word	0x0800cccc
 8009c10:	0800cc8c 	.word	0x0800cc8c

08009c14 <__swsetup_r>:
 8009c14:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <__swsetup_r+0xcc>)
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b125      	cbz	r5, 8009c2a <__swsetup_r+0x16>
 8009c20:	69ab      	ldr	r3, [r5, #24]
 8009c22:	b913      	cbnz	r3, 8009c2a <__swsetup_r+0x16>
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 fff7 	bl	800ac18 <__sinit>
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <__swsetup_r+0xd0>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	d10f      	bne.n	8009c50 <__swsetup_r+0x3c>
 8009c30:	686c      	ldr	r4, [r5, #4]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c38:	0719      	lsls	r1, r3, #28
 8009c3a:	d42c      	bmi.n	8009c96 <__swsetup_r+0x82>
 8009c3c:	06dd      	lsls	r5, r3, #27
 8009c3e:	d411      	bmi.n	8009c64 <__swsetup_r+0x50>
 8009c40:	2309      	movs	r3, #9
 8009c42:	6033      	str	r3, [r6, #0]
 8009c44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	e03e      	b.n	8009cce <__swsetup_r+0xba>
 8009c50:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <__swsetup_r+0xd4>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <__swsetup_r+0x46>
 8009c56:	68ac      	ldr	r4, [r5, #8]
 8009c58:	e7eb      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <__swsetup_r+0xd8>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68ec      	ldreq	r4, [r5, #12]
 8009c62:	e7e6      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c64:	0758      	lsls	r0, r3, #29
 8009c66:	d512      	bpl.n	8009c8e <__swsetup_r+0x7a>
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	b141      	cbz	r1, 8009c7e <__swsetup_r+0x6a>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__swsetup_r+0x66>
 8009c74:	4630      	mov	r0, r6
 8009c76:	f002 f939 	bl	800beec <_free_r>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	2300      	movs	r3, #0
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0308 	orr.w	r3, r3, #8
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	b94b      	cbnz	r3, 8009cae <__swsetup_r+0x9a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca4:	d003      	beq.n	8009cae <__swsetup_r+0x9a>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f001 fbed 	bl	800b488 <__smakebuf_r>
 8009cae:	89a0      	ldrh	r0, [r4, #12]
 8009cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb4:	f010 0301 	ands.w	r3, r0, #1
 8009cb8:	d00a      	beq.n	8009cd0 <__swsetup_r+0xbc>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	61a3      	str	r3, [r4, #24]
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	b943      	cbnz	r3, 8009cda <__swsetup_r+0xc6>
 8009cc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ccc:	d1ba      	bne.n	8009c44 <__swsetup_r+0x30>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	0781      	lsls	r1, r0, #30
 8009cd2:	bf58      	it	pl
 8009cd4:	6963      	ldrpl	r3, [r4, #20]
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	e7f4      	b.n	8009cc4 <__swsetup_r+0xb0>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7f7      	b.n	8009cce <__swsetup_r+0xba>
 8009cde:	bf00      	nop
 8009ce0:	20000010 	.word	0x20000010
 8009ce4:	0800ccac 	.word	0x0800ccac
 8009ce8:	0800cccc 	.word	0x0800cccc
 8009cec:	0800cc8c 	.word	0x0800cc8c

08009cf0 <quorem>:
 8009cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	6903      	ldr	r3, [r0, #16]
 8009cf6:	690c      	ldr	r4, [r1, #16]
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	4607      	mov	r7, r0
 8009cfc:	f2c0 8081 	blt.w	8009e02 <quorem+0x112>
 8009d00:	3c01      	subs	r4, #1
 8009d02:	f101 0814 	add.w	r8, r1, #20
 8009d06:	f100 0514 	add.w	r5, r0, #20
 8009d0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d24:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d28:	d331      	bcc.n	8009d8e <quorem+0x9e>
 8009d2a:	f04f 0e00 	mov.w	lr, #0
 8009d2e:	4640      	mov	r0, r8
 8009d30:	46ac      	mov	ip, r5
 8009d32:	46f2      	mov	sl, lr
 8009d34:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d38:	b293      	uxth	r3, r2
 8009d3a:	fb06 e303 	mla	r3, r6, r3, lr
 8009d3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	ebaa 0303 	sub.w	r3, sl, r3
 8009d48:	f8dc a000 	ldr.w	sl, [ip]
 8009d4c:	0c12      	lsrs	r2, r2, #16
 8009d4e:	fa13 f38a 	uxtah	r3, r3, sl
 8009d52:	fb06 e202 	mla	r2, r6, r2, lr
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d68:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d6c:	4581      	cmp	r9, r0
 8009d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d72:	f84c 3b04 	str.w	r3, [ip], #4
 8009d76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d7a:	d2db      	bcs.n	8009d34 <quorem+0x44>
 8009d7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d80:	b92b      	cbnz	r3, 8009d8e <quorem+0x9e>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	429d      	cmp	r5, r3
 8009d88:	461a      	mov	r2, r3
 8009d8a:	d32e      	bcc.n	8009dea <quorem+0xfa>
 8009d8c:	613c      	str	r4, [r7, #16]
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f001 fea0 	bl	800bad4 <__mcmp>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	db24      	blt.n	8009de2 <quorem+0xf2>
 8009d98:	3601      	adds	r6, #1
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f04f 0c00 	mov.w	ip, #0
 8009da0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009da4:	f8d0 e000 	ldr.w	lr, [r0]
 8009da8:	b293      	uxth	r3, r2
 8009daa:	ebac 0303 	sub.w	r3, ip, r3
 8009dae:	0c12      	lsrs	r2, r2, #16
 8009db0:	fa13 f38e 	uxtah	r3, r3, lr
 8009db4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dc2:	45c1      	cmp	r9, r8
 8009dc4:	f840 3b04 	str.w	r3, [r0], #4
 8009dc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009dcc:	d2e8      	bcs.n	8009da0 <quorem+0xb0>
 8009dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd6:	b922      	cbnz	r2, 8009de2 <quorem+0xf2>
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	d30a      	bcc.n	8009df6 <quorem+0x106>
 8009de0:	613c      	str	r4, [r7, #16]
 8009de2:	4630      	mov	r0, r6
 8009de4:	b003      	add	sp, #12
 8009de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dea:	6812      	ldr	r2, [r2, #0]
 8009dec:	3b04      	subs	r3, #4
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	d1cc      	bne.n	8009d8c <quorem+0x9c>
 8009df2:	3c01      	subs	r4, #1
 8009df4:	e7c7      	b.n	8009d86 <quorem+0x96>
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d1f0      	bne.n	8009de0 <quorem+0xf0>
 8009dfe:	3c01      	subs	r4, #1
 8009e00:	e7eb      	b.n	8009dda <quorem+0xea>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e7ee      	b.n	8009de4 <quorem+0xf4>
	...

08009e08 <_dtoa_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	ed2d 8b04 	vpush	{d8-d9}
 8009e10:	ec57 6b10 	vmov	r6, r7, d0
 8009e14:	b093      	sub	sp, #76	; 0x4c
 8009e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e1c:	9106      	str	r1, [sp, #24]
 8009e1e:	ee10 aa10 	vmov	sl, s0
 8009e22:	4604      	mov	r4, r0
 8009e24:	9209      	str	r2, [sp, #36]	; 0x24
 8009e26:	930c      	str	r3, [sp, #48]	; 0x30
 8009e28:	46bb      	mov	fp, r7
 8009e2a:	b975      	cbnz	r5, 8009e4a <_dtoa_r+0x42>
 8009e2c:	2010      	movs	r0, #16
 8009e2e:	f001 fb6b 	bl	800b508 <malloc>
 8009e32:	4602      	mov	r2, r0
 8009e34:	6260      	str	r0, [r4, #36]	; 0x24
 8009e36:	b920      	cbnz	r0, 8009e42 <_dtoa_r+0x3a>
 8009e38:	4ba7      	ldr	r3, [pc, #668]	; (800a0d8 <_dtoa_r+0x2d0>)
 8009e3a:	21ea      	movs	r1, #234	; 0xea
 8009e3c:	48a7      	ldr	r0, [pc, #668]	; (800a0dc <_dtoa_r+0x2d4>)
 8009e3e:	f002 fb21 	bl	800c484 <__assert_func>
 8009e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e46:	6005      	str	r5, [r0, #0]
 8009e48:	60c5      	str	r5, [r0, #12]
 8009e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	b151      	cbz	r1, 8009e66 <_dtoa_r+0x5e>
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	604a      	str	r2, [r1, #4]
 8009e54:	2301      	movs	r3, #1
 8009e56:	4093      	lsls	r3, r2
 8009e58:	608b      	str	r3, [r1, #8]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f001 fbae 	bl	800b5bc <_Bfree>
 8009e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	1e3b      	subs	r3, r7, #0
 8009e68:	bfaa      	itet	ge
 8009e6a:	2300      	movge	r3, #0
 8009e6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e70:	f8c8 3000 	strge.w	r3, [r8]
 8009e74:	4b9a      	ldr	r3, [pc, #616]	; (800a0e0 <_dtoa_r+0x2d8>)
 8009e76:	bfbc      	itt	lt
 8009e78:	2201      	movlt	r2, #1
 8009e7a:	f8c8 2000 	strlt.w	r2, [r8]
 8009e7e:	ea33 030b 	bics.w	r3, r3, fp
 8009e82:	d11b      	bne.n	8009ebc <_dtoa_r+0xb4>
 8009e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e90:	4333      	orrs	r3, r6
 8009e92:	f000 8592 	beq.w	800a9ba <_dtoa_r+0xbb2>
 8009e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e98:	b963      	cbnz	r3, 8009eb4 <_dtoa_r+0xac>
 8009e9a:	4b92      	ldr	r3, [pc, #584]	; (800a0e4 <_dtoa_r+0x2dc>)
 8009e9c:	e022      	b.n	8009ee4 <_dtoa_r+0xdc>
 8009e9e:	4b92      	ldr	r3, [pc, #584]	; (800a0e8 <_dtoa_r+0x2e0>)
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	9801      	ldr	r0, [sp, #4]
 8009eaa:	b013      	add	sp, #76	; 0x4c
 8009eac:	ecbd 8b04 	vpop	{d8-d9}
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	4b8b      	ldr	r3, [pc, #556]	; (800a0e4 <_dtoa_r+0x2dc>)
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	3303      	adds	r3, #3
 8009eba:	e7f3      	b.n	8009ea4 <_dtoa_r+0x9c>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	f7f6 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ec8:	ec4b ab19 	vmov	d9, sl, fp
 8009ecc:	4680      	mov	r8, r0
 8009ece:	b158      	cbz	r0, 8009ee8 <_dtoa_r+0xe0>
 8009ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 856b 	beq.w	800a9b4 <_dtoa_r+0xbac>
 8009ede:	4883      	ldr	r0, [pc, #524]	; (800a0ec <_dtoa_r+0x2e4>)
 8009ee0:	6018      	str	r0, [r3, #0]
 8009ee2:	1e43      	subs	r3, r0, #1
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	e7df      	b.n	8009ea8 <_dtoa_r+0xa0>
 8009ee8:	ec4b ab10 	vmov	d0, sl, fp
 8009eec:	aa10      	add	r2, sp, #64	; 0x40
 8009eee:	a911      	add	r1, sp, #68	; 0x44
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f001 ff11 	bl	800bd18 <__d2b>
 8009ef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009efa:	ee08 0a10 	vmov	s16, r0
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	f000 8084 	beq.w	800a00c <_dtoa_r+0x204>
 8009f04:	ee19 3a90 	vmov	r3, s19
 8009f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f10:	4656      	mov	r6, sl
 8009f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f1e:	4b74      	ldr	r3, [pc, #464]	; (800a0f0 <_dtoa_r+0x2e8>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 f9b7 	bl	8000298 <__aeabi_dsub>
 8009f2a:	a365      	add	r3, pc, #404	; (adr r3, 800a0c0 <_dtoa_r+0x2b8>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fb6a 	bl	8000608 <__aeabi_dmul>
 8009f34:	a364      	add	r3, pc, #400	; (adr r3, 800a0c8 <_dtoa_r+0x2c0>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 f9af 	bl	800029c <__adddf3>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	4628      	mov	r0, r5
 8009f42:	460f      	mov	r7, r1
 8009f44:	f7f6 faf6 	bl	8000534 <__aeabi_i2d>
 8009f48:	a361      	add	r3, pc, #388	; (adr r3, 800a0d0 <_dtoa_r+0x2c8>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fb5b 	bl	8000608 <__aeabi_dmul>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 f99f 	bl	800029c <__adddf3>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	f7f6 fe01 	bl	8000b68 <__aeabi_d2iz>
 8009f66:	2200      	movs	r2, #0
 8009f68:	9000      	str	r0, [sp, #0]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8009f74:	b150      	cbz	r0, 8009f8c <_dtoa_r+0x184>
 8009f76:	9800      	ldr	r0, [sp, #0]
 8009f78:	f7f6 fadc 	bl	8000534 <__aeabi_i2d>
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	f7f6 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f84:	b910      	cbnz	r0, 8009f8c <_dtoa_r+0x184>
 8009f86:	9b00      	ldr	r3, [sp, #0]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	2b16      	cmp	r3, #22
 8009f90:	d85a      	bhi.n	800a048 <_dtoa_r+0x240>
 8009f92:	9a00      	ldr	r2, [sp, #0]
 8009f94:	4b57      	ldr	r3, [pc, #348]	; (800a0f4 <_dtoa_r+0x2ec>)
 8009f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	ec51 0b19 	vmov	r0, r1, d9
 8009fa2:	f7f6 fda3 	bl	8000aec <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d050      	beq.n	800a04c <_dtoa_r+0x244>
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fb6:	1b5d      	subs	r5, r3, r5
 8009fb8:	1e6b      	subs	r3, r5, #1
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	bf45      	ittet	mi
 8009fbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fc2:	9304      	strmi	r3, [sp, #16]
 8009fc4:	2300      	movpl	r3, #0
 8009fc6:	2300      	movmi	r3, #0
 8009fc8:	bf4c      	ite	mi
 8009fca:	9305      	strmi	r3, [sp, #20]
 8009fcc:	9304      	strpl	r3, [sp, #16]
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	db3d      	blt.n	800a050 <_dtoa_r+0x248>
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	9a00      	ldr	r2, [sp, #0]
 8009fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8009fda:	4413      	add	r3, r2
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	9307      	str	r3, [sp, #28]
 8009fe2:	9b06      	ldr	r3, [sp, #24]
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	f200 8089 	bhi.w	800a0fc <_dtoa_r+0x2f4>
 8009fea:	2b05      	cmp	r3, #5
 8009fec:	bfc4      	itt	gt
 8009fee:	3b04      	subgt	r3, #4
 8009ff0:	9306      	strgt	r3, [sp, #24]
 8009ff2:	9b06      	ldr	r3, [sp, #24]
 8009ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ff8:	bfcc      	ite	gt
 8009ffa:	2500      	movgt	r5, #0
 8009ffc:	2501      	movle	r5, #1
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	f200 8087 	bhi.w	800a112 <_dtoa_r+0x30a>
 800a004:	e8df f003 	tbb	[pc, r3]
 800a008:	59383a2d 	.word	0x59383a2d
 800a00c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a010:	441d      	add	r5, r3
 800a012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a016:	2b20      	cmp	r3, #32
 800a018:	bfc1      	itttt	gt
 800a01a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a01e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a022:	fa0b f303 	lslgt.w	r3, fp, r3
 800a026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a02a:	bfda      	itte	le
 800a02c:	f1c3 0320 	rsble	r3, r3, #32
 800a030:	fa06 f003 	lslle.w	r0, r6, r3
 800a034:	4318      	orrgt	r0, r3
 800a036:	f7f6 fa6d 	bl	8000514 <__aeabi_ui2d>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4606      	mov	r6, r0
 800a03e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a042:	3d01      	subs	r5, #1
 800a044:	930e      	str	r3, [sp, #56]	; 0x38
 800a046:	e76a      	b.n	8009f1e <_dtoa_r+0x116>
 800a048:	2301      	movs	r3, #1
 800a04a:	e7b2      	b.n	8009fb2 <_dtoa_r+0x1aa>
 800a04c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a04e:	e7b1      	b.n	8009fb4 <_dtoa_r+0x1ac>
 800a050:	9b04      	ldr	r3, [sp, #16]
 800a052:	9a00      	ldr	r2, [sp, #0]
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	4253      	negs	r3, r2
 800a05a:	9307      	str	r3, [sp, #28]
 800a05c:	2300      	movs	r3, #0
 800a05e:	930a      	str	r3, [sp, #40]	; 0x28
 800a060:	e7bf      	b.n	8009fe2 <_dtoa_r+0x1da>
 800a062:	2300      	movs	r3, #0
 800a064:	9308      	str	r3, [sp, #32]
 800a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc55      	bgt.n	800a118 <_dtoa_r+0x310>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a072:	461a      	mov	r2, r3
 800a074:	9209      	str	r2, [sp, #36]	; 0x24
 800a076:	e00c      	b.n	800a092 <_dtoa_r+0x28a>
 800a078:	2301      	movs	r3, #1
 800a07a:	e7f3      	b.n	800a064 <_dtoa_r+0x25c>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a080:	9308      	str	r3, [sp, #32]
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	4413      	add	r3, r2
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	3301      	adds	r3, #1
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	bfb8      	it	lt
 800a090:	2301      	movlt	r3, #1
 800a092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a094:	2200      	movs	r2, #0
 800a096:	6042      	str	r2, [r0, #4]
 800a098:	2204      	movs	r2, #4
 800a09a:	f102 0614 	add.w	r6, r2, #20
 800a09e:	429e      	cmp	r6, r3
 800a0a0:	6841      	ldr	r1, [r0, #4]
 800a0a2:	d93d      	bls.n	800a120 <_dtoa_r+0x318>
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f001 fa49 	bl	800b53c <_Balloc>
 800a0aa:	9001      	str	r0, [sp, #4]
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d13b      	bne.n	800a128 <_dtoa_r+0x320>
 800a0b0:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <_dtoa_r+0x2f0>)
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0b8:	e6c0      	b.n	8009e3c <_dtoa_r+0x34>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e7df      	b.n	800a07e <_dtoa_r+0x276>
 800a0be:	bf00      	nop
 800a0c0:	636f4361 	.word	0x636f4361
 800a0c4:	3fd287a7 	.word	0x3fd287a7
 800a0c8:	8b60c8b3 	.word	0x8b60c8b3
 800a0cc:	3fc68a28 	.word	0x3fc68a28
 800a0d0:	509f79fb 	.word	0x509f79fb
 800a0d4:	3fd34413 	.word	0x3fd34413
 800a0d8:	0800cc06 	.word	0x0800cc06
 800a0dc:	0800cc1d 	.word	0x0800cc1d
 800a0e0:	7ff00000 	.word	0x7ff00000
 800a0e4:	0800cc02 	.word	0x0800cc02
 800a0e8:	0800cbf9 	.word	0x0800cbf9
 800a0ec:	0800ca79 	.word	0x0800ca79
 800a0f0:	3ff80000 	.word	0x3ff80000
 800a0f4:	0800cdf0 	.word	0x0800cdf0
 800a0f8:	0800cc78 	.word	0x0800cc78
 800a0fc:	2501      	movs	r5, #1
 800a0fe:	2300      	movs	r3, #0
 800a100:	9306      	str	r3, [sp, #24]
 800a102:	9508      	str	r5, [sp, #32]
 800a104:	f04f 33ff 	mov.w	r3, #4294967295
 800a108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a10c:	2200      	movs	r2, #0
 800a10e:	2312      	movs	r3, #18
 800a110:	e7b0      	b.n	800a074 <_dtoa_r+0x26c>
 800a112:	2301      	movs	r3, #1
 800a114:	9308      	str	r3, [sp, #32]
 800a116:	e7f5      	b.n	800a104 <_dtoa_r+0x2fc>
 800a118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a11e:	e7b8      	b.n	800a092 <_dtoa_r+0x28a>
 800a120:	3101      	adds	r1, #1
 800a122:	6041      	str	r1, [r0, #4]
 800a124:	0052      	lsls	r2, r2, #1
 800a126:	e7b8      	b.n	800a09a <_dtoa_r+0x292>
 800a128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a12a:	9a01      	ldr	r2, [sp, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	2b0e      	cmp	r3, #14
 800a132:	f200 809d 	bhi.w	800a270 <_dtoa_r+0x468>
 800a136:	2d00      	cmp	r5, #0
 800a138:	f000 809a 	beq.w	800a270 <_dtoa_r+0x468>
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dd32      	ble.n	800a1a8 <_dtoa_r+0x3a0>
 800a142:	4ab7      	ldr	r2, [pc, #732]	; (800a420 <_dtoa_r+0x618>)
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a14c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a150:	9b00      	ldr	r3, [sp, #0]
 800a152:	05d8      	lsls	r0, r3, #23
 800a154:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a158:	d516      	bpl.n	800a188 <_dtoa_r+0x380>
 800a15a:	4bb2      	ldr	r3, [pc, #712]	; (800a424 <_dtoa_r+0x61c>)
 800a15c:	ec51 0b19 	vmov	r0, r1, d9
 800a160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a164:	f7f6 fb7a 	bl	800085c <__aeabi_ddiv>
 800a168:	f007 070f 	and.w	r7, r7, #15
 800a16c:	4682      	mov	sl, r0
 800a16e:	468b      	mov	fp, r1
 800a170:	2503      	movs	r5, #3
 800a172:	4eac      	ldr	r6, [pc, #688]	; (800a424 <_dtoa_r+0x61c>)
 800a174:	b957      	cbnz	r7, 800a18c <_dtoa_r+0x384>
 800a176:	4642      	mov	r2, r8
 800a178:	464b      	mov	r3, r9
 800a17a:	4650      	mov	r0, sl
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 fb6d 	bl	800085c <__aeabi_ddiv>
 800a182:	4682      	mov	sl, r0
 800a184:	468b      	mov	fp, r1
 800a186:	e028      	b.n	800a1da <_dtoa_r+0x3d2>
 800a188:	2502      	movs	r5, #2
 800a18a:	e7f2      	b.n	800a172 <_dtoa_r+0x36a>
 800a18c:	07f9      	lsls	r1, r7, #31
 800a18e:	d508      	bpl.n	800a1a2 <_dtoa_r+0x39a>
 800a190:	4640      	mov	r0, r8
 800a192:	4649      	mov	r1, r9
 800a194:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a198:	f7f6 fa36 	bl	8000608 <__aeabi_dmul>
 800a19c:	3501      	adds	r5, #1
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4689      	mov	r9, r1
 800a1a2:	107f      	asrs	r7, r7, #1
 800a1a4:	3608      	adds	r6, #8
 800a1a6:	e7e5      	b.n	800a174 <_dtoa_r+0x36c>
 800a1a8:	f000 809b 	beq.w	800a2e2 <_dtoa_r+0x4da>
 800a1ac:	9b00      	ldr	r3, [sp, #0]
 800a1ae:	4f9d      	ldr	r7, [pc, #628]	; (800a424 <_dtoa_r+0x61c>)
 800a1b0:	425e      	negs	r6, r3
 800a1b2:	4b9b      	ldr	r3, [pc, #620]	; (800a420 <_dtoa_r+0x618>)
 800a1b4:	f006 020f 	and.w	r2, r6, #15
 800a1b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	ec51 0b19 	vmov	r0, r1, d9
 800a1c4:	f7f6 fa20 	bl	8000608 <__aeabi_dmul>
 800a1c8:	1136      	asrs	r6, r6, #4
 800a1ca:	4682      	mov	sl, r0
 800a1cc:	468b      	mov	fp, r1
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	2502      	movs	r5, #2
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	d17a      	bne.n	800a2cc <_dtoa_r+0x4c4>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1d3      	bne.n	800a182 <_dtoa_r+0x37a>
 800a1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 8082 	beq.w	800a2e6 <_dtoa_r+0x4de>
 800a1e2:	4b91      	ldr	r3, [pc, #580]	; (800a428 <_dtoa_r+0x620>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4650      	mov	r0, sl
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	f7f6 fc7f 	bl	8000aec <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d079      	beq.n	800a2e6 <_dtoa_r+0x4de>
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d076      	beq.n	800a2e6 <_dtoa_r+0x4de>
 800a1f8:	9b02      	ldr	r3, [sp, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	dd36      	ble.n	800a26c <_dtoa_r+0x464>
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	4650      	mov	r0, sl
 800a202:	4659      	mov	r1, fp
 800a204:	1e5f      	subs	r7, r3, #1
 800a206:	2200      	movs	r2, #0
 800a208:	4b88      	ldr	r3, [pc, #544]	; (800a42c <_dtoa_r+0x624>)
 800a20a:	f7f6 f9fd 	bl	8000608 <__aeabi_dmul>
 800a20e:	9e02      	ldr	r6, [sp, #8]
 800a210:	4682      	mov	sl, r0
 800a212:	468b      	mov	fp, r1
 800a214:	3501      	adds	r5, #1
 800a216:	4628      	mov	r0, r5
 800a218:	f7f6 f98c 	bl	8000534 <__aeabi_i2d>
 800a21c:	4652      	mov	r2, sl
 800a21e:	465b      	mov	r3, fp
 800a220:	f7f6 f9f2 	bl	8000608 <__aeabi_dmul>
 800a224:	4b82      	ldr	r3, [pc, #520]	; (800a430 <_dtoa_r+0x628>)
 800a226:	2200      	movs	r2, #0
 800a228:	f7f6 f838 	bl	800029c <__adddf3>
 800a22c:	46d0      	mov	r8, sl
 800a22e:	46d9      	mov	r9, fp
 800a230:	4682      	mov	sl, r0
 800a232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a236:	2e00      	cmp	r6, #0
 800a238:	d158      	bne.n	800a2ec <_dtoa_r+0x4e4>
 800a23a:	4b7e      	ldr	r3, [pc, #504]	; (800a434 <_dtoa_r+0x62c>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f7f6 f829 	bl	8000298 <__aeabi_dsub>
 800a246:	4652      	mov	r2, sl
 800a248:	465b      	mov	r3, fp
 800a24a:	4680      	mov	r8, r0
 800a24c:	4689      	mov	r9, r1
 800a24e:	f7f6 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a252:	2800      	cmp	r0, #0
 800a254:	f040 8295 	bne.w	800a782 <_dtoa_r+0x97a>
 800a258:	4652      	mov	r2, sl
 800a25a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a25e:	4640      	mov	r0, r8
 800a260:	4649      	mov	r1, r9
 800a262:	f7f6 fc43 	bl	8000aec <__aeabi_dcmplt>
 800a266:	2800      	cmp	r0, #0
 800a268:	f040 8289 	bne.w	800a77e <_dtoa_r+0x976>
 800a26c:	ec5b ab19 	vmov	sl, fp, d9
 800a270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a272:	2b00      	cmp	r3, #0
 800a274:	f2c0 8148 	blt.w	800a508 <_dtoa_r+0x700>
 800a278:	9a00      	ldr	r2, [sp, #0]
 800a27a:	2a0e      	cmp	r2, #14
 800a27c:	f300 8144 	bgt.w	800a508 <_dtoa_r+0x700>
 800a280:	4b67      	ldr	r3, [pc, #412]	; (800a420 <_dtoa_r+0x618>)
 800a282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f280 80d5 	bge.w	800a43c <_dtoa_r+0x634>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f300 80d1 	bgt.w	800a43c <_dtoa_r+0x634>
 800a29a:	f040 826f 	bne.w	800a77c <_dtoa_r+0x974>
 800a29e:	4b65      	ldr	r3, [pc, #404]	; (800a434 <_dtoa_r+0x62c>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	f7f6 fc31 	bl	8000b14 <__aeabi_dcmpge>
 800a2b2:	9e03      	ldr	r6, [sp, #12]
 800a2b4:	4637      	mov	r7, r6
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f040 8245 	bne.w	800a746 <_dtoa_r+0x93e>
 800a2bc:	9d01      	ldr	r5, [sp, #4]
 800a2be:	2331      	movs	r3, #49	; 0x31
 800a2c0:	f805 3b01 	strb.w	r3, [r5], #1
 800a2c4:	9b00      	ldr	r3, [sp, #0]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	e240      	b.n	800a74e <_dtoa_r+0x946>
 800a2cc:	07f2      	lsls	r2, r6, #31
 800a2ce:	d505      	bpl.n	800a2dc <_dtoa_r+0x4d4>
 800a2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d4:	f7f6 f998 	bl	8000608 <__aeabi_dmul>
 800a2d8:	3501      	adds	r5, #1
 800a2da:	2301      	movs	r3, #1
 800a2dc:	1076      	asrs	r6, r6, #1
 800a2de:	3708      	adds	r7, #8
 800a2e0:	e777      	b.n	800a1d2 <_dtoa_r+0x3ca>
 800a2e2:	2502      	movs	r5, #2
 800a2e4:	e779      	b.n	800a1da <_dtoa_r+0x3d2>
 800a2e6:	9f00      	ldr	r7, [sp, #0]
 800a2e8:	9e03      	ldr	r6, [sp, #12]
 800a2ea:	e794      	b.n	800a216 <_dtoa_r+0x40e>
 800a2ec:	9901      	ldr	r1, [sp, #4]
 800a2ee:	4b4c      	ldr	r3, [pc, #304]	; (800a420 <_dtoa_r+0x618>)
 800a2f0:	4431      	add	r1, r6
 800a2f2:	910d      	str	r1, [sp, #52]	; 0x34
 800a2f4:	9908      	ldr	r1, [sp, #32]
 800a2f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2fe:	2900      	cmp	r1, #0
 800a300:	d043      	beq.n	800a38a <_dtoa_r+0x582>
 800a302:	494d      	ldr	r1, [pc, #308]	; (800a438 <_dtoa_r+0x630>)
 800a304:	2000      	movs	r0, #0
 800a306:	f7f6 faa9 	bl	800085c <__aeabi_ddiv>
 800a30a:	4652      	mov	r2, sl
 800a30c:	465b      	mov	r3, fp
 800a30e:	f7f5 ffc3 	bl	8000298 <__aeabi_dsub>
 800a312:	9d01      	ldr	r5, [sp, #4]
 800a314:	4682      	mov	sl, r0
 800a316:	468b      	mov	fp, r1
 800a318:	4649      	mov	r1, r9
 800a31a:	4640      	mov	r0, r8
 800a31c:	f7f6 fc24 	bl	8000b68 <__aeabi_d2iz>
 800a320:	4606      	mov	r6, r0
 800a322:	f7f6 f907 	bl	8000534 <__aeabi_i2d>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4640      	mov	r0, r8
 800a32c:	4649      	mov	r1, r9
 800a32e:	f7f5 ffb3 	bl	8000298 <__aeabi_dsub>
 800a332:	3630      	adds	r6, #48	; 0x30
 800a334:	f805 6b01 	strb.w	r6, [r5], #1
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	4680      	mov	r8, r0
 800a33e:	4689      	mov	r9, r1
 800a340:	f7f6 fbd4 	bl	8000aec <__aeabi_dcmplt>
 800a344:	2800      	cmp	r0, #0
 800a346:	d163      	bne.n	800a410 <_dtoa_r+0x608>
 800a348:	4642      	mov	r2, r8
 800a34a:	464b      	mov	r3, r9
 800a34c:	4936      	ldr	r1, [pc, #216]	; (800a428 <_dtoa_r+0x620>)
 800a34e:	2000      	movs	r0, #0
 800a350:	f7f5 ffa2 	bl	8000298 <__aeabi_dsub>
 800a354:	4652      	mov	r2, sl
 800a356:	465b      	mov	r3, fp
 800a358:	f7f6 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f040 80b5 	bne.w	800a4cc <_dtoa_r+0x6c4>
 800a362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a364:	429d      	cmp	r5, r3
 800a366:	d081      	beq.n	800a26c <_dtoa_r+0x464>
 800a368:	4b30      	ldr	r3, [pc, #192]	; (800a42c <_dtoa_r+0x624>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	4650      	mov	r0, sl
 800a36e:	4659      	mov	r1, fp
 800a370:	f7f6 f94a 	bl	8000608 <__aeabi_dmul>
 800a374:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <_dtoa_r+0x624>)
 800a376:	4682      	mov	sl, r0
 800a378:	468b      	mov	fp, r1
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	2200      	movs	r2, #0
 800a380:	f7f6 f942 	bl	8000608 <__aeabi_dmul>
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	e7c6      	b.n	800a318 <_dtoa_r+0x510>
 800a38a:	4650      	mov	r0, sl
 800a38c:	4659      	mov	r1, fp
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a394:	9d01      	ldr	r5, [sp, #4]
 800a396:	930f      	str	r3, [sp, #60]	; 0x3c
 800a398:	4682      	mov	sl, r0
 800a39a:	468b      	mov	fp, r1
 800a39c:	4649      	mov	r1, r9
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7f6 fbe2 	bl	8000b68 <__aeabi_d2iz>
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	f7f6 f8c5 	bl	8000534 <__aeabi_i2d>
 800a3aa:	3630      	adds	r6, #48	; 0x30
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	f7f5 ff70 	bl	8000298 <__aeabi_dsub>
 800a3b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a3bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	4689      	mov	r9, r1
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	d124      	bne.n	800a414 <_dtoa_r+0x60c>
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <_dtoa_r+0x630>)
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	f7f5 ff64 	bl	800029c <__adddf3>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 fba4 	bl	8000b28 <__aeabi_dcmpgt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d173      	bne.n	800a4cc <_dtoa_r+0x6c4>
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	465b      	mov	r3, fp
 800a3e8:	4913      	ldr	r1, [pc, #76]	; (800a438 <_dtoa_r+0x630>)
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	f7f5 ff54 	bl	8000298 <__aeabi_dsub>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	f7f6 fb78 	bl	8000aec <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f43f af35 	beq.w	800a26c <_dtoa_r+0x464>
 800a402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a404:	1e6b      	subs	r3, r5, #1
 800a406:	930f      	str	r3, [sp, #60]	; 0x3c
 800a408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a40c:	2b30      	cmp	r3, #48	; 0x30
 800a40e:	d0f8      	beq.n	800a402 <_dtoa_r+0x5fa>
 800a410:	9700      	str	r7, [sp, #0]
 800a412:	e049      	b.n	800a4a8 <_dtoa_r+0x6a0>
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <_dtoa_r+0x624>)
 800a416:	f7f6 f8f7 	bl	8000608 <__aeabi_dmul>
 800a41a:	4680      	mov	r8, r0
 800a41c:	4689      	mov	r9, r1
 800a41e:	e7bd      	b.n	800a39c <_dtoa_r+0x594>
 800a420:	0800cdf0 	.word	0x0800cdf0
 800a424:	0800cdc8 	.word	0x0800cdc8
 800a428:	3ff00000 	.word	0x3ff00000
 800a42c:	40240000 	.word	0x40240000
 800a430:	401c0000 	.word	0x401c0000
 800a434:	40140000 	.word	0x40140000
 800a438:	3fe00000 	.word	0x3fe00000
 800a43c:	9d01      	ldr	r5, [sp, #4]
 800a43e:	4656      	mov	r6, sl
 800a440:	465f      	mov	r7, fp
 800a442:	4642      	mov	r2, r8
 800a444:	464b      	mov	r3, r9
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 fa07 	bl	800085c <__aeabi_ddiv>
 800a44e:	f7f6 fb8b 	bl	8000b68 <__aeabi_d2iz>
 800a452:	4682      	mov	sl, r0
 800a454:	f7f6 f86e 	bl	8000534 <__aeabi_i2d>
 800a458:	4642      	mov	r2, r8
 800a45a:	464b      	mov	r3, r9
 800a45c:	f7f6 f8d4 	bl	8000608 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a46c:	f7f5 ff14 	bl	8000298 <__aeabi_dsub>
 800a470:	f805 6b01 	strb.w	r6, [r5], #1
 800a474:	9e01      	ldr	r6, [sp, #4]
 800a476:	9f03      	ldr	r7, [sp, #12]
 800a478:	1bae      	subs	r6, r5, r6
 800a47a:	42b7      	cmp	r7, r6
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	d135      	bne.n	800a4ee <_dtoa_r+0x6e6>
 800a482:	f7f5 ff0b 	bl	800029c <__adddf3>
 800a486:	4642      	mov	r2, r8
 800a488:	464b      	mov	r3, r9
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	f7f6 fb4b 	bl	8000b28 <__aeabi_dcmpgt>
 800a492:	b9d0      	cbnz	r0, 800a4ca <_dtoa_r+0x6c2>
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4a0:	b110      	cbz	r0, 800a4a8 <_dtoa_r+0x6a0>
 800a4a2:	f01a 0f01 	tst.w	sl, #1
 800a4a6:	d110      	bne.n	800a4ca <_dtoa_r+0x6c2>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	ee18 1a10 	vmov	r1, s16
 800a4ae:	f001 f885 	bl	800b5bc <_Bfree>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9800      	ldr	r0, [sp, #0]
 800a4b6:	702b      	strb	r3, [r5, #0]
 800a4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	6018      	str	r0, [r3, #0]
 800a4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f43f acf1 	beq.w	8009ea8 <_dtoa_r+0xa0>
 800a4c6:	601d      	str	r5, [r3, #0]
 800a4c8:	e4ee      	b.n	8009ea8 <_dtoa_r+0xa0>
 800a4ca:	9f00      	ldr	r7, [sp, #0]
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4d4:	2a39      	cmp	r2, #57	; 0x39
 800a4d6:	d106      	bne.n	800a4e6 <_dtoa_r+0x6de>
 800a4d8:	9a01      	ldr	r2, [sp, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d1f7      	bne.n	800a4ce <_dtoa_r+0x6c6>
 800a4de:	9901      	ldr	r1, [sp, #4]
 800a4e0:	2230      	movs	r2, #48	; 0x30
 800a4e2:	3701      	adds	r7, #1
 800a4e4:	700a      	strb	r2, [r1, #0]
 800a4e6:	781a      	ldrb	r2, [r3, #0]
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	e790      	b.n	800a410 <_dtoa_r+0x608>
 800a4ee:	4ba6      	ldr	r3, [pc, #664]	; (800a788 <_dtoa_r+0x980>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f7f6 f889 	bl	8000608 <__aeabi_dmul>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	f7f6 faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a502:	2800      	cmp	r0, #0
 800a504:	d09d      	beq.n	800a442 <_dtoa_r+0x63a>
 800a506:	e7cf      	b.n	800a4a8 <_dtoa_r+0x6a0>
 800a508:	9a08      	ldr	r2, [sp, #32]
 800a50a:	2a00      	cmp	r2, #0
 800a50c:	f000 80d7 	beq.w	800a6be <_dtoa_r+0x8b6>
 800a510:	9a06      	ldr	r2, [sp, #24]
 800a512:	2a01      	cmp	r2, #1
 800a514:	f300 80ba 	bgt.w	800a68c <_dtoa_r+0x884>
 800a518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	f000 80b2 	beq.w	800a684 <_dtoa_r+0x87c>
 800a520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a524:	9e07      	ldr	r6, [sp, #28]
 800a526:	9d04      	ldr	r5, [sp, #16]
 800a528:	9a04      	ldr	r2, [sp, #16]
 800a52a:	441a      	add	r2, r3
 800a52c:	9204      	str	r2, [sp, #16]
 800a52e:	9a05      	ldr	r2, [sp, #20]
 800a530:	2101      	movs	r1, #1
 800a532:	441a      	add	r2, r3
 800a534:	4620      	mov	r0, r4
 800a536:	9205      	str	r2, [sp, #20]
 800a538:	f001 f942 	bl	800b7c0 <__i2b>
 800a53c:	4607      	mov	r7, r0
 800a53e:	2d00      	cmp	r5, #0
 800a540:	dd0c      	ble.n	800a55c <_dtoa_r+0x754>
 800a542:	9b05      	ldr	r3, [sp, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd09      	ble.n	800a55c <_dtoa_r+0x754>
 800a548:	42ab      	cmp	r3, r5
 800a54a:	9a04      	ldr	r2, [sp, #16]
 800a54c:	bfa8      	it	ge
 800a54e:	462b      	movge	r3, r5
 800a550:	1ad2      	subs	r2, r2, r3
 800a552:	9204      	str	r2, [sp, #16]
 800a554:	9a05      	ldr	r2, [sp, #20]
 800a556:	1aed      	subs	r5, r5, r3
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	9305      	str	r3, [sp, #20]
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	b31b      	cbz	r3, 800a5a8 <_dtoa_r+0x7a0>
 800a560:	9b08      	ldr	r3, [sp, #32]
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80af 	beq.w	800a6c6 <_dtoa_r+0x8be>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	dd13      	ble.n	800a594 <_dtoa_r+0x78c>
 800a56c:	4639      	mov	r1, r7
 800a56e:	4632      	mov	r2, r6
 800a570:	4620      	mov	r0, r4
 800a572:	f001 f9e5 	bl	800b940 <__pow5mult>
 800a576:	ee18 2a10 	vmov	r2, s16
 800a57a:	4601      	mov	r1, r0
 800a57c:	4607      	mov	r7, r0
 800a57e:	4620      	mov	r0, r4
 800a580:	f001 f934 	bl	800b7ec <__multiply>
 800a584:	ee18 1a10 	vmov	r1, s16
 800a588:	4680      	mov	r8, r0
 800a58a:	4620      	mov	r0, r4
 800a58c:	f001 f816 	bl	800b5bc <_Bfree>
 800a590:	ee08 8a10 	vmov	s16, r8
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	1b9a      	subs	r2, r3, r6
 800a598:	d006      	beq.n	800a5a8 <_dtoa_r+0x7a0>
 800a59a:	ee18 1a10 	vmov	r1, s16
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f001 f9ce 	bl	800b940 <__pow5mult>
 800a5a4:	ee08 0a10 	vmov	s16, r0
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f001 f908 	bl	800b7c0 <__i2b>
 800a5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	f340 8088 	ble.w	800a6ca <_dtoa_r+0x8c2>
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4601      	mov	r1, r0
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f001 f9be 	bl	800b940 <__pow5mult>
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	f340 8081 	ble.w	800a6d0 <_dtoa_r+0x8c8>
 800a5ce:	f04f 0800 	mov.w	r8, #0
 800a5d2:	6933      	ldr	r3, [r6, #16]
 800a5d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5d8:	6918      	ldr	r0, [r3, #16]
 800a5da:	f001 f8a1 	bl	800b720 <__hi0bits>
 800a5de:	f1c0 0020 	rsb	r0, r0, #32
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	4418      	add	r0, r3
 800a5e6:	f010 001f 	ands.w	r0, r0, #31
 800a5ea:	f000 8092 	beq.w	800a712 <_dtoa_r+0x90a>
 800a5ee:	f1c0 0320 	rsb	r3, r0, #32
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	f340 808a 	ble.w	800a70c <_dtoa_r+0x904>
 800a5f8:	f1c0 001c 	rsb	r0, r0, #28
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	4403      	add	r3, r0
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9b05      	ldr	r3, [sp, #20]
 800a604:	4403      	add	r3, r0
 800a606:	4405      	add	r5, r0
 800a608:	9305      	str	r3, [sp, #20]
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd07      	ble.n	800a620 <_dtoa_r+0x818>
 800a610:	ee18 1a10 	vmov	r1, s16
 800a614:	461a      	mov	r2, r3
 800a616:	4620      	mov	r0, r4
 800a618:	f001 f9ec 	bl	800b9f4 <__lshift>
 800a61c:	ee08 0a10 	vmov	s16, r0
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dd05      	ble.n	800a632 <_dtoa_r+0x82a>
 800a626:	4631      	mov	r1, r6
 800a628:	461a      	mov	r2, r3
 800a62a:	4620      	mov	r0, r4
 800a62c:	f001 f9e2 	bl	800b9f4 <__lshift>
 800a630:	4606      	mov	r6, r0
 800a632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d06e      	beq.n	800a716 <_dtoa_r+0x90e>
 800a638:	ee18 0a10 	vmov	r0, s16
 800a63c:	4631      	mov	r1, r6
 800a63e:	f001 fa49 	bl	800bad4 <__mcmp>
 800a642:	2800      	cmp	r0, #0
 800a644:	da67      	bge.n	800a716 <_dtoa_r+0x90e>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	3b01      	subs	r3, #1
 800a64a:	ee18 1a10 	vmov	r1, s16
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	220a      	movs	r2, #10
 800a652:	2300      	movs	r3, #0
 800a654:	4620      	mov	r0, r4
 800a656:	f000 ffd3 	bl	800b600 <__multadd>
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	ee08 0a10 	vmov	s16, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 81b1 	beq.w	800a9c8 <_dtoa_r+0xbc0>
 800a666:	2300      	movs	r3, #0
 800a668:	4639      	mov	r1, r7
 800a66a:	220a      	movs	r2, #10
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 ffc7 	bl	800b600 <__multadd>
 800a672:	9b02      	ldr	r3, [sp, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	4607      	mov	r7, r0
 800a678:	f300 808e 	bgt.w	800a798 <_dtoa_r+0x990>
 800a67c:	9b06      	ldr	r3, [sp, #24]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	dc51      	bgt.n	800a726 <_dtoa_r+0x91e>
 800a682:	e089      	b.n	800a798 <_dtoa_r+0x990>
 800a684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a68a:	e74b      	b.n	800a524 <_dtoa_r+0x71c>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	1e5e      	subs	r6, r3, #1
 800a690:	9b07      	ldr	r3, [sp, #28]
 800a692:	42b3      	cmp	r3, r6
 800a694:	bfbf      	itttt	lt
 800a696:	9b07      	ldrlt	r3, [sp, #28]
 800a698:	9607      	strlt	r6, [sp, #28]
 800a69a:	1af2      	sublt	r2, r6, r3
 800a69c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a69e:	bfb6      	itet	lt
 800a6a0:	189b      	addlt	r3, r3, r2
 800a6a2:	1b9e      	subge	r6, r3, r6
 800a6a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	bfb8      	it	lt
 800a6aa:	2600      	movlt	r6, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bfb7      	itett	lt
 800a6b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a6b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a6b8:	1a9d      	sublt	r5, r3, r2
 800a6ba:	2300      	movlt	r3, #0
 800a6bc:	e734      	b.n	800a528 <_dtoa_r+0x720>
 800a6be:	9e07      	ldr	r6, [sp, #28]
 800a6c0:	9d04      	ldr	r5, [sp, #16]
 800a6c2:	9f08      	ldr	r7, [sp, #32]
 800a6c4:	e73b      	b.n	800a53e <_dtoa_r+0x736>
 800a6c6:	9a07      	ldr	r2, [sp, #28]
 800a6c8:	e767      	b.n	800a59a <_dtoa_r+0x792>
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	dc18      	bgt.n	800a702 <_dtoa_r+0x8fa>
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	d115      	bne.n	800a702 <_dtoa_r+0x8fa>
 800a6d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6da:	b993      	cbnz	r3, 800a702 <_dtoa_r+0x8fa>
 800a6dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6e0:	0d1b      	lsrs	r3, r3, #20
 800a6e2:	051b      	lsls	r3, r3, #20
 800a6e4:	b183      	cbz	r3, 800a708 <_dtoa_r+0x900>
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	9b05      	ldr	r3, [sp, #20]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	9305      	str	r3, [sp, #20]
 800a6f2:	f04f 0801 	mov.w	r8, #1
 800a6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f af6a 	bne.w	800a5d2 <_dtoa_r+0x7ca>
 800a6fe:	2001      	movs	r0, #1
 800a700:	e76f      	b.n	800a5e2 <_dtoa_r+0x7da>
 800a702:	f04f 0800 	mov.w	r8, #0
 800a706:	e7f6      	b.n	800a6f6 <_dtoa_r+0x8ee>
 800a708:	4698      	mov	r8, r3
 800a70a:	e7f4      	b.n	800a6f6 <_dtoa_r+0x8ee>
 800a70c:	f43f af7d 	beq.w	800a60a <_dtoa_r+0x802>
 800a710:	4618      	mov	r0, r3
 800a712:	301c      	adds	r0, #28
 800a714:	e772      	b.n	800a5fc <_dtoa_r+0x7f4>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dc37      	bgt.n	800a78c <_dtoa_r+0x984>
 800a71c:	9b06      	ldr	r3, [sp, #24]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	dd34      	ble.n	800a78c <_dtoa_r+0x984>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	9302      	str	r3, [sp, #8]
 800a726:	9b02      	ldr	r3, [sp, #8]
 800a728:	b96b      	cbnz	r3, 800a746 <_dtoa_r+0x93e>
 800a72a:	4631      	mov	r1, r6
 800a72c:	2205      	movs	r2, #5
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 ff66 	bl	800b600 <__multadd>
 800a734:	4601      	mov	r1, r0
 800a736:	4606      	mov	r6, r0
 800a738:	ee18 0a10 	vmov	r0, s16
 800a73c:	f001 f9ca 	bl	800bad4 <__mcmp>
 800a740:	2800      	cmp	r0, #0
 800a742:	f73f adbb 	bgt.w	800a2bc <_dtoa_r+0x4b4>
 800a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a748:	9d01      	ldr	r5, [sp, #4]
 800a74a:	43db      	mvns	r3, r3
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	f04f 0800 	mov.w	r8, #0
 800a752:	4631      	mov	r1, r6
 800a754:	4620      	mov	r0, r4
 800a756:	f000 ff31 	bl	800b5bc <_Bfree>
 800a75a:	2f00      	cmp	r7, #0
 800a75c:	f43f aea4 	beq.w	800a4a8 <_dtoa_r+0x6a0>
 800a760:	f1b8 0f00 	cmp.w	r8, #0
 800a764:	d005      	beq.n	800a772 <_dtoa_r+0x96a>
 800a766:	45b8      	cmp	r8, r7
 800a768:	d003      	beq.n	800a772 <_dtoa_r+0x96a>
 800a76a:	4641      	mov	r1, r8
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 ff25 	bl	800b5bc <_Bfree>
 800a772:	4639      	mov	r1, r7
 800a774:	4620      	mov	r0, r4
 800a776:	f000 ff21 	bl	800b5bc <_Bfree>
 800a77a:	e695      	b.n	800a4a8 <_dtoa_r+0x6a0>
 800a77c:	2600      	movs	r6, #0
 800a77e:	4637      	mov	r7, r6
 800a780:	e7e1      	b.n	800a746 <_dtoa_r+0x93e>
 800a782:	9700      	str	r7, [sp, #0]
 800a784:	4637      	mov	r7, r6
 800a786:	e599      	b.n	800a2bc <_dtoa_r+0x4b4>
 800a788:	40240000 	.word	0x40240000
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80ca 	beq.w	800a928 <_dtoa_r+0xb20>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	9302      	str	r3, [sp, #8]
 800a798:	2d00      	cmp	r5, #0
 800a79a:	dd05      	ble.n	800a7a8 <_dtoa_r+0x9a0>
 800a79c:	4639      	mov	r1, r7
 800a79e:	462a      	mov	r2, r5
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f001 f927 	bl	800b9f4 <__lshift>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ac:	d05b      	beq.n	800a866 <_dtoa_r+0xa5e>
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fec3 	bl	800b53c <_Balloc>
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	b928      	cbnz	r0, 800a7c6 <_dtoa_r+0x9be>
 800a7ba:	4b87      	ldr	r3, [pc, #540]	; (800a9d8 <_dtoa_r+0xbd0>)
 800a7bc:	4602      	mov	r2, r0
 800a7be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7c2:	f7ff bb3b 	b.w	8009e3c <_dtoa_r+0x34>
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	3202      	adds	r2, #2
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	f107 010c 	add.w	r1, r7, #12
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	f7fd fbf5 	bl	8007fc0 <memcpy>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f001 f90a 	bl	800b9f4 <__lshift>
 800a7e0:	9b01      	ldr	r3, [sp, #4]
 800a7e2:	f103 0901 	add.w	r9, r3, #1
 800a7e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	f00a 0301 	and.w	r3, sl, #1
 800a7f2:	46b8      	mov	r8, r7
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	ee18 0a10 	vmov	r0, s16
 800a7fe:	f7ff fa77 	bl	8009cf0 <quorem>
 800a802:	4641      	mov	r1, r8
 800a804:	9002      	str	r0, [sp, #8]
 800a806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a80a:	ee18 0a10 	vmov	r0, s16
 800a80e:	f001 f961 	bl	800bad4 <__mcmp>
 800a812:	463a      	mov	r2, r7
 800a814:	9003      	str	r0, [sp, #12]
 800a816:	4631      	mov	r1, r6
 800a818:	4620      	mov	r0, r4
 800a81a:	f001 f977 	bl	800bb0c <__mdiff>
 800a81e:	68c2      	ldr	r2, [r0, #12]
 800a820:	f109 3bff 	add.w	fp, r9, #4294967295
 800a824:	4605      	mov	r5, r0
 800a826:	bb02      	cbnz	r2, 800a86a <_dtoa_r+0xa62>
 800a828:	4601      	mov	r1, r0
 800a82a:	ee18 0a10 	vmov	r0, s16
 800a82e:	f001 f951 	bl	800bad4 <__mcmp>
 800a832:	4602      	mov	r2, r0
 800a834:	4629      	mov	r1, r5
 800a836:	4620      	mov	r0, r4
 800a838:	9207      	str	r2, [sp, #28]
 800a83a:	f000 febf 	bl	800b5bc <_Bfree>
 800a83e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a842:	ea43 0102 	orr.w	r1, r3, r2
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	430b      	orrs	r3, r1
 800a84a:	464d      	mov	r5, r9
 800a84c:	d10f      	bne.n	800a86e <_dtoa_r+0xa66>
 800a84e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a852:	d02a      	beq.n	800a8aa <_dtoa_r+0xaa2>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	dd02      	ble.n	800a860 <_dtoa_r+0xa58>
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a860:	f88b a000 	strb.w	sl, [fp]
 800a864:	e775      	b.n	800a752 <_dtoa_r+0x94a>
 800a866:	4638      	mov	r0, r7
 800a868:	e7ba      	b.n	800a7e0 <_dtoa_r+0x9d8>
 800a86a:	2201      	movs	r2, #1
 800a86c:	e7e2      	b.n	800a834 <_dtoa_r+0xa2c>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	db04      	blt.n	800a87e <_dtoa_r+0xa76>
 800a874:	9906      	ldr	r1, [sp, #24]
 800a876:	430b      	orrs	r3, r1
 800a878:	9904      	ldr	r1, [sp, #16]
 800a87a:	430b      	orrs	r3, r1
 800a87c:	d122      	bne.n	800a8c4 <_dtoa_r+0xabc>
 800a87e:	2a00      	cmp	r2, #0
 800a880:	ddee      	ble.n	800a860 <_dtoa_r+0xa58>
 800a882:	ee18 1a10 	vmov	r1, s16
 800a886:	2201      	movs	r2, #1
 800a888:	4620      	mov	r0, r4
 800a88a:	f001 f8b3 	bl	800b9f4 <__lshift>
 800a88e:	4631      	mov	r1, r6
 800a890:	ee08 0a10 	vmov	s16, r0
 800a894:	f001 f91e 	bl	800bad4 <__mcmp>
 800a898:	2800      	cmp	r0, #0
 800a89a:	dc03      	bgt.n	800a8a4 <_dtoa_r+0xa9c>
 800a89c:	d1e0      	bne.n	800a860 <_dtoa_r+0xa58>
 800a89e:	f01a 0f01 	tst.w	sl, #1
 800a8a2:	d0dd      	beq.n	800a860 <_dtoa_r+0xa58>
 800a8a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8a8:	d1d7      	bne.n	800a85a <_dtoa_r+0xa52>
 800a8aa:	2339      	movs	r3, #57	; 0x39
 800a8ac:	f88b 3000 	strb.w	r3, [fp]
 800a8b0:	462b      	mov	r3, r5
 800a8b2:	461d      	mov	r5, r3
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8ba:	2a39      	cmp	r2, #57	; 0x39
 800a8bc:	d071      	beq.n	800a9a2 <_dtoa_r+0xb9a>
 800a8be:	3201      	adds	r2, #1
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e746      	b.n	800a752 <_dtoa_r+0x94a>
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	dd07      	ble.n	800a8d8 <_dtoa_r+0xad0>
 800a8c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8cc:	d0ed      	beq.n	800a8aa <_dtoa_r+0xaa2>
 800a8ce:	f10a 0301 	add.w	r3, sl, #1
 800a8d2:	f88b 3000 	strb.w	r3, [fp]
 800a8d6:	e73c      	b.n	800a752 <_dtoa_r+0x94a>
 800a8d8:	9b05      	ldr	r3, [sp, #20]
 800a8da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a8de:	4599      	cmp	r9, r3
 800a8e0:	d047      	beq.n	800a972 <_dtoa_r+0xb6a>
 800a8e2:	ee18 1a10 	vmov	r1, s16
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fe88 	bl	800b600 <__multadd>
 800a8f0:	45b8      	cmp	r8, r7
 800a8f2:	ee08 0a10 	vmov	s16, r0
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	f04f 020a 	mov.w	r2, #10
 800a8fe:	4641      	mov	r1, r8
 800a900:	4620      	mov	r0, r4
 800a902:	d106      	bne.n	800a912 <_dtoa_r+0xb0a>
 800a904:	f000 fe7c 	bl	800b600 <__multadd>
 800a908:	4680      	mov	r8, r0
 800a90a:	4607      	mov	r7, r0
 800a90c:	f109 0901 	add.w	r9, r9, #1
 800a910:	e772      	b.n	800a7f8 <_dtoa_r+0x9f0>
 800a912:	f000 fe75 	bl	800b600 <__multadd>
 800a916:	4639      	mov	r1, r7
 800a918:	4680      	mov	r8, r0
 800a91a:	2300      	movs	r3, #0
 800a91c:	220a      	movs	r2, #10
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 fe6e 	bl	800b600 <__multadd>
 800a924:	4607      	mov	r7, r0
 800a926:	e7f1      	b.n	800a90c <_dtoa_r+0xb04>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	9302      	str	r3, [sp, #8]
 800a92c:	9d01      	ldr	r5, [sp, #4]
 800a92e:	ee18 0a10 	vmov	r0, s16
 800a932:	4631      	mov	r1, r6
 800a934:	f7ff f9dc 	bl	8009cf0 <quorem>
 800a938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	f805 ab01 	strb.w	sl, [r5], #1
 800a942:	1aea      	subs	r2, r5, r3
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	4293      	cmp	r3, r2
 800a948:	dd09      	ble.n	800a95e <_dtoa_r+0xb56>
 800a94a:	ee18 1a10 	vmov	r1, s16
 800a94e:	2300      	movs	r3, #0
 800a950:	220a      	movs	r2, #10
 800a952:	4620      	mov	r0, r4
 800a954:	f000 fe54 	bl	800b600 <__multadd>
 800a958:	ee08 0a10 	vmov	s16, r0
 800a95c:	e7e7      	b.n	800a92e <_dtoa_r+0xb26>
 800a95e:	9b02      	ldr	r3, [sp, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	bfc8      	it	gt
 800a964:	461d      	movgt	r5, r3
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	bfd8      	it	le
 800a96a:	2501      	movle	r5, #1
 800a96c:	441d      	add	r5, r3
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	ee18 1a10 	vmov	r1, s16
 800a976:	2201      	movs	r2, #1
 800a978:	4620      	mov	r0, r4
 800a97a:	f001 f83b 	bl	800b9f4 <__lshift>
 800a97e:	4631      	mov	r1, r6
 800a980:	ee08 0a10 	vmov	s16, r0
 800a984:	f001 f8a6 	bl	800bad4 <__mcmp>
 800a988:	2800      	cmp	r0, #0
 800a98a:	dc91      	bgt.n	800a8b0 <_dtoa_r+0xaa8>
 800a98c:	d102      	bne.n	800a994 <_dtoa_r+0xb8c>
 800a98e:	f01a 0f01 	tst.w	sl, #1
 800a992:	d18d      	bne.n	800a8b0 <_dtoa_r+0xaa8>
 800a994:	462b      	mov	r3, r5
 800a996:	461d      	mov	r5, r3
 800a998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a99c:	2a30      	cmp	r2, #48	; 0x30
 800a99e:	d0fa      	beq.n	800a996 <_dtoa_r+0xb8e>
 800a9a0:	e6d7      	b.n	800a752 <_dtoa_r+0x94a>
 800a9a2:	9a01      	ldr	r2, [sp, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d184      	bne.n	800a8b2 <_dtoa_r+0xaaa>
 800a9a8:	9b00      	ldr	r3, [sp, #0]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	2331      	movs	r3, #49	; 0x31
 800a9b0:	7013      	strb	r3, [r2, #0]
 800a9b2:	e6ce      	b.n	800a752 <_dtoa_r+0x94a>
 800a9b4:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <_dtoa_r+0xbd4>)
 800a9b6:	f7ff ba95 	b.w	8009ee4 <_dtoa_r+0xdc>
 800a9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f47f aa6e 	bne.w	8009e9e <_dtoa_r+0x96>
 800a9c2:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <_dtoa_r+0xbd8>)
 800a9c4:	f7ff ba8e 	b.w	8009ee4 <_dtoa_r+0xdc>
 800a9c8:	9b02      	ldr	r3, [sp, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	dcae      	bgt.n	800a92c <_dtoa_r+0xb24>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	f73f aea8 	bgt.w	800a726 <_dtoa_r+0x91e>
 800a9d6:	e7a9      	b.n	800a92c <_dtoa_r+0xb24>
 800a9d8:	0800cc78 	.word	0x0800cc78
 800a9dc:	0800ca78 	.word	0x0800ca78
 800a9e0:	0800cbf9 	.word	0x0800cbf9

0800a9e4 <__sflush_r>:
 800a9e4:	898a      	ldrh	r2, [r1, #12]
 800a9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	0710      	lsls	r0, r2, #28
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	d458      	bmi.n	800aaa4 <__sflush_r+0xc0>
 800a9f2:	684b      	ldr	r3, [r1, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc05      	bgt.n	800aa04 <__sflush_r+0x20>
 800a9f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dc02      	bgt.n	800aa04 <__sflush_r+0x20>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa06:	2e00      	cmp	r6, #0
 800aa08:	d0f9      	beq.n	800a9fe <__sflush_r+0x1a>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa10:	682f      	ldr	r7, [r5, #0]
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	d032      	beq.n	800aa7c <__sflush_r+0x98>
 800aa16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	075a      	lsls	r2, r3, #29
 800aa1c:	d505      	bpl.n	800aa2a <__sflush_r+0x46>
 800aa1e:	6863      	ldr	r3, [r4, #4]
 800aa20:	1ac0      	subs	r0, r0, r3
 800aa22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa24:	b10b      	cbz	r3, 800aa2a <__sflush_r+0x46>
 800aa26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa28:	1ac0      	subs	r0, r0, r3
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa30:	6a21      	ldr	r1, [r4, #32]
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b0      	blx	r6
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	d106      	bne.n	800aa4a <__sflush_r+0x66>
 800aa3c:	6829      	ldr	r1, [r5, #0]
 800aa3e:	291d      	cmp	r1, #29
 800aa40:	d82c      	bhi.n	800aa9c <__sflush_r+0xb8>
 800aa42:	4a2a      	ldr	r2, [pc, #168]	; (800aaec <__sflush_r+0x108>)
 800aa44:	40ca      	lsrs	r2, r1
 800aa46:	07d6      	lsls	r6, r2, #31
 800aa48:	d528      	bpl.n	800aa9c <__sflush_r+0xb8>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	6062      	str	r2, [r4, #4]
 800aa4e:	04d9      	lsls	r1, r3, #19
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	6022      	str	r2, [r4, #0]
 800aa54:	d504      	bpl.n	800aa60 <__sflush_r+0x7c>
 800aa56:	1c42      	adds	r2, r0, #1
 800aa58:	d101      	bne.n	800aa5e <__sflush_r+0x7a>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	b903      	cbnz	r3, 800aa60 <__sflush_r+0x7c>
 800aa5e:	6560      	str	r0, [r4, #84]	; 0x54
 800aa60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa62:	602f      	str	r7, [r5, #0]
 800aa64:	2900      	cmp	r1, #0
 800aa66:	d0ca      	beq.n	800a9fe <__sflush_r+0x1a>
 800aa68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa6c:	4299      	cmp	r1, r3
 800aa6e:	d002      	beq.n	800aa76 <__sflush_r+0x92>
 800aa70:	4628      	mov	r0, r5
 800aa72:	f001 fa3b 	bl	800beec <_free_r>
 800aa76:	2000      	movs	r0, #0
 800aa78:	6360      	str	r0, [r4, #52]	; 0x34
 800aa7a:	e7c1      	b.n	800aa00 <__sflush_r+0x1c>
 800aa7c:	6a21      	ldr	r1, [r4, #32]
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b0      	blx	r6
 800aa84:	1c41      	adds	r1, r0, #1
 800aa86:	d1c7      	bne.n	800aa18 <__sflush_r+0x34>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c4      	beq.n	800aa18 <__sflush_r+0x34>
 800aa8e:	2b1d      	cmp	r3, #29
 800aa90:	d001      	beq.n	800aa96 <__sflush_r+0xb2>
 800aa92:	2b16      	cmp	r3, #22
 800aa94:	d101      	bne.n	800aa9a <__sflush_r+0xb6>
 800aa96:	602f      	str	r7, [r5, #0]
 800aa98:	e7b1      	b.n	800a9fe <__sflush_r+0x1a>
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	e7ad      	b.n	800aa00 <__sflush_r+0x1c>
 800aaa4:	690f      	ldr	r7, [r1, #16]
 800aaa6:	2f00      	cmp	r7, #0
 800aaa8:	d0a9      	beq.n	800a9fe <__sflush_r+0x1a>
 800aaaa:	0793      	lsls	r3, r2, #30
 800aaac:	680e      	ldr	r6, [r1, #0]
 800aaae:	bf08      	it	eq
 800aab0:	694b      	ldreq	r3, [r1, #20]
 800aab2:	600f      	str	r7, [r1, #0]
 800aab4:	bf18      	it	ne
 800aab6:	2300      	movne	r3, #0
 800aab8:	eba6 0807 	sub.w	r8, r6, r7
 800aabc:	608b      	str	r3, [r1, #8]
 800aabe:	f1b8 0f00 	cmp.w	r8, #0
 800aac2:	dd9c      	ble.n	800a9fe <__sflush_r+0x1a>
 800aac4:	6a21      	ldr	r1, [r4, #32]
 800aac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aac8:	4643      	mov	r3, r8
 800aaca:	463a      	mov	r2, r7
 800aacc:	4628      	mov	r0, r5
 800aace:	47b0      	blx	r6
 800aad0:	2800      	cmp	r0, #0
 800aad2:	dc06      	bgt.n	800aae2 <__sflush_r+0xfe>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aada:	81a3      	strh	r3, [r4, #12]
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	e78e      	b.n	800aa00 <__sflush_r+0x1c>
 800aae2:	4407      	add	r7, r0
 800aae4:	eba8 0800 	sub.w	r8, r8, r0
 800aae8:	e7e9      	b.n	800aabe <__sflush_r+0xda>
 800aaea:	bf00      	nop
 800aaec:	20400001 	.word	0x20400001

0800aaf0 <_fflush_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	690b      	ldr	r3, [r1, #16]
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	b913      	cbnz	r3, 800ab00 <_fflush_r+0x10>
 800aafa:	2500      	movs	r5, #0
 800aafc:	4628      	mov	r0, r5
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	b118      	cbz	r0, 800ab0a <_fflush_r+0x1a>
 800ab02:	6983      	ldr	r3, [r0, #24]
 800ab04:	b90b      	cbnz	r3, 800ab0a <_fflush_r+0x1a>
 800ab06:	f000 f887 	bl	800ac18 <__sinit>
 800ab0a:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <_fflush_r+0x6c>)
 800ab0c:	429c      	cmp	r4, r3
 800ab0e:	d11b      	bne.n	800ab48 <_fflush_r+0x58>
 800ab10:	686c      	ldr	r4, [r5, #4]
 800ab12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0ef      	beq.n	800aafa <_fflush_r+0xa>
 800ab1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab1c:	07d0      	lsls	r0, r2, #31
 800ab1e:	d404      	bmi.n	800ab2a <_fflush_r+0x3a>
 800ab20:	0599      	lsls	r1, r3, #22
 800ab22:	d402      	bmi.n	800ab2a <_fflush_r+0x3a>
 800ab24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab26:	f000 fc88 	bl	800b43a <__retarget_lock_acquire_recursive>
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	f7ff ff59 	bl	800a9e4 <__sflush_r>
 800ab32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab34:	07da      	lsls	r2, r3, #31
 800ab36:	4605      	mov	r5, r0
 800ab38:	d4e0      	bmi.n	800aafc <_fflush_r+0xc>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	059b      	lsls	r3, r3, #22
 800ab3e:	d4dd      	bmi.n	800aafc <_fflush_r+0xc>
 800ab40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab42:	f000 fc7b 	bl	800b43c <__retarget_lock_release_recursive>
 800ab46:	e7d9      	b.n	800aafc <_fflush_r+0xc>
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <_fflush_r+0x70>)
 800ab4a:	429c      	cmp	r4, r3
 800ab4c:	d101      	bne.n	800ab52 <_fflush_r+0x62>
 800ab4e:	68ac      	ldr	r4, [r5, #8]
 800ab50:	e7df      	b.n	800ab12 <_fflush_r+0x22>
 800ab52:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <_fflush_r+0x74>)
 800ab54:	429c      	cmp	r4, r3
 800ab56:	bf08      	it	eq
 800ab58:	68ec      	ldreq	r4, [r5, #12]
 800ab5a:	e7da      	b.n	800ab12 <_fflush_r+0x22>
 800ab5c:	0800ccac 	.word	0x0800ccac
 800ab60:	0800cccc 	.word	0x0800cccc
 800ab64:	0800cc8c 	.word	0x0800cc8c

0800ab68 <std>:
 800ab68:	2300      	movs	r3, #0
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab76:	6083      	str	r3, [r0, #8]
 800ab78:	8181      	strh	r1, [r0, #12]
 800ab7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab7c:	81c2      	strh	r2, [r0, #14]
 800ab7e:	6183      	str	r3, [r0, #24]
 800ab80:	4619      	mov	r1, r3
 800ab82:	2208      	movs	r2, #8
 800ab84:	305c      	adds	r0, #92	; 0x5c
 800ab86:	f7fd fa29 	bl	8007fdc <memset>
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <std+0x38>)
 800ab8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <std+0x3c>)
 800ab90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <std+0x40>)
 800ab94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <std+0x44>)
 800ab98:	6224      	str	r4, [r4, #32]
 800ab9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	bf00      	nop
 800aba0:	0800c399 	.word	0x0800c399
 800aba4:	0800c3bb 	.word	0x0800c3bb
 800aba8:	0800c3f3 	.word	0x0800c3f3
 800abac:	0800c417 	.word	0x0800c417

0800abb0 <_cleanup_r>:
 800abb0:	4901      	ldr	r1, [pc, #4]	; (800abb8 <_cleanup_r+0x8>)
 800abb2:	f000 b8af 	b.w	800ad14 <_fwalk_reent>
 800abb6:	bf00      	nop
 800abb8:	0800aaf1 	.word	0x0800aaf1

0800abbc <__sfmoreglue>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	2268      	movs	r2, #104	; 0x68
 800abc0:	1e4d      	subs	r5, r1, #1
 800abc2:	4355      	muls	r5, r2
 800abc4:	460e      	mov	r6, r1
 800abc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abca:	f001 f9fb 	bl	800bfc4 <_malloc_r>
 800abce:	4604      	mov	r4, r0
 800abd0:	b140      	cbz	r0, 800abe4 <__sfmoreglue+0x28>
 800abd2:	2100      	movs	r1, #0
 800abd4:	e9c0 1600 	strd	r1, r6, [r0]
 800abd8:	300c      	adds	r0, #12
 800abda:	60a0      	str	r0, [r4, #8]
 800abdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abe0:	f7fd f9fc 	bl	8007fdc <memset>
 800abe4:	4620      	mov	r0, r4
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <__sfp_lock_acquire>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__sfp_lock_acquire+0x8>)
 800abea:	f000 bc26 	b.w	800b43a <__retarget_lock_acquire_recursive>
 800abee:	bf00      	nop
 800abf0:	200051a1 	.word	0x200051a1

0800abf4 <__sfp_lock_release>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__sfp_lock_release+0x8>)
 800abf6:	f000 bc21 	b.w	800b43c <__retarget_lock_release_recursive>
 800abfa:	bf00      	nop
 800abfc:	200051a1 	.word	0x200051a1

0800ac00 <__sinit_lock_acquire>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__sinit_lock_acquire+0x8>)
 800ac02:	f000 bc1a 	b.w	800b43a <__retarget_lock_acquire_recursive>
 800ac06:	bf00      	nop
 800ac08:	200051a2 	.word	0x200051a2

0800ac0c <__sinit_lock_release>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__sinit_lock_release+0x8>)
 800ac0e:	f000 bc15 	b.w	800b43c <__retarget_lock_release_recursive>
 800ac12:	bf00      	nop
 800ac14:	200051a2 	.word	0x200051a2

0800ac18 <__sinit>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	f7ff fff0 	bl	800ac00 <__sinit_lock_acquire>
 800ac20:	69a3      	ldr	r3, [r4, #24]
 800ac22:	b11b      	cbz	r3, 800ac2c <__sinit+0x14>
 800ac24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac28:	f7ff bff0 	b.w	800ac0c <__sinit_lock_release>
 800ac2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac30:	6523      	str	r3, [r4, #80]	; 0x50
 800ac32:	4b13      	ldr	r3, [pc, #76]	; (800ac80 <__sinit+0x68>)
 800ac34:	4a13      	ldr	r2, [pc, #76]	; (800ac84 <__sinit+0x6c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac3a:	42a3      	cmp	r3, r4
 800ac3c:	bf04      	itt	eq
 800ac3e:	2301      	moveq	r3, #1
 800ac40:	61a3      	streq	r3, [r4, #24]
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f820 	bl	800ac88 <__sfp>
 800ac48:	6060      	str	r0, [r4, #4]
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 f81c 	bl	800ac88 <__sfp>
 800ac50:	60a0      	str	r0, [r4, #8]
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f818 	bl	800ac88 <__sfp>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	60e0      	str	r0, [r4, #12]
 800ac5c:	2104      	movs	r1, #4
 800ac5e:	6860      	ldr	r0, [r4, #4]
 800ac60:	f7ff ff82 	bl	800ab68 <std>
 800ac64:	68a0      	ldr	r0, [r4, #8]
 800ac66:	2201      	movs	r2, #1
 800ac68:	2109      	movs	r1, #9
 800ac6a:	f7ff ff7d 	bl	800ab68 <std>
 800ac6e:	68e0      	ldr	r0, [r4, #12]
 800ac70:	2202      	movs	r2, #2
 800ac72:	2112      	movs	r1, #18
 800ac74:	f7ff ff78 	bl	800ab68 <std>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	61a3      	str	r3, [r4, #24]
 800ac7c:	e7d2      	b.n	800ac24 <__sinit+0xc>
 800ac7e:	bf00      	nop
 800ac80:	0800ca64 	.word	0x0800ca64
 800ac84:	0800abb1 	.word	0x0800abb1

0800ac88 <__sfp>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	f7ff ffac 	bl	800abe8 <__sfp_lock_acquire>
 800ac90:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <__sfp+0x84>)
 800ac92:	681e      	ldr	r6, [r3, #0]
 800ac94:	69b3      	ldr	r3, [r6, #24]
 800ac96:	b913      	cbnz	r3, 800ac9e <__sfp+0x16>
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f7ff ffbd 	bl	800ac18 <__sinit>
 800ac9e:	3648      	adds	r6, #72	; 0x48
 800aca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	d503      	bpl.n	800acb0 <__sfp+0x28>
 800aca8:	6833      	ldr	r3, [r6, #0]
 800acaa:	b30b      	cbz	r3, 800acf0 <__sfp+0x68>
 800acac:	6836      	ldr	r6, [r6, #0]
 800acae:	e7f7      	b.n	800aca0 <__sfp+0x18>
 800acb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acb4:	b9d5      	cbnz	r5, 800acec <__sfp+0x64>
 800acb6:	4b16      	ldr	r3, [pc, #88]	; (800ad10 <__sfp+0x88>)
 800acb8:	60e3      	str	r3, [r4, #12]
 800acba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acbe:	6665      	str	r5, [r4, #100]	; 0x64
 800acc0:	f000 fbba 	bl	800b438 <__retarget_lock_init_recursive>
 800acc4:	f7ff ff96 	bl	800abf4 <__sfp_lock_release>
 800acc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800accc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acd0:	6025      	str	r5, [r4, #0]
 800acd2:	61a5      	str	r5, [r4, #24]
 800acd4:	2208      	movs	r2, #8
 800acd6:	4629      	mov	r1, r5
 800acd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acdc:	f7fd f97e 	bl	8007fdc <memset>
 800ace0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ace4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ace8:	4620      	mov	r0, r4
 800acea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acec:	3468      	adds	r4, #104	; 0x68
 800acee:	e7d9      	b.n	800aca4 <__sfp+0x1c>
 800acf0:	2104      	movs	r1, #4
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7ff ff62 	bl	800abbc <__sfmoreglue>
 800acf8:	4604      	mov	r4, r0
 800acfa:	6030      	str	r0, [r6, #0]
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d1d5      	bne.n	800acac <__sfp+0x24>
 800ad00:	f7ff ff78 	bl	800abf4 <__sfp_lock_release>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	e7ee      	b.n	800ace8 <__sfp+0x60>
 800ad0a:	bf00      	nop
 800ad0c:	0800ca64 	.word	0x0800ca64
 800ad10:	ffff0001 	.word	0xffff0001

0800ad14 <_fwalk_reent>:
 800ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad18:	4606      	mov	r6, r0
 800ad1a:	4688      	mov	r8, r1
 800ad1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad20:	2700      	movs	r7, #0
 800ad22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad26:	f1b9 0901 	subs.w	r9, r9, #1
 800ad2a:	d505      	bpl.n	800ad38 <_fwalk_reent+0x24>
 800ad2c:	6824      	ldr	r4, [r4, #0]
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	d1f7      	bne.n	800ad22 <_fwalk_reent+0xe>
 800ad32:	4638      	mov	r0, r7
 800ad34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad38:	89ab      	ldrh	r3, [r5, #12]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d907      	bls.n	800ad4e <_fwalk_reent+0x3a>
 800ad3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad42:	3301      	adds	r3, #1
 800ad44:	d003      	beq.n	800ad4e <_fwalk_reent+0x3a>
 800ad46:	4629      	mov	r1, r5
 800ad48:	4630      	mov	r0, r6
 800ad4a:	47c0      	blx	r8
 800ad4c:	4307      	orrs	r7, r0
 800ad4e:	3568      	adds	r5, #104	; 0x68
 800ad50:	e7e9      	b.n	800ad26 <_fwalk_reent+0x12>

0800ad52 <rshift>:
 800ad52:	6903      	ldr	r3, [r0, #16]
 800ad54:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad5c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad60:	f100 0414 	add.w	r4, r0, #20
 800ad64:	dd45      	ble.n	800adf2 <rshift+0xa0>
 800ad66:	f011 011f 	ands.w	r1, r1, #31
 800ad6a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad6e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad72:	d10c      	bne.n	800ad8e <rshift+0x3c>
 800ad74:	f100 0710 	add.w	r7, r0, #16
 800ad78:	4629      	mov	r1, r5
 800ad7a:	42b1      	cmp	r1, r6
 800ad7c:	d334      	bcc.n	800ade8 <rshift+0x96>
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	1eea      	subs	r2, r5, #3
 800ad84:	4296      	cmp	r6, r2
 800ad86:	bf38      	it	cc
 800ad88:	2300      	movcc	r3, #0
 800ad8a:	4423      	add	r3, r4
 800ad8c:	e015      	b.n	800adba <rshift+0x68>
 800ad8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad92:	f1c1 0820 	rsb	r8, r1, #32
 800ad96:	40cf      	lsrs	r7, r1
 800ad98:	f105 0e04 	add.w	lr, r5, #4
 800ad9c:	46a1      	mov	r9, r4
 800ad9e:	4576      	cmp	r6, lr
 800ada0:	46f4      	mov	ip, lr
 800ada2:	d815      	bhi.n	800add0 <rshift+0x7e>
 800ada4:	1a9a      	subs	r2, r3, r2
 800ada6:	0092      	lsls	r2, r2, #2
 800ada8:	3a04      	subs	r2, #4
 800adaa:	3501      	adds	r5, #1
 800adac:	42ae      	cmp	r6, r5
 800adae:	bf38      	it	cc
 800adb0:	2200      	movcc	r2, #0
 800adb2:	18a3      	adds	r3, r4, r2
 800adb4:	50a7      	str	r7, [r4, r2]
 800adb6:	b107      	cbz	r7, 800adba <rshift+0x68>
 800adb8:	3304      	adds	r3, #4
 800adba:	1b1a      	subs	r2, r3, r4
 800adbc:	42a3      	cmp	r3, r4
 800adbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adc2:	bf08      	it	eq
 800adc4:	2300      	moveq	r3, #0
 800adc6:	6102      	str	r2, [r0, #16]
 800adc8:	bf08      	it	eq
 800adca:	6143      	streq	r3, [r0, #20]
 800adcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add0:	f8dc c000 	ldr.w	ip, [ip]
 800add4:	fa0c fc08 	lsl.w	ip, ip, r8
 800add8:	ea4c 0707 	orr.w	r7, ip, r7
 800addc:	f849 7b04 	str.w	r7, [r9], #4
 800ade0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ade4:	40cf      	lsrs	r7, r1
 800ade6:	e7da      	b.n	800ad9e <rshift+0x4c>
 800ade8:	f851 cb04 	ldr.w	ip, [r1], #4
 800adec:	f847 cf04 	str.w	ip, [r7, #4]!
 800adf0:	e7c3      	b.n	800ad7a <rshift+0x28>
 800adf2:	4623      	mov	r3, r4
 800adf4:	e7e1      	b.n	800adba <rshift+0x68>

0800adf6 <__hexdig_fun>:
 800adf6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	d802      	bhi.n	800ae04 <__hexdig_fun+0xe>
 800adfe:	3820      	subs	r0, #32
 800ae00:	b2c0      	uxtb	r0, r0
 800ae02:	4770      	bx	lr
 800ae04:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae08:	2b05      	cmp	r3, #5
 800ae0a:	d801      	bhi.n	800ae10 <__hexdig_fun+0x1a>
 800ae0c:	3847      	subs	r0, #71	; 0x47
 800ae0e:	e7f7      	b.n	800ae00 <__hexdig_fun+0xa>
 800ae10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d801      	bhi.n	800ae1c <__hexdig_fun+0x26>
 800ae18:	3827      	subs	r0, #39	; 0x27
 800ae1a:	e7f1      	b.n	800ae00 <__hexdig_fun+0xa>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	4770      	bx	lr

0800ae20 <__gethex>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	ed2d 8b02 	vpush	{d8}
 800ae28:	b089      	sub	sp, #36	; 0x24
 800ae2a:	ee08 0a10 	vmov	s16, r0
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	4bb4      	ldr	r3, [pc, #720]	; (800b104 <__gethex+0x2e4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	468b      	mov	fp, r1
 800ae3a:	4690      	mov	r8, r2
 800ae3c:	f7f5 f9d0 	bl	80001e0 <strlen>
 800ae40:	9b01      	ldr	r3, [sp, #4]
 800ae42:	f8db 2000 	ldr.w	r2, [fp]
 800ae46:	4403      	add	r3, r0
 800ae48:	4682      	mov	sl, r0
 800ae4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	1c93      	adds	r3, r2, #2
 800ae52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae5a:	32fe      	adds	r2, #254	; 0xfe
 800ae5c:	18d1      	adds	r1, r2, r3
 800ae5e:	461f      	mov	r7, r3
 800ae60:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae64:	9100      	str	r1, [sp, #0]
 800ae66:	2830      	cmp	r0, #48	; 0x30
 800ae68:	d0f8      	beq.n	800ae5c <__gethex+0x3c>
 800ae6a:	f7ff ffc4 	bl	800adf6 <__hexdig_fun>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d13a      	bne.n	800aeea <__gethex+0xca>
 800ae74:	9901      	ldr	r1, [sp, #4]
 800ae76:	4652      	mov	r2, sl
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f001 fad0 	bl	800c41e <strncmp>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d168      	bne.n	800af56 <__gethex+0x136>
 800ae84:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae88:	eb07 060a 	add.w	r6, r7, sl
 800ae8c:	f7ff ffb3 	bl	800adf6 <__hexdig_fun>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d062      	beq.n	800af5a <__gethex+0x13a>
 800ae94:	4633      	mov	r3, r6
 800ae96:	7818      	ldrb	r0, [r3, #0]
 800ae98:	2830      	cmp	r0, #48	; 0x30
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	f103 0301 	add.w	r3, r3, #1
 800aea0:	d0f9      	beq.n	800ae96 <__gethex+0x76>
 800aea2:	f7ff ffa8 	bl	800adf6 <__hexdig_fun>
 800aea6:	2301      	movs	r3, #1
 800aea8:	fab0 f480 	clz	r4, r0
 800aeac:	0964      	lsrs	r4, r4, #5
 800aeae:	4635      	mov	r5, r6
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4616      	mov	r6, r2
 800aeb6:	3201      	adds	r2, #1
 800aeb8:	7830      	ldrb	r0, [r6, #0]
 800aeba:	f7ff ff9c 	bl	800adf6 <__hexdig_fun>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d1f8      	bne.n	800aeb4 <__gethex+0x94>
 800aec2:	9901      	ldr	r1, [sp, #4]
 800aec4:	4652      	mov	r2, sl
 800aec6:	4630      	mov	r0, r6
 800aec8:	f001 faa9 	bl	800c41e <strncmp>
 800aecc:	b980      	cbnz	r0, 800aef0 <__gethex+0xd0>
 800aece:	b94d      	cbnz	r5, 800aee4 <__gethex+0xc4>
 800aed0:	eb06 050a 	add.w	r5, r6, sl
 800aed4:	462a      	mov	r2, r5
 800aed6:	4616      	mov	r6, r2
 800aed8:	3201      	adds	r2, #1
 800aeda:	7830      	ldrb	r0, [r6, #0]
 800aedc:	f7ff ff8b 	bl	800adf6 <__hexdig_fun>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d1f8      	bne.n	800aed6 <__gethex+0xb6>
 800aee4:	1bad      	subs	r5, r5, r6
 800aee6:	00ad      	lsls	r5, r5, #2
 800aee8:	e004      	b.n	800aef4 <__gethex+0xd4>
 800aeea:	2400      	movs	r4, #0
 800aeec:	4625      	mov	r5, r4
 800aeee:	e7e0      	b.n	800aeb2 <__gethex+0x92>
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	d1f7      	bne.n	800aee4 <__gethex+0xc4>
 800aef4:	7833      	ldrb	r3, [r6, #0]
 800aef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aefa:	2b50      	cmp	r3, #80	; 0x50
 800aefc:	d13b      	bne.n	800af76 <__gethex+0x156>
 800aefe:	7873      	ldrb	r3, [r6, #1]
 800af00:	2b2b      	cmp	r3, #43	; 0x2b
 800af02:	d02c      	beq.n	800af5e <__gethex+0x13e>
 800af04:	2b2d      	cmp	r3, #45	; 0x2d
 800af06:	d02e      	beq.n	800af66 <__gethex+0x146>
 800af08:	1c71      	adds	r1, r6, #1
 800af0a:	f04f 0900 	mov.w	r9, #0
 800af0e:	7808      	ldrb	r0, [r1, #0]
 800af10:	f7ff ff71 	bl	800adf6 <__hexdig_fun>
 800af14:	1e43      	subs	r3, r0, #1
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b18      	cmp	r3, #24
 800af1a:	d82c      	bhi.n	800af76 <__gethex+0x156>
 800af1c:	f1a0 0210 	sub.w	r2, r0, #16
 800af20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af24:	f7ff ff67 	bl	800adf6 <__hexdig_fun>
 800af28:	1e43      	subs	r3, r0, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b18      	cmp	r3, #24
 800af2e:	d91d      	bls.n	800af6c <__gethex+0x14c>
 800af30:	f1b9 0f00 	cmp.w	r9, #0
 800af34:	d000      	beq.n	800af38 <__gethex+0x118>
 800af36:	4252      	negs	r2, r2
 800af38:	4415      	add	r5, r2
 800af3a:	f8cb 1000 	str.w	r1, [fp]
 800af3e:	b1e4      	cbz	r4, 800af7a <__gethex+0x15a>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	bf14      	ite	ne
 800af46:	2700      	movne	r7, #0
 800af48:	2706      	moveq	r7, #6
 800af4a:	4638      	mov	r0, r7
 800af4c:	b009      	add	sp, #36	; 0x24
 800af4e:	ecbd 8b02 	vpop	{d8}
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	463e      	mov	r6, r7
 800af58:	4625      	mov	r5, r4
 800af5a:	2401      	movs	r4, #1
 800af5c:	e7ca      	b.n	800aef4 <__gethex+0xd4>
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	1cb1      	adds	r1, r6, #2
 800af64:	e7d3      	b.n	800af0e <__gethex+0xee>
 800af66:	f04f 0901 	mov.w	r9, #1
 800af6a:	e7fa      	b.n	800af62 <__gethex+0x142>
 800af6c:	230a      	movs	r3, #10
 800af6e:	fb03 0202 	mla	r2, r3, r2, r0
 800af72:	3a10      	subs	r2, #16
 800af74:	e7d4      	b.n	800af20 <__gethex+0x100>
 800af76:	4631      	mov	r1, r6
 800af78:	e7df      	b.n	800af3a <__gethex+0x11a>
 800af7a:	1bf3      	subs	r3, r6, r7
 800af7c:	3b01      	subs	r3, #1
 800af7e:	4621      	mov	r1, r4
 800af80:	2b07      	cmp	r3, #7
 800af82:	dc0b      	bgt.n	800af9c <__gethex+0x17c>
 800af84:	ee18 0a10 	vmov	r0, s16
 800af88:	f000 fad8 	bl	800b53c <_Balloc>
 800af8c:	4604      	mov	r4, r0
 800af8e:	b940      	cbnz	r0, 800afa2 <__gethex+0x182>
 800af90:	4b5d      	ldr	r3, [pc, #372]	; (800b108 <__gethex+0x2e8>)
 800af92:	4602      	mov	r2, r0
 800af94:	21de      	movs	r1, #222	; 0xde
 800af96:	485d      	ldr	r0, [pc, #372]	; (800b10c <__gethex+0x2ec>)
 800af98:	f001 fa74 	bl	800c484 <__assert_func>
 800af9c:	3101      	adds	r1, #1
 800af9e:	105b      	asrs	r3, r3, #1
 800afa0:	e7ee      	b.n	800af80 <__gethex+0x160>
 800afa2:	f100 0914 	add.w	r9, r0, #20
 800afa6:	f04f 0b00 	mov.w	fp, #0
 800afaa:	f1ca 0301 	rsb	r3, sl, #1
 800afae:	f8cd 9008 	str.w	r9, [sp, #8]
 800afb2:	f8cd b000 	str.w	fp, [sp]
 800afb6:	9306      	str	r3, [sp, #24]
 800afb8:	42b7      	cmp	r7, r6
 800afba:	d340      	bcc.n	800b03e <__gethex+0x21e>
 800afbc:	9802      	ldr	r0, [sp, #8]
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	f840 3b04 	str.w	r3, [r0], #4
 800afc4:	eba0 0009 	sub.w	r0, r0, r9
 800afc8:	1080      	asrs	r0, r0, #2
 800afca:	0146      	lsls	r6, r0, #5
 800afcc:	6120      	str	r0, [r4, #16]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 fba6 	bl	800b720 <__hi0bits>
 800afd4:	1a30      	subs	r0, r6, r0
 800afd6:	f8d8 6000 	ldr.w	r6, [r8]
 800afda:	42b0      	cmp	r0, r6
 800afdc:	dd63      	ble.n	800b0a6 <__gethex+0x286>
 800afde:	1b87      	subs	r7, r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 ff4a 	bl	800be7c <__any_on>
 800afe8:	4682      	mov	sl, r0
 800afea:	b1a8      	cbz	r0, 800b018 <__gethex+0x1f8>
 800afec:	1e7b      	subs	r3, r7, #1
 800afee:	1159      	asrs	r1, r3, #5
 800aff0:	f003 021f 	and.w	r2, r3, #31
 800aff4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aff8:	f04f 0a01 	mov.w	sl, #1
 800affc:	fa0a f202 	lsl.w	r2, sl, r2
 800b000:	420a      	tst	r2, r1
 800b002:	d009      	beq.n	800b018 <__gethex+0x1f8>
 800b004:	4553      	cmp	r3, sl
 800b006:	dd05      	ble.n	800b014 <__gethex+0x1f4>
 800b008:	1eb9      	subs	r1, r7, #2
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 ff36 	bl	800be7c <__any_on>
 800b010:	2800      	cmp	r0, #0
 800b012:	d145      	bne.n	800b0a0 <__gethex+0x280>
 800b014:	f04f 0a02 	mov.w	sl, #2
 800b018:	4639      	mov	r1, r7
 800b01a:	4620      	mov	r0, r4
 800b01c:	f7ff fe99 	bl	800ad52 <rshift>
 800b020:	443d      	add	r5, r7
 800b022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b026:	42ab      	cmp	r3, r5
 800b028:	da4c      	bge.n	800b0c4 <__gethex+0x2a4>
 800b02a:	ee18 0a10 	vmov	r0, s16
 800b02e:	4621      	mov	r1, r4
 800b030:	f000 fac4 	bl	800b5bc <_Bfree>
 800b034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b036:	2300      	movs	r3, #0
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	27a3      	movs	r7, #163	; 0xa3
 800b03c:	e785      	b.n	800af4a <__gethex+0x12a>
 800b03e:	1e73      	subs	r3, r6, #1
 800b040:	9a05      	ldr	r2, [sp, #20]
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b048:	4293      	cmp	r3, r2
 800b04a:	d019      	beq.n	800b080 <__gethex+0x260>
 800b04c:	f1bb 0f20 	cmp.w	fp, #32
 800b050:	d107      	bne.n	800b062 <__gethex+0x242>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	9a00      	ldr	r2, [sp, #0]
 800b056:	f843 2b04 	str.w	r2, [r3], #4
 800b05a:	9302      	str	r3, [sp, #8]
 800b05c:	2300      	movs	r3, #0
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	469b      	mov	fp, r3
 800b062:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b066:	f7ff fec6 	bl	800adf6 <__hexdig_fun>
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	f000 000f 	and.w	r0, r0, #15
 800b070:	fa00 f00b 	lsl.w	r0, r0, fp
 800b074:	4303      	orrs	r3, r0
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	f10b 0b04 	add.w	fp, fp, #4
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	e00d      	b.n	800b09c <__gethex+0x27c>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	9a06      	ldr	r2, [sp, #24]
 800b084:	4413      	add	r3, r2
 800b086:	42bb      	cmp	r3, r7
 800b088:	d3e0      	bcc.n	800b04c <__gethex+0x22c>
 800b08a:	4618      	mov	r0, r3
 800b08c:	9901      	ldr	r1, [sp, #4]
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	4652      	mov	r2, sl
 800b092:	f001 f9c4 	bl	800c41e <strncmp>
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1d7      	bne.n	800b04c <__gethex+0x22c>
 800b09c:	461e      	mov	r6, r3
 800b09e:	e78b      	b.n	800afb8 <__gethex+0x198>
 800b0a0:	f04f 0a03 	mov.w	sl, #3
 800b0a4:	e7b8      	b.n	800b018 <__gethex+0x1f8>
 800b0a6:	da0a      	bge.n	800b0be <__gethex+0x29e>
 800b0a8:	1a37      	subs	r7, r6, r0
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	ee18 0a10 	vmov	r0, s16
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	f000 fc9f 	bl	800b9f4 <__lshift>
 800b0b6:	1bed      	subs	r5, r5, r7
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	f100 0914 	add.w	r9, r0, #20
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	e7ae      	b.n	800b022 <__gethex+0x202>
 800b0c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0c8:	42a8      	cmp	r0, r5
 800b0ca:	dd72      	ble.n	800b1b2 <__gethex+0x392>
 800b0cc:	1b45      	subs	r5, r0, r5
 800b0ce:	42ae      	cmp	r6, r5
 800b0d0:	dc36      	bgt.n	800b140 <__gethex+0x320>
 800b0d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d02a      	beq.n	800b130 <__gethex+0x310>
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d02c      	beq.n	800b138 <__gethex+0x318>
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d11c      	bne.n	800b11c <__gethex+0x2fc>
 800b0e2:	42ae      	cmp	r6, r5
 800b0e4:	d11a      	bne.n	800b11c <__gethex+0x2fc>
 800b0e6:	2e01      	cmp	r6, #1
 800b0e8:	d112      	bne.n	800b110 <__gethex+0x2f0>
 800b0ea:	9a04      	ldr	r2, [sp, #16]
 800b0ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6123      	str	r3, [r4, #16]
 800b0f6:	f8c9 3000 	str.w	r3, [r9]
 800b0fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0fc:	2762      	movs	r7, #98	; 0x62
 800b0fe:	601c      	str	r4, [r3, #0]
 800b100:	e723      	b.n	800af4a <__gethex+0x12a>
 800b102:	bf00      	nop
 800b104:	0800cd54 	.word	0x0800cd54
 800b108:	0800cc78 	.word	0x0800cc78
 800b10c:	0800ccec 	.word	0x0800ccec
 800b110:	1e71      	subs	r1, r6, #1
 800b112:	4620      	mov	r0, r4
 800b114:	f000 feb2 	bl	800be7c <__any_on>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d1e6      	bne.n	800b0ea <__gethex+0x2ca>
 800b11c:	ee18 0a10 	vmov	r0, s16
 800b120:	4621      	mov	r1, r4
 800b122:	f000 fa4b 	bl	800b5bc <_Bfree>
 800b126:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b128:	2300      	movs	r3, #0
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	2750      	movs	r7, #80	; 0x50
 800b12e:	e70c      	b.n	800af4a <__gethex+0x12a>
 800b130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f2      	bne.n	800b11c <__gethex+0x2fc>
 800b136:	e7d8      	b.n	800b0ea <__gethex+0x2ca>
 800b138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1d5      	bne.n	800b0ea <__gethex+0x2ca>
 800b13e:	e7ed      	b.n	800b11c <__gethex+0x2fc>
 800b140:	1e6f      	subs	r7, r5, #1
 800b142:	f1ba 0f00 	cmp.w	sl, #0
 800b146:	d131      	bne.n	800b1ac <__gethex+0x38c>
 800b148:	b127      	cbz	r7, 800b154 <__gethex+0x334>
 800b14a:	4639      	mov	r1, r7
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fe95 	bl	800be7c <__any_on>
 800b152:	4682      	mov	sl, r0
 800b154:	117b      	asrs	r3, r7, #5
 800b156:	2101      	movs	r1, #1
 800b158:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b15c:	f007 071f 	and.w	r7, r7, #31
 800b160:	fa01 f707 	lsl.w	r7, r1, r7
 800b164:	421f      	tst	r7, r3
 800b166:	4629      	mov	r1, r5
 800b168:	4620      	mov	r0, r4
 800b16a:	bf18      	it	ne
 800b16c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b170:	1b76      	subs	r6, r6, r5
 800b172:	f7ff fdee 	bl	800ad52 <rshift>
 800b176:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b17a:	2702      	movs	r7, #2
 800b17c:	f1ba 0f00 	cmp.w	sl, #0
 800b180:	d048      	beq.n	800b214 <__gethex+0x3f4>
 800b182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b186:	2b02      	cmp	r3, #2
 800b188:	d015      	beq.n	800b1b6 <__gethex+0x396>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d017      	beq.n	800b1be <__gethex+0x39e>
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d109      	bne.n	800b1a6 <__gethex+0x386>
 800b192:	f01a 0f02 	tst.w	sl, #2
 800b196:	d006      	beq.n	800b1a6 <__gethex+0x386>
 800b198:	f8d9 0000 	ldr.w	r0, [r9]
 800b19c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b1a0:	f01a 0f01 	tst.w	sl, #1
 800b1a4:	d10e      	bne.n	800b1c4 <__gethex+0x3a4>
 800b1a6:	f047 0710 	orr.w	r7, r7, #16
 800b1aa:	e033      	b.n	800b214 <__gethex+0x3f4>
 800b1ac:	f04f 0a01 	mov.w	sl, #1
 800b1b0:	e7d0      	b.n	800b154 <__gethex+0x334>
 800b1b2:	2701      	movs	r7, #1
 800b1b4:	e7e2      	b.n	800b17c <__gethex+0x35c>
 800b1b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1b8:	f1c3 0301 	rsb	r3, r3, #1
 800b1bc:	9315      	str	r3, [sp, #84]	; 0x54
 800b1be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f0      	beq.n	800b1a6 <__gethex+0x386>
 800b1c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1c8:	f104 0314 	add.w	r3, r4, #20
 800b1cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1d4:	f04f 0c00 	mov.w	ip, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1de:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1e2:	d01c      	beq.n	800b21e <__gethex+0x3fe>
 800b1e4:	3201      	adds	r2, #1
 800b1e6:	6002      	str	r2, [r0, #0]
 800b1e8:	2f02      	cmp	r7, #2
 800b1ea:	f104 0314 	add.w	r3, r4, #20
 800b1ee:	d13f      	bne.n	800b270 <__gethex+0x450>
 800b1f0:	f8d8 2000 	ldr.w	r2, [r8]
 800b1f4:	3a01      	subs	r2, #1
 800b1f6:	42b2      	cmp	r2, r6
 800b1f8:	d10a      	bne.n	800b210 <__gethex+0x3f0>
 800b1fa:	1171      	asrs	r1, r6, #5
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b202:	f006 061f 	and.w	r6, r6, #31
 800b206:	fa02 f606 	lsl.w	r6, r2, r6
 800b20a:	421e      	tst	r6, r3
 800b20c:	bf18      	it	ne
 800b20e:	4617      	movne	r7, r2
 800b210:	f047 0720 	orr.w	r7, r7, #32
 800b214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b216:	601c      	str	r4, [r3, #0]
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	601d      	str	r5, [r3, #0]
 800b21c:	e695      	b.n	800af4a <__gethex+0x12a>
 800b21e:	4299      	cmp	r1, r3
 800b220:	f843 cc04 	str.w	ip, [r3, #-4]
 800b224:	d8d8      	bhi.n	800b1d8 <__gethex+0x3b8>
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	459b      	cmp	fp, r3
 800b22a:	db19      	blt.n	800b260 <__gethex+0x440>
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	ee18 0a10 	vmov	r0, s16
 800b232:	3101      	adds	r1, #1
 800b234:	f000 f982 	bl	800b53c <_Balloc>
 800b238:	4681      	mov	r9, r0
 800b23a:	b918      	cbnz	r0, 800b244 <__gethex+0x424>
 800b23c:	4b1a      	ldr	r3, [pc, #104]	; (800b2a8 <__gethex+0x488>)
 800b23e:	4602      	mov	r2, r0
 800b240:	2184      	movs	r1, #132	; 0x84
 800b242:	e6a8      	b.n	800af96 <__gethex+0x176>
 800b244:	6922      	ldr	r2, [r4, #16]
 800b246:	3202      	adds	r2, #2
 800b248:	f104 010c 	add.w	r1, r4, #12
 800b24c:	0092      	lsls	r2, r2, #2
 800b24e:	300c      	adds	r0, #12
 800b250:	f7fc feb6 	bl	8007fc0 <memcpy>
 800b254:	4621      	mov	r1, r4
 800b256:	ee18 0a10 	vmov	r0, s16
 800b25a:	f000 f9af 	bl	800b5bc <_Bfree>
 800b25e:	464c      	mov	r4, r9
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b268:	6122      	str	r2, [r4, #16]
 800b26a:	2201      	movs	r2, #1
 800b26c:	615a      	str	r2, [r3, #20]
 800b26e:	e7bb      	b.n	800b1e8 <__gethex+0x3c8>
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	455a      	cmp	r2, fp
 800b274:	dd0b      	ble.n	800b28e <__gethex+0x46e>
 800b276:	2101      	movs	r1, #1
 800b278:	4620      	mov	r0, r4
 800b27a:	f7ff fd6a 	bl	800ad52 <rshift>
 800b27e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b282:	3501      	adds	r5, #1
 800b284:	42ab      	cmp	r3, r5
 800b286:	f6ff aed0 	blt.w	800b02a <__gethex+0x20a>
 800b28a:	2701      	movs	r7, #1
 800b28c:	e7c0      	b.n	800b210 <__gethex+0x3f0>
 800b28e:	f016 061f 	ands.w	r6, r6, #31
 800b292:	d0fa      	beq.n	800b28a <__gethex+0x46a>
 800b294:	4453      	add	r3, sl
 800b296:	f1c6 0620 	rsb	r6, r6, #32
 800b29a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b29e:	f000 fa3f 	bl	800b720 <__hi0bits>
 800b2a2:	42b0      	cmp	r0, r6
 800b2a4:	dbe7      	blt.n	800b276 <__gethex+0x456>
 800b2a6:	e7f0      	b.n	800b28a <__gethex+0x46a>
 800b2a8:	0800cc78 	.word	0x0800cc78

0800b2ac <L_shift>:
 800b2ac:	f1c2 0208 	rsb	r2, r2, #8
 800b2b0:	0092      	lsls	r2, r2, #2
 800b2b2:	b570      	push	{r4, r5, r6, lr}
 800b2b4:	f1c2 0620 	rsb	r6, r2, #32
 800b2b8:	6843      	ldr	r3, [r0, #4]
 800b2ba:	6804      	ldr	r4, [r0, #0]
 800b2bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b2c0:	432c      	orrs	r4, r5
 800b2c2:	40d3      	lsrs	r3, r2
 800b2c4:	6004      	str	r4, [r0, #0]
 800b2c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2ca:	4288      	cmp	r0, r1
 800b2cc:	d3f4      	bcc.n	800b2b8 <L_shift+0xc>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}

0800b2d0 <__match>:
 800b2d0:	b530      	push	{r4, r5, lr}
 800b2d2:	6803      	ldr	r3, [r0, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2da:	b914      	cbnz	r4, 800b2e2 <__match+0x12>
 800b2dc:	6003      	str	r3, [r0, #0]
 800b2de:	2001      	movs	r0, #1
 800b2e0:	bd30      	pop	{r4, r5, pc}
 800b2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2ea:	2d19      	cmp	r5, #25
 800b2ec:	bf98      	it	ls
 800b2ee:	3220      	addls	r2, #32
 800b2f0:	42a2      	cmp	r2, r4
 800b2f2:	d0f0      	beq.n	800b2d6 <__match+0x6>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e7f3      	b.n	800b2e0 <__match+0x10>

0800b2f8 <__hexnan>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	680b      	ldr	r3, [r1, #0]
 800b2fe:	115e      	asrs	r6, r3, #5
 800b300:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b304:	f013 031f 	ands.w	r3, r3, #31
 800b308:	b087      	sub	sp, #28
 800b30a:	bf18      	it	ne
 800b30c:	3604      	addne	r6, #4
 800b30e:	2500      	movs	r5, #0
 800b310:	1f37      	subs	r7, r6, #4
 800b312:	4690      	mov	r8, r2
 800b314:	6802      	ldr	r2, [r0, #0]
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	4682      	mov	sl, r0
 800b31a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b31e:	46b9      	mov	r9, r7
 800b320:	463c      	mov	r4, r7
 800b322:	9502      	str	r5, [sp, #8]
 800b324:	46ab      	mov	fp, r5
 800b326:	7851      	ldrb	r1, [r2, #1]
 800b328:	1c53      	adds	r3, r2, #1
 800b32a:	9303      	str	r3, [sp, #12]
 800b32c:	b341      	cbz	r1, 800b380 <__hexnan+0x88>
 800b32e:	4608      	mov	r0, r1
 800b330:	9205      	str	r2, [sp, #20]
 800b332:	9104      	str	r1, [sp, #16]
 800b334:	f7ff fd5f 	bl	800adf6 <__hexdig_fun>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d14f      	bne.n	800b3dc <__hexnan+0xe4>
 800b33c:	9904      	ldr	r1, [sp, #16]
 800b33e:	9a05      	ldr	r2, [sp, #20]
 800b340:	2920      	cmp	r1, #32
 800b342:	d818      	bhi.n	800b376 <__hexnan+0x7e>
 800b344:	9b02      	ldr	r3, [sp, #8]
 800b346:	459b      	cmp	fp, r3
 800b348:	dd13      	ble.n	800b372 <__hexnan+0x7a>
 800b34a:	454c      	cmp	r4, r9
 800b34c:	d206      	bcs.n	800b35c <__hexnan+0x64>
 800b34e:	2d07      	cmp	r5, #7
 800b350:	dc04      	bgt.n	800b35c <__hexnan+0x64>
 800b352:	462a      	mov	r2, r5
 800b354:	4649      	mov	r1, r9
 800b356:	4620      	mov	r0, r4
 800b358:	f7ff ffa8 	bl	800b2ac <L_shift>
 800b35c:	4544      	cmp	r4, r8
 800b35e:	d950      	bls.n	800b402 <__hexnan+0x10a>
 800b360:	2300      	movs	r3, #0
 800b362:	f1a4 0904 	sub.w	r9, r4, #4
 800b366:	f844 3c04 	str.w	r3, [r4, #-4]
 800b36a:	f8cd b008 	str.w	fp, [sp, #8]
 800b36e:	464c      	mov	r4, r9
 800b370:	461d      	mov	r5, r3
 800b372:	9a03      	ldr	r2, [sp, #12]
 800b374:	e7d7      	b.n	800b326 <__hexnan+0x2e>
 800b376:	2929      	cmp	r1, #41	; 0x29
 800b378:	d156      	bne.n	800b428 <__hexnan+0x130>
 800b37a:	3202      	adds	r2, #2
 800b37c:	f8ca 2000 	str.w	r2, [sl]
 800b380:	f1bb 0f00 	cmp.w	fp, #0
 800b384:	d050      	beq.n	800b428 <__hexnan+0x130>
 800b386:	454c      	cmp	r4, r9
 800b388:	d206      	bcs.n	800b398 <__hexnan+0xa0>
 800b38a:	2d07      	cmp	r5, #7
 800b38c:	dc04      	bgt.n	800b398 <__hexnan+0xa0>
 800b38e:	462a      	mov	r2, r5
 800b390:	4649      	mov	r1, r9
 800b392:	4620      	mov	r0, r4
 800b394:	f7ff ff8a 	bl	800b2ac <L_shift>
 800b398:	4544      	cmp	r4, r8
 800b39a:	d934      	bls.n	800b406 <__hexnan+0x10e>
 800b39c:	f1a8 0204 	sub.w	r2, r8, #4
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b3aa:	429f      	cmp	r7, r3
 800b3ac:	d2f9      	bcs.n	800b3a2 <__hexnan+0xaa>
 800b3ae:	1b3b      	subs	r3, r7, r4
 800b3b0:	f023 0303 	bic.w	r3, r3, #3
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	3401      	adds	r4, #1
 800b3b8:	3e03      	subs	r6, #3
 800b3ba:	42b4      	cmp	r4, r6
 800b3bc:	bf88      	it	hi
 800b3be:	2304      	movhi	r3, #4
 800b3c0:	4443      	add	r3, r8
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f843 2b04 	str.w	r2, [r3], #4
 800b3c8:	429f      	cmp	r7, r3
 800b3ca:	d2fb      	bcs.n	800b3c4 <__hexnan+0xcc>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	b91b      	cbnz	r3, 800b3d8 <__hexnan+0xe0>
 800b3d0:	4547      	cmp	r7, r8
 800b3d2:	d127      	bne.n	800b424 <__hexnan+0x12c>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	603b      	str	r3, [r7, #0]
 800b3d8:	2005      	movs	r0, #5
 800b3da:	e026      	b.n	800b42a <__hexnan+0x132>
 800b3dc:	3501      	adds	r5, #1
 800b3de:	2d08      	cmp	r5, #8
 800b3e0:	f10b 0b01 	add.w	fp, fp, #1
 800b3e4:	dd06      	ble.n	800b3f4 <__hexnan+0xfc>
 800b3e6:	4544      	cmp	r4, r8
 800b3e8:	d9c3      	bls.n	800b372 <__hexnan+0x7a>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3f0:	2501      	movs	r5, #1
 800b3f2:	3c04      	subs	r4, #4
 800b3f4:	6822      	ldr	r2, [r4, #0]
 800b3f6:	f000 000f 	and.w	r0, r0, #15
 800b3fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b3fe:	6022      	str	r2, [r4, #0]
 800b400:	e7b7      	b.n	800b372 <__hexnan+0x7a>
 800b402:	2508      	movs	r5, #8
 800b404:	e7b5      	b.n	800b372 <__hexnan+0x7a>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0df      	beq.n	800b3cc <__hexnan+0xd4>
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295
 800b410:	f1c3 0320 	rsb	r3, r3, #32
 800b414:	fa22 f303 	lsr.w	r3, r2, r3
 800b418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b41c:	401a      	ands	r2, r3
 800b41e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b422:	e7d3      	b.n	800b3cc <__hexnan+0xd4>
 800b424:	3f04      	subs	r7, #4
 800b426:	e7d1      	b.n	800b3cc <__hexnan+0xd4>
 800b428:	2004      	movs	r0, #4
 800b42a:	b007      	add	sp, #28
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b430 <_localeconv_r>:
 800b430:	4800      	ldr	r0, [pc, #0]	; (800b434 <_localeconv_r+0x4>)
 800b432:	4770      	bx	lr
 800b434:	20000168 	.word	0x20000168

0800b438 <__retarget_lock_init_recursive>:
 800b438:	4770      	bx	lr

0800b43a <__retarget_lock_acquire_recursive>:
 800b43a:	4770      	bx	lr

0800b43c <__retarget_lock_release_recursive>:
 800b43c:	4770      	bx	lr

0800b43e <__swhatbuf_r>:
 800b43e:	b570      	push	{r4, r5, r6, lr}
 800b440:	460e      	mov	r6, r1
 800b442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b446:	2900      	cmp	r1, #0
 800b448:	b096      	sub	sp, #88	; 0x58
 800b44a:	4614      	mov	r4, r2
 800b44c:	461d      	mov	r5, r3
 800b44e:	da08      	bge.n	800b462 <__swhatbuf_r+0x24>
 800b450:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	602a      	str	r2, [r5, #0]
 800b458:	061a      	lsls	r2, r3, #24
 800b45a:	d410      	bmi.n	800b47e <__swhatbuf_r+0x40>
 800b45c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b460:	e00e      	b.n	800b480 <__swhatbuf_r+0x42>
 800b462:	466a      	mov	r2, sp
 800b464:	f001 f84e 	bl	800c504 <_fstat_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	dbf1      	blt.n	800b450 <__swhatbuf_r+0x12>
 800b46c:	9a01      	ldr	r2, [sp, #4]
 800b46e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b472:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b476:	425a      	negs	r2, r3
 800b478:	415a      	adcs	r2, r3
 800b47a:	602a      	str	r2, [r5, #0]
 800b47c:	e7ee      	b.n	800b45c <__swhatbuf_r+0x1e>
 800b47e:	2340      	movs	r3, #64	; 0x40
 800b480:	2000      	movs	r0, #0
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	b016      	add	sp, #88	; 0x58
 800b486:	bd70      	pop	{r4, r5, r6, pc}

0800b488 <__smakebuf_r>:
 800b488:	898b      	ldrh	r3, [r1, #12]
 800b48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b48c:	079d      	lsls	r5, r3, #30
 800b48e:	4606      	mov	r6, r0
 800b490:	460c      	mov	r4, r1
 800b492:	d507      	bpl.n	800b4a4 <__smakebuf_r+0x1c>
 800b494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	6123      	str	r3, [r4, #16]
 800b49c:	2301      	movs	r3, #1
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}
 800b4a4:	ab01      	add	r3, sp, #4
 800b4a6:	466a      	mov	r2, sp
 800b4a8:	f7ff ffc9 	bl	800b43e <__swhatbuf_r>
 800b4ac:	9900      	ldr	r1, [sp, #0]
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 fd87 	bl	800bfc4 <_malloc_r>
 800b4b6:	b948      	cbnz	r0, 800b4cc <__smakebuf_r+0x44>
 800b4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d4ef      	bmi.n	800b4a0 <__smakebuf_r+0x18>
 800b4c0:	f023 0303 	bic.w	r3, r3, #3
 800b4c4:	f043 0302 	orr.w	r3, r3, #2
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	e7e3      	b.n	800b494 <__smakebuf_r+0xc>
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <__smakebuf_r+0x7c>)
 800b4ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	6020      	str	r0, [r4, #0]
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	9b00      	ldr	r3, [sp, #0]
 800b4dc:	6163      	str	r3, [r4, #20]
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	6120      	str	r0, [r4, #16]
 800b4e2:	b15b      	cbz	r3, 800b4fc <__smakebuf_r+0x74>
 800b4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f001 f81d 	bl	800c528 <_isatty_r>
 800b4ee:	b128      	cbz	r0, 800b4fc <__smakebuf_r+0x74>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f023 0303 	bic.w	r3, r3, #3
 800b4f6:	f043 0301 	orr.w	r3, r3, #1
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	89a0      	ldrh	r0, [r4, #12]
 800b4fe:	4305      	orrs	r5, r0
 800b500:	81a5      	strh	r5, [r4, #12]
 800b502:	e7cd      	b.n	800b4a0 <__smakebuf_r+0x18>
 800b504:	0800abb1 	.word	0x0800abb1

0800b508 <malloc>:
 800b508:	4b02      	ldr	r3, [pc, #8]	; (800b514 <malloc+0xc>)
 800b50a:	4601      	mov	r1, r0
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f000 bd59 	b.w	800bfc4 <_malloc_r>
 800b512:	bf00      	nop
 800b514:	20000010 	.word	0x20000010

0800b518 <__ascii_mbtowc>:
 800b518:	b082      	sub	sp, #8
 800b51a:	b901      	cbnz	r1, 800b51e <__ascii_mbtowc+0x6>
 800b51c:	a901      	add	r1, sp, #4
 800b51e:	b142      	cbz	r2, 800b532 <__ascii_mbtowc+0x1a>
 800b520:	b14b      	cbz	r3, 800b536 <__ascii_mbtowc+0x1e>
 800b522:	7813      	ldrb	r3, [r2, #0]
 800b524:	600b      	str	r3, [r1, #0]
 800b526:	7812      	ldrb	r2, [r2, #0]
 800b528:	1e10      	subs	r0, r2, #0
 800b52a:	bf18      	it	ne
 800b52c:	2001      	movne	r0, #1
 800b52e:	b002      	add	sp, #8
 800b530:	4770      	bx	lr
 800b532:	4610      	mov	r0, r2
 800b534:	e7fb      	b.n	800b52e <__ascii_mbtowc+0x16>
 800b536:	f06f 0001 	mvn.w	r0, #1
 800b53a:	e7f8      	b.n	800b52e <__ascii_mbtowc+0x16>

0800b53c <_Balloc>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b540:	4604      	mov	r4, r0
 800b542:	460d      	mov	r5, r1
 800b544:	b976      	cbnz	r6, 800b564 <_Balloc+0x28>
 800b546:	2010      	movs	r0, #16
 800b548:	f7ff ffde 	bl	800b508 <malloc>
 800b54c:	4602      	mov	r2, r0
 800b54e:	6260      	str	r0, [r4, #36]	; 0x24
 800b550:	b920      	cbnz	r0, 800b55c <_Balloc+0x20>
 800b552:	4b18      	ldr	r3, [pc, #96]	; (800b5b4 <_Balloc+0x78>)
 800b554:	4818      	ldr	r0, [pc, #96]	; (800b5b8 <_Balloc+0x7c>)
 800b556:	2166      	movs	r1, #102	; 0x66
 800b558:	f000 ff94 	bl	800c484 <__assert_func>
 800b55c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b560:	6006      	str	r6, [r0, #0]
 800b562:	60c6      	str	r6, [r0, #12]
 800b564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b566:	68f3      	ldr	r3, [r6, #12]
 800b568:	b183      	cbz	r3, 800b58c <_Balloc+0x50>
 800b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b572:	b9b8      	cbnz	r0, 800b5a4 <_Balloc+0x68>
 800b574:	2101      	movs	r1, #1
 800b576:	fa01 f605 	lsl.w	r6, r1, r5
 800b57a:	1d72      	adds	r2, r6, #5
 800b57c:	0092      	lsls	r2, r2, #2
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 fc9d 	bl	800bebe <_calloc_r>
 800b584:	b160      	cbz	r0, 800b5a0 <_Balloc+0x64>
 800b586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b58a:	e00e      	b.n	800b5aa <_Balloc+0x6e>
 800b58c:	2221      	movs	r2, #33	; 0x21
 800b58e:	2104      	movs	r1, #4
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fc94 	bl	800bebe <_calloc_r>
 800b596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b598:	60f0      	str	r0, [r6, #12]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e4      	bne.n	800b56a <_Balloc+0x2e>
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	6802      	ldr	r2, [r0, #0]
 800b5a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5b0:	e7f7      	b.n	800b5a2 <_Balloc+0x66>
 800b5b2:	bf00      	nop
 800b5b4:	0800cc06 	.word	0x0800cc06
 800b5b8:	0800cd68 	.word	0x0800cd68

0800b5bc <_Bfree>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b976      	cbnz	r6, 800b5e4 <_Bfree+0x28>
 800b5c6:	2010      	movs	r0, #16
 800b5c8:	f7ff ff9e 	bl	800b508 <malloc>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	6268      	str	r0, [r5, #36]	; 0x24
 800b5d0:	b920      	cbnz	r0, 800b5dc <_Bfree+0x20>
 800b5d2:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <_Bfree+0x3c>)
 800b5d4:	4809      	ldr	r0, [pc, #36]	; (800b5fc <_Bfree+0x40>)
 800b5d6:	218a      	movs	r1, #138	; 0x8a
 800b5d8:	f000 ff54 	bl	800c484 <__assert_func>
 800b5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5e0:	6006      	str	r6, [r0, #0]
 800b5e2:	60c6      	str	r6, [r0, #12]
 800b5e4:	b13c      	cbz	r4, 800b5f6 <_Bfree+0x3a>
 800b5e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5e8:	6862      	ldr	r2, [r4, #4]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5f0:	6021      	str	r1, [r4, #0]
 800b5f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	0800cc06 	.word	0x0800cc06
 800b5fc:	0800cd68 	.word	0x0800cd68

0800b600 <__multadd>:
 800b600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b604:	690d      	ldr	r5, [r1, #16]
 800b606:	4607      	mov	r7, r0
 800b608:	460c      	mov	r4, r1
 800b60a:	461e      	mov	r6, r3
 800b60c:	f101 0c14 	add.w	ip, r1, #20
 800b610:	2000      	movs	r0, #0
 800b612:	f8dc 3000 	ldr.w	r3, [ip]
 800b616:	b299      	uxth	r1, r3
 800b618:	fb02 6101 	mla	r1, r2, r1, r6
 800b61c:	0c1e      	lsrs	r6, r3, #16
 800b61e:	0c0b      	lsrs	r3, r1, #16
 800b620:	fb02 3306 	mla	r3, r2, r6, r3
 800b624:	b289      	uxth	r1, r1
 800b626:	3001      	adds	r0, #1
 800b628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b62c:	4285      	cmp	r5, r0
 800b62e:	f84c 1b04 	str.w	r1, [ip], #4
 800b632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b636:	dcec      	bgt.n	800b612 <__multadd+0x12>
 800b638:	b30e      	cbz	r6, 800b67e <__multadd+0x7e>
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	dc19      	bgt.n	800b674 <__multadd+0x74>
 800b640:	6861      	ldr	r1, [r4, #4]
 800b642:	4638      	mov	r0, r7
 800b644:	3101      	adds	r1, #1
 800b646:	f7ff ff79 	bl	800b53c <_Balloc>
 800b64a:	4680      	mov	r8, r0
 800b64c:	b928      	cbnz	r0, 800b65a <__multadd+0x5a>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <__multadd+0x84>)
 800b652:	480d      	ldr	r0, [pc, #52]	; (800b688 <__multadd+0x88>)
 800b654:	21b5      	movs	r1, #181	; 0xb5
 800b656:	f000 ff15 	bl	800c484 <__assert_func>
 800b65a:	6922      	ldr	r2, [r4, #16]
 800b65c:	3202      	adds	r2, #2
 800b65e:	f104 010c 	add.w	r1, r4, #12
 800b662:	0092      	lsls	r2, r2, #2
 800b664:	300c      	adds	r0, #12
 800b666:	f7fc fcab 	bl	8007fc0 <memcpy>
 800b66a:	4621      	mov	r1, r4
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7ff ffa5 	bl	800b5bc <_Bfree>
 800b672:	4644      	mov	r4, r8
 800b674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b678:	3501      	adds	r5, #1
 800b67a:	615e      	str	r6, [r3, #20]
 800b67c:	6125      	str	r5, [r4, #16]
 800b67e:	4620      	mov	r0, r4
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	0800cc78 	.word	0x0800cc78
 800b688:	0800cd68 	.word	0x0800cd68

0800b68c <__s2b>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	4615      	mov	r5, r2
 800b694:	461f      	mov	r7, r3
 800b696:	2209      	movs	r2, #9
 800b698:	3308      	adds	r3, #8
 800b69a:	4606      	mov	r6, r0
 800b69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	db09      	blt.n	800b6bc <__s2b+0x30>
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff ff47 	bl	800b53c <_Balloc>
 800b6ae:	b940      	cbnz	r0, 800b6c2 <__s2b+0x36>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	4b19      	ldr	r3, [pc, #100]	; (800b718 <__s2b+0x8c>)
 800b6b4:	4819      	ldr	r0, [pc, #100]	; (800b71c <__s2b+0x90>)
 800b6b6:	21ce      	movs	r1, #206	; 0xce
 800b6b8:	f000 fee4 	bl	800c484 <__assert_func>
 800b6bc:	0052      	lsls	r2, r2, #1
 800b6be:	3101      	adds	r1, #1
 800b6c0:	e7f0      	b.n	800b6a4 <__s2b+0x18>
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	6143      	str	r3, [r0, #20]
 800b6c6:	2d09      	cmp	r5, #9
 800b6c8:	f04f 0301 	mov.w	r3, #1
 800b6cc:	6103      	str	r3, [r0, #16]
 800b6ce:	dd16      	ble.n	800b6fe <__s2b+0x72>
 800b6d0:	f104 0909 	add.w	r9, r4, #9
 800b6d4:	46c8      	mov	r8, r9
 800b6d6:	442c      	add	r4, r5
 800b6d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6dc:	4601      	mov	r1, r0
 800b6de:	3b30      	subs	r3, #48	; 0x30
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7ff ff8c 	bl	800b600 <__multadd>
 800b6e8:	45a0      	cmp	r8, r4
 800b6ea:	d1f5      	bne.n	800b6d8 <__s2b+0x4c>
 800b6ec:	f1a5 0408 	sub.w	r4, r5, #8
 800b6f0:	444c      	add	r4, r9
 800b6f2:	1b2d      	subs	r5, r5, r4
 800b6f4:	1963      	adds	r3, r4, r5
 800b6f6:	42bb      	cmp	r3, r7
 800b6f8:	db04      	blt.n	800b704 <__s2b+0x78>
 800b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	340a      	adds	r4, #10
 800b700:	2509      	movs	r5, #9
 800b702:	e7f6      	b.n	800b6f2 <__s2b+0x66>
 800b704:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b708:	4601      	mov	r1, r0
 800b70a:	3b30      	subs	r3, #48	; 0x30
 800b70c:	220a      	movs	r2, #10
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ff76 	bl	800b600 <__multadd>
 800b714:	e7ee      	b.n	800b6f4 <__s2b+0x68>
 800b716:	bf00      	nop
 800b718:	0800cc78 	.word	0x0800cc78
 800b71c:	0800cd68 	.word	0x0800cd68

0800b720 <__hi0bits>:
 800b720:	0c03      	lsrs	r3, r0, #16
 800b722:	041b      	lsls	r3, r3, #16
 800b724:	b9d3      	cbnz	r3, 800b75c <__hi0bits+0x3c>
 800b726:	0400      	lsls	r0, r0, #16
 800b728:	2310      	movs	r3, #16
 800b72a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b72e:	bf04      	itt	eq
 800b730:	0200      	lsleq	r0, r0, #8
 800b732:	3308      	addeq	r3, #8
 800b734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b738:	bf04      	itt	eq
 800b73a:	0100      	lsleq	r0, r0, #4
 800b73c:	3304      	addeq	r3, #4
 800b73e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b742:	bf04      	itt	eq
 800b744:	0080      	lsleq	r0, r0, #2
 800b746:	3302      	addeq	r3, #2
 800b748:	2800      	cmp	r0, #0
 800b74a:	db05      	blt.n	800b758 <__hi0bits+0x38>
 800b74c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b750:	f103 0301 	add.w	r3, r3, #1
 800b754:	bf08      	it	eq
 800b756:	2320      	moveq	r3, #32
 800b758:	4618      	mov	r0, r3
 800b75a:	4770      	bx	lr
 800b75c:	2300      	movs	r3, #0
 800b75e:	e7e4      	b.n	800b72a <__hi0bits+0xa>

0800b760 <__lo0bits>:
 800b760:	6803      	ldr	r3, [r0, #0]
 800b762:	f013 0207 	ands.w	r2, r3, #7
 800b766:	4601      	mov	r1, r0
 800b768:	d00b      	beq.n	800b782 <__lo0bits+0x22>
 800b76a:	07da      	lsls	r2, r3, #31
 800b76c:	d423      	bmi.n	800b7b6 <__lo0bits+0x56>
 800b76e:	0798      	lsls	r0, r3, #30
 800b770:	bf49      	itett	mi
 800b772:	085b      	lsrmi	r3, r3, #1
 800b774:	089b      	lsrpl	r3, r3, #2
 800b776:	2001      	movmi	r0, #1
 800b778:	600b      	strmi	r3, [r1, #0]
 800b77a:	bf5c      	itt	pl
 800b77c:	600b      	strpl	r3, [r1, #0]
 800b77e:	2002      	movpl	r0, #2
 800b780:	4770      	bx	lr
 800b782:	b298      	uxth	r0, r3
 800b784:	b9a8      	cbnz	r0, 800b7b2 <__lo0bits+0x52>
 800b786:	0c1b      	lsrs	r3, r3, #16
 800b788:	2010      	movs	r0, #16
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	b90a      	cbnz	r2, 800b792 <__lo0bits+0x32>
 800b78e:	3008      	adds	r0, #8
 800b790:	0a1b      	lsrs	r3, r3, #8
 800b792:	071a      	lsls	r2, r3, #28
 800b794:	bf04      	itt	eq
 800b796:	091b      	lsreq	r3, r3, #4
 800b798:	3004      	addeq	r0, #4
 800b79a:	079a      	lsls	r2, r3, #30
 800b79c:	bf04      	itt	eq
 800b79e:	089b      	lsreq	r3, r3, #2
 800b7a0:	3002      	addeq	r0, #2
 800b7a2:	07da      	lsls	r2, r3, #31
 800b7a4:	d403      	bmi.n	800b7ae <__lo0bits+0x4e>
 800b7a6:	085b      	lsrs	r3, r3, #1
 800b7a8:	f100 0001 	add.w	r0, r0, #1
 800b7ac:	d005      	beq.n	800b7ba <__lo0bits+0x5a>
 800b7ae:	600b      	str	r3, [r1, #0]
 800b7b0:	4770      	bx	lr
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	e7e9      	b.n	800b78a <__lo0bits+0x2a>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	4770      	bx	lr
 800b7ba:	2020      	movs	r0, #32
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <__i2b>:
 800b7c0:	b510      	push	{r4, lr}
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	f7ff feb9 	bl	800b53c <_Balloc>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	b928      	cbnz	r0, 800b7da <__i2b+0x1a>
 800b7ce:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <__i2b+0x24>)
 800b7d0:	4805      	ldr	r0, [pc, #20]	; (800b7e8 <__i2b+0x28>)
 800b7d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7d6:	f000 fe55 	bl	800c484 <__assert_func>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	6144      	str	r4, [r0, #20]
 800b7de:	6103      	str	r3, [r0, #16]
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	bf00      	nop
 800b7e4:	0800cc78 	.word	0x0800cc78
 800b7e8:	0800cd68 	.word	0x0800cd68

0800b7ec <__multiply>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	4691      	mov	r9, r2
 800b7f2:	690a      	ldr	r2, [r1, #16]
 800b7f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	bfb8      	it	lt
 800b7fc:	460b      	movlt	r3, r1
 800b7fe:	460c      	mov	r4, r1
 800b800:	bfbc      	itt	lt
 800b802:	464c      	movlt	r4, r9
 800b804:	4699      	movlt	r9, r3
 800b806:	6927      	ldr	r7, [r4, #16]
 800b808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b80c:	68a3      	ldr	r3, [r4, #8]
 800b80e:	6861      	ldr	r1, [r4, #4]
 800b810:	eb07 060a 	add.w	r6, r7, sl
 800b814:	42b3      	cmp	r3, r6
 800b816:	b085      	sub	sp, #20
 800b818:	bfb8      	it	lt
 800b81a:	3101      	addlt	r1, #1
 800b81c:	f7ff fe8e 	bl	800b53c <_Balloc>
 800b820:	b930      	cbnz	r0, 800b830 <__multiply+0x44>
 800b822:	4602      	mov	r2, r0
 800b824:	4b44      	ldr	r3, [pc, #272]	; (800b938 <__multiply+0x14c>)
 800b826:	4845      	ldr	r0, [pc, #276]	; (800b93c <__multiply+0x150>)
 800b828:	f240 115d 	movw	r1, #349	; 0x15d
 800b82c:	f000 fe2a 	bl	800c484 <__assert_func>
 800b830:	f100 0514 	add.w	r5, r0, #20
 800b834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b838:	462b      	mov	r3, r5
 800b83a:	2200      	movs	r2, #0
 800b83c:	4543      	cmp	r3, r8
 800b83e:	d321      	bcc.n	800b884 <__multiply+0x98>
 800b840:	f104 0314 	add.w	r3, r4, #20
 800b844:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b848:	f109 0314 	add.w	r3, r9, #20
 800b84c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	1b3a      	subs	r2, r7, r4
 800b854:	3a15      	subs	r2, #21
 800b856:	f022 0203 	bic.w	r2, r2, #3
 800b85a:	3204      	adds	r2, #4
 800b85c:	f104 0115 	add.w	r1, r4, #21
 800b860:	428f      	cmp	r7, r1
 800b862:	bf38      	it	cc
 800b864:	2204      	movcc	r2, #4
 800b866:	9201      	str	r2, [sp, #4]
 800b868:	9a02      	ldr	r2, [sp, #8]
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d80c      	bhi.n	800b88a <__multiply+0x9e>
 800b870:	2e00      	cmp	r6, #0
 800b872:	dd03      	ble.n	800b87c <__multiply+0x90>
 800b874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05a      	beq.n	800b932 <__multiply+0x146>
 800b87c:	6106      	str	r6, [r0, #16]
 800b87e:	b005      	add	sp, #20
 800b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b884:	f843 2b04 	str.w	r2, [r3], #4
 800b888:	e7d8      	b.n	800b83c <__multiply+0x50>
 800b88a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b88e:	f1ba 0f00 	cmp.w	sl, #0
 800b892:	d024      	beq.n	800b8de <__multiply+0xf2>
 800b894:	f104 0e14 	add.w	lr, r4, #20
 800b898:	46a9      	mov	r9, r5
 800b89a:	f04f 0c00 	mov.w	ip, #0
 800b89e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8a2:	f8d9 1000 	ldr.w	r1, [r9]
 800b8a6:	fa1f fb82 	uxth.w	fp, r2
 800b8aa:	b289      	uxth	r1, r1
 800b8ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b8b8:	4461      	add	r1, ip
 800b8ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8be:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8c6:	b289      	uxth	r1, r1
 800b8c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8cc:	4577      	cmp	r7, lr
 800b8ce:	f849 1b04 	str.w	r1, [r9], #4
 800b8d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8d6:	d8e2      	bhi.n	800b89e <__multiply+0xb2>
 800b8d8:	9a01      	ldr	r2, [sp, #4]
 800b8da:	f845 c002 	str.w	ip, [r5, r2]
 800b8de:	9a03      	ldr	r2, [sp, #12]
 800b8e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ea:	d020      	beq.n	800b92e <__multiply+0x142>
 800b8ec:	6829      	ldr	r1, [r5, #0]
 800b8ee:	f104 0c14 	add.w	ip, r4, #20
 800b8f2:	46ae      	mov	lr, r5
 800b8f4:	f04f 0a00 	mov.w	sl, #0
 800b8f8:	f8bc b000 	ldrh.w	fp, [ip]
 800b8fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b900:	fb09 220b 	mla	r2, r9, fp, r2
 800b904:	4492      	add	sl, r2
 800b906:	b289      	uxth	r1, r1
 800b908:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b90c:	f84e 1b04 	str.w	r1, [lr], #4
 800b910:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b914:	f8be 1000 	ldrh.w	r1, [lr]
 800b918:	0c12      	lsrs	r2, r2, #16
 800b91a:	fb09 1102 	mla	r1, r9, r2, r1
 800b91e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b922:	4567      	cmp	r7, ip
 800b924:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b928:	d8e6      	bhi.n	800b8f8 <__multiply+0x10c>
 800b92a:	9a01      	ldr	r2, [sp, #4]
 800b92c:	50a9      	str	r1, [r5, r2]
 800b92e:	3504      	adds	r5, #4
 800b930:	e79a      	b.n	800b868 <__multiply+0x7c>
 800b932:	3e01      	subs	r6, #1
 800b934:	e79c      	b.n	800b870 <__multiply+0x84>
 800b936:	bf00      	nop
 800b938:	0800cc78 	.word	0x0800cc78
 800b93c:	0800cd68 	.word	0x0800cd68

0800b940 <__pow5mult>:
 800b940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b944:	4615      	mov	r5, r2
 800b946:	f012 0203 	ands.w	r2, r2, #3
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	d007      	beq.n	800b960 <__pow5mult+0x20>
 800b950:	4c25      	ldr	r4, [pc, #148]	; (800b9e8 <__pow5mult+0xa8>)
 800b952:	3a01      	subs	r2, #1
 800b954:	2300      	movs	r3, #0
 800b956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b95a:	f7ff fe51 	bl	800b600 <__multadd>
 800b95e:	4607      	mov	r7, r0
 800b960:	10ad      	asrs	r5, r5, #2
 800b962:	d03d      	beq.n	800b9e0 <__pow5mult+0xa0>
 800b964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b966:	b97c      	cbnz	r4, 800b988 <__pow5mult+0x48>
 800b968:	2010      	movs	r0, #16
 800b96a:	f7ff fdcd 	bl	800b508 <malloc>
 800b96e:	4602      	mov	r2, r0
 800b970:	6270      	str	r0, [r6, #36]	; 0x24
 800b972:	b928      	cbnz	r0, 800b980 <__pow5mult+0x40>
 800b974:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <__pow5mult+0xac>)
 800b976:	481e      	ldr	r0, [pc, #120]	; (800b9f0 <__pow5mult+0xb0>)
 800b978:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b97c:	f000 fd82 	bl	800c484 <__assert_func>
 800b980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b984:	6004      	str	r4, [r0, #0]
 800b986:	60c4      	str	r4, [r0, #12]
 800b988:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b98c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b990:	b94c      	cbnz	r4, 800b9a6 <__pow5mult+0x66>
 800b992:	f240 2171 	movw	r1, #625	; 0x271
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff ff12 	bl	800b7c0 <__i2b>
 800b99c:	2300      	movs	r3, #0
 800b99e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	6003      	str	r3, [r0, #0]
 800b9a6:	f04f 0900 	mov.w	r9, #0
 800b9aa:	07eb      	lsls	r3, r5, #31
 800b9ac:	d50a      	bpl.n	800b9c4 <__pow5mult+0x84>
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ff1a 	bl	800b7ec <__multiply>
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	4680      	mov	r8, r0
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff fdfd 	bl	800b5bc <_Bfree>
 800b9c2:	4647      	mov	r7, r8
 800b9c4:	106d      	asrs	r5, r5, #1
 800b9c6:	d00b      	beq.n	800b9e0 <__pow5mult+0xa0>
 800b9c8:	6820      	ldr	r0, [r4, #0]
 800b9ca:	b938      	cbnz	r0, 800b9dc <__pow5mult+0x9c>
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ff0b 	bl	800b7ec <__multiply>
 800b9d6:	6020      	str	r0, [r4, #0]
 800b9d8:	f8c0 9000 	str.w	r9, [r0]
 800b9dc:	4604      	mov	r4, r0
 800b9de:	e7e4      	b.n	800b9aa <__pow5mult+0x6a>
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800ceb8 	.word	0x0800ceb8
 800b9ec:	0800cc06 	.word	0x0800cc06
 800b9f0:	0800cd68 	.word	0x0800cd68

0800b9f4 <__lshift>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	6849      	ldr	r1, [r1, #4]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	4607      	mov	r7, r0
 800ba06:	4691      	mov	r9, r2
 800ba08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba0c:	f108 0601 	add.w	r6, r8, #1
 800ba10:	42b3      	cmp	r3, r6
 800ba12:	db0b      	blt.n	800ba2c <__lshift+0x38>
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7ff fd91 	bl	800b53c <_Balloc>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	b948      	cbnz	r0, 800ba32 <__lshift+0x3e>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <__lshift+0xd8>)
 800ba22:	482b      	ldr	r0, [pc, #172]	; (800bad0 <__lshift+0xdc>)
 800ba24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba28:	f000 fd2c 	bl	800c484 <__assert_func>
 800ba2c:	3101      	adds	r1, #1
 800ba2e:	005b      	lsls	r3, r3, #1
 800ba30:	e7ee      	b.n	800ba10 <__lshift+0x1c>
 800ba32:	2300      	movs	r3, #0
 800ba34:	f100 0114 	add.w	r1, r0, #20
 800ba38:	f100 0210 	add.w	r2, r0, #16
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	4553      	cmp	r3, sl
 800ba40:	db37      	blt.n	800bab2 <__lshift+0xbe>
 800ba42:	6920      	ldr	r0, [r4, #16]
 800ba44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba48:	f104 0314 	add.w	r3, r4, #20
 800ba4c:	f019 091f 	ands.w	r9, r9, #31
 800ba50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba58:	d02f      	beq.n	800baba <__lshift+0xc6>
 800ba5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba5e:	468a      	mov	sl, r1
 800ba60:	f04f 0c00 	mov.w	ip, #0
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	fa02 f209 	lsl.w	r2, r2, r9
 800ba6a:	ea42 020c 	orr.w	r2, r2, ip
 800ba6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ba72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba76:	4298      	cmp	r0, r3
 800ba78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba7c:	d8f2      	bhi.n	800ba64 <__lshift+0x70>
 800ba7e:	1b03      	subs	r3, r0, r4
 800ba80:	3b15      	subs	r3, #21
 800ba82:	f023 0303 	bic.w	r3, r3, #3
 800ba86:	3304      	adds	r3, #4
 800ba88:	f104 0215 	add.w	r2, r4, #21
 800ba8c:	4290      	cmp	r0, r2
 800ba8e:	bf38      	it	cc
 800ba90:	2304      	movcc	r3, #4
 800ba92:	f841 c003 	str.w	ip, [r1, r3]
 800ba96:	f1bc 0f00 	cmp.w	ip, #0
 800ba9a:	d001      	beq.n	800baa0 <__lshift+0xac>
 800ba9c:	f108 0602 	add.w	r6, r8, #2
 800baa0:	3e01      	subs	r6, #1
 800baa2:	4638      	mov	r0, r7
 800baa4:	612e      	str	r6, [r5, #16]
 800baa6:	4621      	mov	r1, r4
 800baa8:	f7ff fd88 	bl	800b5bc <_Bfree>
 800baac:	4628      	mov	r0, r5
 800baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bab6:	3301      	adds	r3, #1
 800bab8:	e7c1      	b.n	800ba3e <__lshift+0x4a>
 800baba:	3904      	subs	r1, #4
 800babc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bac4:	4298      	cmp	r0, r3
 800bac6:	d8f9      	bhi.n	800babc <__lshift+0xc8>
 800bac8:	e7ea      	b.n	800baa0 <__lshift+0xac>
 800baca:	bf00      	nop
 800bacc:	0800cc78 	.word	0x0800cc78
 800bad0:	0800cd68 	.word	0x0800cd68

0800bad4 <__mcmp>:
 800bad4:	b530      	push	{r4, r5, lr}
 800bad6:	6902      	ldr	r2, [r0, #16]
 800bad8:	690c      	ldr	r4, [r1, #16]
 800bada:	1b12      	subs	r2, r2, r4
 800badc:	d10e      	bne.n	800bafc <__mcmp+0x28>
 800bade:	f100 0314 	add.w	r3, r0, #20
 800bae2:	3114      	adds	r1, #20
 800bae4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bae8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800baec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800baf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800baf4:	42a5      	cmp	r5, r4
 800baf6:	d003      	beq.n	800bb00 <__mcmp+0x2c>
 800baf8:	d305      	bcc.n	800bb06 <__mcmp+0x32>
 800bafa:	2201      	movs	r2, #1
 800bafc:	4610      	mov	r0, r2
 800bafe:	bd30      	pop	{r4, r5, pc}
 800bb00:	4283      	cmp	r3, r0
 800bb02:	d3f3      	bcc.n	800baec <__mcmp+0x18>
 800bb04:	e7fa      	b.n	800bafc <__mcmp+0x28>
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	e7f7      	b.n	800bafc <__mcmp+0x28>

0800bb0c <__mdiff>:
 800bb0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	4606      	mov	r6, r0
 800bb14:	4611      	mov	r1, r2
 800bb16:	4620      	mov	r0, r4
 800bb18:	4690      	mov	r8, r2
 800bb1a:	f7ff ffdb 	bl	800bad4 <__mcmp>
 800bb1e:	1e05      	subs	r5, r0, #0
 800bb20:	d110      	bne.n	800bb44 <__mdiff+0x38>
 800bb22:	4629      	mov	r1, r5
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7ff fd09 	bl	800b53c <_Balloc>
 800bb2a:	b930      	cbnz	r0, 800bb3a <__mdiff+0x2e>
 800bb2c:	4b3a      	ldr	r3, [pc, #232]	; (800bc18 <__mdiff+0x10c>)
 800bb2e:	4602      	mov	r2, r0
 800bb30:	f240 2132 	movw	r1, #562	; 0x232
 800bb34:	4839      	ldr	r0, [pc, #228]	; (800bc1c <__mdiff+0x110>)
 800bb36:	f000 fca5 	bl	800c484 <__assert_func>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb44:	bfa4      	itt	ge
 800bb46:	4643      	movge	r3, r8
 800bb48:	46a0      	movge	r8, r4
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb50:	bfa6      	itte	ge
 800bb52:	461c      	movge	r4, r3
 800bb54:	2500      	movge	r5, #0
 800bb56:	2501      	movlt	r5, #1
 800bb58:	f7ff fcf0 	bl	800b53c <_Balloc>
 800bb5c:	b920      	cbnz	r0, 800bb68 <__mdiff+0x5c>
 800bb5e:	4b2e      	ldr	r3, [pc, #184]	; (800bc18 <__mdiff+0x10c>)
 800bb60:	4602      	mov	r2, r0
 800bb62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb66:	e7e5      	b.n	800bb34 <__mdiff+0x28>
 800bb68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb6c:	6926      	ldr	r6, [r4, #16]
 800bb6e:	60c5      	str	r5, [r0, #12]
 800bb70:	f104 0914 	add.w	r9, r4, #20
 800bb74:	f108 0514 	add.w	r5, r8, #20
 800bb78:	f100 0e14 	add.w	lr, r0, #20
 800bb7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb84:	f108 0210 	add.w	r2, r8, #16
 800bb88:	46f2      	mov	sl, lr
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb94:	fa1f f883 	uxth.w	r8, r3
 800bb98:	fa11 f18b 	uxtah	r1, r1, fp
 800bb9c:	0c1b      	lsrs	r3, r3, #16
 800bb9e:	eba1 0808 	sub.w	r8, r1, r8
 800bba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bba6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbaa:	fa1f f888 	uxth.w	r8, r8
 800bbae:	1419      	asrs	r1, r3, #16
 800bbb0:	454e      	cmp	r6, r9
 800bbb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbb6:	f84a 3b04 	str.w	r3, [sl], #4
 800bbba:	d8e7      	bhi.n	800bb8c <__mdiff+0x80>
 800bbbc:	1b33      	subs	r3, r6, r4
 800bbbe:	3b15      	subs	r3, #21
 800bbc0:	f023 0303 	bic.w	r3, r3, #3
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	3415      	adds	r4, #21
 800bbc8:	42a6      	cmp	r6, r4
 800bbca:	bf38      	it	cc
 800bbcc:	2304      	movcc	r3, #4
 800bbce:	441d      	add	r5, r3
 800bbd0:	4473      	add	r3, lr
 800bbd2:	469e      	mov	lr, r3
 800bbd4:	462e      	mov	r6, r5
 800bbd6:	4566      	cmp	r6, ip
 800bbd8:	d30e      	bcc.n	800bbf8 <__mdiff+0xec>
 800bbda:	f10c 0203 	add.w	r2, ip, #3
 800bbde:	1b52      	subs	r2, r2, r5
 800bbe0:	f022 0203 	bic.w	r2, r2, #3
 800bbe4:	3d03      	subs	r5, #3
 800bbe6:	45ac      	cmp	ip, r5
 800bbe8:	bf38      	it	cc
 800bbea:	2200      	movcc	r2, #0
 800bbec:	441a      	add	r2, r3
 800bbee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbf2:	b17b      	cbz	r3, 800bc14 <__mdiff+0x108>
 800bbf4:	6107      	str	r7, [r0, #16]
 800bbf6:	e7a3      	b.n	800bb40 <__mdiff+0x34>
 800bbf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bbfc:	fa11 f288 	uxtah	r2, r1, r8
 800bc00:	1414      	asrs	r4, r2, #16
 800bc02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc06:	b292      	uxth	r2, r2
 800bc08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc0c:	f84e 2b04 	str.w	r2, [lr], #4
 800bc10:	1421      	asrs	r1, r4, #16
 800bc12:	e7e0      	b.n	800bbd6 <__mdiff+0xca>
 800bc14:	3f01      	subs	r7, #1
 800bc16:	e7ea      	b.n	800bbee <__mdiff+0xe2>
 800bc18:	0800cc78 	.word	0x0800cc78
 800bc1c:	0800cd68 	.word	0x0800cd68

0800bc20 <__ulp>:
 800bc20:	b082      	sub	sp, #8
 800bc22:	ed8d 0b00 	vstr	d0, [sp]
 800bc26:	9b01      	ldr	r3, [sp, #4]
 800bc28:	4912      	ldr	r1, [pc, #72]	; (800bc74 <__ulp+0x54>)
 800bc2a:	4019      	ands	r1, r3
 800bc2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc30:	2900      	cmp	r1, #0
 800bc32:	dd05      	ble.n	800bc40 <__ulp+0x20>
 800bc34:	2200      	movs	r2, #0
 800bc36:	460b      	mov	r3, r1
 800bc38:	ec43 2b10 	vmov	d0, r2, r3
 800bc3c:	b002      	add	sp, #8
 800bc3e:	4770      	bx	lr
 800bc40:	4249      	negs	r1, r1
 800bc42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc46:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc4a:	f04f 0200 	mov.w	r2, #0
 800bc4e:	f04f 0300 	mov.w	r3, #0
 800bc52:	da04      	bge.n	800bc5e <__ulp+0x3e>
 800bc54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc58:	fa41 f300 	asr.w	r3, r1, r0
 800bc5c:	e7ec      	b.n	800bc38 <__ulp+0x18>
 800bc5e:	f1a0 0114 	sub.w	r1, r0, #20
 800bc62:	291e      	cmp	r1, #30
 800bc64:	bfda      	itte	le
 800bc66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc6a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc6e:	2101      	movgt	r1, #1
 800bc70:	460a      	mov	r2, r1
 800bc72:	e7e1      	b.n	800bc38 <__ulp+0x18>
 800bc74:	7ff00000 	.word	0x7ff00000

0800bc78 <__b2d>:
 800bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7a:	6905      	ldr	r5, [r0, #16]
 800bc7c:	f100 0714 	add.w	r7, r0, #20
 800bc80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bc84:	1f2e      	subs	r6, r5, #4
 800bc86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f7ff fd48 	bl	800b720 <__hi0bits>
 800bc90:	f1c0 0320 	rsb	r3, r0, #32
 800bc94:	280a      	cmp	r0, #10
 800bc96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd14 <__b2d+0x9c>
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	dc14      	bgt.n	800bcc8 <__b2d+0x50>
 800bc9e:	f1c0 0e0b 	rsb	lr, r0, #11
 800bca2:	fa24 f10e 	lsr.w	r1, r4, lr
 800bca6:	42b7      	cmp	r7, r6
 800bca8:	ea41 030c 	orr.w	r3, r1, ip
 800bcac:	bf34      	ite	cc
 800bcae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcb2:	2100      	movcs	r1, #0
 800bcb4:	3015      	adds	r0, #21
 800bcb6:	fa04 f000 	lsl.w	r0, r4, r0
 800bcba:	fa21 f10e 	lsr.w	r1, r1, lr
 800bcbe:	ea40 0201 	orr.w	r2, r0, r1
 800bcc2:	ec43 2b10 	vmov	d0, r2, r3
 800bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc8:	42b7      	cmp	r7, r6
 800bcca:	bf3a      	itte	cc
 800bccc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcd0:	f1a5 0608 	subcc.w	r6, r5, #8
 800bcd4:	2100      	movcs	r1, #0
 800bcd6:	380b      	subs	r0, #11
 800bcd8:	d017      	beq.n	800bd0a <__b2d+0x92>
 800bcda:	f1c0 0c20 	rsb	ip, r0, #32
 800bcde:	fa04 f500 	lsl.w	r5, r4, r0
 800bce2:	42be      	cmp	r6, r7
 800bce4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bce8:	ea45 0504 	orr.w	r5, r5, r4
 800bcec:	bf8c      	ite	hi
 800bcee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bcf2:	2400      	movls	r4, #0
 800bcf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bcf8:	fa01 f000 	lsl.w	r0, r1, r0
 800bcfc:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd04:	ea40 0204 	orr.w	r2, r0, r4
 800bd08:	e7db      	b.n	800bcc2 <__b2d+0x4a>
 800bd0a:	ea44 030c 	orr.w	r3, r4, ip
 800bd0e:	460a      	mov	r2, r1
 800bd10:	e7d7      	b.n	800bcc2 <__b2d+0x4a>
 800bd12:	bf00      	nop
 800bd14:	3ff00000 	.word	0x3ff00000

0800bd18 <__d2b>:
 800bd18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	4689      	mov	r9, r1
 800bd1e:	2101      	movs	r1, #1
 800bd20:	ec57 6b10 	vmov	r6, r7, d0
 800bd24:	4690      	mov	r8, r2
 800bd26:	f7ff fc09 	bl	800b53c <_Balloc>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	b930      	cbnz	r0, 800bd3c <__d2b+0x24>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <__d2b+0xb0>)
 800bd32:	4826      	ldr	r0, [pc, #152]	; (800bdcc <__d2b+0xb4>)
 800bd34:	f240 310a 	movw	r1, #778	; 0x30a
 800bd38:	f000 fba4 	bl	800c484 <__assert_func>
 800bd3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd44:	bb35      	cbnz	r5, 800bd94 <__d2b+0x7c>
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	9301      	str	r3, [sp, #4]
 800bd4a:	d028      	beq.n	800bd9e <__d2b+0x86>
 800bd4c:	4668      	mov	r0, sp
 800bd4e:	9600      	str	r6, [sp, #0]
 800bd50:	f7ff fd06 	bl	800b760 <__lo0bits>
 800bd54:	9900      	ldr	r1, [sp, #0]
 800bd56:	b300      	cbz	r0, 800bd9a <__d2b+0x82>
 800bd58:	9a01      	ldr	r2, [sp, #4]
 800bd5a:	f1c0 0320 	rsb	r3, r0, #32
 800bd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd62:	430b      	orrs	r3, r1
 800bd64:	40c2      	lsrs	r2, r0
 800bd66:	6163      	str	r3, [r4, #20]
 800bd68:	9201      	str	r2, [sp, #4]
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	61a3      	str	r3, [r4, #24]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	bf14      	ite	ne
 800bd72:	2202      	movne	r2, #2
 800bd74:	2201      	moveq	r2, #1
 800bd76:	6122      	str	r2, [r4, #16]
 800bd78:	b1d5      	cbz	r5, 800bdb0 <__d2b+0x98>
 800bd7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd7e:	4405      	add	r5, r0
 800bd80:	f8c9 5000 	str.w	r5, [r9]
 800bd84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd88:	f8c8 0000 	str.w	r0, [r8]
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	b003      	add	sp, #12
 800bd90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd98:	e7d5      	b.n	800bd46 <__d2b+0x2e>
 800bd9a:	6161      	str	r1, [r4, #20]
 800bd9c:	e7e5      	b.n	800bd6a <__d2b+0x52>
 800bd9e:	a801      	add	r0, sp, #4
 800bda0:	f7ff fcde 	bl	800b760 <__lo0bits>
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	6163      	str	r3, [r4, #20]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	6122      	str	r2, [r4, #16]
 800bdac:	3020      	adds	r0, #32
 800bdae:	e7e3      	b.n	800bd78 <__d2b+0x60>
 800bdb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdb8:	f8c9 0000 	str.w	r0, [r9]
 800bdbc:	6918      	ldr	r0, [r3, #16]
 800bdbe:	f7ff fcaf 	bl	800b720 <__hi0bits>
 800bdc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdc6:	e7df      	b.n	800bd88 <__d2b+0x70>
 800bdc8:	0800cc78 	.word	0x0800cc78
 800bdcc:	0800cd68 	.word	0x0800cd68

0800bdd0 <__ratio>:
 800bdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	4688      	mov	r8, r1
 800bdd6:	4669      	mov	r1, sp
 800bdd8:	4681      	mov	r9, r0
 800bdda:	f7ff ff4d 	bl	800bc78 <__b2d>
 800bdde:	a901      	add	r1, sp, #4
 800bde0:	4640      	mov	r0, r8
 800bde2:	ec55 4b10 	vmov	r4, r5, d0
 800bde6:	f7ff ff47 	bl	800bc78 <__b2d>
 800bdea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdf2:	eba3 0c02 	sub.w	ip, r3, r2
 800bdf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be00:	ec51 0b10 	vmov	r0, r1, d0
 800be04:	2b00      	cmp	r3, #0
 800be06:	bfd6      	itet	le
 800be08:	460a      	movle	r2, r1
 800be0a:	462a      	movgt	r2, r5
 800be0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be10:	468b      	mov	fp, r1
 800be12:	462f      	mov	r7, r5
 800be14:	bfd4      	ite	le
 800be16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be1e:	4620      	mov	r0, r4
 800be20:	ee10 2a10 	vmov	r2, s0
 800be24:	465b      	mov	r3, fp
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fd18 	bl	800085c <__aeabi_ddiv>
 800be2c:	ec41 0b10 	vmov	d0, r0, r1
 800be30:	b003      	add	sp, #12
 800be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be36 <__copybits>:
 800be36:	3901      	subs	r1, #1
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	1149      	asrs	r1, r1, #5
 800be3c:	6914      	ldr	r4, [r2, #16]
 800be3e:	3101      	adds	r1, #1
 800be40:	f102 0314 	add.w	r3, r2, #20
 800be44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be4c:	1f05      	subs	r5, r0, #4
 800be4e:	42a3      	cmp	r3, r4
 800be50:	d30c      	bcc.n	800be6c <__copybits+0x36>
 800be52:	1aa3      	subs	r3, r4, r2
 800be54:	3b11      	subs	r3, #17
 800be56:	f023 0303 	bic.w	r3, r3, #3
 800be5a:	3211      	adds	r2, #17
 800be5c:	42a2      	cmp	r2, r4
 800be5e:	bf88      	it	hi
 800be60:	2300      	movhi	r3, #0
 800be62:	4418      	add	r0, r3
 800be64:	2300      	movs	r3, #0
 800be66:	4288      	cmp	r0, r1
 800be68:	d305      	bcc.n	800be76 <__copybits+0x40>
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800be70:	f845 6f04 	str.w	r6, [r5, #4]!
 800be74:	e7eb      	b.n	800be4e <__copybits+0x18>
 800be76:	f840 3b04 	str.w	r3, [r0], #4
 800be7a:	e7f4      	b.n	800be66 <__copybits+0x30>

0800be7c <__any_on>:
 800be7c:	f100 0214 	add.w	r2, r0, #20
 800be80:	6900      	ldr	r0, [r0, #16]
 800be82:	114b      	asrs	r3, r1, #5
 800be84:	4298      	cmp	r0, r3
 800be86:	b510      	push	{r4, lr}
 800be88:	db11      	blt.n	800beae <__any_on+0x32>
 800be8a:	dd0a      	ble.n	800bea2 <__any_on+0x26>
 800be8c:	f011 011f 	ands.w	r1, r1, #31
 800be90:	d007      	beq.n	800bea2 <__any_on+0x26>
 800be92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be96:	fa24 f001 	lsr.w	r0, r4, r1
 800be9a:	fa00 f101 	lsl.w	r1, r0, r1
 800be9e:	428c      	cmp	r4, r1
 800bea0:	d10b      	bne.n	800beba <__any_on+0x3e>
 800bea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d803      	bhi.n	800beb2 <__any_on+0x36>
 800beaa:	2000      	movs	r0, #0
 800beac:	bd10      	pop	{r4, pc}
 800beae:	4603      	mov	r3, r0
 800beb0:	e7f7      	b.n	800bea2 <__any_on+0x26>
 800beb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beb6:	2900      	cmp	r1, #0
 800beb8:	d0f5      	beq.n	800bea6 <__any_on+0x2a>
 800beba:	2001      	movs	r0, #1
 800bebc:	e7f6      	b.n	800beac <__any_on+0x30>

0800bebe <_calloc_r>:
 800bebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bec0:	fba1 2402 	umull	r2, r4, r1, r2
 800bec4:	b94c      	cbnz	r4, 800beda <_calloc_r+0x1c>
 800bec6:	4611      	mov	r1, r2
 800bec8:	9201      	str	r2, [sp, #4]
 800beca:	f000 f87b 	bl	800bfc4 <_malloc_r>
 800bece:	9a01      	ldr	r2, [sp, #4]
 800bed0:	4605      	mov	r5, r0
 800bed2:	b930      	cbnz	r0, 800bee2 <_calloc_r+0x24>
 800bed4:	4628      	mov	r0, r5
 800bed6:	b003      	add	sp, #12
 800bed8:	bd30      	pop	{r4, r5, pc}
 800beda:	220c      	movs	r2, #12
 800bedc:	6002      	str	r2, [r0, #0]
 800bede:	2500      	movs	r5, #0
 800bee0:	e7f8      	b.n	800bed4 <_calloc_r+0x16>
 800bee2:	4621      	mov	r1, r4
 800bee4:	f7fc f87a 	bl	8007fdc <memset>
 800bee8:	e7f4      	b.n	800bed4 <_calloc_r+0x16>
	...

0800beec <_free_r>:
 800beec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beee:	2900      	cmp	r1, #0
 800bef0:	d044      	beq.n	800bf7c <_free_r+0x90>
 800bef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef6:	9001      	str	r0, [sp, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f1a1 0404 	sub.w	r4, r1, #4
 800befe:	bfb8      	it	lt
 800bf00:	18e4      	addlt	r4, r4, r3
 800bf02:	f000 fb4d 	bl	800c5a0 <__malloc_lock>
 800bf06:	4a1e      	ldr	r2, [pc, #120]	; (800bf80 <_free_r+0x94>)
 800bf08:	9801      	ldr	r0, [sp, #4]
 800bf0a:	6813      	ldr	r3, [r2, #0]
 800bf0c:	b933      	cbnz	r3, 800bf1c <_free_r+0x30>
 800bf0e:	6063      	str	r3, [r4, #4]
 800bf10:	6014      	str	r4, [r2, #0]
 800bf12:	b003      	add	sp, #12
 800bf14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf18:	f000 bb48 	b.w	800c5ac <__malloc_unlock>
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	d908      	bls.n	800bf32 <_free_r+0x46>
 800bf20:	6825      	ldr	r5, [r4, #0]
 800bf22:	1961      	adds	r1, r4, r5
 800bf24:	428b      	cmp	r3, r1
 800bf26:	bf01      	itttt	eq
 800bf28:	6819      	ldreq	r1, [r3, #0]
 800bf2a:	685b      	ldreq	r3, [r3, #4]
 800bf2c:	1949      	addeq	r1, r1, r5
 800bf2e:	6021      	streq	r1, [r4, #0]
 800bf30:	e7ed      	b.n	800bf0e <_free_r+0x22>
 800bf32:	461a      	mov	r2, r3
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	b10b      	cbz	r3, 800bf3c <_free_r+0x50>
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d9fa      	bls.n	800bf32 <_free_r+0x46>
 800bf3c:	6811      	ldr	r1, [r2, #0]
 800bf3e:	1855      	adds	r5, r2, r1
 800bf40:	42a5      	cmp	r5, r4
 800bf42:	d10b      	bne.n	800bf5c <_free_r+0x70>
 800bf44:	6824      	ldr	r4, [r4, #0]
 800bf46:	4421      	add	r1, r4
 800bf48:	1854      	adds	r4, r2, r1
 800bf4a:	42a3      	cmp	r3, r4
 800bf4c:	6011      	str	r1, [r2, #0]
 800bf4e:	d1e0      	bne.n	800bf12 <_free_r+0x26>
 800bf50:	681c      	ldr	r4, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	6053      	str	r3, [r2, #4]
 800bf56:	4421      	add	r1, r4
 800bf58:	6011      	str	r1, [r2, #0]
 800bf5a:	e7da      	b.n	800bf12 <_free_r+0x26>
 800bf5c:	d902      	bls.n	800bf64 <_free_r+0x78>
 800bf5e:	230c      	movs	r3, #12
 800bf60:	6003      	str	r3, [r0, #0]
 800bf62:	e7d6      	b.n	800bf12 <_free_r+0x26>
 800bf64:	6825      	ldr	r5, [r4, #0]
 800bf66:	1961      	adds	r1, r4, r5
 800bf68:	428b      	cmp	r3, r1
 800bf6a:	bf04      	itt	eq
 800bf6c:	6819      	ldreq	r1, [r3, #0]
 800bf6e:	685b      	ldreq	r3, [r3, #4]
 800bf70:	6063      	str	r3, [r4, #4]
 800bf72:	bf04      	itt	eq
 800bf74:	1949      	addeq	r1, r1, r5
 800bf76:	6021      	streq	r1, [r4, #0]
 800bf78:	6054      	str	r4, [r2, #4]
 800bf7a:	e7ca      	b.n	800bf12 <_free_r+0x26>
 800bf7c:	b003      	add	sp, #12
 800bf7e:	bd30      	pop	{r4, r5, pc}
 800bf80:	200051a4 	.word	0x200051a4

0800bf84 <sbrk_aligned>:
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	4e0e      	ldr	r6, [pc, #56]	; (800bfc0 <sbrk_aligned+0x3c>)
 800bf88:	460c      	mov	r4, r1
 800bf8a:	6831      	ldr	r1, [r6, #0]
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	b911      	cbnz	r1, 800bf96 <sbrk_aligned+0x12>
 800bf90:	f000 f9f2 	bl	800c378 <_sbrk_r>
 800bf94:	6030      	str	r0, [r6, #0]
 800bf96:	4621      	mov	r1, r4
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f000 f9ed 	bl	800c378 <_sbrk_r>
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	d00a      	beq.n	800bfb8 <sbrk_aligned+0x34>
 800bfa2:	1cc4      	adds	r4, r0, #3
 800bfa4:	f024 0403 	bic.w	r4, r4, #3
 800bfa8:	42a0      	cmp	r0, r4
 800bfaa:	d007      	beq.n	800bfbc <sbrk_aligned+0x38>
 800bfac:	1a21      	subs	r1, r4, r0
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f000 f9e2 	bl	800c378 <_sbrk_r>
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	d101      	bne.n	800bfbc <sbrk_aligned+0x38>
 800bfb8:	f04f 34ff 	mov.w	r4, #4294967295
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
 800bfc0:	200051a8 	.word	0x200051a8

0800bfc4 <_malloc_r>:
 800bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	1ccd      	adds	r5, r1, #3
 800bfca:	f025 0503 	bic.w	r5, r5, #3
 800bfce:	3508      	adds	r5, #8
 800bfd0:	2d0c      	cmp	r5, #12
 800bfd2:	bf38      	it	cc
 800bfd4:	250c      	movcc	r5, #12
 800bfd6:	2d00      	cmp	r5, #0
 800bfd8:	4607      	mov	r7, r0
 800bfda:	db01      	blt.n	800bfe0 <_malloc_r+0x1c>
 800bfdc:	42a9      	cmp	r1, r5
 800bfde:	d905      	bls.n	800bfec <_malloc_r+0x28>
 800bfe0:	230c      	movs	r3, #12
 800bfe2:	603b      	str	r3, [r7, #0]
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfec:	4e2e      	ldr	r6, [pc, #184]	; (800c0a8 <_malloc_r+0xe4>)
 800bfee:	f000 fad7 	bl	800c5a0 <__malloc_lock>
 800bff2:	6833      	ldr	r3, [r6, #0]
 800bff4:	461c      	mov	r4, r3
 800bff6:	bb34      	cbnz	r4, 800c046 <_malloc_r+0x82>
 800bff8:	4629      	mov	r1, r5
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7ff ffc2 	bl	800bf84 <sbrk_aligned>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	4604      	mov	r4, r0
 800c004:	d14d      	bne.n	800c0a2 <_malloc_r+0xde>
 800c006:	6834      	ldr	r4, [r6, #0]
 800c008:	4626      	mov	r6, r4
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	d140      	bne.n	800c090 <_malloc_r+0xcc>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	4631      	mov	r1, r6
 800c012:	4638      	mov	r0, r7
 800c014:	eb04 0803 	add.w	r8, r4, r3
 800c018:	f000 f9ae 	bl	800c378 <_sbrk_r>
 800c01c:	4580      	cmp	r8, r0
 800c01e:	d13a      	bne.n	800c096 <_malloc_r+0xd2>
 800c020:	6821      	ldr	r1, [r4, #0]
 800c022:	3503      	adds	r5, #3
 800c024:	1a6d      	subs	r5, r5, r1
 800c026:	f025 0503 	bic.w	r5, r5, #3
 800c02a:	3508      	adds	r5, #8
 800c02c:	2d0c      	cmp	r5, #12
 800c02e:	bf38      	it	cc
 800c030:	250c      	movcc	r5, #12
 800c032:	4629      	mov	r1, r5
 800c034:	4638      	mov	r0, r7
 800c036:	f7ff ffa5 	bl	800bf84 <sbrk_aligned>
 800c03a:	3001      	adds	r0, #1
 800c03c:	d02b      	beq.n	800c096 <_malloc_r+0xd2>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	442b      	add	r3, r5
 800c042:	6023      	str	r3, [r4, #0]
 800c044:	e00e      	b.n	800c064 <_malloc_r+0xa0>
 800c046:	6822      	ldr	r2, [r4, #0]
 800c048:	1b52      	subs	r2, r2, r5
 800c04a:	d41e      	bmi.n	800c08a <_malloc_r+0xc6>
 800c04c:	2a0b      	cmp	r2, #11
 800c04e:	d916      	bls.n	800c07e <_malloc_r+0xba>
 800c050:	1961      	adds	r1, r4, r5
 800c052:	42a3      	cmp	r3, r4
 800c054:	6025      	str	r5, [r4, #0]
 800c056:	bf18      	it	ne
 800c058:	6059      	strne	r1, [r3, #4]
 800c05a:	6863      	ldr	r3, [r4, #4]
 800c05c:	bf08      	it	eq
 800c05e:	6031      	streq	r1, [r6, #0]
 800c060:	5162      	str	r2, [r4, r5]
 800c062:	604b      	str	r3, [r1, #4]
 800c064:	4638      	mov	r0, r7
 800c066:	f104 060b 	add.w	r6, r4, #11
 800c06a:	f000 fa9f 	bl	800c5ac <__malloc_unlock>
 800c06e:	f026 0607 	bic.w	r6, r6, #7
 800c072:	1d23      	adds	r3, r4, #4
 800c074:	1af2      	subs	r2, r6, r3
 800c076:	d0b6      	beq.n	800bfe6 <_malloc_r+0x22>
 800c078:	1b9b      	subs	r3, r3, r6
 800c07a:	50a3      	str	r3, [r4, r2]
 800c07c:	e7b3      	b.n	800bfe6 <_malloc_r+0x22>
 800c07e:	6862      	ldr	r2, [r4, #4]
 800c080:	42a3      	cmp	r3, r4
 800c082:	bf0c      	ite	eq
 800c084:	6032      	streq	r2, [r6, #0]
 800c086:	605a      	strne	r2, [r3, #4]
 800c088:	e7ec      	b.n	800c064 <_malloc_r+0xa0>
 800c08a:	4623      	mov	r3, r4
 800c08c:	6864      	ldr	r4, [r4, #4]
 800c08e:	e7b2      	b.n	800bff6 <_malloc_r+0x32>
 800c090:	4634      	mov	r4, r6
 800c092:	6876      	ldr	r6, [r6, #4]
 800c094:	e7b9      	b.n	800c00a <_malloc_r+0x46>
 800c096:	230c      	movs	r3, #12
 800c098:	603b      	str	r3, [r7, #0]
 800c09a:	4638      	mov	r0, r7
 800c09c:	f000 fa86 	bl	800c5ac <__malloc_unlock>
 800c0a0:	e7a1      	b.n	800bfe6 <_malloc_r+0x22>
 800c0a2:	6025      	str	r5, [r4, #0]
 800c0a4:	e7de      	b.n	800c064 <_malloc_r+0xa0>
 800c0a6:	bf00      	nop
 800c0a8:	200051a4 	.word	0x200051a4

0800c0ac <__ssputs_r>:
 800c0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	688e      	ldr	r6, [r1, #8]
 800c0b2:	429e      	cmp	r6, r3
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	4690      	mov	r8, r2
 800c0ba:	461f      	mov	r7, r3
 800c0bc:	d838      	bhi.n	800c130 <__ssputs_r+0x84>
 800c0be:	898a      	ldrh	r2, [r1, #12]
 800c0c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0c4:	d032      	beq.n	800c12c <__ssputs_r+0x80>
 800c0c6:	6825      	ldr	r5, [r4, #0]
 800c0c8:	6909      	ldr	r1, [r1, #16]
 800c0ca:	eba5 0901 	sub.w	r9, r5, r1
 800c0ce:	6965      	ldr	r5, [r4, #20]
 800c0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0d8:	3301      	adds	r3, #1
 800c0da:	444b      	add	r3, r9
 800c0dc:	106d      	asrs	r5, r5, #1
 800c0de:	429d      	cmp	r5, r3
 800c0e0:	bf38      	it	cc
 800c0e2:	461d      	movcc	r5, r3
 800c0e4:	0553      	lsls	r3, r2, #21
 800c0e6:	d531      	bpl.n	800c14c <__ssputs_r+0xa0>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7ff ff6b 	bl	800bfc4 <_malloc_r>
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	b950      	cbnz	r0, 800c108 <__ssputs_r+0x5c>
 800c0f2:	230c      	movs	r3, #12
 800c0f4:	f8ca 3000 	str.w	r3, [sl]
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c108:	6921      	ldr	r1, [r4, #16]
 800c10a:	464a      	mov	r2, r9
 800c10c:	f7fb ff58 	bl	8007fc0 <memcpy>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	6126      	str	r6, [r4, #16]
 800c11e:	6165      	str	r5, [r4, #20]
 800c120:	444e      	add	r6, r9
 800c122:	eba5 0509 	sub.w	r5, r5, r9
 800c126:	6026      	str	r6, [r4, #0]
 800c128:	60a5      	str	r5, [r4, #8]
 800c12a:	463e      	mov	r6, r7
 800c12c:	42be      	cmp	r6, r7
 800c12e:	d900      	bls.n	800c132 <__ssputs_r+0x86>
 800c130:	463e      	mov	r6, r7
 800c132:	6820      	ldr	r0, [r4, #0]
 800c134:	4632      	mov	r2, r6
 800c136:	4641      	mov	r1, r8
 800c138:	f000 fa18 	bl	800c56c <memmove>
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	1b9b      	subs	r3, r3, r6
 800c140:	60a3      	str	r3, [r4, #8]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	4433      	add	r3, r6
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	2000      	movs	r0, #0
 800c14a:	e7db      	b.n	800c104 <__ssputs_r+0x58>
 800c14c:	462a      	mov	r2, r5
 800c14e:	f000 fa33 	bl	800c5b8 <_realloc_r>
 800c152:	4606      	mov	r6, r0
 800c154:	2800      	cmp	r0, #0
 800c156:	d1e1      	bne.n	800c11c <__ssputs_r+0x70>
 800c158:	6921      	ldr	r1, [r4, #16]
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7ff fec6 	bl	800beec <_free_r>
 800c160:	e7c7      	b.n	800c0f2 <__ssputs_r+0x46>
	...

0800c164 <_svfiprintf_r>:
 800c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	4698      	mov	r8, r3
 800c16a:	898b      	ldrh	r3, [r1, #12]
 800c16c:	061b      	lsls	r3, r3, #24
 800c16e:	b09d      	sub	sp, #116	; 0x74
 800c170:	4607      	mov	r7, r0
 800c172:	460d      	mov	r5, r1
 800c174:	4614      	mov	r4, r2
 800c176:	d50e      	bpl.n	800c196 <_svfiprintf_r+0x32>
 800c178:	690b      	ldr	r3, [r1, #16]
 800c17a:	b963      	cbnz	r3, 800c196 <_svfiprintf_r+0x32>
 800c17c:	2140      	movs	r1, #64	; 0x40
 800c17e:	f7ff ff21 	bl	800bfc4 <_malloc_r>
 800c182:	6028      	str	r0, [r5, #0]
 800c184:	6128      	str	r0, [r5, #16]
 800c186:	b920      	cbnz	r0, 800c192 <_svfiprintf_r+0x2e>
 800c188:	230c      	movs	r3, #12
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	e0d1      	b.n	800c336 <_svfiprintf_r+0x1d2>
 800c192:	2340      	movs	r3, #64	; 0x40
 800c194:	616b      	str	r3, [r5, #20]
 800c196:	2300      	movs	r3, #0
 800c198:	9309      	str	r3, [sp, #36]	; 0x24
 800c19a:	2320      	movs	r3, #32
 800c19c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a4:	2330      	movs	r3, #48	; 0x30
 800c1a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c350 <_svfiprintf_r+0x1ec>
 800c1aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ae:	f04f 0901 	mov.w	r9, #1
 800c1b2:	4623      	mov	r3, r4
 800c1b4:	469a      	mov	sl, r3
 800c1b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ba:	b10a      	cbz	r2, 800c1c0 <_svfiprintf_r+0x5c>
 800c1bc:	2a25      	cmp	r2, #37	; 0x25
 800c1be:	d1f9      	bne.n	800c1b4 <_svfiprintf_r+0x50>
 800c1c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c4:	d00b      	beq.n	800c1de <_svfiprintf_r+0x7a>
 800c1c6:	465b      	mov	r3, fp
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	f7ff ff6d 	bl	800c0ac <__ssputs_r>
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f000 80aa 	beq.w	800c32c <_svfiprintf_r+0x1c8>
 800c1d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1da:	445a      	add	r2, fp
 800c1dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1de:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 80a2 	beq.w	800c32c <_svfiprintf_r+0x1c8>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f2:	f10a 0a01 	add.w	sl, sl, #1
 800c1f6:	9304      	str	r3, [sp, #16]
 800c1f8:	9307      	str	r3, [sp, #28]
 800c1fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c200:	4654      	mov	r4, sl
 800c202:	2205      	movs	r2, #5
 800c204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c208:	4851      	ldr	r0, [pc, #324]	; (800c350 <_svfiprintf_r+0x1ec>)
 800c20a:	f7f3 fff1 	bl	80001f0 <memchr>
 800c20e:	9a04      	ldr	r2, [sp, #16]
 800c210:	b9d8      	cbnz	r0, 800c24a <_svfiprintf_r+0xe6>
 800c212:	06d0      	lsls	r0, r2, #27
 800c214:	bf44      	itt	mi
 800c216:	2320      	movmi	r3, #32
 800c218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c21c:	0711      	lsls	r1, r2, #28
 800c21e:	bf44      	itt	mi
 800c220:	232b      	movmi	r3, #43	; 0x2b
 800c222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c226:	f89a 3000 	ldrb.w	r3, [sl]
 800c22a:	2b2a      	cmp	r3, #42	; 0x2a
 800c22c:	d015      	beq.n	800c25a <_svfiprintf_r+0xf6>
 800c22e:	9a07      	ldr	r2, [sp, #28]
 800c230:	4654      	mov	r4, sl
 800c232:	2000      	movs	r0, #0
 800c234:	f04f 0c0a 	mov.w	ip, #10
 800c238:	4621      	mov	r1, r4
 800c23a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c23e:	3b30      	subs	r3, #48	; 0x30
 800c240:	2b09      	cmp	r3, #9
 800c242:	d94e      	bls.n	800c2e2 <_svfiprintf_r+0x17e>
 800c244:	b1b0      	cbz	r0, 800c274 <_svfiprintf_r+0x110>
 800c246:	9207      	str	r2, [sp, #28]
 800c248:	e014      	b.n	800c274 <_svfiprintf_r+0x110>
 800c24a:	eba0 0308 	sub.w	r3, r0, r8
 800c24e:	fa09 f303 	lsl.w	r3, r9, r3
 800c252:	4313      	orrs	r3, r2
 800c254:	9304      	str	r3, [sp, #16]
 800c256:	46a2      	mov	sl, r4
 800c258:	e7d2      	b.n	800c200 <_svfiprintf_r+0x9c>
 800c25a:	9b03      	ldr	r3, [sp, #12]
 800c25c:	1d19      	adds	r1, r3, #4
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	9103      	str	r1, [sp, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	bfbb      	ittet	lt
 800c266:	425b      	neglt	r3, r3
 800c268:	f042 0202 	orrlt.w	r2, r2, #2
 800c26c:	9307      	strge	r3, [sp, #28]
 800c26e:	9307      	strlt	r3, [sp, #28]
 800c270:	bfb8      	it	lt
 800c272:	9204      	strlt	r2, [sp, #16]
 800c274:	7823      	ldrb	r3, [r4, #0]
 800c276:	2b2e      	cmp	r3, #46	; 0x2e
 800c278:	d10c      	bne.n	800c294 <_svfiprintf_r+0x130>
 800c27a:	7863      	ldrb	r3, [r4, #1]
 800c27c:	2b2a      	cmp	r3, #42	; 0x2a
 800c27e:	d135      	bne.n	800c2ec <_svfiprintf_r+0x188>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	9203      	str	r2, [sp, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfb8      	it	lt
 800c28c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c290:	3402      	adds	r4, #2
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c360 <_svfiprintf_r+0x1fc>
 800c298:	7821      	ldrb	r1, [r4, #0]
 800c29a:	2203      	movs	r2, #3
 800c29c:	4650      	mov	r0, sl
 800c29e:	f7f3 ffa7 	bl	80001f0 <memchr>
 800c2a2:	b140      	cbz	r0, 800c2b6 <_svfiprintf_r+0x152>
 800c2a4:	2340      	movs	r3, #64	; 0x40
 800c2a6:	eba0 000a 	sub.w	r0, r0, sl
 800c2aa:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	4303      	orrs	r3, r0
 800c2b2:	3401      	adds	r4, #1
 800c2b4:	9304      	str	r3, [sp, #16]
 800c2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ba:	4826      	ldr	r0, [pc, #152]	; (800c354 <_svfiprintf_r+0x1f0>)
 800c2bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c0:	2206      	movs	r2, #6
 800c2c2:	f7f3 ff95 	bl	80001f0 <memchr>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d038      	beq.n	800c33c <_svfiprintf_r+0x1d8>
 800c2ca:	4b23      	ldr	r3, [pc, #140]	; (800c358 <_svfiprintf_r+0x1f4>)
 800c2cc:	bb1b      	cbnz	r3, 800c316 <_svfiprintf_r+0x1b2>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	3307      	adds	r3, #7
 800c2d2:	f023 0307 	bic.w	r3, r3, #7
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2dc:	4433      	add	r3, r6
 800c2de:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e0:	e767      	b.n	800c1b2 <_svfiprintf_r+0x4e>
 800c2e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	e7a5      	b.n	800c238 <_svfiprintf_r+0xd4>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	3401      	adds	r4, #1
 800c2f0:	9305      	str	r3, [sp, #20]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	f04f 0c0a 	mov.w	ip, #10
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fe:	3a30      	subs	r2, #48	; 0x30
 800c300:	2a09      	cmp	r2, #9
 800c302:	d903      	bls.n	800c30c <_svfiprintf_r+0x1a8>
 800c304:	2b00      	cmp	r3, #0
 800c306:	d0c5      	beq.n	800c294 <_svfiprintf_r+0x130>
 800c308:	9105      	str	r1, [sp, #20]
 800c30a:	e7c3      	b.n	800c294 <_svfiprintf_r+0x130>
 800c30c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c310:	4604      	mov	r4, r0
 800c312:	2301      	movs	r3, #1
 800c314:	e7f0      	b.n	800c2f8 <_svfiprintf_r+0x194>
 800c316:	ab03      	add	r3, sp, #12
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	462a      	mov	r2, r5
 800c31c:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <_svfiprintf_r+0x1f8>)
 800c31e:	a904      	add	r1, sp, #16
 800c320:	4638      	mov	r0, r7
 800c322:	f7fb ff03 	bl	800812c <_printf_float>
 800c326:	1c42      	adds	r2, r0, #1
 800c328:	4606      	mov	r6, r0
 800c32a:	d1d6      	bne.n	800c2da <_svfiprintf_r+0x176>
 800c32c:	89ab      	ldrh	r3, [r5, #12]
 800c32e:	065b      	lsls	r3, r3, #25
 800c330:	f53f af2c 	bmi.w	800c18c <_svfiprintf_r+0x28>
 800c334:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c336:	b01d      	add	sp, #116	; 0x74
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	ab03      	add	r3, sp, #12
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	462a      	mov	r2, r5
 800c342:	4b06      	ldr	r3, [pc, #24]	; (800c35c <_svfiprintf_r+0x1f8>)
 800c344:	a904      	add	r1, sp, #16
 800c346:	4638      	mov	r0, r7
 800c348:	f7fc f994 	bl	8008674 <_printf_i>
 800c34c:	e7eb      	b.n	800c326 <_svfiprintf_r+0x1c2>
 800c34e:	bf00      	nop
 800c350:	0800cec4 	.word	0x0800cec4
 800c354:	0800cece 	.word	0x0800cece
 800c358:	0800812d 	.word	0x0800812d
 800c35c:	0800c0ad 	.word	0x0800c0ad
 800c360:	0800ceca 	.word	0x0800ceca
 800c364:	00000000 	.word	0x00000000

0800c368 <nan>:
 800c368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c370 <nan+0x8>
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	00000000 	.word	0x00000000
 800c374:	7ff80000 	.word	0x7ff80000

0800c378 <_sbrk_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d06      	ldr	r5, [pc, #24]	; (800c394 <_sbrk_r+0x1c>)
 800c37c:	2300      	movs	r3, #0
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	602b      	str	r3, [r5, #0]
 800c384:	f7f5 fffc 	bl	8002380 <_sbrk>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_sbrk_r+0x1a>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_sbrk_r+0x1a>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	200051ac 	.word	0x200051ac

0800c398 <__sread>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	460c      	mov	r4, r1
 800c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a0:	f000 fa92 	bl	800c8c8 <_read_r>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	bfab      	itete	ge
 800c3a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c3ac:	181b      	addge	r3, r3, r0
 800c3ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3b2:	bfac      	ite	ge
 800c3b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3b6:	81a3      	strhlt	r3, [r4, #12]
 800c3b8:	bd10      	pop	{r4, pc}

0800c3ba <__swrite>:
 800c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	461f      	mov	r7, r3
 800c3c0:	898b      	ldrh	r3, [r1, #12]
 800c3c2:	05db      	lsls	r3, r3, #23
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	4616      	mov	r6, r2
 800c3ca:	d505      	bpl.n	800c3d8 <__swrite+0x1e>
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f000 f8b8 	bl	800c548 <_lseek_r>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ee:	f000 b837 	b.w	800c460 <_write_r>

0800c3f2 <__sseek>:
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fa:	f000 f8a5 	bl	800c548 <_lseek_r>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	bf15      	itete	ne
 800c404:	6560      	strne	r0, [r4, #84]	; 0x54
 800c406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c40a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strheq	r3, [r4, #12]
 800c410:	bf18      	it	ne
 800c412:	81a3      	strhne	r3, [r4, #12]
 800c414:	bd10      	pop	{r4, pc}

0800c416 <__sclose>:
 800c416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41a:	f000 b851 	b.w	800c4c0 <_close_r>

0800c41e <strncmp>:
 800c41e:	b510      	push	{r4, lr}
 800c420:	b17a      	cbz	r2, 800c442 <strncmp+0x24>
 800c422:	4603      	mov	r3, r0
 800c424:	3901      	subs	r1, #1
 800c426:	1884      	adds	r4, r0, r2
 800c428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c42c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c430:	4290      	cmp	r0, r2
 800c432:	d101      	bne.n	800c438 <strncmp+0x1a>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d101      	bne.n	800c43c <strncmp+0x1e>
 800c438:	1a80      	subs	r0, r0, r2
 800c43a:	bd10      	pop	{r4, pc}
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d1f3      	bne.n	800c428 <strncmp+0xa>
 800c440:	e7fa      	b.n	800c438 <strncmp+0x1a>
 800c442:	4610      	mov	r0, r2
 800c444:	e7f9      	b.n	800c43a <strncmp+0x1c>

0800c446 <__ascii_wctomb>:
 800c446:	b149      	cbz	r1, 800c45c <__ascii_wctomb+0x16>
 800c448:	2aff      	cmp	r2, #255	; 0xff
 800c44a:	bf85      	ittet	hi
 800c44c:	238a      	movhi	r3, #138	; 0x8a
 800c44e:	6003      	strhi	r3, [r0, #0]
 800c450:	700a      	strbls	r2, [r1, #0]
 800c452:	f04f 30ff 	movhi.w	r0, #4294967295
 800c456:	bf98      	it	ls
 800c458:	2001      	movls	r0, #1
 800c45a:	4770      	bx	lr
 800c45c:	4608      	mov	r0, r1
 800c45e:	4770      	bx	lr

0800c460 <_write_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	; (800c480 <_write_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7f5 ff35 	bl	80022de <_write>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_write_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_write_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	200051ac 	.word	0x200051ac

0800c484 <__assert_func>:
 800c484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c486:	4614      	mov	r4, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <__assert_func+0x2c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4605      	mov	r5, r0
 800c490:	68d8      	ldr	r0, [r3, #12]
 800c492:	b14c      	cbz	r4, 800c4a8 <__assert_func+0x24>
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <__assert_func+0x30>)
 800c496:	9100      	str	r1, [sp, #0]
 800c498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c49c:	4906      	ldr	r1, [pc, #24]	; (800c4b8 <__assert_func+0x34>)
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f000 f81e 	bl	800c4e0 <fiprintf>
 800c4a4:	f000 fa22 	bl	800c8ec <abort>
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <__assert_func+0x38>)
 800c4aa:	461c      	mov	r4, r3
 800c4ac:	e7f3      	b.n	800c496 <__assert_func+0x12>
 800c4ae:	bf00      	nop
 800c4b0:	20000010 	.word	0x20000010
 800c4b4:	0800ced5 	.word	0x0800ced5
 800c4b8:	0800cee2 	.word	0x0800cee2
 800c4bc:	0800cf10 	.word	0x0800cf10

0800c4c0 <_close_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_close_r+0x1c>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	f7f5 ff23 	bl	8002316 <_close>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_close_r+0x1a>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_close_r+0x1a>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	200051ac 	.word	0x200051ac

0800c4e0 <fiprintf>:
 800c4e0:	b40e      	push	{r1, r2, r3}
 800c4e2:	b503      	push	{r0, r1, lr}
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	ab03      	add	r3, sp, #12
 800c4e8:	4805      	ldr	r0, [pc, #20]	; (800c500 <fiprintf+0x20>)
 800c4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ee:	6800      	ldr	r0, [r0, #0]
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f000 f8b9 	bl	800c668 <_vfiprintf_r>
 800c4f6:	b002      	add	sp, #8
 800c4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4fc:	b003      	add	sp, #12
 800c4fe:	4770      	bx	lr
 800c500:	20000010 	.word	0x20000010

0800c504 <_fstat_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	; (800c524 <_fstat_r+0x20>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	f7f5 ff0c 	bl	800232e <_fstat>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d102      	bne.n	800c520 <_fstat_r+0x1c>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	b103      	cbz	r3, 800c520 <_fstat_r+0x1c>
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	200051ac 	.word	0x200051ac

0800c528 <_isatty_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d06      	ldr	r5, [pc, #24]	; (800c544 <_isatty_r+0x1c>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	4608      	mov	r0, r1
 800c532:	602b      	str	r3, [r5, #0]
 800c534:	f7f5 ff0b 	bl	800234e <_isatty>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d102      	bne.n	800c542 <_isatty_r+0x1a>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	b103      	cbz	r3, 800c542 <_isatty_r+0x1a>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	200051ac 	.word	0x200051ac

0800c548 <_lseek_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d07      	ldr	r5, [pc, #28]	; (800c568 <_lseek_r+0x20>)
 800c54c:	4604      	mov	r4, r0
 800c54e:	4608      	mov	r0, r1
 800c550:	4611      	mov	r1, r2
 800c552:	2200      	movs	r2, #0
 800c554:	602a      	str	r2, [r5, #0]
 800c556:	461a      	mov	r2, r3
 800c558:	f7f5 ff04 	bl	8002364 <_lseek>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_lseek_r+0x1e>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_lseek_r+0x1e>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	200051ac 	.word	0x200051ac

0800c56c <memmove>:
 800c56c:	4288      	cmp	r0, r1
 800c56e:	b510      	push	{r4, lr}
 800c570:	eb01 0402 	add.w	r4, r1, r2
 800c574:	d902      	bls.n	800c57c <memmove+0x10>
 800c576:	4284      	cmp	r4, r0
 800c578:	4623      	mov	r3, r4
 800c57a:	d807      	bhi.n	800c58c <memmove+0x20>
 800c57c:	1e43      	subs	r3, r0, #1
 800c57e:	42a1      	cmp	r1, r4
 800c580:	d008      	beq.n	800c594 <memmove+0x28>
 800c582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c58a:	e7f8      	b.n	800c57e <memmove+0x12>
 800c58c:	4402      	add	r2, r0
 800c58e:	4601      	mov	r1, r0
 800c590:	428a      	cmp	r2, r1
 800c592:	d100      	bne.n	800c596 <memmove+0x2a>
 800c594:	bd10      	pop	{r4, pc}
 800c596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c59e:	e7f7      	b.n	800c590 <memmove+0x24>

0800c5a0 <__malloc_lock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__malloc_lock+0x8>)
 800c5a2:	f7fe bf4a 	b.w	800b43a <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	200051a0 	.word	0x200051a0

0800c5ac <__malloc_unlock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__malloc_unlock+0x8>)
 800c5ae:	f7fe bf45 	b.w	800b43c <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	200051a0 	.word	0x200051a0

0800c5b8 <_realloc_r>:
 800c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5bc:	4680      	mov	r8, r0
 800c5be:	4614      	mov	r4, r2
 800c5c0:	460e      	mov	r6, r1
 800c5c2:	b921      	cbnz	r1, 800c5ce <_realloc_r+0x16>
 800c5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	f7ff bcfb 	b.w	800bfc4 <_malloc_r>
 800c5ce:	b92a      	cbnz	r2, 800c5dc <_realloc_r+0x24>
 800c5d0:	f7ff fc8c 	bl	800beec <_free_r>
 800c5d4:	4625      	mov	r5, r4
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5dc:	f000 f98d 	bl	800c8fa <_malloc_usable_size_r>
 800c5e0:	4284      	cmp	r4, r0
 800c5e2:	4607      	mov	r7, r0
 800c5e4:	d802      	bhi.n	800c5ec <_realloc_r+0x34>
 800c5e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5ea:	d812      	bhi.n	800c612 <_realloc_r+0x5a>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	f7ff fce8 	bl	800bfc4 <_malloc_r>
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d0ed      	beq.n	800c5d6 <_realloc_r+0x1e>
 800c5fa:	42bc      	cmp	r4, r7
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	4631      	mov	r1, r6
 800c600:	bf28      	it	cs
 800c602:	463a      	movcs	r2, r7
 800c604:	f7fb fcdc 	bl	8007fc0 <memcpy>
 800c608:	4631      	mov	r1, r6
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7ff fc6e 	bl	800beec <_free_r>
 800c610:	e7e1      	b.n	800c5d6 <_realloc_r+0x1e>
 800c612:	4635      	mov	r5, r6
 800c614:	e7df      	b.n	800c5d6 <_realloc_r+0x1e>

0800c616 <__sfputc_r>:
 800c616:	6893      	ldr	r3, [r2, #8]
 800c618:	3b01      	subs	r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	b410      	push	{r4}
 800c61e:	6093      	str	r3, [r2, #8]
 800c620:	da08      	bge.n	800c634 <__sfputc_r+0x1e>
 800c622:	6994      	ldr	r4, [r2, #24]
 800c624:	42a3      	cmp	r3, r4
 800c626:	db01      	blt.n	800c62c <__sfputc_r+0x16>
 800c628:	290a      	cmp	r1, #10
 800c62a:	d103      	bne.n	800c634 <__sfputc_r+0x1e>
 800c62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c630:	f7fd ba9e 	b.w	8009b70 <__swbuf_r>
 800c634:	6813      	ldr	r3, [r2, #0]
 800c636:	1c58      	adds	r0, r3, #1
 800c638:	6010      	str	r0, [r2, #0]
 800c63a:	7019      	strb	r1, [r3, #0]
 800c63c:	4608      	mov	r0, r1
 800c63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <__sfputs_r>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	4614      	mov	r4, r2
 800c64c:	18d5      	adds	r5, r2, r3
 800c64e:	42ac      	cmp	r4, r5
 800c650:	d101      	bne.n	800c656 <__sfputs_r+0x12>
 800c652:	2000      	movs	r0, #0
 800c654:	e007      	b.n	800c666 <__sfputs_r+0x22>
 800c656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65a:	463a      	mov	r2, r7
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff ffda 	bl	800c616 <__sfputc_r>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d1f3      	bne.n	800c64e <__sfputs_r+0xa>
 800c666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c668 <_vfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	460d      	mov	r5, r1
 800c66e:	b09d      	sub	sp, #116	; 0x74
 800c670:	4614      	mov	r4, r2
 800c672:	4698      	mov	r8, r3
 800c674:	4606      	mov	r6, r0
 800c676:	b118      	cbz	r0, 800c680 <_vfiprintf_r+0x18>
 800c678:	6983      	ldr	r3, [r0, #24]
 800c67a:	b90b      	cbnz	r3, 800c680 <_vfiprintf_r+0x18>
 800c67c:	f7fe facc 	bl	800ac18 <__sinit>
 800c680:	4b89      	ldr	r3, [pc, #548]	; (800c8a8 <_vfiprintf_r+0x240>)
 800c682:	429d      	cmp	r5, r3
 800c684:	d11b      	bne.n	800c6be <_vfiprintf_r+0x56>
 800c686:	6875      	ldr	r5, [r6, #4]
 800c688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c68a:	07d9      	lsls	r1, r3, #31
 800c68c:	d405      	bmi.n	800c69a <_vfiprintf_r+0x32>
 800c68e:	89ab      	ldrh	r3, [r5, #12]
 800c690:	059a      	lsls	r2, r3, #22
 800c692:	d402      	bmi.n	800c69a <_vfiprintf_r+0x32>
 800c694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c696:	f7fe fed0 	bl	800b43a <__retarget_lock_acquire_recursive>
 800c69a:	89ab      	ldrh	r3, [r5, #12]
 800c69c:	071b      	lsls	r3, r3, #28
 800c69e:	d501      	bpl.n	800c6a4 <_vfiprintf_r+0x3c>
 800c6a0:	692b      	ldr	r3, [r5, #16]
 800c6a2:	b9eb      	cbnz	r3, 800c6e0 <_vfiprintf_r+0x78>
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f7fd fab4 	bl	8009c14 <__swsetup_r>
 800c6ac:	b1c0      	cbz	r0, 800c6e0 <_vfiprintf_r+0x78>
 800c6ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b0:	07dc      	lsls	r4, r3, #31
 800c6b2:	d50e      	bpl.n	800c6d2 <_vfiprintf_r+0x6a>
 800c6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b8:	b01d      	add	sp, #116	; 0x74
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	4b7b      	ldr	r3, [pc, #492]	; (800c8ac <_vfiprintf_r+0x244>)
 800c6c0:	429d      	cmp	r5, r3
 800c6c2:	d101      	bne.n	800c6c8 <_vfiprintf_r+0x60>
 800c6c4:	68b5      	ldr	r5, [r6, #8]
 800c6c6:	e7df      	b.n	800c688 <_vfiprintf_r+0x20>
 800c6c8:	4b79      	ldr	r3, [pc, #484]	; (800c8b0 <_vfiprintf_r+0x248>)
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	bf08      	it	eq
 800c6ce:	68f5      	ldreq	r5, [r6, #12]
 800c6d0:	e7da      	b.n	800c688 <_vfiprintf_r+0x20>
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	0598      	lsls	r0, r3, #22
 800c6d6:	d4ed      	bmi.n	800c6b4 <_vfiprintf_r+0x4c>
 800c6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6da:	f7fe feaf 	bl	800b43c <__retarget_lock_release_recursive>
 800c6de:	e7e9      	b.n	800c6b4 <_vfiprintf_r+0x4c>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ee:	2330      	movs	r3, #48	; 0x30
 800c6f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8b4 <_vfiprintf_r+0x24c>
 800c6f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f8:	f04f 0901 	mov.w	r9, #1
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	469a      	mov	sl, r3
 800c700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c704:	b10a      	cbz	r2, 800c70a <_vfiprintf_r+0xa2>
 800c706:	2a25      	cmp	r2, #37	; 0x25
 800c708:	d1f9      	bne.n	800c6fe <_vfiprintf_r+0x96>
 800c70a:	ebba 0b04 	subs.w	fp, sl, r4
 800c70e:	d00b      	beq.n	800c728 <_vfiprintf_r+0xc0>
 800c710:	465b      	mov	r3, fp
 800c712:	4622      	mov	r2, r4
 800c714:	4629      	mov	r1, r5
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ff94 	bl	800c644 <__sfputs_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	f000 80aa 	beq.w	800c876 <_vfiprintf_r+0x20e>
 800c722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c724:	445a      	add	r2, fp
 800c726:	9209      	str	r2, [sp, #36]	; 0x24
 800c728:	f89a 3000 	ldrb.w	r3, [sl]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 80a2 	beq.w	800c876 <_vfiprintf_r+0x20e>
 800c732:	2300      	movs	r3, #0
 800c734:	f04f 32ff 	mov.w	r2, #4294967295
 800c738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c73c:	f10a 0a01 	add.w	sl, sl, #1
 800c740:	9304      	str	r3, [sp, #16]
 800c742:	9307      	str	r3, [sp, #28]
 800c744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c748:	931a      	str	r3, [sp, #104]	; 0x68
 800c74a:	4654      	mov	r4, sl
 800c74c:	2205      	movs	r2, #5
 800c74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c752:	4858      	ldr	r0, [pc, #352]	; (800c8b4 <_vfiprintf_r+0x24c>)
 800c754:	f7f3 fd4c 	bl	80001f0 <memchr>
 800c758:	9a04      	ldr	r2, [sp, #16]
 800c75a:	b9d8      	cbnz	r0, 800c794 <_vfiprintf_r+0x12c>
 800c75c:	06d1      	lsls	r1, r2, #27
 800c75e:	bf44      	itt	mi
 800c760:	2320      	movmi	r3, #32
 800c762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c766:	0713      	lsls	r3, r2, #28
 800c768:	bf44      	itt	mi
 800c76a:	232b      	movmi	r3, #43	; 0x2b
 800c76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c770:	f89a 3000 	ldrb.w	r3, [sl]
 800c774:	2b2a      	cmp	r3, #42	; 0x2a
 800c776:	d015      	beq.n	800c7a4 <_vfiprintf_r+0x13c>
 800c778:	9a07      	ldr	r2, [sp, #28]
 800c77a:	4654      	mov	r4, sl
 800c77c:	2000      	movs	r0, #0
 800c77e:	f04f 0c0a 	mov.w	ip, #10
 800c782:	4621      	mov	r1, r4
 800c784:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c788:	3b30      	subs	r3, #48	; 0x30
 800c78a:	2b09      	cmp	r3, #9
 800c78c:	d94e      	bls.n	800c82c <_vfiprintf_r+0x1c4>
 800c78e:	b1b0      	cbz	r0, 800c7be <_vfiprintf_r+0x156>
 800c790:	9207      	str	r2, [sp, #28]
 800c792:	e014      	b.n	800c7be <_vfiprintf_r+0x156>
 800c794:	eba0 0308 	sub.w	r3, r0, r8
 800c798:	fa09 f303 	lsl.w	r3, r9, r3
 800c79c:	4313      	orrs	r3, r2
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	46a2      	mov	sl, r4
 800c7a2:	e7d2      	b.n	800c74a <_vfiprintf_r+0xe2>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d19      	adds	r1, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9103      	str	r1, [sp, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfbb      	ittet	lt
 800c7b0:	425b      	neglt	r3, r3
 800c7b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b6:	9307      	strge	r3, [sp, #28]
 800c7b8:	9307      	strlt	r3, [sp, #28]
 800c7ba:	bfb8      	it	lt
 800c7bc:	9204      	strlt	r2, [sp, #16]
 800c7be:	7823      	ldrb	r3, [r4, #0]
 800c7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c7c2:	d10c      	bne.n	800c7de <_vfiprintf_r+0x176>
 800c7c4:	7863      	ldrb	r3, [r4, #1]
 800c7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c8:	d135      	bne.n	800c836 <_vfiprintf_r+0x1ce>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	1d1a      	adds	r2, r3, #4
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	9203      	str	r2, [sp, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	bfb8      	it	lt
 800c7d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7da:	3402      	adds	r4, #2
 800c7dc:	9305      	str	r3, [sp, #20]
 800c7de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8c4 <_vfiprintf_r+0x25c>
 800c7e2:	7821      	ldrb	r1, [r4, #0]
 800c7e4:	2203      	movs	r2, #3
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	f7f3 fd02 	bl	80001f0 <memchr>
 800c7ec:	b140      	cbz	r0, 800c800 <_vfiprintf_r+0x198>
 800c7ee:	2340      	movs	r3, #64	; 0x40
 800c7f0:	eba0 000a 	sub.w	r0, r0, sl
 800c7f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c7f8:	9b04      	ldr	r3, [sp, #16]
 800c7fa:	4303      	orrs	r3, r0
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c804:	482c      	ldr	r0, [pc, #176]	; (800c8b8 <_vfiprintf_r+0x250>)
 800c806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c80a:	2206      	movs	r2, #6
 800c80c:	f7f3 fcf0 	bl	80001f0 <memchr>
 800c810:	2800      	cmp	r0, #0
 800c812:	d03f      	beq.n	800c894 <_vfiprintf_r+0x22c>
 800c814:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <_vfiprintf_r+0x254>)
 800c816:	bb1b      	cbnz	r3, 800c860 <_vfiprintf_r+0x1f8>
 800c818:	9b03      	ldr	r3, [sp, #12]
 800c81a:	3307      	adds	r3, #7
 800c81c:	f023 0307 	bic.w	r3, r3, #7
 800c820:	3308      	adds	r3, #8
 800c822:	9303      	str	r3, [sp, #12]
 800c824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c826:	443b      	add	r3, r7
 800c828:	9309      	str	r3, [sp, #36]	; 0x24
 800c82a:	e767      	b.n	800c6fc <_vfiprintf_r+0x94>
 800c82c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c830:	460c      	mov	r4, r1
 800c832:	2001      	movs	r0, #1
 800c834:	e7a5      	b.n	800c782 <_vfiprintf_r+0x11a>
 800c836:	2300      	movs	r3, #0
 800c838:	3401      	adds	r4, #1
 800c83a:	9305      	str	r3, [sp, #20]
 800c83c:	4619      	mov	r1, r3
 800c83e:	f04f 0c0a 	mov.w	ip, #10
 800c842:	4620      	mov	r0, r4
 800c844:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c848:	3a30      	subs	r2, #48	; 0x30
 800c84a:	2a09      	cmp	r2, #9
 800c84c:	d903      	bls.n	800c856 <_vfiprintf_r+0x1ee>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0c5      	beq.n	800c7de <_vfiprintf_r+0x176>
 800c852:	9105      	str	r1, [sp, #20]
 800c854:	e7c3      	b.n	800c7de <_vfiprintf_r+0x176>
 800c856:	fb0c 2101 	mla	r1, ip, r1, r2
 800c85a:	4604      	mov	r4, r0
 800c85c:	2301      	movs	r3, #1
 800c85e:	e7f0      	b.n	800c842 <_vfiprintf_r+0x1da>
 800c860:	ab03      	add	r3, sp, #12
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	462a      	mov	r2, r5
 800c866:	4b16      	ldr	r3, [pc, #88]	; (800c8c0 <_vfiprintf_r+0x258>)
 800c868:	a904      	add	r1, sp, #16
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7fb fc5e 	bl	800812c <_printf_float>
 800c870:	4607      	mov	r7, r0
 800c872:	1c78      	adds	r0, r7, #1
 800c874:	d1d6      	bne.n	800c824 <_vfiprintf_r+0x1bc>
 800c876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c878:	07d9      	lsls	r1, r3, #31
 800c87a:	d405      	bmi.n	800c888 <_vfiprintf_r+0x220>
 800c87c:	89ab      	ldrh	r3, [r5, #12]
 800c87e:	059a      	lsls	r2, r3, #22
 800c880:	d402      	bmi.n	800c888 <_vfiprintf_r+0x220>
 800c882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c884:	f7fe fdda 	bl	800b43c <__retarget_lock_release_recursive>
 800c888:	89ab      	ldrh	r3, [r5, #12]
 800c88a:	065b      	lsls	r3, r3, #25
 800c88c:	f53f af12 	bmi.w	800c6b4 <_vfiprintf_r+0x4c>
 800c890:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c892:	e711      	b.n	800c6b8 <_vfiprintf_r+0x50>
 800c894:	ab03      	add	r3, sp, #12
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	462a      	mov	r2, r5
 800c89a:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <_vfiprintf_r+0x258>)
 800c89c:	a904      	add	r1, sp, #16
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7fb fee8 	bl	8008674 <_printf_i>
 800c8a4:	e7e4      	b.n	800c870 <_vfiprintf_r+0x208>
 800c8a6:	bf00      	nop
 800c8a8:	0800ccac 	.word	0x0800ccac
 800c8ac:	0800cccc 	.word	0x0800cccc
 800c8b0:	0800cc8c 	.word	0x0800cc8c
 800c8b4:	0800cec4 	.word	0x0800cec4
 800c8b8:	0800cece 	.word	0x0800cece
 800c8bc:	0800812d 	.word	0x0800812d
 800c8c0:	0800c645 	.word	0x0800c645
 800c8c4:	0800ceca 	.word	0x0800ceca

0800c8c8 <_read_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d07      	ldr	r5, [pc, #28]	; (800c8e8 <_read_r+0x20>)
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	602a      	str	r2, [r5, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f7f5 fce4 	bl	80022a4 <_read>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_read_r+0x1e>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_read_r+0x1e>
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	200051ac 	.word	0x200051ac

0800c8ec <abort>:
 800c8ec:	b508      	push	{r3, lr}
 800c8ee:	2006      	movs	r0, #6
 800c8f0:	f000 f834 	bl	800c95c <raise>
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	f7f5 fccb 	bl	8002290 <_exit>

0800c8fa <_malloc_usable_size_r>:
 800c8fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8fe:	1f18      	subs	r0, r3, #4
 800c900:	2b00      	cmp	r3, #0
 800c902:	bfbc      	itt	lt
 800c904:	580b      	ldrlt	r3, [r1, r0]
 800c906:	18c0      	addlt	r0, r0, r3
 800c908:	4770      	bx	lr

0800c90a <_raise_r>:
 800c90a:	291f      	cmp	r1, #31
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4604      	mov	r4, r0
 800c910:	460d      	mov	r5, r1
 800c912:	d904      	bls.n	800c91e <_raise_r+0x14>
 800c914:	2316      	movs	r3, #22
 800c916:	6003      	str	r3, [r0, #0]
 800c918:	f04f 30ff 	mov.w	r0, #4294967295
 800c91c:	bd38      	pop	{r3, r4, r5, pc}
 800c91e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c920:	b112      	cbz	r2, 800c928 <_raise_r+0x1e>
 800c922:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c926:	b94b      	cbnz	r3, 800c93c <_raise_r+0x32>
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 f831 	bl	800c990 <_getpid_r>
 800c92e:	462a      	mov	r2, r5
 800c930:	4601      	mov	r1, r0
 800c932:	4620      	mov	r0, r4
 800c934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c938:	f000 b818 	b.w	800c96c <_kill_r>
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d00a      	beq.n	800c956 <_raise_r+0x4c>
 800c940:	1c59      	adds	r1, r3, #1
 800c942:	d103      	bne.n	800c94c <_raise_r+0x42>
 800c944:	2316      	movs	r3, #22
 800c946:	6003      	str	r3, [r0, #0]
 800c948:	2001      	movs	r0, #1
 800c94a:	e7e7      	b.n	800c91c <_raise_r+0x12>
 800c94c:	2400      	movs	r4, #0
 800c94e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c952:	4628      	mov	r0, r5
 800c954:	4798      	blx	r3
 800c956:	2000      	movs	r0, #0
 800c958:	e7e0      	b.n	800c91c <_raise_r+0x12>
	...

0800c95c <raise>:
 800c95c:	4b02      	ldr	r3, [pc, #8]	; (800c968 <raise+0xc>)
 800c95e:	4601      	mov	r1, r0
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	f7ff bfd2 	b.w	800c90a <_raise_r>
 800c966:	bf00      	nop
 800c968:	20000010 	.word	0x20000010

0800c96c <_kill_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d07      	ldr	r5, [pc, #28]	; (800c98c <_kill_r+0x20>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	4611      	mov	r1, r2
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	f7f5 fc79 	bl	8002270 <_kill>
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	d102      	bne.n	800c988 <_kill_r+0x1c>
 800c982:	682b      	ldr	r3, [r5, #0]
 800c984:	b103      	cbz	r3, 800c988 <_kill_r+0x1c>
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	bd38      	pop	{r3, r4, r5, pc}
 800c98a:	bf00      	nop
 800c98c:	200051ac 	.word	0x200051ac

0800c990 <_getpid_r>:
 800c990:	f7f5 bc66 	b.w	8002260 <_getpid>

0800c994 <_init>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr

0800c9a0 <_fini>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr
