
Chunithm_Affin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001142c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080115d0  080115d0  000215d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c2c  08011c2c  00030324  2**0
                  CONTENTS
  4 .ARM          00000008  08011c2c  08011c2c  00021c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c34  08011c34  00030324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c34  08011c34  00021c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c38  08011c38  00021c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08011c3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005698  20000324  08011f60  00030324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059bc  08011f60  000359bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028454  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f0f  00000000  00000000  000587a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  0005e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  00060818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207fb  00000000  00000000  000626f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029173  00000000  00000000  00082eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab49f  00000000  00000000  000ac05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001574fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a02c  00000000  00000000  00157550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000324 	.word	0x20000324
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080115b4 	.word	0x080115b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000328 	.word	0x20000328
 80001dc:	080115b4 	.word	0x080115b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_DMA_Init+0x5c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <MX_DMA_Init+0x5c>)
 8001018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_DMA_Init+0x5c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	203a      	movs	r0, #58	; 0x3a
 8001030:	f001 fbe2 	bl	80027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001034:	203a      	movs	r0, #58	; 0x3a
 8001036:	f001 fbfb 	bl	8002830 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2105      	movs	r1, #5
 800103e:	2044      	movs	r0, #68	; 0x44
 8001040:	f001 fbda 	bl	80027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001044:	2044      	movs	r0, #68	; 0x44
 8001046:	f001 fbf3 	bl	8002830 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2105      	movs	r1, #5
 800104e:	2046      	movs	r0, #70	; 0x46
 8001050:	f001 fbd2 	bl	80027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001054:	2046      	movs	r0, #70	; 0x46
 8001056:	f001 fbeb 	bl	8002830 <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(USB_task, NULL, &defaultTask_attributes);
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_FREERTOS_Init+0x78>)
 800106e:	2100      	movs	r1, #0
 8001070:	481c      	ldr	r0, [pc, #112]	; (80010e4 <MX_FREERTOS_Init+0x7c>)
 8001072:	f008 fc2f 	bl	80098d4 <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <MX_FREERTOS_Init+0x80>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of task01 */
  task01Handle = osThreadNew(MPR121_1, NULL, &task01_attributes);
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <MX_FREERTOS_Init+0x84>)
 800107e:	2100      	movs	r1, #0
 8001080:	481b      	ldr	r0, [pc, #108]	; (80010f0 <MX_FREERTOS_Init+0x88>)
 8001082:	f008 fc27 	bl	80098d4 <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <MX_FREERTOS_Init+0x8c>)
 800108a:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(MPR121_2, NULL, &task02_attributes);
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <MX_FREERTOS_Init+0x90>)
 800108e:	2100      	movs	r1, #0
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <MX_FREERTOS_Init+0x94>)
 8001092:	f008 fc1f 	bl	80098d4 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <MX_FREERTOS_Init+0x98>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of task03 */
  task03Handle = osThreadNew(MPR121_3, NULL, &task03_attributes);
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <MX_FREERTOS_Init+0x9c>)
 800109e:	2100      	movs	r1, #0
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_FREERTOS_Init+0xa0>)
 80010a2:	f008 fc17 	bl	80098d4 <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_FREERTOS_Init+0xa4>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* creation of task04 */
  task04Handle = osThreadNew(WS2812_task, NULL, &task04_attributes);
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <MX_FREERTOS_Init+0xa8>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <MX_FREERTOS_Init+0xac>)
 80010b2:	f008 fc0f 	bl	80098d4 <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_FREERTOS_Init+0xb0>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of task05 */
  task05Handle = osThreadNew(IR_task, NULL, &task05_attributes);
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_FREERTOS_Init+0xb4>)
 80010be:	2100      	movs	r1, #0
 80010c0:	4817      	ldr	r0, [pc, #92]	; (8001120 <MX_FREERTOS_Init+0xb8>)
 80010c2:	f008 fc07 	bl	80098d4 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <MX_FREERTOS_Init+0xbc>)
 80010ca:	6013      	str	r3, [r2, #0]

  /* creation of task06 */
  task06Handle = osThreadNew(CardReader, NULL, &task06_attributes);
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <MX_FREERTOS_Init+0xc0>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4816      	ldr	r0, [pc, #88]	; (800112c <MX_FREERTOS_Init+0xc4>)
 80010d2:	f008 fbff 	bl	80098d4 <osThreadNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <MX_FREERTOS_Init+0xc8>)
 80010da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	0801166c 	.word	0x0801166c
 80010e4:	08001135 	.word	0x08001135
 80010e8:	20000374 	.word	0x20000374
 80010ec:	08011690 	.word	0x08011690
 80010f0:	08001221 	.word	0x08001221
 80010f4:	20000378 	.word	0x20000378
 80010f8:	080116b4 	.word	0x080116b4
 80010fc:	08001261 	.word	0x08001261
 8001100:	2000037c 	.word	0x2000037c
 8001104:	080116d8 	.word	0x080116d8
 8001108:	080012a1 	.word	0x080012a1
 800110c:	20000380 	.word	0x20000380
 8001110:	080116fc 	.word	0x080116fc
 8001114:	080012e1 	.word	0x080012e1
 8001118:	20000384 	.word	0x20000384
 800111c:	08011720 	.word	0x08011720
 8001120:	080012f1 	.word	0x080012f1
 8001124:	20000388 	.word	0x20000388
 8001128:	08011744 	.word	0x08011744
 800112c:	08001301 	.word	0x08001301
 8001130:	2000038c 	.word	0x2000038c

08001134 <USB_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_USB_task */
void USB_task(void *argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800113c:	f00b f8fe 	bl	800c33c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN USB_task */
  /* Infinite loop */
  for(;;)
  {
	  	  	for(uint8_t i = 0 ; i < 11 ; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e015      	b.n	8001172 <USB_task+0x3e>
	  		{
	  			key_buffer[i+2] = (touchA_status & maskcode[i]) ? keycodeA[i] : 0 ;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4a2c      	ldr	r2, [pc, #176]	; (80011fc <USB_task+0xc8>)
 800114a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <USB_task+0xcc>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	4013      	ands	r3, r2
 8001154:	b29b      	uxth	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <USB_task+0x2e>
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <USB_task+0xd0>)
 800115e:	5cd2      	ldrb	r2, [r2, r3]
 8001160:	e000      	b.n	8001164 <USB_task+0x30>
 8001162:	2200      	movs	r2, #0
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	3302      	adds	r3, #2
 8001168:	4927      	ldr	r1, [pc, #156]	; (8001208 <USB_task+0xd4>)
 800116a:	54ca      	strb	r2, [r1, r3]
	  	  	for(uint8_t i = 0 ; i < 11 ; i++)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	3301      	adds	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b0a      	cmp	r3, #10
 8001176:	d9e6      	bls.n	8001146 <USB_task+0x12>
	  		}
	  		for(uint8_t j = 0 ; j < 13 ; j++)
 8001178:	2300      	movs	r3, #0
 800117a:	73bb      	strb	r3, [r7, #14]
 800117c:	e015      	b.n	80011aa <USB_task+0x76>
	  		{
	  			key_buffer[j+12] = (touchB_status & maskcode[j]) ? keycodeB[j] : 0 ;
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <USB_task+0xc8>)
 8001182:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <USB_task+0xd8>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	4013      	ands	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <USB_task+0x66>
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <USB_task+0xdc>)
 8001196:	5cd2      	ldrb	r2, [r2, r3]
 8001198:	e000      	b.n	800119c <USB_task+0x68>
 800119a:	2200      	movs	r2, #0
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	330c      	adds	r3, #12
 80011a0:	4919      	ldr	r1, [pc, #100]	; (8001208 <USB_task+0xd4>)
 80011a2:	54ca      	strb	r2, [r1, r3]
	  		for(uint8_t j = 0 ; j < 13 ; j++)
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73bb      	strb	r3, [r7, #14]
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d9e6      	bls.n	800117e <USB_task+0x4a>
	  		}
	  		for(uint8_t k = 0 ; k < 11 ; k++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	737b      	strb	r3, [r7, #13]
 80011b4:	e015      	b.n	80011e2 <USB_task+0xae>
	  		{
	  			key_buffer[k+24] = (touchC_status & maskcode[k]) ? keycodeC[k] : 0 ;
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	4a10      	ldr	r2, [pc, #64]	; (80011fc <USB_task+0xc8>)
 80011ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <USB_task+0xe0>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	4013      	ands	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <USB_task+0x9e>
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <USB_task+0xe4>)
 80011ce:	5cd2      	ldrb	r2, [r2, r3]
 80011d0:	e000      	b.n	80011d4 <USB_task+0xa0>
 80011d2:	2200      	movs	r2, #0
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	3318      	adds	r3, #24
 80011d8:	490b      	ldr	r1, [pc, #44]	; (8001208 <USB_task+0xd4>)
 80011da:	54ca      	strb	r2, [r1, r3]
	  		for(uint8_t k = 0 ; k < 11 ; k++)
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	3301      	adds	r3, #1
 80011e0:	737b      	strb	r3, [r7, #13]
 80011e2:	7b7b      	ldrb	r3, [r7, #13]
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d9e6      	bls.n	80011b6 <USB_task+0x82>
	  		}
	  	  USBD_HID_SendReport(&hUsbDeviceFS, key_buffer, 42);
 80011e8:	222a      	movs	r2, #42	; 0x2a
 80011ea:	4907      	ldr	r1, [pc, #28]	; (8001208 <USB_task+0xd4>)
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <USB_task+0xe8>)
 80011ee:	f006 ff69 	bl	80080c4 <USBD_HID_SendReport>
	  	  osDelay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f008 fc00 	bl	80099f8 <osDelay>
	  	  	for(uint8_t i = 0 ; i < 11 ; i++)
 80011f8:	e7a2      	b.n	8001140 <USB_task+0xc>
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000340 	.word	0x20000340
 8001204:	20000018 	.word	0x20000018
 8001208:	20000348 	.word	0x20000348
 800120c:	20000342 	.word	0x20000342
 8001210:	20000024 	.word	0x20000024
 8001214:	20000344 	.word	0x20000344
 8001218:	20000030 	.word	0x20000030
 800121c:	20004fb0 	.word	0x20004fb0

08001220 <MPR121_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPR121_1 */
void MPR121_1(void *argument)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPR121_1 */
  /* Infinite loop */
  for(;;)
  {
	  touchA_status = (I2C_Read(I2C1,0X5A,1) << 8) + I2C_Read(I2C1,0X5A,0);
 8001228:	2201      	movs	r2, #1
 800122a:	215a      	movs	r1, #90	; 0x5a
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <MPR121_1+0x38>)
 800122e:	f000 fc5c 	bl	8001aea <I2C_Read>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29c      	uxth	r4, r3
 800123a:	2200      	movs	r2, #0
 800123c:	215a      	movs	r1, #90	; 0x5a
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MPR121_1+0x38>)
 8001240:	f000 fc53 	bl	8001aea <I2C_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	b29b      	uxth	r3, r3
 8001248:	4423      	add	r3, r4
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <MPR121_1+0x3c>)
 800124e:	801a      	strh	r2, [r3, #0]
	  osDelay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f008 fbd1 	bl	80099f8 <osDelay>
	  touchA_status = (I2C_Read(I2C1,0X5A,1) << 8) + I2C_Read(I2C1,0X5A,0);
 8001256:	e7e7      	b.n	8001228 <MPR121_1+0x8>
 8001258:	40005400 	.word	0x40005400
 800125c:	20000340 	.word	0x20000340

08001260 <MPR121_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPR121_2 */
void MPR121_2(void *argument)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPR121_2 */
  /* Infinite loop */
  for(;;)
  {
	  touchB_status = (I2C_Read(I2C2,0X5A,1) << 8) + I2C_Read(I2C2,0X5A,0);
 8001268:	2201      	movs	r2, #1
 800126a:	215a      	movs	r1, #90	; 0x5a
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <MPR121_2+0x38>)
 800126e:	f000 fc3c 	bl	8001aea <I2C_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b29c      	uxth	r4, r3
 800127a:	2200      	movs	r2, #0
 800127c:	215a      	movs	r1, #90	; 0x5a
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MPR121_2+0x38>)
 8001280:	f000 fc33 	bl	8001aea <I2C_Read>
 8001284:	4603      	mov	r3, r0
 8001286:	b29b      	uxth	r3, r3
 8001288:	4423      	add	r3, r4
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <MPR121_2+0x3c>)
 800128e:	801a      	strh	r2, [r3, #0]
	  osDelay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f008 fbb1 	bl	80099f8 <osDelay>
	  touchB_status = (I2C_Read(I2C2,0X5A,1) << 8) + I2C_Read(I2C2,0X5A,0);
 8001296:	e7e7      	b.n	8001268 <MPR121_2+0x8>
 8001298:	40005800 	.word	0x40005800
 800129c:	20000342 	.word	0x20000342

080012a0 <MPR121_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPR121_3 */
void MPR121_3(void *argument)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPR121_3 */
  /* Infinite loop */
  for(;;)
  {
	  touchC_status = (I2C_Read(I2C3,0X5A,1) << 8) + I2C_Read(I2C3,0X5A,0);
 80012a8:	2201      	movs	r2, #1
 80012aa:	215a      	movs	r1, #90	; 0x5a
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <MPR121_3+0x38>)
 80012ae:	f000 fc1c 	bl	8001aea <I2C_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29c      	uxth	r4, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	215a      	movs	r1, #90	; 0x5a
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MPR121_3+0x38>)
 80012c0:	f000 fc13 	bl	8001aea <I2C_Read>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4423      	add	r3, r4
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <MPR121_3+0x3c>)
 80012ce:	801a      	strh	r2, [r3, #0]
	  osDelay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f008 fb91 	bl	80099f8 <osDelay>
	  touchC_status = (I2C_Read(I2C3,0X5A,1) << 8) + I2C_Read(I2C3,0X5A,0);
 80012d6:	e7e7      	b.n	80012a8 <MPR121_3+0x8>
 80012d8:	40005c00 	.word	0x40005c00
 80012dc:	20000344 	.word	0x20000344

080012e0 <WS2812_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WS2812_task */
void WS2812_task(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WS2812_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f008 fb85 	bl	80099f8 <osDelay>
 80012ee:	e7fb      	b.n	80012e8 <WS2812_task+0x8>

080012f0 <IR_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_task */
void IR_task(void *argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f008 fb7d 	bl	80099f8 <osDelay>
 80012fe:	e7fb      	b.n	80012f8 <IR_task+0x8>

08001300 <CardReader>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardReader */
void CardReader(void *argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardReader */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001308:	2001      	movs	r0, #1
 800130a:	f008 fb75 	bl	80099f8 <osDelay>
 800130e:	e7fb      	b.n	8001308 <CardReader+0x8>

08001310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_GPIO_Init+0xec>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <MX_GPIO_Init+0xec>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <MX_GPIO_Init+0xec>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_GPIO_Init+0xec>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <MX_GPIO_Init+0xec>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_GPIO_Init+0xec>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_GPIO_Init+0xec>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <MX_GPIO_Init+0xec>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_GPIO_Init+0xec>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_GPIO_Init+0xec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <MX_GPIO_Init+0xec>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_GPIO_Init+0xec>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <MX_GPIO_Init+0xf0>)
 800139c:	f001 fec4 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a0:	2302      	movs	r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013b8:	f001 fd32 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80013bc:	2324      	movs	r3, #36	; 0x24
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013d2:	f001 fd25 	bl	8002e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0xf4>)
 80013ee:	f001 fd17 	bl	8002e20 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	40020000 	.word	0x40020000

08001408 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f023 0201 	bic.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4013      	ands	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023800 	.word	0x40023800

080014c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40023800 	.word	0x40023800

080014f0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2220      	movs	r2, #32
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f00b fc7b 	bl	800cdfa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff ffbb 	bl	8001490 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800151e:	2302      	movs	r3, #2
 8001520:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800152e:	2304      	movs	r3, #4
 8001530:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <MX_I2C1_Init+0xa0>)
 8001538:	f004 fccd 	bl	8005ed6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800153c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001540:	f7ff ffbe 	bl	80014c0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_I2C1_Init+0xa4>)
 8001546:	f7ff ff92 	bl	800146e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800154a:	4812      	ldr	r0, [pc, #72]	; (8001594 <MX_I2C1_Init+0xa4>)
 800154c:	f7ff ff6c 	bl	8001428 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001550:	4810      	ldr	r0, [pc, #64]	; (8001594 <MX_I2C1_Init+0xa4>)
 8001552:	f7ff ff59 	bl	8001408 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C1_Init+0xa8>)
 800155c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800156c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4619      	mov	r1, r3
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_I2C1_Init+0xa4>)
 800157a:	f004 fe2b 	bl	80061d4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_I2C1_Init+0xa4>)
 8001582:	f7ff ff61 	bl	8001448 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3738      	adds	r7, #56	; 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40020400 	.word	0x40020400
 8001594:	40005400 	.word	0x40005400
 8001598:	00061a80 	.word	0x00061a80

0800159c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	2220      	movs	r2, #32
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00b fc25 	bl	800cdfa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff ff65 	bl	8001490 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB3   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015cc:	2302      	movs	r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80015dc:	2304      	movs	r3, #4
 80015de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <MX_I2C2_Init+0xc4>)
 80015e6:	f004 fc76 	bl	8005ed6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80015ea:	2308      	movs	r3, #8
 80015ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015ee:	2302      	movs	r3, #2
 80015f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80015f6:	2301      	movs	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80015fe:	2309      	movs	r3, #9
 8001600:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <MX_I2C2_Init+0xc4>)
 8001608:	f004 fc65 	bl	8005ed6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800160c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001610:	f7ff ff56 	bl	80014c0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_I2C2_Init+0xc8>)
 8001616:	f7ff ff2a 	bl	800146e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_I2C2_Init+0xc8>)
 800161c:	f7ff ff04 	bl	8001428 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_I2C2_Init+0xc8>)
 8001622:	f7ff fef1 	bl	8001408 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_I2C2_Init+0xcc>)
 800162c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800163c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4619      	mov	r1, r3
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_I2C2_Init+0xc8>)
 800164a:	f004 fdc3 	bl	80061d4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800164e:	2100      	movs	r1, #0
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C2_Init+0xc8>)
 8001652:	f7ff fef9 	bl	8001448 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3738      	adds	r7, #56	; 0x38
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40020400 	.word	0x40020400
 8001664:	40005800 	.word	0x40005800
 8001668:	00061a80 	.word	0x00061a80

0800166c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2220      	movs	r2, #32
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00b fbbd 	bl	800cdfa <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fefd 	bl	8001490 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fefa 	bl	8001490 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PA8   ------> I2C3_SCL
  PB4   ------> I2C3_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016a2:	2302      	movs	r3, #2
 80016a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	481e      	ldr	r0, [pc, #120]	; (8001734 <MX_I2C3_Init+0xc8>)
 80016bc:	f004 fc0b 	bl	8005ed6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80016c0:	2310      	movs	r3, #16
 80016c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016c4:	2302      	movs	r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016cc:	2301      	movs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80016d4:	2309      	movs	r3, #9
 80016d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4816      	ldr	r0, [pc, #88]	; (8001738 <MX_I2C3_Init+0xcc>)
 80016de:	f004 fbfa 	bl	8005ed6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80016e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016e6:	f7ff feeb 	bl	80014c0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_I2C3_Init+0xd0>)
 80016ec:	f7ff febf 	bl	800146e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 80016f0:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_I2C3_Init+0xd0>)
 80016f2:	f7ff fe99 	bl	8001428 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_I2C3_Init+0xd0>)
 80016f8:	f7ff fe86 	bl	8001408 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C3_Init+0xd4>)
 8001702:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_I2C3_Init+0xd0>)
 8001720:	f004 fd58 	bl	80061d4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001724:	2100      	movs	r1, #0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_I2C3_Init+0xd0>)
 8001728:	f7ff fe8e 	bl	8001448 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40005c00 	.word	0x40005c00
 8001740:	00061a80 	.word	0x00061a80

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 ff38 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f824 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f7ff fdde 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8001754:	f7ff fc58 	bl	8001008 <MX_DMA_Init>
  MX_I2C1_Init();
 8001758:	f7ff feca 	bl	80014f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800175c:	f000 fe2c 	bl	80023b8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001760:	f7ff ff1c 	bl	800159c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001764:	f7ff ff82 	bl	800166c <MX_I2C3_Init>
  MX_SPI1_Init();
 8001768:	f000 fba6 	bl	8001eb8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MPR121_Init(I2C1);
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <main+0x48>)
 800176e:	f000 fa32 	bl	8001bd6 <MPR121_Init>
  MPR121_Init(I2C2);
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <main+0x4c>)
 8001774:	f000 fa2f 	bl	8001bd6 <MPR121_Init>
  MPR121_Init(I2C3);
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <main+0x50>)
 800177a:	f000 fa2c 	bl	8001bd6 <MPR121_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800177e:	f008 f85f 	bl	8009840 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001782:	f7ff fc71 	bl	8001068 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001786:	f008 f87f 	bl	8009888 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178a:	e7fe      	b.n	800178a <main+0x46>
 800178c:	40005400 	.word	0x40005400
 8001790:	40005800 	.word	0x40005800
 8001794:	40005c00 	.word	0x40005c00

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00b fb27 	bl	800cdfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <SystemClock_Config+0xc8>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <SystemClock_Config+0xc8>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <SystemClock_Config+0xc8>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <SystemClock_Config+0xcc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <SystemClock_Config+0xcc>)
 80017e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <SystemClock_Config+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	2302      	movs	r3, #2
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001808:	2319      	movs	r3, #25
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4618      	mov	r0, r3
 800181e:	f002 ff01 	bl	8004624 <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001828:	f000 f830 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2103      	movs	r1, #3
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f963 	bl	8004b14 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001854:	f000 f81a 	bl	800188c <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f000 fec1 	bl	8002600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40010000 	.word	0x40010000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>

08001896 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	2b80      	cmp	r3, #128	; 0x80
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001988:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	b2db      	uxtb	r3, r3
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <I2C_Write>:
	#define TOU_THRESH    3        //触摸阈值 0x0F     10//15//30//10//3
	#define    REL_THRESH    2     //释放阈值 0x0A     08//08//25//08//2


void I2C_Write(I2C_TypeDef *I2CR,int devaddr,int regaddr,int data)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
	while(LL_I2C_IsActiveFlag_BUSY(I2CR)){}//等待I2C总线空闲
 8001a54:	bf00      	nop
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ff7c 	bl	8001954 <LL_I2C_IsActiveFlag_BUSY>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <I2C_Write+0x10>
	LL_I2C_GenerateStartCondition(I2CR);//发送开始信号
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff ffae 	bl	80019c4 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2CR)){}//等待开始信号发送完成
 8001a68:	bf00      	nop
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ff4c 	bl	8001908 <LL_I2C_IsActiveFlag_SB>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f9      	beq.n	8001a6a <I2C_Write+0x24>
	LL_I2C_TransmitData8(I2CR,devaddr << 1);//发送地址
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff ffcc 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2CR)){}//当发送完成后，ADDR位自动被置1.等待地址发送完成
 8001a86:	bf00      	nop
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff ff50 	bl	800192e <LL_I2C_IsActiveFlag_ADDR>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f9      	beq.n	8001a88 <I2C_Write+0x42>
	LL_I2C_ClearFlag_ADDR(I2CR);//清除ADDR寄存器的数值，才能进行下一步操作
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff ff70 	bl	800197a <LL_I2C_ClearFlag_ADDR>
	while(!LL_I2C_IsActiveFlag_TXE(I2CR)){}	  //地址位置1之后TXE也会完成
 8001a9a:	bf00      	nop
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fefa 	bl	8001896 <LL_I2C_IsActiveFlag_TXE>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f9      	beq.n	8001a9c <I2C_Write+0x56>
	LL_I2C_TransmitData8(I2CR,regaddr);//写入寄存器地址
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff ffb5 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2CR)){}//等待从机发送应答信号
 8001ab4:	bf00      	nop
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff feed 	bl	8001896 <LL_I2C_IsActiveFlag_TXE>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f9      	beq.n	8001ab6 <I2C_Write+0x70>
	LL_I2C_TransmitData8(I2CR,data);//发送写入的数据
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff ffa8 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_BTF(I2CR)){}//等待写入完成从机发送应答
 8001ace:	bf00      	nop
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fef3 	bl	80018bc <LL_I2C_IsActiveFlag_BTF>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f9      	beq.n	8001ad0 <I2C_Write+0x8a>
	LL_I2C_GenerateStopCondition(I2CR);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff ff81 	bl	80019e4 <LL_I2C_GenerateStopCondition>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <I2C_Read>:

uint8_t I2C_Read(I2C_TypeDef *I2CR,int devaddr,int regaddr)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
	uint8_t data = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
	while(LL_I2C_IsActiveFlag_BUSY(I2CR)){}//等待I2C总线空闲
 8001afa:	bf00      	nop
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff ff29 	bl	8001954 <LL_I2C_IsActiveFlag_BUSY>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f9      	bne.n	8001afc <I2C_Read+0x12>
	LL_I2C_GenerateStartCondition(I2CR);//发送开始信号
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff ff5b 	bl	80019c4 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2CR)){}//等待开始信号发送完成
 8001b0e:	bf00      	nop
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fef9 	bl	8001908 <LL_I2C_IsActiveFlag_SB>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f9      	beq.n	8001b10 <I2C_Read+0x26>
	LL_I2C_TransmitData8(I2CR,devaddr << 1);//发送地址
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff79 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2CR)){}//当发送完成后，ADDR位自动被置1.等待地址发送完成
 8001b2c:	bf00      	nop
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fefd 	bl	800192e <LL_I2C_IsActiveFlag_ADDR>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f9      	beq.n	8001b2e <I2C_Read+0x44>
	LL_I2C_ClearFlag_ADDR(I2CR);//清除ADDR寄存器的数值，才能进行下一步操作
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff ff1d 	bl	800197a <LL_I2C_ClearFlag_ADDR>
	while(!LL_I2C_IsActiveFlag_TXE(I2CR)){}	  //地址位置1之后TXE也会完成
 8001b40:	bf00      	nop
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff fea7 	bl	8001896 <LL_I2C_IsActiveFlag_TXE>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f9      	beq.n	8001b42 <I2C_Read+0x58>
	LL_I2C_TransmitData8(I2CR,regaddr);//写入寄存器地址
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff ff62 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2CR)){}//等待从机发送应答信号
 8001b5a:	bf00      	nop
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fe9a 	bl	8001896 <LL_I2C_IsActiveFlag_TXE>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f9      	beq.n	8001b5c <I2C_Read+0x72>
//	LL_I2C_GenerateStopCondition(I2C1);
	LL_I2C_GenerateStartCondition(I2CR);//发送重启信号
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff ff2b 	bl	80019c4 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2CR)){}//等待重启信号发送完成
 8001b6e:	bf00      	nop
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fec9 	bl	8001908 <LL_I2C_IsActiveFlag_SB>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f9      	beq.n	8001b70 <I2C_Read+0x86>
	LL_I2C_TransmitData8(I2CR,devaddr << 1 | 0x01);//重新发送地址，并且读写位置1
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff ff46 	bl	8001a1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2CR)){}
 8001b92:	bf00      	nop
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7ff feca 	bl	800192e <LL_I2C_IsActiveFlag_ADDR>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <I2C_Read+0xaa>
	LL_I2C_AcknowledgeNextData(I2CR,LL_I2C_NACK);//发送NACK信号
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fefb 	bl	800199e <LL_I2C_AcknowledgeNextData>
	LL_I2C_ClearFlag_ADDR(I2CR);//清除ADDR位
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff fee6 	bl	800197a <LL_I2C_ClearFlag_ADDR>
	LL_I2C_GenerateStopCondition(I2CR);//发送停止条件
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff ff18 	bl	80019e4 <LL_I2C_GenerateStopCondition>
	while(!LL_I2C_IsActiveFlag_RXNE(I2CR)){}//当RXNE位置1之后，表示数据接收完成并且放置到DR寄存器中
 8001bb4:	bf00      	nop
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fe93 	bl	80018e2 <LL_I2C_IsActiveFlag_RXNE>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f9      	beq.n	8001bb6 <I2C_Read+0xcc>
	data = LL_I2C_ReceiveData8(I2CR);//这里实际上是读取DR寄存器中接收到的数据
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff ff1e 	bl	8001a04 <LL_I2C_ReceiveData8>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	75fb      	strb	r3, [r7, #23]
	return data;
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <MPR121_Init>:
int MPR121_Init(I2C_TypeDef *I2CR)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	I2C_Write(I2CR,0x5A,0x80,0x63);
 8001bde:	2363      	movs	r3, #99	; 0x63
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	215a      	movs	r1, #90	; 0x5a
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff2e 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x5E,0x00);
 8001bea:	2300      	movs	r3, #0
 8001bec:	225e      	movs	r2, #94	; 0x5e
 8001bee:	215a      	movs	r1, #90	; 0x5a
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff28 	bl	8001a46 <I2C_Write>
	uint8_t status = I2C_Read(I2CR,0x5A,0x5D);
 8001bf6:	225d      	movs	r2, #93	; 0x5d
 8001bf8:	215a      	movs	r1, #90	; 0x5a
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff75 	bl	8001aea <I2C_Read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	if(status != 0x24)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b24      	cmp	r3, #36	; 0x24
 8001c08:	d001      	beq.n	8001c0e <MPR121_Init+0x38>
	{
		return(0);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e150      	b.n	8001eb0 <MPR121_Init+0x2da>
	}
	  // Section A  // 该组控制过滤。 data is > baseline.
	I2C_Write(I2CR,0x5A,MHD_R, 0x01);
 8001c0e:	2301      	movs	r3, #1
 8001c10:	222b      	movs	r2, #43	; 0x2b
 8001c12:	215a      	movs	r1, #90	; 0x5a
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff16 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,NHD_R, 0x01);
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	222c      	movs	r2, #44	; 0x2c
 8001c1e:	215a      	movs	r1, #90	; 0x5a
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff10 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,NCL_R, 0x00);
 8001c26:	2300      	movs	r3, #0
 8001c28:	222d      	movs	r2, #45	; 0x2d
 8001c2a:	215a      	movs	r1, #90	; 0x5a
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff0a 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,FDL_R, 0x00);
 8001c32:	2300      	movs	r3, #0
 8001c34:	222e      	movs	r2, #46	; 0x2e
 8001c36:	215a      	movs	r1, #90	; 0x5a
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff04 	bl	8001a46 <I2C_Write>

	    // Section B  // 该组控制过滤。data is < baseline.
	I2C_Write(I2CR,0x5A,MHD_F, 0x01);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	222f      	movs	r2, #47	; 0x2f
 8001c42:	215a      	movs	r1, #90	; 0x5a
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fefe 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,NHD_F, 0x01);
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	2230      	movs	r2, #48	; 0x30
 8001c4e:	215a      	movs	r1, #90	; 0x5a
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fef8 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,NCL_F, 0xFF);
 8001c56:	23ff      	movs	r3, #255	; 0xff
 8001c58:	2231      	movs	r2, #49	; 0x31
 8001c5a:	215a      	movs	r1, #90	; 0x5a
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fef2 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,FDL_F, 0x00);
 8001c62:	2300      	movs	r3, #0
 8001c64:	2232      	movs	r2, #50	; 0x32
 8001c66:	215a      	movs	r1, #90	; 0x5a
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff feec 	bl	8001a46 <I2C_Write>

	    //基线过滤控制寄存器
	I2C_Write(I2CR,0x5A,0x33, 0x00);    //noise half delta touched
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2233      	movs	r2, #51	; 0x33
 8001c72:	215a      	movs	r1, #90	; 0x5a
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fee6 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x34, 0x00);    //noise counts touched
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2234      	movs	r2, #52	; 0x34
 8001c7e:	215a      	movs	r1, #90	; 0x5a
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fee0 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x35, 0x00);    //filter delay touched
 8001c86:	2300      	movs	r3, #0
 8001c88:	2235      	movs	r2, #53	; 0x35
 8001c8a:	215a      	movs	r1, #90	; 0x5a
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff feda 	bl	8001a46 <I2C_Write>

	I2C_Write(I2CR,0x5A,0x36, 0x0F);
 8001c92:	230f      	movs	r3, #15
 8001c94:	2236      	movs	r2, #54	; 0x36
 8001c96:	215a      	movs	r1, #90	; 0x5a
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fed4 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x37, 0x0F);
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	2237      	movs	r2, #55	; 0x37
 8001ca2:	215a      	movs	r1, #90	; 0x5a
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fece 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x38, 0x00);
 8001caa:	2300      	movs	r3, #0
 8001cac:	2238      	movs	r2, #56	; 0x38
 8001cae:	215a      	movs	r1, #90	; 0x5a
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fec8 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x39, 0x00);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2239      	movs	r2, #57	; 0x39
 8001cba:	215a      	movs	r1, #90	; 0x5a
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fec2 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3A, 0x01);
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	223a      	movs	r2, #58	; 0x3a
 8001cc6:	215a      	movs	r1, #90	; 0x5a
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff febc 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3B, 0x01);
 8001cce:	2301      	movs	r3, #1
 8001cd0:	223b      	movs	r2, #59	; 0x3b
 8001cd2:	215a      	movs	r1, #90	; 0x5a
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff feb6 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3C, 0xFF);
 8001cda:	23ff      	movs	r3, #255	; 0xff
 8001cdc:	223c      	movs	r2, #60	; 0x3c
 8001cde:	215a      	movs	r1, #90	; 0x5a
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff feb0 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3D, 0xFF);
 8001ce6:	23ff      	movs	r3, #255	; 0xff
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	215a      	movs	r1, #90	; 0x5a
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff feaa 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3E, 0x00);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	223e      	movs	r2, #62	; 0x3e
 8001cf6:	215a      	movs	r1, #90	; 0x5a
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fea4 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x3F, 0x00);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	215a      	movs	r1, #90	; 0x5a
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe9e 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x40, 0x00);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	215a      	movs	r1, #90	; 0x5a
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe98 	bl	8001a46 <I2C_Write>

	    // Section C  // 该组为每个电极设置触摸和释放阈值
	I2C_Write(I2CR,0x5A,ELE0_T, TOU_THRESH);
 8001d16:	2303      	movs	r3, #3
 8001d18:	2241      	movs	r2, #65	; 0x41
 8001d1a:	215a      	movs	r1, #90	; 0x5a
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fe92 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE0_R, REL_THRESH);
 8001d22:	2302      	movs	r3, #2
 8001d24:	2242      	movs	r2, #66	; 0x42
 8001d26:	215a      	movs	r1, #90	; 0x5a
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe8c 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE1_T, TOU_THRESH);
 8001d2e:	2303      	movs	r3, #3
 8001d30:	2243      	movs	r2, #67	; 0x43
 8001d32:	215a      	movs	r1, #90	; 0x5a
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fe86 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE1_R, REL_THRESH);
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	2244      	movs	r2, #68	; 0x44
 8001d3e:	215a      	movs	r1, #90	; 0x5a
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe80 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE2_T, TOU_THRESH);
 8001d46:	2303      	movs	r3, #3
 8001d48:	2245      	movs	r2, #69	; 0x45
 8001d4a:	215a      	movs	r1, #90	; 0x5a
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fe7a 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE2_R, REL_THRESH);
 8001d52:	2302      	movs	r3, #2
 8001d54:	2246      	movs	r2, #70	; 0x46
 8001d56:	215a      	movs	r1, #90	; 0x5a
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fe74 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE3_T, TOU_THRESH);
 8001d5e:	2303      	movs	r3, #3
 8001d60:	2247      	movs	r2, #71	; 0x47
 8001d62:	215a      	movs	r1, #90	; 0x5a
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fe6e 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE3_R, REL_THRESH);
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	2248      	movs	r2, #72	; 0x48
 8001d6e:	215a      	movs	r1, #90	; 0x5a
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fe68 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE4_T, TOU_THRESH);
 8001d76:	2303      	movs	r3, #3
 8001d78:	2249      	movs	r2, #73	; 0x49
 8001d7a:	215a      	movs	r1, #90	; 0x5a
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fe62 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE4_R, REL_THRESH);
 8001d82:	2302      	movs	r3, #2
 8001d84:	224a      	movs	r2, #74	; 0x4a
 8001d86:	215a      	movs	r1, #90	; 0x5a
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff fe5c 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE5_T, TOU_THRESH);
 8001d8e:	2303      	movs	r3, #3
 8001d90:	224b      	movs	r2, #75	; 0x4b
 8001d92:	215a      	movs	r1, #90	; 0x5a
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fe56 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE5_R, REL_THRESH);
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	224c      	movs	r2, #76	; 0x4c
 8001d9e:	215a      	movs	r1, #90	; 0x5a
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fe50 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE6_T, TOU_THRESH);
 8001da6:	2303      	movs	r3, #3
 8001da8:	224d      	movs	r2, #77	; 0x4d
 8001daa:	215a      	movs	r1, #90	; 0x5a
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe4a 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE6_R, REL_THRESH);
 8001db2:	2302      	movs	r3, #2
 8001db4:	224e      	movs	r2, #78	; 0x4e
 8001db6:	215a      	movs	r1, #90	; 0x5a
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fe44 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE7_T, TOU_THRESH);
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	224f      	movs	r2, #79	; 0x4f
 8001dc2:	215a      	movs	r1, #90	; 0x5a
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fe3e 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE7_R, REL_THRESH);
 8001dca:	2302      	movs	r3, #2
 8001dcc:	2250      	movs	r2, #80	; 0x50
 8001dce:	215a      	movs	r1, #90	; 0x5a
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fe38 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE8_T, TOU_THRESH);
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	2251      	movs	r2, #81	; 0x51
 8001dda:	215a      	movs	r1, #90	; 0x5a
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fe32 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE8_R, REL_THRESH);
 8001de2:	2302      	movs	r3, #2
 8001de4:	2252      	movs	r2, #82	; 0x52
 8001de6:	215a      	movs	r1, #90	; 0x5a
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fe2c 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE9_T, TOU_THRESH);
 8001dee:	2303      	movs	r3, #3
 8001df0:	2253      	movs	r2, #83	; 0x53
 8001df2:	215a      	movs	r1, #90	; 0x5a
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fe26 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE9_R, REL_THRESH);
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	2254      	movs	r2, #84	; 0x54
 8001dfe:	215a      	movs	r1, #90	; 0x5a
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff fe20 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE10_T, TOU_THRESH);
 8001e06:	2303      	movs	r3, #3
 8001e08:	2255      	movs	r2, #85	; 0x55
 8001e0a:	215a      	movs	r1, #90	; 0x5a
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe1a 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE10_R, REL_THRESH);
 8001e12:	2302      	movs	r3, #2
 8001e14:	2256      	movs	r2, #86	; 0x56
 8001e16:	215a      	movs	r1, #90	; 0x5a
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe14 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE11_T, TOU_THRESH);
 8001e1e:	2303      	movs	r3, #3
 8001e20:	2257      	movs	r2, #87	; 0x57
 8001e22:	215a      	movs	r1, #90	; 0x5a
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fe0e 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,ELE11_R, REL_THRESH);
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	2258      	movs	r2, #88	; 0x58
 8001e2e:	215a      	movs	r1, #90	; 0x5a
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fe08 	bl	8001a46 <I2C_Write>

	I2C_Write(I2CR,0x5A,0x59, 0x02);
 8001e36:	2302      	movs	r3, #2
 8001e38:	2259      	movs	r2, #89	; 0x59
 8001e3a:	215a      	movs	r1, #90	; 0x5a
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fe02 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x5A, 0x01);
 8001e42:	2301      	movs	r3, #1
 8001e44:	225a      	movs	r2, #90	; 0x5a
 8001e46:	215a      	movs	r1, #90	; 0x5a
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fdfc 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x5B, 0x00);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	225b      	movs	r2, #91	; 0x5b
 8001e52:	215a      	movs	r1, #90	; 0x5a
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fdf6 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x5C, 0x3F);
 8001e5a:	233f      	movs	r3, #63	; 0x3f
 8001e5c:	225c      	movs	r2, #92	; 0x5c
 8001e5e:	215a      	movs	r1, #90	; 0x5a
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fdf0 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x5D, 0x00);
 8001e66:	2300      	movs	r3, #0
 8001e68:	225d      	movs	r2, #93	; 0x5d
 8001e6a:	215a      	movs	r1, #90	; 0x5a
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fdea 	bl	8001a46 <I2C_Write>

	    // 启用自动配置和自动重新配置
	I2C_Write(I2CR,0x5A,0x7B, 0x0B);
 8001e72:	230b      	movs	r3, #11
 8001e74:	227b      	movs	r2, #123	; 0x7b
 8001e76:	215a      	movs	r1, #90	; 0x5a
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fde4 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x7D, 0xC8);
 8001e7e:	23c8      	movs	r3, #200	; 0xc8
 8001e80:	227d      	movs	r2, #125	; 0x7d
 8001e82:	215a      	movs	r1, #90	; 0x5a
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fdde 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x7E, 0x82);
 8001e8a:	2382      	movs	r3, #130	; 0x82
 8001e8c:	227e      	movs	r2, #126	; 0x7e
 8001e8e:	215a      	movs	r1, #90	; 0x5a
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fdd8 	bl	8001a46 <I2C_Write>
	I2C_Write(I2CR,0x5A,0x7F, 0xB4);
 8001e96:	23b4      	movs	r3, #180	; 0xb4
 8001e98:	227f      	movs	r2, #127	; 0x7f
 8001e9a:	215a      	movs	r1, #90	; 0x5a
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fdd2 	bl	8001a46 <I2C_Write>

	    //电极配置（重要）
	I2C_Write(I2CR,0x5A,0x5E, 0xBC);//1011,1100。启用基线跟踪，启用接近检测，启用所有12个电极
 8001ea2:	23bc      	movs	r3, #188	; 0xbc
 8001ea4:	225e      	movs	r2, #94	; 0x5e
 8001ea6:	215a      	movs	r1, #90	; 0x5a
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fdcc 	bl	8001a46 <I2C_Write>
	return(1);
 8001eae:	2301      	movs	r3, #1
	}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <MX_SPI1_Init+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001eec:	2218      	movs	r2, #24
 8001eee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001f04:	220a      	movs	r2, #10
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_SPI1_Init+0x64>)
 8001f0a:	f003 f815 	bl	8004f38 <HAL_SPI_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f14:	f7ff fcba 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000390 	.word	0x20000390
 8001f20:	40013000 	.word	0x40013000

08001f24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_SPI_MspInit+0xe0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d159      	bne.n	8001ffa <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a2e      	ldr	r2, [pc, #184]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_SPI_MspInit+0xe4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f7e:	23a0      	movs	r3, #160	; 0xa0
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	481c      	ldr	r0, [pc, #112]	; (800200c <HAL_SPI_MspInit+0xe8>)
 8001f9a:	f000 ff41 	bl	8002e20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_SPI_MspInit+0xf0>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001fe0:	f000 fc34 	bl	800284c <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001fea:	f7ff fc4f 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001ff2:	649a      	str	r2, [r3, #72]	; 0x48
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_SPI_MspInit+0xec>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40013000 	.word	0x40013000
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000
 8002010:	200003e8 	.word	0x200003e8
 8002014:	40026440 	.word	0x40026440

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_MspInit+0x54>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_MspInit+0x54>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_MspInit+0x54>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_MspInit+0x54>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	210f      	movs	r1, #15
 800205a:	f06f 0001 	mvn.w	r0, #1
 800205e:	f000 fbcb 	bl	80027f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_InitTick+0xd0>)
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	4a2d      	ldr	r2, [pc, #180]	; (8002140 <HAL_InitTick+0xd0>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6453      	str	r3, [r2, #68]	; 0x44
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_InitTick+0xd0>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ff14 	bl	8004ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020ac:	f002 fefe 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 80020b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_InitTick+0xd4>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	3b01      	subs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_InitTick+0xd8>)
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_InitTick+0xdc>)
 80020c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_InitTick+0xd8>)
 80020c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_InitTick+0xd8>)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_InitTick+0xd8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_InitTick+0xd8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_InitTick+0xd8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020e6:	4818      	ldr	r0, [pc, #96]	; (8002148 <HAL_InitTick+0xd8>)
 80020e8:	f002 ffaf 	bl	800504a <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11b      	bne.n	8002132 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020fa:	4813      	ldr	r0, [pc, #76]	; (8002148 <HAL_InitTick+0xd8>)
 80020fc:	f002 fffe 	bl	80050fc <HAL_TIM_Base_Start_IT>
 8002100:	4603      	mov	r3, r0
 8002102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800210a:	2b00      	cmp	r3, #0
 800210c:	d111      	bne.n	8002132 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800210e:	2019      	movs	r0, #25
 8002110:	f000 fb8e 	bl	8002830 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d808      	bhi.n	800212c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800211a:	2200      	movs	r2, #0
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	2019      	movs	r0, #25
 8002120:	f000 fb6a 	bl	80027f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_InitTick+0xe0>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e002      	b.n	8002132 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002136:	4618      	mov	r0, r3
 8002138:	3730      	adds	r7, #48	; 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	431bde83 	.word	0x431bde83
 8002148:	20000448 	.word	0x20000448
 800214c:	40010000 	.word	0x40010000
 8002150:	20000040 	.word	0x20000040

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002186:	f003 f81b 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000448 	.word	0x20000448

08002194 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA2_Stream2_IRQHandler+0x10>)
 800219a:	f000 fc05 	bl	80029a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003e8 	.word	0x200003e8

080021a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <OTG_FS_IRQHandler+0x10>)
 80021ae:	f001 f924 	bl	80033fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000548c 	.word	0x2000548c

080021bc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA2_Stream5_IRQHandler+0x10>)
 80021c2:	f000 fbf1 	bl	80029a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200004d8 	.word	0x200004d8

080021d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA2_Stream7_IRQHandler+0x10>)
 80021d6:	f000 fbe7 	bl	80029a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000538 	.word	0x20000538

080021e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_kill>:

int _kill(int pid, int sig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021fe:	f00a fccb 	bl	800cb98 <__errno>
 8002202:	4603      	mov	r3, r0
 8002204:	2216      	movs	r2, #22
 8002206:	601a      	str	r2, [r3, #0]
  return -1;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_exit>:

void _exit (int status)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffe7 	bl	80021f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002226:	e7fe      	b.n	8002226 <_exit+0x12>

08002228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e00a      	b.n	8002250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223a:	f3af 8000 	nop.w
 800223e:	4601      	mov	r1, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf0      	blt.n	800223a <_read+0x12>
  }

  return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e009      	b.n	8002288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f889 	bl	8002394 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf1      	blt.n	8002274 <_write+0x12>
  }
  return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_close>:

int _close(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c2:	605a      	str	r2, [r3, #4]
  return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_isatty>:

int _isatty(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f00a fc30 	bl	800cb98 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	220c      	movs	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20020000 	.word	0x20020000
 8002364:	00000400 	.word	0x00000400
 8002368:	20000490 	.word	0x20000490
 800236c:	200059c0 	.word	0x200059c0

08002370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SystemInit+0x20>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <SystemInit+0x20>)
 800237c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 800239c:	1d39      	adds	r1, r7, #4
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	2201      	movs	r2, #1
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <__io_putchar+0x20>)
 80023a6:	f003 f91c 	bl	80055e2 <HAL_UART_Transmit>
    return ch;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000494 	.word	0x20000494

080023b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <MX_USART1_UART_Init+0x50>)
 80023c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023de:	220c      	movs	r2, #12
 80023e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_USART1_UART_Init+0x4c>)
 80023f0:	f003 f8aa 	bl	8005548 <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023fa:	f7ff fa47 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000494 	.word	0x20000494
 8002408:	40011000 	.word	0x40011000

0800240c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_UART_MspInit+0x140>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f040 8089 	bne.w	8002542 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_UART_MspInit+0x144>)
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	4a45      	ldr	r2, [pc, #276]	; (8002550 <HAL_UART_MspInit+0x144>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6453      	str	r3, [r2, #68]	; 0x44
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_UART_MspInit+0x144>)
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_UART_MspInit+0x144>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <HAL_UART_MspInit+0x144>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_UART_MspInit+0x144>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002468:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247a:	2307      	movs	r3, #7
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4833      	ldr	r0, [pc, #204]	; (8002554 <HAL_UART_MspInit+0x148>)
 8002486:	f000 fccb 	bl	8002e20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_UART_MspInit+0x14c>)
 800248c:	4a33      	ldr	r2, [pc, #204]	; (800255c <HAL_UART_MspInit+0x150>)
 800248e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_UART_MspInit+0x14c>)
 8002492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002496:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_UART_MspInit+0x14c>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ca:	4823      	ldr	r0, [pc, #140]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024cc:	f000 f9be 	bl	800284c <HAL_DMA_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024d6:	f7ff f9d9 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_UART_MspInit+0x14c>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_UART_MspInit+0x154>)
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <HAL_UART_MspInit+0x158>)
 80024ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_UART_MspInit+0x154>)
 80024ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_UART_MspInit+0x154>)
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_UART_MspInit+0x154>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_UART_MspInit+0x154>)
 8002502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002506:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_MspInit+0x154>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_UART_MspInit+0x154>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_UART_MspInit+0x154>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_UART_MspInit+0x154>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_UART_MspInit+0x154>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002526:	480e      	ldr	r0, [pc, #56]	; (8002560 <HAL_UART_MspInit+0x154>)
 8002528:	f000 f990 	bl	800284c <HAL_DMA_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002532:	f7ff f9ab 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_UART_MspInit+0x154>)
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <HAL_UART_MspInit+0x154>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40011000 	.word	0x40011000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	200004d8 	.word	0x200004d8
 800255c:	40026488 	.word	0x40026488
 8002560:	20000538 	.word	0x20000538
 8002564:	400264b8 	.word	0x400264b8

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002584:	4c0b      	ldr	r4, [pc, #44]	; (80025b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002592:	f7ff feed 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f00a fbfb 	bl	800cd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7ff f8d3 	bl	8001744 <main>
  bx  lr    
 800259e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 80025ac:	08011c3c 	.word	0x08011c3c
  ldr r2, =_sbss
 80025b0:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 80025b4:	200059bc 	.word	0x200059bc

080025b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC_IRQHandler>
	...

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_Init+0x40>)
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_Init+0x40>)
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_Init+0x40>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f8fc 	bl	80027e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f7ff fd40 	bl	8002070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7ff fd12 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000044 	.word	0x20000044
 8002624:	20000598 	.word	0x20000598

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000598 	.word	0x20000598

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000044 	.word	0x20000044

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff4c 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280a:	f7ff ff61 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 800280e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	6978      	ldr	r0, [r7, #20]
 8002816:	f7ff ffb1 	bl	800277c <NVIC_EncodePriority>
 800281a:	4602      	mov	r2, r0
 800281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff80 	bl	8002728 <__NVIC_SetPriority>
}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff54 	bl	80026ec <__NVIC_EnableIRQ>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff fee6 	bl	8002628 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e099      	b.n	800299c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002888:	e00f      	b.n	80028aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288a:	f7ff fecd 	bl	8002628 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	d908      	bls.n	80028aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2203      	movs	r2, #3
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e078      	b.n	800299c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e8      	bne.n	800288a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_DMA_Init+0x158>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2b04      	cmp	r3, #4
 8002902:	d107      	bne.n	8002914 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0307 	bic.w	r3, r3, #7
 800292a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b04      	cmp	r3, #4
 800293c:	d117      	bne.n	800296e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9e9 	bl	8002d28 <DMA_CheckFifoParam>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800296a:	2301      	movs	r3, #1
 800296c:	e016      	b.n	800299c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9a0 	bl	8002cbc <DMA_CalcBaseAndBitshift>
 800297c:	4603      	mov	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	223f      	movs	r2, #63	; 0x3f
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	f010803f 	.word	0xf010803f

080029a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029b4:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_DMA_IRQHandler+0x248>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a8e      	ldr	r2, [pc, #568]	; (8002bf4 <HAL_DMA_IRQHandler+0x24c>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2208      	movs	r2, #8
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01a      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2208      	movs	r2, #8
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2201      	movs	r2, #1
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0202 	orr.w	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2204      	movs	r2, #4
 8002a50:	409a      	lsls	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2210      	movs	r2, #16
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d043      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d03c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d108      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d024      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
 8002ad6:	e01f      	b.n	8002b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0208 	bic.w	r2, r2, #8
 8002b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 808f 	beq.w	8002c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8087 	beq.w	8002c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	2220      	movs	r2, #32
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d136      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0216 	bic.w	r2, r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x1da>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	223f      	movs	r2, #63	; 0x3f
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d07e      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
        }
        return;
 8002bbe:	e079      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01d      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d031      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
 8002bec:	e02c      	b.n	8002c48 <HAL_DMA_IRQHandler+0x2a0>
 8002bee:	bf00      	nop
 8002bf0:	2000003c 	.word	0x2000003c
 8002bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
 8002c08:	e01e      	b.n	8002c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10f      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0210 	bic.w	r2, r2, #16
 8002c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d032      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2205      	movs	r2, #5
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3301      	adds	r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d307      	bcc.n	8002c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f2      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x2cc>
 8002c8e:	e000      	b.n	8002c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	e000      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cb4:	bf00      	nop
    }
  }
}
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3b10      	subs	r3, #16
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <DMA_CalcBaseAndBitshift+0x64>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <DMA_CalcBaseAndBitshift+0x68>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d909      	bls.n	8002cfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8002cfc:	e007      	b.n	8002d0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	aaaaaaab 	.word	0xaaaaaaab
 8002d24:	08011780 	.word	0x08011780

08002d28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11f      	bne.n	8002d82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d856      	bhi.n	8002df6 <DMA_CheckFifoParam+0xce>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <DMA_CheckFifoParam+0x28>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d73 	.word	0x08002d73
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	08002df7 	.word	0x08002df7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d046      	beq.n	8002dfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e043      	b.n	8002dfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7a:	d140      	bne.n	8002dfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d80:	e03d      	b.n	8002dfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	d121      	bne.n	8002dd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d837      	bhi.n	8002e02 <DMA_CheckFifoParam+0xda>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <DMA_CheckFifoParam+0x70>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002daf 	.word	0x08002daf
 8002da0:	08002da9 	.word	0x08002da9
 8002da4:	08002dc1 	.word	0x08002dc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e030      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d025      	beq.n	8002e06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dbe:	e022      	b.n	8002e06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dc8:	d11f      	bne.n	8002e0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dce:	e01c      	b.n	8002e0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d903      	bls.n	8002dde <DMA_CheckFifoParam+0xb6>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d003      	beq.n	8002de4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ddc:	e018      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      break;
 8002de2:	e015      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	e00b      	b.n	8002e0e <DMA_CheckFifoParam+0xe6>
      break;
 8002df6:	bf00      	nop
 8002df8:	e00a      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e008      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e006      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e004      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e002      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e159      	b.n	80030f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8148 	bne.w	80030ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d005      	beq.n	8002e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d130      	bne.n	8002ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 0201 	and.w	r2, r3, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d017      	beq.n	8002f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d123      	bne.n	8002f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a2 	beq.w	80030ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b54      	ldr	r3, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x202>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x1fe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_GPIO_Init+0x2f8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x1fa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a46      	ldr	r2, [pc, #280]	; (800311c <HAL_GPIO_Init+0x2fc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x1f6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a45      	ldr	r2, [pc, #276]	; (8003120 <HAL_GPIO_Init+0x300>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x1f2>
 800300e:	2304      	movs	r3, #4
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003012:	2307      	movs	r3, #7
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003034:	4935      	ldr	r1, [pc, #212]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003066:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_GPIO_Init+0x304>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f aea2 	bls.w	8002e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40013800 	.word	0x40013800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800315a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315c:	b08f      	sub	sp, #60	; 0x3c
 800315e:	af0a      	add	r7, sp, #40	; 0x28
 8003160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e10f      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f009 fa0e 	bl	800c5a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fa9b 	bl	80066e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	687e      	ldr	r6, [r7, #4]
 80031b8:	466d      	mov	r5, sp
 80031ba:	f106 0410 	add.w	r4, r6, #16
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ce:	1d33      	adds	r3, r6, #4
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	f003 f972 	bl	80064bc <USB_CoreInit>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0d0      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fa89 	bl	8006708 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e04a      	b.n	8003292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	333d      	adds	r3, #61	; 0x3d
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333c      	adds	r3, #60	; 0x3c
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	b298      	uxth	r0, r3
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3344      	adds	r3, #68	; 0x44
 8003238:	4602      	mov	r2, r0
 800323a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3340      	adds	r3, #64	; 0x40
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3348      	adds	r3, #72	; 0x48
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334c      	adds	r3, #76	; 0x4c
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	3301      	adds	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3af      	bcc.n	80031fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e044      	b.n	800332c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3301      	adds	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3b5      	bcc.n	80032a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	687e      	ldr	r6, [r7, #4]
 800333e:	466d      	mov	r5, sp
 8003340:	f106 0410 	add.w	r4, r6, #16
 8003344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003350:	e885 0003 	stmia.w	r5, {r0, r1}
 8003354:	1d33      	adds	r3, r6, #4
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f003 fa21 	bl	80067a0 <USB_DevInit>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e00d      	b.n	800338c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f004 fb70 	bl	8007a6a <USB_DevDisconnect>

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_PCD_Start+0x1c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e020      	b.n	80033f2 <HAL_PCD_Start+0x5e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d109      	bne.n	80033d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d005      	beq.n	80033d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 f973 	bl	80066c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fb20 	bl	8007a28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033fa:	b590      	push	{r4, r7, lr}
 80033fc:	b08d      	sub	sp, #52	; 0x34
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fbde 	bl	8007bd2 <USB_GetMode>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 848a 	bne.w	8003d32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f004 fb42 	bl	8007aac <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8480 	beq.w	8003d30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 fb2f 	bl	8007aac <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d107      	bne.n	8003468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 0202 	and.w	r2, r2, #2
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fb1d 	bl	8007aac <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d161      	bne.n	8003540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	0c5b      	lsrs	r3, r3, #17
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d124      	bne.n	8003502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d035      	beq.n	8003530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6a38      	ldr	r0, [r7, #32]
 80034d8:	f004 f954 	bl	8007784 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	441a      	add	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6a1a      	ldr	r2, [r3, #32]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fa:	441a      	add	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
 8003500:	e016      	b.n	8003530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	0c5b      	lsrs	r3, r3, #17
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	2b06      	cmp	r3, #6
 800350c:	d110      	bne.n	8003530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003514:	2208      	movs	r2, #8
 8003516:	4619      	mov	r1, r3
 8003518:	6a38      	ldr	r0, [r7, #32]
 800351a:	f004 f933 	bl	8007784 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352a:	441a      	add	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0210 	orr.w	r2, r2, #16
 800353e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fab1 	bl	8007aac <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003554:	f040 80a7 	bne.w	80036a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 fab6 	bl	8007ad2 <USB_ReadDevAllOutEpInterrupt>
 8003566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003568:	e099      	b.n	800369e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 808e 	beq.w	8003692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fada 	bl	8007b3a <USB_ReadDevOutEPInterrupt>
 8003586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2301      	movs	r3, #1
 80035a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 feaa 	bl	8004300 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	461a      	mov	r2, r3
 80035c4:	2308      	movs	r3, #8
 80035c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 ff80 	bl	80044d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	461a      	mov	r2, r3
 80035e8:	2310      	movs	r3, #16
 80035ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d030      	beq.n	8003658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d109      	bne.n	8003616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	78db      	ldrb	r3, [r3, #3]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f009 f8ad 	bl	800c7a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	2302      	movs	r3, #2
 8003656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	2320      	movs	r3, #32
 8003672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	3301      	adds	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af62 	bne.w	800356a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 f9fe 	bl	8007aac <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ba:	f040 80db 	bne.w	8003874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fa1f 	bl	8007b06 <USB_ReadDevAllInEpInterrupt>
 80036c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036ce:	e0cd      	b.n	800386c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80c2 	beq.w	8003860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fa45 	bl	8007b76 <USB_ReadDevInEPInterrupt>
 80036ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d057      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	2201      	movs	r2, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003718:	4013      	ands	r3, r2
 800371a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	2301      	movs	r3, #1
 800372c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d132      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334c      	adds	r3, #76	; 0x4c
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4419      	add	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4403      	add	r3, r0
 800376a:	334c      	adds	r3, #76	; 0x4c
 800376c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3354      	adds	r3, #84	; 0x54
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003794:	461a      	mov	r2, r3
 8003796:	2101      	movs	r1, #1
 8003798:	f004 fa4c 	bl	8007c34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f008 ff81 	bl	800c6aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	461a      	mov	r2, r3
 80037c0:	2308      	movs	r3, #8
 80037c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	461a      	mov	r2, r3
 80037dc:	2310      	movs	r3, #16
 80037de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	461a      	mov	r2, r3
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003808:	6a38      	ldr	r0, [r7, #32]
 800380a:	f003 f92d 	bl	8006a68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	78db      	ldrb	r3, [r3, #3]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f008 ffc4 	bl	800c7c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	461a      	mov	r2, r3
 800384a:	2302      	movs	r3, #2
 800384c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fcc3 	bl	80041e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	3301      	adds	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af2e 	bne.w	80036d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f004 f917 	bl	8007aac <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003888:	d122      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038b0:	2100      	movs	r1, #0
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 feaa 	bl	800460c <HAL_PCDEx_LPM_Callback>
 80038b8:	e002      	b.n	80038c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f008 ff62 	bl	800c784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 f8e9 	bl	8007aac <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e4:	d112      	bne.n	800390c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f008 ff1e 	bl	800c738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800390a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 f8cb 	bl	8007aac <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	f040 80b7 	bne.w	8003a92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2110      	movs	r1, #16
 800393e:	4618      	mov	r0, r3
 8003940:	f003 f892 	bl	8006a68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	e046      	b.n	80039d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	461a      	mov	r2, r3
 8003958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800395c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800397c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	3301      	adds	r3, #1
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d3b3      	bcc.n	800394a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a24:	f043 030b 	orr.w	r3, r3, #11
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	e015      	b.n	8003a58 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f043 030b 	orr.w	r3, r3, #11
 8003a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f004 f8d9 	bl	8007c34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f808 	bl	8007aac <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d124      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 f89e 	bl	8007bee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 f853 	bl	8006b62 <USB_GetDevSpeed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681c      	ldr	r4, [r3, #0]
 8003ac8:	f001 f9d0 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8003acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f002 fd52 	bl	8006580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f008 fe0c 	bl	800c6fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 ffd8 	bl	8007aac <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f008 fde9 	bl	800c6de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 0208 	and.w	r2, r2, #8
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 ffc3 	bl	8007aac <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d122      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e014      	b.n	8003b6c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb0f 	bl	8004184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3e5      	bcc.n	8003b42 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 ff96 	bl	8007aac <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d13b      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e02b      	b.n	8003bea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3340      	adds	r3, #64	; 0x40
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d115      	bne.n	8003be4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da12      	bge.n	8003be4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fad0 	bl	8004184 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3301      	adds	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3ce      	bcc.n	8003b92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 ff4f 	bl	8007aac <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c18:	d155      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e045      	b.n	8003cac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d12e      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da2b      	bge.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d121      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	6053      	str	r3, [r2, #4]
            break;
 8003ca4:	e007      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3b4      	bcc.n	8003c20 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 feee 	bl	8007aac <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d10a      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f008 fd83 	bl	800c7e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fed8 	bl	8007aac <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d115      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f008 fd73 	bl	800c804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e000      	b.n	8003d32 <HAL_PCD_IRQHandler+0x938>
      return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3734      	adds	r7, #52	; 0x34
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_SetAddress+0x1a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e013      	b.n	8003d7a <HAL_PCD_SetAddress+0x42>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 fe36 	bl	80079dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	803b      	strh	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0f      	bge.n	8003dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
 8003dc6:	e00f      	b.n	8003de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003df4:	883a      	ldrh	r2, [r7, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	78ba      	ldrb	r2, [r7, #2]
 8003dfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_PCD_EP_Open+0xaa>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e00e      	b.n	8003e4a <HAL_PCD_EP_Open+0xc8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 feb6 	bl	8006bac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e48:	7afb      	ldrb	r3, [r7, #11]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da0f      	bge.n	8003e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3338      	adds	r3, #56	; 0x38
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	705a      	strb	r2, [r3, #1]
 8003e84:	e00f      	b.n	8003ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_EP_Close+0x6e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e00e      	b.n	8003ede <HAL_PCD_EP_Close+0x8c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 fef4 	bl	8006cbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	7afb      	ldrb	r3, [r7, #11]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	f003 f9d3 	bl	8007304 <USB_EP0StartXfer>
 8003f5e:	e008      	b.n	8003f72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6979      	ldr	r1, [r7, #20]
 8003f6e:	f002 ff81 	bl	8006e74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	7afb      	ldrb	r3, [r7, #11]
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	3338      	adds	r3, #56	; 0x38
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d102      	bne.n	8003fd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	f003 f989 	bl	8007304 <USB_EP0StartXfer>
 8003ff2:	e008      	b.n	8004006 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	6979      	ldr	r1, [r7, #20]
 8004002:	f002 ff37 	bl	8006e74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d901      	bls.n	800402e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e050      	b.n	80040d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800402e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004032:	2b00      	cmp	r3, #0
 8004034:	da0f      	bge.n	8004056 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	3338      	adds	r3, #56	; 0x38
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	705a      	strb	r2, [r3, #1]
 8004054:	e00d      	b.n	8004072 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_PCD_EP_SetStall+0x82>
 800408e:	2302      	movs	r3, #2
 8004090:	e01e      	b.n	80040d0 <HAL_PCD_EP_SetStall+0xc0>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fbc7 	bl	8007834 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	b2d9      	uxtb	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040c0:	461a      	mov	r2, r3
 80040c2:	f003 fdb7 	bl	8007c34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d901      	bls.n	80040f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e042      	b.n	800417c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da0f      	bge.n	800411e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3338      	adds	r3, #56	; 0x38
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	705a      	strb	r2, [r3, #1]
 800411c:	e00f      	b.n	800413e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_PCD_EP_ClrStall+0x86>
 800415a:	2302      	movs	r3, #2
 800415c:	e00e      	b.n	800417c <HAL_PCD_EP_ClrStall+0xa4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	f003 fbcf 	bl	8007910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	da0c      	bge.n	80041b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	3338      	adds	r3, #56	; 0x38
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e00c      	b.n	80041cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	3304      	adds	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 f9ee 	bl	80075b4 <USB_EPStopXfer>
 80041d8:	4603      	mov	r3, r0
 80041da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041dc:	7afb      	ldrb	r3, [r7, #11]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b08a      	sub	sp, #40	; 0x28
 80041ea:	af02      	add	r7, sp, #8
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3338      	adds	r3, #56	; 0x38
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1a      	ldr	r2, [r3, #32]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	429a      	cmp	r2, r3
 8004218:	d901      	bls.n	800421e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e06c      	b.n	80042f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3303      	adds	r3, #3
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004242:	e02b      	b.n	800429c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	429a      	cmp	r2, r3
 8004258:	d902      	bls.n	8004260 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3303      	adds	r3, #3
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6919      	ldr	r1, [r3, #16]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004278:	b2db      	uxtb	r3, r3
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4603      	mov	r3, r0
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f003 fa42 	bl	8007708 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d809      	bhi.n	80042c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d203      	bcs.n	80042c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1be      	bne.n	8004244 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d811      	bhi.n	80042f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2201      	movs	r2, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	6939      	ldr	r1, [r7, #16]
 80042ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f2:	4013      	ands	r3, r2
 80042f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	333c      	adds	r3, #60	; 0x3c
 8004318:	3304      	adds	r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d17b      	bne.n	800442e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	f240 80b9 	bls.w	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80b3 	beq.w	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	e0a7      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	2320      	movs	r3, #32
 8004386:	6093      	str	r3, [r2, #8]
 8004388:	e098      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8093 	bne.w	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4a4b      	ldr	r2, [pc, #300]	; (80044c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d90f      	bls.n	80043be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ba:	6093      	str	r3, [r2, #8]
 80043bc:	e07e      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	3304      	adds	r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	0159      	lsls	r1, r3, #5
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	440b      	add	r3, r1
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d114      	bne.n	8004420 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004408:	461a      	mov	r2, r3
 800440a:	2101      	movs	r1, #1
 800440c:	f003 fc12 	bl	8007c34 <USB_EP0_OutStart>
 8004410:	e006      	b.n	8004420 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f008 f924 	bl	800c674 <HAL_PCD_DataOutStageCallback>
 800442c:	e046      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d124      	bne.n	8004480 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	461a      	mov	r2, r3
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	6093      	str	r3, [r2, #8]
 8004454:	e032      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	2320      	movs	r3, #32
 8004470:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f008 f8fb 	bl	800c674 <HAL_PCD_DataOutStageCallback>
 800447e:	e01d      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d114      	bne.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d108      	bne.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044a8:	461a      	mov	r2, r3
 80044aa:	2100      	movs	r1, #0
 80044ac:	f003 fbc2 	bl	8007c34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f008 f8dc 	bl	800c674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	4f54300a 	.word	0x4f54300a
 80044cc:	4f54310a 	.word	0x4f54310a

080044d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	333c      	adds	r3, #60	; 0x3c
 80044e8:	3304      	adds	r3, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <PCD_EP_OutSetupPacket_int+0x88>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d90e      	bls.n	8004524 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f008 f893 	bl	800c650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <PCD_EP_OutSetupPacket_int+0x88>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d90c      	bls.n	800454c <PCD_EP_OutSetupPacket_int+0x7c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d108      	bne.n	800454c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004544:	461a      	mov	r2, r3
 8004546:	2101      	movs	r1, #1
 8004548:	f003 fb74 	bl	8007c34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	4f54300a 	.word	0x4f54300a

0800455c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
 8004568:	4613      	mov	r3, r2
 800456a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800457a:	883b      	ldrh	r3, [r7, #0]
 800457c:	0419      	lsls	r1, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	430a      	orrs	r2, r1
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
 8004588:	e028      	b.n	80045dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	4413      	add	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e00d      	b.n	80045ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	3340      	adds	r3, #64	; 0x40
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	3301      	adds	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	3b01      	subs	r3, #1
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d3ec      	bcc.n	800459e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045c4:	883b      	ldrh	r3, [r7, #0]
 80045c6:	0418      	lsls	r0, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4302      	orrs	r2, r0
 80045d4:	3340      	adds	r3, #64	; 0x40
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	887a      	ldrh	r2, [r7, #2]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e267      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d075      	beq.n	800472e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004642:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d00c      	beq.n	8004668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464e:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004656:	2b08      	cmp	r3, #8
 8004658:	d112      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465a:	4b82      	ldr	r3, [pc, #520]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004666:	d10b      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	4b7e      	ldr	r3, [pc, #504]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <HAL_RCC_OscConfig+0x108>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d157      	bne.n	800472c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e242      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0x74>
 800468a:	4b76      	ldr	r3, [pc, #472]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e01d      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x98>
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6f      	ldr	r2, [pc, #444]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b6d      	ldr	r3, [pc, #436]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6c      	ldr	r2, [pc, #432]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0xb0>
 80046bc:	4b69      	ldr	r3, [pc, #420]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a68      	ldr	r2, [pc, #416]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a65      	ldr	r2, [pc, #404]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd ffa4 	bl	8002628 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd ffa0 	bl	8002628 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e207      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0xc0>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd ff90 	bl	8002628 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd ff8c 	bl	8002628 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e1f3      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471e:	4b51      	ldr	r3, [pc, #324]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0xe8>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d063      	beq.n	8004802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800473a:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d11c      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b44      	ldr	r3, [pc, #272]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e1c7      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4937      	ldr	r1, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	e03a      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4b34      	ldr	r3, [pc, #208]	; (8004868 <HAL_RCC_OscConfig+0x244>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fd ff45 	bl	8002628 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fd ff41 	bl	8002628 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1a8      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4925      	ldr	r1, [pc, #148]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_OscConfig+0x244>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd ff24 	bl	8002628 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fd ff20 	bl	8002628 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e187      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_RCC_OscConfig+0x248>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd ff04 	bl	8002628 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004824:	f7fd ff00 	bl	8002628 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e167      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_OscConfig+0x240>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x200>
 8004842:	e01b      	b.n	800487c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCC_OscConfig+0x248>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fd feed 	bl	8002628 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004850:	e00e      	b.n	8004870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004852:	f7fd fee9 	bl	8002628 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d907      	bls.n	8004870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e150      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	42470000 	.word	0x42470000
 800486c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8097 	beq.w	80049b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b7d      	ldr	r3, [pc, #500]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a7c      	ldr	r2, [pc, #496]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b7a      	ldr	r3, [pc, #488]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d118      	bne.n	80048f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c6:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d2:	f7fd fea9 	bl	8002628 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048da:	f7fd fea5 	bl	8002628 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e10c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x474>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x2ea>
 8004900:	4b64      	ldr	r3, [pc, #400]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a63      	ldr	r2, [pc, #396]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	e01c      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b05      	cmp	r3, #5
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x30c>
 8004916:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a5e      	ldr	r2, [pc, #376]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a5b      	ldr	r2, [pc, #364]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x324>
 8004930:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a57      	ldr	r2, [pc, #348]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a54      	ldr	r2, [pc, #336]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd fe6a 	bl	8002628 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd fe66 	bl	8002628 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0cb      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	4b49      	ldr	r3, [pc, #292]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_RCC_OscConfig+0x334>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497c:	f7fd fe54 	bl	8002628 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fd fe50 	bl	8002628 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0b5      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499a:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a1 	beq.w	8004b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d05c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d141      	bne.n	8004a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fd fe24 	bl	8002628 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fd fe20 	bl	8002628 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e087      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	491b      	ldr	r1, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fd fdf9 	bl	8002628 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fd fdf5 	bl	8002628 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e05c      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x416>
 8004a58:	e054      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_OscConfig+0x478>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd fde2 	bl	8002628 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd fdde 	bl	8002628 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e045      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x444>
 8004a86:	e03d      	b.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e038      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d028      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d121      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11a      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d111      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0cc      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90c      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d044      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d119      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e067      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fd10 	bl	8002628 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7fd fd0c 	bl	8002628 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20c      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cac:	5ccb      	ldrb	r3, [r1, r3]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd f9d8 	bl	8002070 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08011768 	.word	0x08011768
 8004cd8:	2000003c 	.word	0x2000003c
 8004cdc:	20000040 	.word	0x20000040

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b090      	sub	sp, #64	; 0x40
 8004ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
 8004cec:	2300      	movs	r3, #0
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d00d      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x40>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	f200 80a1 	bhi.w	8004e4c <HAL_RCC_GetSysClockFreq+0x16c>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d12:	e09b      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d18:	e09b      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1a:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d1e:	e098      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d028      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	627a      	str	r2, [r7, #36]	; 0x24
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d4c:	fb03 f201 	mul.w	r2, r3, r1
 8004d50:	2300      	movs	r3, #0
 8004d52:	fb00 f303 	mul.w	r3, r0, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d5a:	fba0 1202 	umull	r1, r2, r0, r2
 8004d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d60:	460a      	mov	r2, r1
 8004d62:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d66:	4413      	add	r3, r2
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	61fa      	str	r2, [r7, #28]
 8004d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d7a:	f7fb ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	e053      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	2200      	movs	r2, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	617a      	str	r2, [r7, #20]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d9a:	f04f 0b00 	mov.w	fp, #0
 8004d9e:	4652      	mov	r2, sl
 8004da0:	465b      	mov	r3, fp
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	0159      	lsls	r1, r3, #5
 8004dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db0:	0150      	lsls	r0, r2, #5
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	ebb2 080a 	subs.w	r8, r2, sl
 8004dba:	eb63 090b 	sbc.w	r9, r3, fp
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dd2:	ebb2 0408 	subs.w	r4, r2, r8
 8004dd6:	eb63 0509 	sbc.w	r5, r3, r9
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	00eb      	lsls	r3, r5, #3
 8004de4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de8:	00e2      	lsls	r2, r4, #3
 8004dea:	4614      	mov	r4, r2
 8004dec:	461d      	mov	r5, r3
 8004dee:	eb14 030a 	adds.w	r3, r4, sl
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	eb45 030b 	adc.w	r3, r5, fp
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e06:	4629      	mov	r1, r5
 8004e08:	028b      	lsls	r3, r1, #10
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e10:	4621      	mov	r1, r4
 8004e12:	028a      	lsls	r2, r1, #10
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e24:	f7fb ff38 	bl	8000c98 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e4a:	e002      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3740      	adds	r7, #64	; 0x40
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	017d7840 	.word	0x017d7840

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000003c 	.word	0x2000003c

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e88:	f7ff fff0 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	0a9b      	lsrs	r3, r3, #10
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4903      	ldr	r1, [pc, #12]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	08011778 	.word	0x08011778

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eb0:	f7ff ffdc 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0b5b      	lsrs	r3, r3, #13
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	08011778 	.word	0x08011778

08004ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ee4:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0203 	and.w	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	08db      	lsrs	r3, r3, #3
 8004f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <HAL_RCC_GetClockConfig+0x60>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0207 	and.w	r2, r3, #7
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40023c00 	.word	0x40023c00

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07b      	b.n	8005042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc ffca 	bl	8001f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0104 	and.w	r1, r3, #4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0210 	and.w	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e041      	b.n	80050e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f839 	bl	80050e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f000 f9c9 	bl	8005420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e044      	b.n	800519e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513e:	d013      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x6c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x6c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x6c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a16      	ldr	r2, [pc, #88]	; (80051bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d111      	bne.n	800518c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b06      	cmp	r3, #6
 8005178:	d010      	beq.n	800519c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	e007      	b.n	800519c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40014000 	.word	0x40014000

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8ee 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8e0 	bl	80053d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8f1 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8c4 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8b6 	bl	80053d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8c7 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f89a 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f88c 	bl	80053d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f89d 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f870 	bl	80053e4 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f862 	bl	80053d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f873 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fa92 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8e2 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f838 	bl	800540c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0220 	mvn.w	r2, #32
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8ac 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a34      	ldr	r2, [pc, #208]	; (8005504 <TIM_Base_SetConfig+0xe4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d00b      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a31      	ldr	r2, [pc, #196]	; (8005508 <TIM_Base_SetConfig+0xe8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a30      	ldr	r2, [pc, #192]	; (800550c <TIM_Base_SetConfig+0xec>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <TIM_Base_SetConfig+0xf0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d108      	bne.n	800546a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <TIM_Base_SetConfig+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01b      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <TIM_Base_SetConfig+0xe8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a21      	ldr	r2, [pc, #132]	; (800550c <TIM_Base_SetConfig+0xec>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a20      	ldr	r2, [pc, #128]	; (8005510 <TIM_Base_SetConfig+0xf0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <TIM_Base_SetConfig+0xf4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <TIM_Base_SetConfig+0xf8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1d      	ldr	r2, [pc, #116]	; (800551c <TIM_Base_SetConfig+0xfc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <TIM_Base_SetConfig+0xe4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d103      	bne.n	80054f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	615a      	str	r2, [r3, #20]
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e03f      	b.n	80055da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc ff4c 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	; 0x24
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f929 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08a      	sub	sp, #40	; 0x28
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d17c      	bne.n	80056fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HAL_UART_Transmit+0x2c>
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e075      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit+0x3e>
 800561c:	2302      	movs	r3, #2
 800561e:	e06e      	b.n	80056fe <HAL_UART_Transmit+0x11c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005636:	f7fc fff7 	bl	8002628 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005650:	d108      	bne.n	8005664 <HAL_UART_Transmit+0x82>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e003      	b.n	800566c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005674:	e02a      	b.n	80056cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f840 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e036      	b.n	80056fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3302      	adds	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e007      	b.n	80056be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cf      	bne.n	8005676 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2140      	movs	r1, #64	; 0x40
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f810 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e006      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b090      	sub	sp, #64	; 0x40
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	e050      	b.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d04c      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0x30>
 8005726:	f7fc ff7f 	bl	8002628 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005732:	429a      	cmp	r2, r3
 8005734:	d241      	bcs.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005756:	637a      	str	r2, [r7, #52]	; 0x34
 8005758:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800575c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578a:	623a      	str	r2, [r7, #32]
 800578c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	61bb      	str	r3, [r7, #24]
   return(result);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e00f      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d09f      	beq.n	8005718 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3740      	adds	r7, #64	; 0x40
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b0c0      	sub	sp, #256	; 0x100
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	68d9      	ldr	r1, [r3, #12]
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	ea40 0301 	orr.w	r3, r0, r1
 800580c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800584a:	430b      	orrs	r3, r1
 800584c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	6999      	ldr	r1, [r3, #24]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	ea40 0301 	orr.w	r3, r0, r1
 800586a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <UART_SetConfig+0x2cc>)
 8005874:	429a      	cmp	r2, r3
 8005876:	d005      	beq.n	8005884 <UART_SetConfig+0xa0>
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b8d      	ldr	r3, [pc, #564]	; (8005ab4 <UART_SetConfig+0x2d0>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d104      	bne.n	800588e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7ff fb12 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8005888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800588c:	e003      	b.n	8005896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7ff faf9 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8005892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	f040 810c 	bne.w	8005abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	1891      	adds	r1, r2, r2
 80058bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80058be:	415b      	adcs	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058c6:	4621      	mov	r1, r4
 80058c8:	eb12 0801 	adds.w	r8, r2, r1
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb43 0901 	adc.w	r9, r3, r1
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	eb18 0303 	adds.w	r3, r8, r3
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058f4:	462b      	mov	r3, r5
 80058f6:	eb49 0303 	adc.w	r3, r9, r3
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800590a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800590e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005912:	460b      	mov	r3, r1
 8005914:	18db      	adds	r3, r3, r3
 8005916:	653b      	str	r3, [r7, #80]	; 0x50
 8005918:	4613      	mov	r3, r2
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	657b      	str	r3, [r7, #84]	; 0x54
 8005920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005928:	f7fb f9b6 	bl	8000c98 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4b61      	ldr	r3, [pc, #388]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005932:	fba3 2302 	umull	r2, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	011c      	lsls	r4, r3, #4
 800593a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593e:	2200      	movs	r2, #0
 8005940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	64b9      	str	r1, [r7, #72]	; 0x48
 8005954:	415b      	adcs	r3, r3
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800595c:	4641      	mov	r1, r8
 800595e:	eb12 0a01 	adds.w	sl, r2, r1
 8005962:	4649      	mov	r1, r9
 8005964:	eb43 0b01 	adc.w	fp, r3, r1
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597c:	4692      	mov	sl, r2
 800597e:	469b      	mov	fp, r3
 8005980:	4643      	mov	r3, r8
 8005982:	eb1a 0303 	adds.w	r3, sl, r3
 8005986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800598a:	464b      	mov	r3, r9
 800598c:	eb4b 0303 	adc.w	r3, fp, r3
 8005990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	643b      	str	r3, [r7, #64]	; 0x40
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	647b      	str	r3, [r7, #68]	; 0x44
 80059b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059be:	f7fb f96b 	bl	8000c98 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <UART_SetConfig+0x2d4>)
 80059ca:	fba3 2301 	umull	r2, r3, r3, r1
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	2264      	movs	r2, #100	; 0x64
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	1acb      	subs	r3, r1, r3
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059de:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <UART_SetConfig+0x2d4>)
 80059e0:	fba3 2302 	umull	r2, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059ec:	441c      	add	r4, r3
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6339      	str	r1, [r7, #48]	; 0x30
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a7a:	f7fb f90d 	bl	8000c98 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	; 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3332      	adds	r3, #50	; 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 0207 	and.w	r2, r3, #7
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aac:	e105      	b.n	8005cba <UART_SetConfig+0x4d6>
 8005aae:	bf00      	nop
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40011400 	.word	0x40011400
 8005ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ace:	4642      	mov	r2, r8
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	6239      	str	r1, [r7, #32]
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ade:	4641      	mov	r1, r8
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	eb43 0501 	adc.w	r5, r3, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b04:	464b      	mov	r3, r9
 8005b06:	eb45 0303 	adc.w	r3, r5, r3
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	008b      	lsls	r3, r1, #2
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b34:	4621      	mov	r1, r4
 8005b36:	008a      	lsls	r2, r1, #2
 8005b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b3c:	f7fb f8ac 	bl	8000c98 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	011c      	lsls	r4, r3, #4
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	61b9      	str	r1, [r7, #24]
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6139      	str	r1, [r7, #16]
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bc8:	4649      	mov	r1, r9
 8005bca:	008b      	lsls	r3, r1, #2
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	008a      	lsls	r2, r1, #2
 8005bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bda:	f7fb f85d 	bl	8000c98 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c02:	441c      	add	r4, r3
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c08:	2200      	movs	r2, #0
 8005c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c0c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c12:	4642      	mov	r2, r8
 8005c14:	464b      	mov	r3, r9
 8005c16:	1891      	adds	r1, r2, r2
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	415b      	adcs	r3, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c22:	4641      	mov	r1, r8
 8005c24:	1851      	adds	r1, r2, r1
 8005c26:	6039      	str	r1, [r7, #0]
 8005c28:	4649      	mov	r1, r9
 8005c2a:	414b      	adcs	r3, r1
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	00cb      	lsls	r3, r1, #3
 8005c3e:	4651      	mov	r1, sl
 8005c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c44:	4651      	mov	r1, sl
 8005c46:	00ca      	lsls	r2, r1, #3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4642      	mov	r2, r8
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c54:	464b      	mov	r3, r9
 8005c56:	460a      	mov	r2, r1
 8005c58:	eb42 0303 	adc.w	r3, r2, r3
 8005c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	663b      	str	r3, [r7, #96]	; 0x60
 8005c68:	667a      	str	r2, [r7, #100]	; 0x64
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c76:	4649      	mov	r1, r9
 8005c78:	008b      	lsls	r3, r1, #2
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c80:	4641      	mov	r1, r8
 8005c82:	008a      	lsls	r2, r1, #2
 8005c84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c88:	f7fb f806 	bl	8000c98 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005c92:	fba3 1302 	umull	r1, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2164      	movs	r1, #100	; 0x64
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	3332      	adds	r3, #50	; 0x32
 8005ca4:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4422      	add	r2, r4
 8005cb8:	609a      	str	r2, [r3, #8]
}
 8005cba:	bf00      	nop
 8005cbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	fa93 f3a3 	rbit	r3, r3
 8005ce6:	613b      	str	r3, [r7, #16]
  return result;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	fab3 f383 	clz	r3, r3
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	2103      	movs	r1, #3
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	fa93 f3a3 	rbit	r3, r3
 8005d06:	61bb      	str	r3, [r7, #24]
  return result;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3724      	adds	r7, #36	; 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	401a      	ands	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b089      	sub	sp, #36	; 0x24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	613b      	str	r3, [r7, #16]
  return result;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	fab3 f383 	clz	r3, r3
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2103      	movs	r1, #3
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	401a      	ands	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	fa93 f3a3 	rbit	r3, r3
 8005d94:	61bb      	str	r3, [r7, #24]
  return result;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	431a      	orrs	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005dac:	bf00      	nop
 8005dae:	3724      	adds	r7, #36	; 0x24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	fa93 f3a3 	rbit	r3, r3
 8005dd2:	613b      	str	r3, [r7, #16]
  return result;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	fab3 f383 	clz	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2103      	movs	r1, #3
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	61bb      	str	r3, [r7, #24]
  return result;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	60da      	str	r2, [r3, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	3724      	adds	r7, #36	; 0x24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b089      	sub	sp, #36	; 0x24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	fa93 f3a3 	rbit	r3, r3
 8005e30:	613b      	str	r3, [r7, #16]
  return result;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	401a      	ands	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	61bb      	str	r3, [r7, #24]
  return result;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	431a      	orrs	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005e68:	bf00      	nop
 8005e6a:	3724      	adds	r7, #36	; 0x24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	613b      	str	r3, [r7, #16]
  return result;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	210f      	movs	r1, #15
 8005e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	401a      	ands	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	61bb      	str	r3, [r7, #24]
  return result;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	; 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b088      	sub	sp, #32
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	fa93 f3a3 	rbit	r3, r3
 8005ef4:	613b      	str	r3, [r7, #16]
  return result;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	fab3 f383 	clz	r3, r3
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005f00:	e050      	b.n	8005fa4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2101      	movs	r1, #1
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d042      	beq.n	8005f9e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d003      	beq.n	8005f28 <LL_GPIO_Init+0x52>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d10d      	bne.n	8005f44 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff12 	bl	8005d5a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fef3 	bl	8005d2a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff33 	bl	8005db8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d11a      	bne.n	8005f90 <LL_GPIO_Init+0xba>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	60bb      	str	r3, [r7, #8]
  return result;
 8005f66:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d807      	bhi.n	8005f82 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	461a      	mov	r2, r3
 8005f78:	69b9      	ldr	r1, [r7, #24]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff ff4b 	bl	8005e16 <LL_GPIO_SetAFPin_0_7>
 8005f80:	e006      	b.n	8005f90 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	461a      	mov	r2, r3
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff72 	bl	8005e74 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	461a      	mov	r2, r3
 8005f96:	69b9      	ldr	r1, [r7, #24]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fe97 	bl	8005ccc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1a7      	bne.n	8005f02 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <LL_I2C_Enable>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <LL_I2C_Disable>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f023 0201 	bic.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_I2C_ConfigFilters>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	f023 021f 	bic.w	r2, r3, #31
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	430b      	orrs	r3, r1
 8006016:	431a      	orrs	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_I2C_SetOwnAddress1>:
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800603c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	430a      	orrs	r2, r1
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_I2C_ConfigSpeed>:
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <LL_I2C_ConfigSpeed+0x124>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0c9b      	lsrs	r3, r3, #18
 8006078:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	431a      	orrs	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	493a      	ldr	r1, [pc, #232]	; (8006180 <LL_I2C_ConfigSpeed+0x128>)
 8006096:	428b      	cmp	r3, r1
 8006098:	d802      	bhi.n	80060a0 <LL_I2C_ConfigSpeed+0x48>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3301      	adds	r3, #1
 800609e:	e009      	b.n	80060b4 <LL_I2C_ConfigSpeed+0x5c>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4936      	ldr	r1, [pc, #216]	; (8006184 <LL_I2C_ConfigSpeed+0x12c>)
 80060ac:	fba1 1303 	umull	r1, r3, r1, r3
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	3301      	adds	r3, #1
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a30      	ldr	r2, [pc, #192]	; (8006180 <LL_I2C_ConfigSpeed+0x128>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d939      	bls.n	8006136 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d117      	bne.n	80060f8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	4413      	add	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	e01d      	b.n	800612e <LL_I2C_ConfigSpeed+0xd6>
 80060f2:	f248 0301 	movw	r3, #32769	; 0x8001
 80060f6:	e01a      	b.n	800612e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009a      	lsls	r2, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009a      	lsls	r2, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	e001      	b.n	800612e <LL_I2C_ConfigSpeed+0xd6>
 800612a:	f248 0301 	movw	r3, #32769	; 0x8001
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e011      	b.n	800615a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006144:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	e000      	b.n	8006158 <LL_I2C_ConfigSpeed+0x100>
 8006156:	2304      	movs	r3, #4
 8006158:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8006162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	61da      	str	r2, [r3, #28]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	431bde83 	.word	0x431bde83
 8006180:	000186a0 	.word	0x000186a0
 8006184:	10624dd3 	.word	0x10624dd3

08006188 <LL_I2C_SetMode>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 021a 	bic.w	r2, r3, #26
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <LL_I2C_AcknowledgeNextData>:
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fefc 	bl	8005fdc <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f89d 	bl	8006328 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff feff 	bl	8005ffc <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff25 	bl	8006058 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6959      	ldr	r1, [r3, #20]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	461a      	mov	r2, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff05 	bl	8006028 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ffaf 	bl	8006188 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fec6 	bl	8005fbc <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff ffb9 	bl	80061ae <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <LL_RCC_GetSysClkSource+0x18>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800

08006264 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <LL_RCC_GetAHBPrescaler+0x18>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800

08006280 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800628c:	4618      	mov	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800

0800629c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062a0:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40023800 	.word	0x40023800

080062b8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800

080062d4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <LL_RCC_PLL_GetN+0x18>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40023800 	.word	0x40023800

080062f0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <LL_RCC_PLL_GetP+0x18>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800

0800630c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <LL_RCC_PLL_GetDivider+0x18>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40023800 	.word	0x40023800

08006328 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006330:	f000 f820 	bl	8006374 <RCC_GetSystemClockFreq>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f840 	bl	80063c4 <RCC_GetHCLKClockFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f84e 	bl	80063f0 <RCC_GetPCLK1ClockFreq>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f85a 	bl	8006418 <RCC_GetPCLK2ClockFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60da      	str	r2, [r3, #12]
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800637e:	f7ff ff63 	bl	8006248 <LL_RCC_GetSysClkSource>
 8006382:	4603      	mov	r3, r0
 8006384:	2b08      	cmp	r3, #8
 8006386:	d00c      	beq.n	80063a2 <RCC_GetSystemClockFreq+0x2e>
 8006388:	2b08      	cmp	r3, #8
 800638a:	d80f      	bhi.n	80063ac <RCC_GetSystemClockFreq+0x38>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <RCC_GetSystemClockFreq+0x22>
 8006390:	2b04      	cmp	r3, #4
 8006392:	d003      	beq.n	800639c <RCC_GetSystemClockFreq+0x28>
 8006394:	e00a      	b.n	80063ac <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <RCC_GetSystemClockFreq+0x48>)
 8006398:	607b      	str	r3, [r7, #4]
      break;
 800639a:	e00a      	b.n	80063b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <RCC_GetSystemClockFreq+0x4c>)
 800639e:	607b      	str	r3, [r7, #4]
      break;
 80063a0:	e007      	b.n	80063b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80063a2:	2008      	movs	r0, #8
 80063a4:	f000 f84c 	bl	8006440 <RCC_PLL_GetFreqDomain_SYS>
 80063a8:	6078      	str	r0, [r7, #4]
      break;
 80063aa:	e002      	b.n	80063b2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <RCC_GetSystemClockFreq+0x48>)
 80063ae:	607b      	str	r3, [r7, #4]
      break;
 80063b0:	bf00      	nop
  }

  return frequency;
 80063b2:	687b      	ldr	r3, [r7, #4]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	00f42400 	.word	0x00f42400
 80063c0:	017d7840 	.word	0x017d7840

080063c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80063cc:	f7ff ff4a 	bl	8006264 <LL_RCC_GetAHBPrescaler>
 80063d0:	4603      	mov	r3, r0
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	4a04      	ldr	r2, [pc, #16]	; (80063ec <RCC_GetHCLKClockFreq+0x28>)
 80063da:	5cd3      	ldrb	r3, [r2, r3]
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	40d3      	lsrs	r3, r2
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	08011768 	.word	0x08011768

080063f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80063f8:	f7ff ff42 	bl	8006280 <LL_RCC_GetAPB1Prescaler>
 80063fc:	4603      	mov	r3, r0
 80063fe:	0a9b      	lsrs	r3, r3, #10
 8006400:	4a04      	ldr	r2, [pc, #16]	; (8006414 <RCC_GetPCLK1ClockFreq+0x24>)
 8006402:	5cd3      	ldrb	r3, [r2, r3]
 8006404:	461a      	mov	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	40d3      	lsrs	r3, r2
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	08011778 	.word	0x08011778

08006418 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006420:	f7ff ff3c 	bl	800629c <LL_RCC_GetAPB2Prescaler>
 8006424:	4603      	mov	r3, r0
 8006426:	0b5b      	lsrs	r3, r3, #13
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <RCC_GetPCLK2ClockFreq+0x24>)
 800642a:	5cd3      	ldrb	r3, [r2, r3]
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	40d3      	lsrs	r3, r2
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	08011778 	.word	0x08011778

08006440 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006454:	f7ff ff30 	bl	80062b8 <LL_RCC_PLL_GetMainSource>
 8006458:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006466:	d003      	beq.n	8006470 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006468:	e005      	b.n	8006476 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800646c:	617b      	str	r3, [r7, #20]
      break;
 800646e:	e005      	b.n	800647c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006472:	617b      	str	r3, [r7, #20]
      break;
 8006474:	e002      	b.n	800647c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006478:	617b      	str	r3, [r7, #20]
      break;
 800647a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b08      	cmp	r3, #8
 8006480:	d113      	bne.n	80064aa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006482:	f7ff ff43 	bl	800630c <LL_RCC_PLL_GetDivider>
 8006486:	4602      	mov	r2, r0
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	fbb3 f4f2 	udiv	r4, r3, r2
 800648e:	f7ff ff21 	bl	80062d4 <LL_RCC_PLL_GetN>
 8006492:	4603      	mov	r3, r0
 8006494:	fb03 f404 	mul.w	r4, r3, r4
 8006498:	f7ff ff2a 	bl	80062f0 <LL_RCC_PLL_GetP>
 800649c:	4603      	mov	r3, r0
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	3301      	adds	r3, #1
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80064a8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80064aa:	693b      	ldr	r3, [r7, #16]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd90      	pop	{r4, r7, pc}
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	017d7840 	.word	0x017d7840

080064bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064bc:	b084      	sub	sp, #16
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	f107 001c 	add.w	r0, r7, #28
 80064ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d122      	bne.n	800651a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d105      	bne.n	800650e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fbee 	bl	8007cf0 <USB_CoreReset>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	e01a      	b.n	8006550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fbe2 	bl	8007cf0 <USB_CoreReset>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	639a      	str	r2, [r3, #56]	; 0x38
 8006542:	e005      	b.n	8006550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	2b01      	cmp	r3, #1
 8006554:	d10b      	bne.n	800656e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f043 0206 	orr.w	r2, r3, #6
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800657a:	b004      	add	sp, #16
 800657c:	4770      	bx	lr
	...

08006580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d165      	bne.n	8006660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4a41      	ldr	r2, [pc, #260]	; (800669c <USB_SetTurnaroundTime+0x11c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d906      	bls.n	80065aa <USB_SetTurnaroundTime+0x2a>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4a40      	ldr	r2, [pc, #256]	; (80066a0 <USB_SetTurnaroundTime+0x120>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d202      	bcs.n	80065aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065a4:	230f      	movs	r3, #15
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e062      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4a3c      	ldr	r2, [pc, #240]	; (80066a0 <USB_SetTurnaroundTime+0x120>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d306      	bcc.n	80065c0 <USB_SetTurnaroundTime+0x40>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <USB_SetTurnaroundTime+0x124>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d202      	bcs.n	80065c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065ba:	230e      	movs	r3, #14
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e057      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a38      	ldr	r2, [pc, #224]	; (80066a4 <USB_SetTurnaroundTime+0x124>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d306      	bcc.n	80065d6 <USB_SetTurnaroundTime+0x56>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <USB_SetTurnaroundTime+0x128>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d202      	bcs.n	80065d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065d0:	230d      	movs	r3, #13
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e04c      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4a33      	ldr	r2, [pc, #204]	; (80066a8 <USB_SetTurnaroundTime+0x128>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d306      	bcc.n	80065ec <USB_SetTurnaroundTime+0x6c>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4a32      	ldr	r2, [pc, #200]	; (80066ac <USB_SetTurnaroundTime+0x12c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d802      	bhi.n	80065ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065e6:	230c      	movs	r3, #12
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e041      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <USB_SetTurnaroundTime+0x12c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d906      	bls.n	8006602 <USB_SetTurnaroundTime+0x82>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4a2e      	ldr	r2, [pc, #184]	; (80066b0 <USB_SetTurnaroundTime+0x130>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d802      	bhi.n	8006602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065fc:	230b      	movs	r3, #11
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e036      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a2a      	ldr	r2, [pc, #168]	; (80066b0 <USB_SetTurnaroundTime+0x130>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d906      	bls.n	8006618 <USB_SetTurnaroundTime+0x98>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4a29      	ldr	r2, [pc, #164]	; (80066b4 <USB_SetTurnaroundTime+0x134>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d802      	bhi.n	8006618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006612:	230a      	movs	r3, #10
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e02b      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <USB_SetTurnaroundTime+0x134>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d906      	bls.n	800662e <USB_SetTurnaroundTime+0xae>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <USB_SetTurnaroundTime+0x138>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d202      	bcs.n	800662e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006628:	2309      	movs	r3, #9
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e020      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <USB_SetTurnaroundTime+0x138>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d306      	bcc.n	8006644 <USB_SetTurnaroundTime+0xc4>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a20      	ldr	r2, [pc, #128]	; (80066bc <USB_SetTurnaroundTime+0x13c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d802      	bhi.n	8006644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800663e:	2308      	movs	r3, #8
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e015      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <USB_SetTurnaroundTime+0x13c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d906      	bls.n	800665a <USB_SetTurnaroundTime+0xda>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <USB_SetTurnaroundTime+0x140>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d202      	bcs.n	800665a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006654:	2307      	movs	r3, #7
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e00a      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800665a:	2306      	movs	r3, #6
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e007      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006666:	2309      	movs	r3, #9
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e001      	b.n	8006670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800666c:	2309      	movs	r3, #9
 800666e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006688:	431a      	orrs	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	00d8acbf 	.word	0x00d8acbf
 80066a0:	00e4e1c0 	.word	0x00e4e1c0
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	01067380 	.word	0x01067380
 80066ac:	011a499f 	.word	0x011a499f
 80066b0:	01312cff 	.word	0x01312cff
 80066b4:	014ca43f 	.word	0x014ca43f
 80066b8:	016e3600 	.word	0x016e3600
 80066bc:	01a6ab1f 	.word	0x01a6ab1f
 80066c0:	01e84800 	.word	0x01e84800

080066c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f043 0201 	orr.w	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 0201 	bic.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d115      	bne.n	8006756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006736:	2001      	movs	r0, #1
 8006738:	f7fb ff82 	bl	8002640 <HAL_Delay>
      ms++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fa45 	bl	8007bd2 <USB_GetMode>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d01e      	beq.n	800678c <USB_SetCurrentMode+0x84>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b31      	cmp	r3, #49	; 0x31
 8006752:	d9f0      	bls.n	8006736 <USB_SetCurrentMode+0x2e>
 8006754:	e01a      	b.n	800678c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d115      	bne.n	8006788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006768:	2001      	movs	r0, #1
 800676a:	f7fb ff69 	bl	8002640 <HAL_Delay>
      ms++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3301      	adds	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fa2c 	bl	8007bd2 <USB_GetMode>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <USB_SetCurrentMode+0x84>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b31      	cmp	r3, #49	; 0x31
 8006784:	d9f0      	bls.n	8006768 <USB_SetCurrentMode+0x60>
 8006786:	e001      	b.n	800678c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e005      	b.n	8006798 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b32      	cmp	r3, #50	; 0x32
 8006790:	d101      	bne.n	8006796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a0:	b084      	sub	sp, #16
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	e009      	b.n	80067d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3340      	adds	r3, #64	; 0x40
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3301      	adds	r3, #1
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b0e      	cmp	r3, #14
 80067d8:	d9f2      	bls.n	80067c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11c      	bne.n	800681a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ee:	f043 0302 	orr.w	r3, r3, #2
 80067f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	; 0x38
 8006818:	e00b      	b.n	8006832 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006838:	461a      	mov	r2, r3
 800683a:	2300      	movs	r3, #0
 800683c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	4619      	mov	r1, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684c:	461a      	mov	r2, r3
 800684e:	680b      	ldr	r3, [r1, #0]
 8006850:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10c      	bne.n	8006872 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800685e:	2100      	movs	r1, #0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f965 	bl	8006b30 <USB_SetDevSpeed>
 8006866:	e008      	b.n	800687a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006868:	2101      	movs	r1, #1
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f960 	bl	8006b30 <USB_SetDevSpeed>
 8006870:	e003      	b.n	800687a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006872:	2103      	movs	r1, #3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f95b 	bl	8006b30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800687a:	2110      	movs	r1, #16
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8f3 	bl	8006a68 <USB_FlushTxFifo>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f91f 	bl	8006ad0 <USB_FlushRxFifo>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	461a      	mov	r2, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	461a      	mov	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	461a      	mov	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	e043      	b.n	800694e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068dc:	d118      	bne.n	8006910 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	461a      	mov	r2, r3
 80068f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e013      	b.n	8006922 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	461a      	mov	r2, r3
 8006908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e008      	b.n	8006922 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	461a      	mov	r2, r3
 800691e:	2300      	movs	r3, #0
 8006920:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	461a      	mov	r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	461a      	mov	r2, r3
 8006942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3301      	adds	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	429a      	cmp	r2, r3
 8006954:	d3b7      	bcc.n	80068c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	e043      	b.n	80069e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006972:	d118      	bne.n	80069a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e013      	b.n	80069b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	461a      	mov	r2, r3
 800699e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	e008      	b.n	80069b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	461a      	mov	r2, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	461a      	mov	r2, r3
 80069d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3301      	adds	r3, #1
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d3b7      	bcc.n	800695c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f043 0210 	orr.w	r2, r3, #16
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699a      	ldr	r2, [r3, #24]
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <USB_DevInit+0x2c4>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f043 0208 	orr.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a4c:	f043 0304 	orr.w	r3, r3, #4
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a60:	b004      	add	sp, #16
 8006a62:	4770      	bx	lr
 8006a64:	803c3800 	.word	0x803c3800

08006a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a13      	ldr	r2, [pc, #76]	; (8006acc <USB_FlushTxFifo+0x64>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d901      	bls.n	8006a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e01b      	b.n	8006ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	daf2      	bge.n	8006a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	019b      	lsls	r3, r3, #6
 8006a98:	f043 0220 	orr.w	r2, r3, #32
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <USB_FlushTxFifo+0x64>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e006      	b.n	8006ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d0f0      	beq.n	8006aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	00030d40 	.word	0x00030d40

08006ad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <USB_FlushRxFifo+0x5c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e018      	b.n	8006b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	daf2      	bge.n	8006adc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2210      	movs	r2, #16
 8006afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <USB_FlushRxFifo+0x5c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e006      	b.n	8006b20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d0f0      	beq.n	8006b00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	00030d40 	.word	0x00030d40

08006b30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 0306 	and.w	r3, r3, #6
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b82:	2300      	movs	r3, #0
 8006b84:	75fb      	strb	r3, [r7, #23]
 8006b86:	e00a      	b.n	8006b9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d002      	beq.n	8006b94 <USB_GetDevSpeed+0x32>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d102      	bne.n	8006b9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b94:	2302      	movs	r3, #2
 8006b96:	75fb      	strb	r3, [r7, #23]
 8006b98:	e001      	b.n	8006b9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b9a:	230f      	movs	r3, #15
 8006b9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	785b      	ldrb	r3, [r3, #1]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d13a      	bne.n	8006c3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be6:	4313      	orrs	r3, r2
 8006be8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d155      	bne.n	8006cac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c24:	4313      	orrs	r3, r2
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	e036      	b.n	8006cac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	2101      	movs	r1, #1
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	041b      	lsls	r3, r3, #16
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11a      	bne.n	8006cac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	791b      	ldrb	r3, [r3, #4]
 8006c90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c92:	430b      	orrs	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006caa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d161      	bne.n	8006d9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cee:	d11f      	bne.n	8006d30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	2101      	movs	r1, #1
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d50:	4013      	ands	r3, r2
 8006d52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	0159      	lsls	r1, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	4619      	mov	r1, r3
 8006d94:	4b35      	ldr	r3, [pc, #212]	; (8006e6c <USB_DeactivateEndpoint+0x1b0>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]
 8006d9a:	e060      	b.n	8006e5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db2:	d11f      	bne.n	8006df4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006df2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	2101      	movs	r1, #1
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	041b      	lsls	r3, r3, #16
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e14:	4013      	ands	r3, r2
 8006e16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	43db      	mvns	r3, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e38:	4013      	ands	r3, r2
 8006e3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	0159      	lsls	r1, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	4619      	mov	r1, r3
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <USB_DeactivateEndpoint+0x1b4>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	ec337800 	.word	0xec337800
 8006e70:	eff37800 	.word	0xeff37800

08006e74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 815c 	bne.w	800714e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d132      	bne.n	8006f04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	0cdb      	lsrs	r3, r3, #19
 8006efe:	04db      	lsls	r3, r3, #19
 8006f00:	6113      	str	r3, [r2, #16]
 8006f02:	e074      	b.n	8006fee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	0cdb      	lsrs	r3, r3, #19
 8006f20:	04db      	lsls	r3, r3, #19
 8006f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6999      	ldr	r1, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	440b      	add	r3, r1
 8006f60:	1e59      	subs	r1, r3, #1
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f6c:	4b9d      	ldr	r3, [pc, #628]	; (80071e4 <USB_EPStartXfer+0x370>)
 8006f6e:	400b      	ands	r3, r1
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	0148      	lsls	r0, r1, #5
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	4401      	add	r1, r0
 8006f78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f96:	69b9      	ldr	r1, [r7, #24]
 8006f98:	0148      	lsls	r0, r1, #5
 8006f9a:	69f9      	ldr	r1, [r7, #28]
 8006f9c:	4401      	add	r1, r0
 8006f9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	791b      	ldrb	r3, [r3, #4]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d11f      	bne.n	8006fee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006fcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d14b      	bne.n	800708c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	461a      	mov	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d128      	bne.n	800706a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d110      	bne.n	800704a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	e00f      	b.n	800706a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007068:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e133      	b.n	80072f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d015      	beq.n	80070e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 811b 	beq.w	80072f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	2101      	movs	r1, #1
 80070d0:	fa01 f303 	lsl.w	r3, r1, r3
 80070d4:	69f9      	ldr	r1, [r7, #28]
 80070d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070da:	4313      	orrs	r3, r2
 80070dc:	634b      	str	r3, [r1, #52]	; 0x34
 80070de:	e109      	b.n	80072f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d110      	bne.n	8007112 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e00f      	b.n	8007132 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	440a      	add	r2, r1
 8007128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007130:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6919      	ldr	r1, [r3, #16]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	b298      	uxth	r0, r3
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fade 	bl	8007708 <USB_WritePacket>
 800714c:	e0d2      	b.n	80072f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007168:	0cdb      	lsrs	r3, r3, #19
 800716a:	04db      	lsls	r3, r3, #19
 800716c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	440a      	add	r2, r1
 8007184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800718c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007190:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d126      	bne.n	80071e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b0:	69b9      	ldr	r1, [r7, #24]
 80071b2:	0148      	lsls	r0, r1, #5
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	4401      	add	r1, r0
 80071b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071bc:	4313      	orrs	r3, r2
 80071be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071de:	6113      	str	r3, [r2, #16]
 80071e0:	e03a      	b.n	8007258 <USB_EPStartXfer+0x3e4>
 80071e2:	bf00      	nop
 80071e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	1e5a      	subs	r2, r3, #1
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	8afa      	ldrh	r2, [r7, #22]
 8007204:	fb03 f202 	mul.w	r2, r3, r2
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	8afb      	ldrh	r3, [r7, #22]
 800721c:	04d9      	lsls	r1, r3, #19
 800721e:	4b38      	ldr	r3, [pc, #224]	; (8007300 <USB_EPStartXfer+0x48c>)
 8007220:	400b      	ands	r3, r1
 8007222:	69b9      	ldr	r1, [r7, #24]
 8007224:	0148      	lsls	r0, r1, #5
 8007226:	69f9      	ldr	r1, [r7, #28]
 8007228:	4401      	add	r1, r0
 800722a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800722e:	4313      	orrs	r3, r2
 8007230:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007248:	69b9      	ldr	r1, [r7, #24]
 800724a:	0148      	lsls	r0, r1, #5
 800724c:	69f9      	ldr	r1, [r7, #28]
 800724e:	4401      	add	r1, r0
 8007250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007254:	4313      	orrs	r3, r2
 8007256:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10d      	bne.n	800727a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6919      	ldr	r1, [r3, #16]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	460a      	mov	r2, r1
 8007278:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d128      	bne.n	80072d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d110      	bne.n	80072b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e00f      	b.n	80072d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	1ff80000 	.word	0x1ff80000

08007304 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	f040 80ce 	bne.w	80074c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d132      	bne.n	8007394 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800734c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738c:	0cdb      	lsrs	r3, r3, #19
 800738e:	04db      	lsls	r3, r3, #19
 8007390:	6113      	str	r3, [r2, #16]
 8007392:	e04e      	b.n	8007432 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	0cdb      	lsrs	r3, r3, #19
 80073b0:	04db      	lsls	r3, r3, #19
 80073b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800740a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007422:	6939      	ldr	r1, [r7, #16]
 8007424:	0148      	lsls	r0, r1, #5
 8007426:	6979      	ldr	r1, [r7, #20]
 8007428:	4401      	add	r1, r0
 800742a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800742e:	4313      	orrs	r3, r2
 8007430:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d11e      	bne.n	8007476 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e097      	b.n	80075a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007494:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8083 	beq.w	80075a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	2101      	movs	r1, #1
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	6979      	ldr	r1, [r7, #20]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4313      	orrs	r3, r2
 80074be:	634b      	str	r3, [r1, #52]	; 0x34
 80074c0:	e071      	b.n	80075a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	0cdb      	lsrs	r3, r3, #19
 80074de:	04db      	lsls	r3, r3, #19
 80074e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007500:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007504:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800753c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007554:	6939      	ldr	r1, [r7, #16]
 8007556:	0148      	lsls	r0, r1, #5
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	4401      	add	r1, r0
 800755c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007560:	4313      	orrs	r3, r2
 8007562:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10d      	bne.n	8007586 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	6919      	ldr	r1, [r3, #16]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	460a      	mov	r2, r1
 8007584:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d14a      	bne.n	8007668 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ea:	f040 8086 	bne.w	80076fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007610:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007634:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007642:	4293      	cmp	r3, r2
 8007644:	d902      	bls.n	800764c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
          break;
 800764a:	e056      	b.n	80076fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007664:	d0e7      	beq.n	8007636 <USB_EPStopXfer+0x82>
 8007666:	e048      	b.n	80076fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800767c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007680:	d13b      	bne.n	80076fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d902      	bls.n	80076e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
          break;
 80076de:	e00c      	b.n	80076fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f8:	d0e7      	beq.n	80076ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4611      	mov	r1, r2
 8007714:	461a      	mov	r2, r3
 8007716:	460b      	mov	r3, r1
 8007718:	71fb      	strb	r3, [r7, #7]
 800771a:	4613      	mov	r3, r2
 800771c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	d123      	bne.n	8007776 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800772e:	88bb      	ldrh	r3, [r7, #4]
 8007730:	3303      	adds	r3, #3
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e018      	b.n	800776e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	031a      	lsls	r2, r3, #12
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007748:	461a      	mov	r2, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3301      	adds	r3, #1
 800775a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	3301      	adds	r3, #1
 8007760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	3301      	adds	r3, #1
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	429a      	cmp	r2, r3
 8007774:	d3e2      	bcc.n	800773c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3724      	adds	r7, #36	; 0x24
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007784:	b480      	push	{r7}
 8007786:	b08b      	sub	sp, #44	; 0x2c
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	089b      	lsrs	r3, r3, #2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	623b      	str	r3, [r7, #32]
 80077ae:	e014      	b.n	80077da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	3301      	adds	r3, #1
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	3301      	adds	r3, #1
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	3301      	adds	r3, #1
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	3301      	adds	r3, #1
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	3301      	adds	r3, #1
 80077d8:	623b      	str	r3, [r7, #32]
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d3e6      	bcc.n	80077b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077e2:	8bfb      	ldrh	r3, [r7, #30]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01e      	beq.n	8007826 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	461a      	mov	r2, r3
 80077f4:	f107 0310 	add.w	r3, r7, #16
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	b2da      	uxtb	r2, r3
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	701a      	strb	r2, [r3, #0]
      i++;
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	3301      	adds	r3, #1
 8007812:	623b      	str	r3, [r7, #32]
      pDest++;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	3301      	adds	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800781a:	8bfb      	ldrh	r3, [r7, #30]
 800781c:	3b01      	subs	r3, #1
 800781e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007820:	8bfb      	ldrh	r3, [r7, #30]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1ea      	bne.n	80077fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007828:	4618      	mov	r0, r3
 800782a:	372c      	adds	r7, #44	; 0x2c
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d12c      	bne.n	80078aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	db12      	blt.n	8007888 <USB_EPSetStall+0x54>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00f      	beq.n	8007888 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007886:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	e02b      	b.n	8007902 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db12      	blt.n	80078e2 <USB_EPSetStall+0xae>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00f      	beq.n	80078e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007900:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d128      	bne.n	800797e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007946:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800794a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	791b      	ldrb	r3, [r3, #4]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d003      	beq.n	800795c <USB_EPClearStall+0x4c>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	791b      	ldrb	r3, [r3, #4]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d138      	bne.n	80079ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	e027      	b.n	80079ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007998:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800799c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d003      	beq.n	80079ae <USB_EPClearStall+0x9e>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	791b      	ldrb	r3, [r3, #4]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d10f      	bne.n	80079ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a10:	68f9      	ldr	r1, [r7, #12]
 8007a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a16:	4313      	orrs	r3, r2
 8007a18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a42:	f023 0303 	bic.w	r3, r3, #3
 8007a46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a56:	f023 0302 	bic.w	r3, r3, #2
 8007a5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a84:	f023 0303 	bic.w	r3, r3, #3
 8007a88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4013      	ands	r3, r2
 8007af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	0c1b      	lsrs	r3, r3, #16
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b085      	sub	sp, #20
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	b29b      	uxth	r3, r3
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4013      	ands	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b68:	68bb      	ldr	r3, [r7, #8]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0301 	and.w	r3, r3, #1
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	333c      	adds	r3, #60	; 0x3c
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4a26      	ldr	r2, [pc, #152]	; (8007cec <USB_EP0_OutStart+0xb8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d90a      	bls.n	8007c6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c68:	d101      	bne.n	8007c6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e037      	b.n	8007cde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	461a      	mov	r2, r3
 8007c76:	2300      	movs	r3, #0
 8007c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9c:	f043 0318 	orr.w	r3, r3, #24
 8007ca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10f      	bne.n	8007cdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	4f54300a 	.word	0x4f54300a

08007cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <USB_CoreReset+0x64>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e01b      	b.n	8007d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	daf2      	bge.n	8007cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <USB_CoreReset+0x64>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e006      	b.n	8007d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d0f0      	beq.n	8007d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	00030d40 	.word	0x00030d40

08007d58 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007d64:	2010      	movs	r0, #16
 8007d66:	f004 fed3 	bl	800cb10 <USBD_static_malloc>
 8007d6a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	32b0      	adds	r2, #176	; 0xb0
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d82:	2302      	movs	r3, #2
 8007d84:	e048      	b.n	8007e18 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	32b0      	adds	r2, #176	; 0xb0
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	32b0      	adds	r2, #176	; 0xb0
 8007da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7c1b      	ldrb	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <USBD_HID_Init+0xc8>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3326      	adds	r3, #38	; 0x26
 8007dc8:	2207      	movs	r2, #7
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e00c      	b.n	8007de8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <USBD_HID_Init+0xc8>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 020f 	and.w	r2, r3, #15
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	3326      	adds	r3, #38	; 0x26
 8007de4:	220a      	movs	r2, #10
 8007de6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007de8:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <USBD_HID_Init+0xc8>)
 8007dea:	7819      	ldrb	r1, [r3, #0]
 8007dec:	232a      	movs	r3, #42	; 0x2a
 8007dee:	2203      	movs	r2, #3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f004 fd7c 	bl	800c8ee <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <USBD_HID_Init+0xc8>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 020f 	and.w	r2, r3, #15
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200000fb 	.word	0x200000fb

08007e24 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007e30:	4b1f      	ldr	r3, [pc, #124]	; (8007eb0 <USBD_HID_DeInit+0x8c>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f004 fd7f 	bl	800c93a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <USBD_HID_DeInit+0x8c>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	3324      	adds	r3, #36	; 0x24
 8007e52:	2200      	movs	r2, #0
 8007e54:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007e56:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <USBD_HID_DeInit+0x8c>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 020f 	and.w	r2, r3, #15
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	3326      	adds	r3, #38	; 0x26
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32b0      	adds	r2, #176	; 0xb0
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d011      	beq.n	8007ea6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	32b0      	adds	r2, #176	; 0xb0
 8007e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f004 fe4b 	bl	800cb2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	32b0      	adds	r2, #176	; 0xb0
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	200000fb 	.word	0x200000fb

08007eb4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	32b0      	adds	r2, #176	; 0xb0
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e0e8      	b.n	80080b2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d046      	beq.n	8007f7a <USBD_HID_Setup+0xc6>
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	f040 80d8 	bne.w	80080a2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	3b02      	subs	r3, #2
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	d836      	bhi.n	8007f6a <USBD_HID_Setup+0xb6>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <USBD_HID_Setup+0x50>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f5b 	.word	0x08007f5b
 8007f08:	08007f3b 	.word	0x08007f3b
 8007f0c:	08007f6b 	.word	0x08007f6b
 8007f10:	08007f6b 	.word	0x08007f6b
 8007f14:	08007f6b 	.word	0x08007f6b
 8007f18:	08007f6b 	.word	0x08007f6b
 8007f1c:	08007f6b 	.word	0x08007f6b
 8007f20:	08007f6b 	.word	0x08007f6b
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f2d 	.word	0x08007f2d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	601a      	str	r2, [r3, #0]
          break;
 8007f38:	e01e      	b.n	8007f78 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 fbd5 	bl	80096f0 <USBD_CtlSendData>
          break;
 8007f46:	e017      	b.n	8007f78 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	885b      	ldrh	r3, [r3, #2]
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]
          break;
 8007f58:	e00e      	b.n	8007f78 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2201      	movs	r2, #1
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fbc4 	bl	80096f0 <USBD_CtlSendData>
          break;
 8007f68:	e006      	b.n	8007f78 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fb4e 	bl	800960e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f72:	2303      	movs	r3, #3
 8007f74:	75fb      	strb	r3, [r7, #23]
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e09a      	b.n	80080b0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b0b      	cmp	r3, #11
 8007f80:	f200 8086 	bhi.w	8008090 <USBD_HID_Setup+0x1dc>
 8007f84:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <USBD_HID_Setup+0xd8>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	0800809f 	.word	0x0800809f
 8007f94:	08008091 	.word	0x08008091
 8007f98:	08008091 	.word	0x08008091
 8007f9c:	08008091 	.word	0x08008091
 8007fa0:	08008091 	.word	0x08008091
 8007fa4:	08007fe7 	.word	0x08007fe7
 8007fa8:	08008091 	.word	0x08008091
 8007fac:	08008091 	.word	0x08008091
 8007fb0:	08008091 	.word	0x08008091
 8007fb4:	0800803f 	.word	0x0800803f
 8007fb8:	08008069 	.word	0x08008069
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d107      	bne.n	8007fd8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fc8:	f107 030a 	add.w	r3, r7, #10
 8007fcc:	2202      	movs	r2, #2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fb8d 	bl	80096f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fd6:	e063      	b.n	80080a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 fb17 	bl	800960e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fe4:	e05c      	b.n	80080a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b22      	cmp	r3, #34	; 0x22
 8007ff0:	d108      	bne.n	8008004 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b3f      	cmp	r3, #63	; 0x3f
 8007ff8:	bf28      	it	cs
 8007ffa:	233f      	movcs	r3, #63	; 0x3f
 8007ffc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <USBD_HID_Setup+0x208>)
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	e015      	b.n	8008030 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	885b      	ldrh	r3, [r3, #2]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b21      	cmp	r3, #33	; 0x21
 800800e:	d108      	bne.n	8008022 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008010:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <USBD_HID_Setup+0x20c>)
 8008012:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b09      	cmp	r3, #9
 800801a:	bf28      	it	cs
 800801c:	2309      	movcs	r3, #9
 800801e:	82bb      	strh	r3, [r7, #20]
 8008020:	e006      	b.n	8008030 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 faf2 	bl	800960e <USBD_CtlError>
            ret = USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	75fb      	strb	r3, [r7, #23]
            break;
 800802e:	e037      	b.n	80080a0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008030:	8abb      	ldrh	r3, [r7, #20]
 8008032:	461a      	mov	r2, r3
 8008034:	6939      	ldr	r1, [r7, #16]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb5a 	bl	80096f0 <USBD_CtlSendData>
          break;
 800803c:	e030      	b.n	80080a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d107      	bne.n	800805a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3308      	adds	r3, #8
 800804e:	2201      	movs	r2, #1
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fb4c 	bl	80096f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008058:	e022      	b.n	80080a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 fad6 	bl	800960e <USBD_CtlError>
            ret = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	75fb      	strb	r3, [r7, #23]
          break;
 8008066:	e01b      	b.n	80080a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b03      	cmp	r3, #3
 8008072:	d106      	bne.n	8008082 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008080:	e00e      	b.n	80080a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fac2 	bl	800960e <USBD_CtlError>
            ret = USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	75fb      	strb	r3, [r7, #23]
          break;
 800808e:	e007      	b.n	80080a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fabb 	bl	800960e <USBD_CtlError>
          ret = USBD_FAIL;
 8008098:	2303      	movs	r3, #3
 800809a:	75fb      	strb	r3, [r7, #23]
          break;
 800809c:	e000      	b.n	80080a0 <USBD_HID_Setup+0x1ec>
          break;
 800809e:	bf00      	nop
      }
      break;
 80080a0:	e006      	b.n	80080b0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fab2 	bl	800960e <USBD_CtlError>
      ret = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200000bc 	.word	0x200000bc
 80080c0:	200000a4 	.word	0x200000a4

080080c4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	32b0      	adds	r2, #176	; 0xb0
 80080dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e014      	b.n	8008116 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d10d      	bne.n	8008114 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	7b1b      	ldrb	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2201      	movs	r2, #1
 8008104:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <USBD_HID_SendReport+0x5c>)
 8008108:	7819      	ldrb	r1, [r3, #0]
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f004 fcbb 	bl	800ca8a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200000fb 	.word	0x200000fb

08008124 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800812c:	2181      	movs	r1, #129	; 0x81
 800812e:	4809      	ldr	r0, [pc, #36]	; (8008154 <USBD_HID_GetFSCfgDesc+0x30>)
 8008130:	f000 fc35 	bl	800899e <USBD_GetEpDesc>
 8008134:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	220a      	movs	r2, #10
 8008140:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2222      	movs	r2, #34	; 0x22
 8008146:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000080 	.word	0x20000080

08008158 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008160:	2181      	movs	r1, #129	; 0x81
 8008162:	4809      	ldr	r0, [pc, #36]	; (8008188 <USBD_HID_GetHSCfgDesc+0x30>)
 8008164:	f000 fc1b 	bl	800899e <USBD_GetEpDesc>
 8008168:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2207      	movs	r2, #7
 8008174:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2222      	movs	r2, #34	; 0x22
 800817a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000080 	.word	0x20000080

0800818c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008194:	2181      	movs	r1, #129	; 0x81
 8008196:	4809      	ldr	r0, [pc, #36]	; (80081bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008198:	f000 fc01 	bl	800899e <USBD_GetEpDesc>
 800819c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	220a      	movs	r2, #10
 80081a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2222      	movs	r2, #34	; 0x22
 80081ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80081b0:	4b02      	ldr	r3, [pc, #8]	; (80081bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000080 	.word	0x20000080

080081c0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32b0      	adds	r2, #176	; 0xb0
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	2200      	movs	r2, #0
 80081dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	220a      	movs	r2, #10
 80081f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	; (8008208 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	200000b0 	.word	0x200000b0

0800820c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e01f      	b.n	8008264 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	79fa      	ldrb	r2, [r7, #7]
 8008256:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f004 fae1 	bl	800c820 <USBD_LL_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	e025      	b.n	80082d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	32ae      	adds	r2, #174	; 0xae
 8008296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	32ae      	adds	r2, #174	; 0xae
 80082aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	f107 020e 	add.w	r2, r7, #14
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	4602      	mov	r2, r0
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f004 fae9 	bl	800c8b8 <USBD_LL_Start>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	4611      	mov	r1, r2
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f001 f908 	bl	800959a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d01a      	beq.n	80083e4 <USBD_LL_SetupStage+0x72>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d822      	bhi.n	80083f8 <USBD_LL_SetupStage+0x86>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <USBD_LL_SetupStage+0x4a>
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d00a      	beq.n	80083d0 <USBD_LL_SetupStage+0x5e>
 80083ba:	e01d      	b.n	80083f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fb5f 	bl	8008a88 <USBD_StdDevReq>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]
      break;
 80083ce:	e020      	b.n	8008412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fbc7 	bl	8008b6c <USBD_StdItfReq>
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	e016      	b.n	8008412 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc29 	bl	8008c44 <USBD_StdEPReq>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
      break;
 80083f6:	e00c      	b.n	8008412 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008402:	b2db      	uxtb	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f004 fab6 	bl	800c978 <USBD_LL_StallEP>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
      break;
 8008410:	bf00      	nop
  }

  return ret;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	460b      	mov	r3, r1
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d16e      	bne.n	8008512 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800843a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008442:	2b03      	cmp	r3, #3
 8008444:	f040 8098 	bne.w	8008578 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d913      	bls.n	800847c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	4293      	cmp	r3, r2
 800846c:	bf28      	it	cs
 800846e:	4613      	movcs	r3, r2
 8008470:	461a      	mov	r2, r3
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f001 f967 	bl	8009748 <USBD_CtlContinueRx>
 800847a:	e07d      	b.n	8008578 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2b02      	cmp	r3, #2
 8008488:	d014      	beq.n	80084b4 <USBD_LL_DataOutStage+0x98>
 800848a:	2b02      	cmp	r3, #2
 800848c:	d81d      	bhi.n	80084ca <USBD_LL_DataOutStage+0xae>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <USBD_LL_DataOutStage+0x7c>
 8008492:	2b01      	cmp	r3, #1
 8008494:	d003      	beq.n	800849e <USBD_LL_DataOutStage+0x82>
 8008496:	e018      	b.n	80084ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	75bb      	strb	r3, [r7, #22]
            break;
 800849c:	e018      	b.n	80084d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fa5e 	bl	800896a <USBD_CoreFindIF>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75bb      	strb	r3, [r7, #22]
            break;
 80084b2:	e00d      	b.n	80084d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	4619      	mov	r1, r3
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fa60 	bl	8008984 <USBD_CoreFindEP>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75bb      	strb	r3, [r7, #22]
            break;
 80084c8:	e002      	b.n	80084d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	75bb      	strb	r3, [r7, #22]
            break;
 80084ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084d0:	7dbb      	ldrb	r3, [r7, #22]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d119      	bne.n	800850a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d113      	bne.n	800850a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084e2:	7dba      	ldrb	r2, [r7, #22]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	32ae      	adds	r2, #174	; 0xae
 80084e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80084f2:	7dba      	ldrb	r2, [r7, #22]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084fa:	7dba      	ldrb	r2, [r7, #22]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	32ae      	adds	r2, #174	; 0xae
 8008500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f001 f92d 	bl	800976a <USBD_CtlSendStatus>
 8008510:	e032      	b.n	8008578 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fa31 	bl	8008984 <USBD_CoreFindEP>
 8008522:	4603      	mov	r3, r0
 8008524:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008526:	7dbb      	ldrb	r3, [r7, #22]
 8008528:	2bff      	cmp	r3, #255	; 0xff
 800852a:	d025      	beq.n	8008578 <USBD_LL_DataOutStage+0x15c>
 800852c:	7dbb      	ldrb	r3, [r7, #22]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d122      	bne.n	8008578 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d117      	bne.n	800856e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800853e:	7dba      	ldrb	r2, [r7, #22]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	32ae      	adds	r2, #174	; 0xae
 8008544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00f      	beq.n	800856e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800854e:	7dba      	ldrb	r2, [r7, #22]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008556:	7dba      	ldrb	r2, [r7, #22]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	32ae      	adds	r2, #174	; 0xae
 800855c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	7afa      	ldrb	r2, [r7, #11]
 8008564:	4611      	mov	r1, r2
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	4798      	blx	r3
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	e000      	b.n	800857a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b086      	sub	sp, #24
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	460b      	mov	r3, r1
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d16f      	bne.n	8008676 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3314      	adds	r3, #20
 800859a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d15a      	bne.n	800865c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d914      	bls.n	80085dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f001 f8ac 	bl	8009726 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085ce:	2300      	movs	r3, #0
 80085d0:	2200      	movs	r2, #0
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f004 fa79 	bl	800cacc <USBD_LL_PrepareReceive>
 80085da:	e03f      	b.n	800865c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d11c      	bne.n	8008622 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d316      	bcc.n	8008622 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085fe:	429a      	cmp	r2, r3
 8008600:	d20f      	bcs.n	8008622 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f001 f88d 	bl	8009726 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f004 fa56 	bl	800cacc <USBD_LL_PrepareReceive>
 8008620:	e01c      	b.n	800865c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b03      	cmp	r3, #3
 800862c:	d10f      	bne.n	800864e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800864e:	2180      	movs	r1, #128	; 0x80
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f004 f991 	bl	800c978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f001 f89a 	bl	8009790 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d03a      	beq.n	80086dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff fe42 	bl	80082f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008674:	e032      	b.n	80086dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800867c:	b2db      	uxtb	r3, r3
 800867e:	4619      	mov	r1, r3
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f97f 	bl	8008984 <USBD_CoreFindEP>
 8008686:	4603      	mov	r3, r0
 8008688:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	2bff      	cmp	r3, #255	; 0xff
 800868e:	d025      	beq.n	80086dc <USBD_LL_DataInStage+0x15a>
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d122      	bne.n	80086dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d11c      	bne.n	80086dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086a2:	7dfa      	ldrb	r2, [r7, #23]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	32ae      	adds	r2, #174	; 0xae
 80086a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d014      	beq.n	80086dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80086b2:	7dfa      	ldrb	r2, [r7, #23]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80086ba:	7dfa      	ldrb	r2, [r7, #23]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	32ae      	adds	r2, #174	; 0xae
 80086c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	7afa      	ldrb	r2, [r7, #11]
 80086c8:	4611      	mov	r1, r2
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086d2:	7dbb      	ldrb	r3, [r7, #22]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086d8:	7dbb      	ldrb	r3, [r7, #22]
 80086da:	e000      	b.n	80086de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d014      	beq.n	800874c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6852      	ldr	r2, [r2, #4]
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	4611      	mov	r1, r2
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4798      	blx	r3
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008748:	2303      	movs	r3, #3
 800874a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	2200      	movs	r2, #0
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f004 f8cb 	bl	800c8ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2240      	movs	r2, #64	; 0x40
 8008764:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	2200      	movs	r2, #0
 800876c:	2180      	movs	r1, #128	; 0x80
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f004 f8bd 	bl	800c8ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2240      	movs	r2, #64	; 0x40
 800877e:	621a      	str	r2, [r3, #32]

  return ret;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2204      	movs	r2, #4
 80087c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d106      	bne.n	80087f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b03      	cmp	r3, #3
 8008818:	d110      	bne.n	800883c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d005      	beq.n	800883c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	32ae      	adds	r2, #174	; 0xae
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008864:	2303      	movs	r3, #3
 8008866:	e01c      	b.n	80088a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b03      	cmp	r3, #3
 8008872:	d115      	bne.n	80088a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32ae      	adds	r2, #174	; 0xae
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32ae      	adds	r2, #174	; 0xae
 8008892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	78fa      	ldrb	r2, [r7, #3]
 800889a:	4611      	mov	r1, r2
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	32ae      	adds	r2, #174	; 0xae
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e01c      	b.n	8008906 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d115      	bne.n	8008904 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	32ae      	adds	r2, #174	; 0xae
 80088e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	32ae      	adds	r2, #174	; 0xae
 80088f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00e      	beq.n	8008960 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6852      	ldr	r2, [r2, #4]
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	4611      	mov	r1, r2
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008976:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008990:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	460b      	mov	r3, r1
 80089a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d920      	bls.n	8008a08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089ce:	e013      	b.n	80089f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089d0:	f107 030a 	add.w	r3, r7, #10
 80089d4:	4619      	mov	r1, r3
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f000 f81b 	bl	8008a12 <USBD_GetNextDesc>
 80089dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d108      	bne.n	80089f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	789b      	ldrb	r3, [r3, #2]
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d008      	beq.n	8008a06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	885b      	ldrh	r3, [r3, #2]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	897b      	ldrh	r3, [r7, #10]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d8e5      	bhi.n	80089d0 <USBD_GetEpDesc+0x32>
 8008a04:	e000      	b.n	8008a08 <USBD_GetEpDesc+0x6a>
          break;
 8008a06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a08:	693b      	ldr	r3, [r7, #16]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	881a      	ldrh	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	3301      	adds	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a6a:	8a3b      	ldrh	r3, [r7, #16]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	b21a      	sxth	r2, r3
 8008a70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	b21b      	sxth	r3, r3
 8008a78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a7a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d005      	beq.n	8008aae <USBD_StdDevReq+0x26>
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d857      	bhi.n	8008b56 <USBD_StdDevReq+0xce>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00f      	beq.n	8008aca <USBD_StdDevReq+0x42>
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d153      	bne.n	8008b56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	32ae      	adds	r2, #174	; 0xae
 8008ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	4798      	blx	r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac8:	e04a      	b.n	8008b60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d83b      	bhi.n	8008b4a <USBD_StdDevReq+0xc2>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USBD_StdDevReq+0x50>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b4b 	.word	0x08008b4b
 8008ae4:	08008b37 	.word	0x08008b37
 8008ae8:	08008b4b 	.word	0x08008b4b
 8008aec:	08008b0b 	.word	0x08008b0b
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b4b 	.word	0x08008b4b
 8008af8:	08008b23 	.word	0x08008b23
 8008afc:	08008b15 	.word	0x08008b15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa3c 	bl	8008f80 <USBD_GetDescriptor>
          break;
 8008b08:	e024      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fba1 	bl	8009254 <USBD_SetAddress>
          break;
 8008b12:	e01f      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fbe0 	bl	80092dc <USBD_SetConfig>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b20:	e018      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fc83 	bl	8009430 <USBD_GetConfig>
          break;
 8008b2a:	e013      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fcb4 	bl	800949c <USBD_GetStatus>
          break;
 8008b34:	e00e      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fce3 	bl	8009504 <USBD_SetFeature>
          break;
 8008b3e:	e009      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fd07 	bl	8009556 <USBD_ClrFeature>
          break;
 8008b48:	e004      	b.n	8008b54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd5e 	bl	800960e <USBD_CtlError>
          break;
 8008b52:	bf00      	nop
      }
      break;
 8008b54:	e004      	b.n	8008b60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fd58 	bl	800960e <USBD_CtlError>
      break;
 8008b5e:	bf00      	nop
  }

  return ret;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop

08008b6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b82:	2b40      	cmp	r3, #64	; 0x40
 8008b84:	d005      	beq.n	8008b92 <USBD_StdItfReq+0x26>
 8008b86:	2b40      	cmp	r3, #64	; 0x40
 8008b88:	d852      	bhi.n	8008c30 <USBD_StdItfReq+0xc4>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <USBD_StdItfReq+0x26>
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d14e      	bne.n	8008c30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d840      	bhi.n	8008c22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	889b      	ldrh	r3, [r3, #4]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d836      	bhi.n	8008c18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	889b      	ldrh	r3, [r3, #4]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fed9 	bl	800896a <USBD_CoreFindIF>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2bff      	cmp	r3, #255	; 0xff
 8008bc0:	d01d      	beq.n	8008bfe <USBD_StdItfReq+0x92>
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11a      	bne.n	8008bfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008bc8:	7bba      	ldrb	r2, [r7, #14]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32ae      	adds	r2, #174	; 0xae
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bd8:	7bba      	ldrb	r2, [r7, #14]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008be0:	7bba      	ldrb	r2, [r7, #14]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	32ae      	adds	r2, #174	; 0xae
 8008be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bf6:	e004      	b.n	8008c02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bfc:	e001      	b.n	8008c02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	88db      	ldrh	r3, [r3, #6]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d110      	bne.n	8008c2c <USBD_StdItfReq+0xc0>
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10d      	bne.n	8008c2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fdaa 	bl	800976a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c16:	e009      	b.n	8008c2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fcf7 	bl	800960e <USBD_CtlError>
          break;
 8008c20:	e004      	b.n	8008c2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fcf2 	bl	800960e <USBD_CtlError>
          break;
 8008c2a:	e000      	b.n	8008c2e <USBD_StdItfReq+0xc2>
          break;
 8008c2c:	bf00      	nop
      }
      break;
 8008c2e:	e004      	b.n	8008c3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fceb 	bl	800960e <USBD_CtlError>
      break;
 8008c38:	bf00      	nop
  }

  return ret;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	889b      	ldrh	r3, [r3, #4]
 8008c56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c60:	2b40      	cmp	r3, #64	; 0x40
 8008c62:	d007      	beq.n	8008c74 <USBD_StdEPReq+0x30>
 8008c64:	2b40      	cmp	r3, #64	; 0x40
 8008c66:	f200 817f 	bhi.w	8008f68 <USBD_StdEPReq+0x324>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d02a      	beq.n	8008cc4 <USBD_StdEPReq+0x80>
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	f040 817a 	bne.w	8008f68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fe83 	bl	8008984 <USBD_CoreFindEP>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c82:	7b7b      	ldrb	r3, [r7, #13]
 8008c84:	2bff      	cmp	r3, #255	; 0xff
 8008c86:	f000 8174 	beq.w	8008f72 <USBD_StdEPReq+0x32e>
 8008c8a:	7b7b      	ldrb	r3, [r7, #13]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8170 	bne.w	8008f72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c92:	7b7a      	ldrb	r2, [r7, #13]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c9a:	7b7a      	ldrb	r2, [r7, #13]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	32ae      	adds	r2, #174	; 0xae
 8008ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8163 	beq.w	8008f72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cac:	7b7a      	ldrb	r2, [r7, #13]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	32ae      	adds	r2, #174	; 0xae
 8008cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	4798      	blx	r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cc2:	e156      	b.n	8008f72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d008      	beq.n	8008cde <USBD_StdEPReq+0x9a>
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	f300 8145 	bgt.w	8008f5c <USBD_StdEPReq+0x318>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 809b 	beq.w	8008e0e <USBD_StdEPReq+0x1ca>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d03c      	beq.n	8008d56 <USBD_StdEPReq+0x112>
 8008cdc:	e13e      	b.n	8008f5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d002      	beq.n	8008cf0 <USBD_StdEPReq+0xac>
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d016      	beq.n	8008d1c <USBD_StdEPReq+0xd8>
 8008cee:	e02c      	b.n	8008d4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00d      	beq.n	8008d12 <USBD_StdEPReq+0xce>
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b80      	cmp	r3, #128	; 0x80
 8008cfa:	d00a      	beq.n	8008d12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f003 fe39 	bl	800c978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d06:	2180      	movs	r1, #128	; 0x80
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f003 fe35 	bl	800c978 <USBD_LL_StallEP>
 8008d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d10:	e020      	b.n	8008d54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc7a 	bl	800960e <USBD_CtlError>
              break;
 8008d1a:	e01b      	b.n	8008d54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	885b      	ldrh	r3, [r3, #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10e      	bne.n	8008d42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <USBD_StdEPReq+0xfe>
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b80      	cmp	r3, #128	; 0x80
 8008d2e:	d008      	beq.n	8008d42 <USBD_StdEPReq+0xfe>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	88db      	ldrh	r3, [r3, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d104      	bne.n	8008d42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f003 fe1b 	bl	800c978 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fd11 	bl	800976a <USBD_CtlSendStatus>

              break;
 8008d48:	e004      	b.n	8008d54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fc5e 	bl	800960e <USBD_CtlError>
              break;
 8008d52:	bf00      	nop
          }
          break;
 8008d54:	e107      	b.n	8008f66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d002      	beq.n	8008d68 <USBD_StdEPReq+0x124>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d016      	beq.n	8008d94 <USBD_StdEPReq+0x150>
 8008d66:	e04b      	b.n	8008e00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <USBD_StdEPReq+0x146>
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b80      	cmp	r3, #128	; 0x80
 8008d72:	d00a      	beq.n	8008d8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f003 fdfd 	bl	800c978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d7e:	2180      	movs	r1, #128	; 0x80
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f003 fdf9 	bl	800c978 <USBD_LL_StallEP>
 8008d86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d88:	e040      	b.n	8008e0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc3e 	bl	800960e <USBD_CtlError>
              break;
 8008d92:	e03b      	b.n	8008e0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	885b      	ldrh	r3, [r3, #2]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d136      	bne.n	8008e0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f003 fe03 	bl	800c9b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fcda 	bl	800976a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fde2 	bl	8008984 <USBD_CoreFindEP>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dc4:	7b7b      	ldrb	r3, [r7, #13]
 8008dc6:	2bff      	cmp	r3, #255	; 0xff
 8008dc8:	d01f      	beq.n	8008e0a <USBD_StdEPReq+0x1c6>
 8008dca:	7b7b      	ldrb	r3, [r7, #13]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d11c      	bne.n	8008e0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008dd0:	7b7a      	ldrb	r2, [r7, #13]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008dd8:	7b7a      	ldrb	r2, [r7, #13]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	32ae      	adds	r2, #174	; 0xae
 8008dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008de8:	7b7a      	ldrb	r2, [r7, #13]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	32ae      	adds	r2, #174	; 0xae
 8008dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dfe:	e004      	b.n	8008e0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc03 	bl	800960e <USBD_CtlError>
              break;
 8008e08:	e000      	b.n	8008e0c <USBD_StdEPReq+0x1c8>
              break;
 8008e0a:	bf00      	nop
          }
          break;
 8008e0c:	e0ab      	b.n	8008f66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d002      	beq.n	8008e20 <USBD_StdEPReq+0x1dc>
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d032      	beq.n	8008e84 <USBD_StdEPReq+0x240>
 8008e1e:	e097      	b.n	8008f50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d007      	beq.n	8008e36 <USBD_StdEPReq+0x1f2>
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b80      	cmp	r3, #128	; 0x80
 8008e2a:	d004      	beq.n	8008e36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fbed 	bl	800960e <USBD_CtlError>
                break;
 8008e34:	e091      	b.n	8008f5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da0b      	bge.n	8008e56 <USBD_StdEPReq+0x212>
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	3310      	adds	r3, #16
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	3304      	adds	r3, #4
 8008e54:	e00b      	b.n	8008e6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fc37 	bl	80096f0 <USBD_CtlSendData>
              break;
 8008e82:	e06a      	b.n	8008f5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da11      	bge.n	8008eb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	f003 020f 	and.w	r2, r3, #15
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d117      	bne.n	8008ed6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fbb0 	bl	800960e <USBD_CtlError>
                  break;
 8008eae:	e054      	b.n	8008f5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	f003 020f 	and.w	r2, r3, #15
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fb9d 	bl	800960e <USBD_CtlError>
                  break;
 8008ed4:	e041      	b.n	8008f5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da0b      	bge.n	8008ef6 <USBD_StdEPReq+0x2b2>
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	3310      	adds	r3, #16
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	e00b      	b.n	8008f0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <USBD_StdEPReq+0x2d8>
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b80      	cmp	r3, #128	; 0x80
 8008f1a:	d103      	bne.n	8008f24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e00e      	b.n	8008f42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f003 fd63 	bl	800c9f4 <USBD_LL_IsStallEP>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e002      	b.n	8008f42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2202      	movs	r2, #2
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fbd1 	bl	80096f0 <USBD_CtlSendData>
              break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fb5b 	bl	800960e <USBD_CtlError>
              break;
 8008f58:	bf00      	nop
          }
          break;
 8008f5a:	e004      	b.n	8008f66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fb55 	bl	800960e <USBD_CtlError>
          break;
 8008f64:	bf00      	nop
      }
      break;
 8008f66:	e005      	b.n	8008f74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fb4f 	bl	800960e <USBD_CtlError>
      break;
 8008f70:	e000      	b.n	8008f74 <USBD_StdEPReq+0x330>
      break;
 8008f72:	bf00      	nop
  }

  return ret;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	f200 8128 	bhi.w	80091f6 <USBD_GetDescriptor+0x276>
 8008fa6:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <USBD_GetDescriptor+0x2c>)
 8008fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fac:	08008fc9 	.word	0x08008fc9
 8008fb0:	08008fe1 	.word	0x08008fe1
 8008fb4:	08009021 	.word	0x08009021
 8008fb8:	080091f7 	.word	0x080091f7
 8008fbc:	080091f7 	.word	0x080091f7
 8008fc0:	08009197 	.word	0x08009197
 8008fc4:	080091c3 	.word	0x080091c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
      break;
 8008fde:	e112      	b.n	8009206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7c1b      	ldrb	r3, [r3, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10d      	bne.n	8009004 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	f107 0208 	add.w	r2, r7, #8
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	2202      	movs	r2, #2
 8009000:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009002:	e100      	b.n	8009206 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	f107 0208 	add.w	r2, r7, #8
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	3301      	adds	r3, #1
 800901a:	2202      	movs	r2, #2
 800901c:	701a      	strb	r2, [r3, #0]
      break;
 800901e:	e0f2      	b.n	8009206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b05      	cmp	r3, #5
 8009028:	f200 80ac 	bhi.w	8009184 <USBD_GetDescriptor+0x204>
 800902c:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <USBD_GetDescriptor+0xb4>)
 800902e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009032:	bf00      	nop
 8009034:	0800904d 	.word	0x0800904d
 8009038:	08009081 	.word	0x08009081
 800903c:	080090b5 	.word	0x080090b5
 8009040:	080090e9 	.word	0x080090e9
 8009044:	0800911d 	.word	0x0800911d
 8009048:	08009151 	.word	0x08009151
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	7c12      	ldrb	r2, [r2, #16]
 8009064:	f107 0108 	add.w	r1, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906e:	e091      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 facb 	bl	800960e <USBD_CtlError>
            err++;
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	3301      	adds	r3, #1
 800907c:	72fb      	strb	r3, [r7, #11]
          break;
 800907e:	e089      	b.n	8009194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	7c12      	ldrb	r2, [r2, #16]
 8009098:	f107 0108 	add.w	r1, r7, #8
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a2:	e077      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fab1 	bl	800960e <USBD_CtlError>
            err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
          break;
 80090b2:	e06f      	b.n	8009194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f107 0108 	add.w	r1, r7, #8
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d6:	e05d      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa97 	bl	800960e <USBD_CtlError>
            err++;
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	3301      	adds	r3, #1
 80090e4:	72fb      	strb	r3, [r7, #11]
          break;
 80090e6:	e055      	b.n	8009194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	7c12      	ldrb	r2, [r2, #16]
 8009100:	f107 0108 	add.w	r1, r7, #8
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
 8009108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910a:	e043      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa7d 	bl	800960e <USBD_CtlError>
            err++;
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	3301      	adds	r3, #1
 8009118:	72fb      	strb	r3, [r7, #11]
          break;
 800911a:	e03b      	b.n	8009194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	7c12      	ldrb	r2, [r2, #16]
 8009134:	f107 0108 	add.w	r1, r7, #8
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
 800913c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913e:	e029      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa63 	bl	800960e <USBD_CtlError>
            err++;
 8009148:	7afb      	ldrb	r3, [r7, #11]
 800914a:	3301      	adds	r3, #1
 800914c:	72fb      	strb	r3, [r7, #11]
          break;
 800914e:	e021      	b.n	8009194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	7c12      	ldrb	r2, [r2, #16]
 8009168:	f107 0108 	add.w	r1, r7, #8
 800916c:	4610      	mov	r0, r2
 800916e:	4798      	blx	r3
 8009170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009172:	e00f      	b.n	8009194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa49 	bl	800960e <USBD_CtlError>
            err++;
 800917c:	7afb      	ldrb	r3, [r7, #11]
 800917e:	3301      	adds	r3, #1
 8009180:	72fb      	strb	r3, [r7, #11]
          break;
 8009182:	e007      	b.n	8009194 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa41 	bl	800960e <USBD_CtlError>
          err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009192:	bf00      	nop
      }
      break;
 8009194:	e037      	b.n	8009206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7c1b      	ldrb	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	f107 0208 	add.w	r2, r7, #8
 80091aa:	4610      	mov	r0, r2
 80091ac:	4798      	blx	r3
 80091ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b0:	e029      	b.n	8009206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa2a 	bl	800960e <USBD_CtlError>
        err++;
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	3301      	adds	r3, #1
 80091be:	72fb      	strb	r3, [r7, #11]
      break;
 80091c0:	e021      	b.n	8009206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7c1b      	ldrb	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10d      	bne.n	80091e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	f107 0208 	add.w	r2, r7, #8
 80091d6:	4610      	mov	r0, r2
 80091d8:	4798      	blx	r3
 80091da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	2207      	movs	r2, #7
 80091e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e4:	e00f      	b.n	8009206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fa10 	bl	800960e <USBD_CtlError>
        err++;
 80091ee:	7afb      	ldrb	r3, [r7, #11]
 80091f0:	3301      	adds	r3, #1
 80091f2:	72fb      	strb	r3, [r7, #11]
      break;
 80091f4:	e007      	b.n	8009206 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa08 	bl	800960e <USBD_CtlError>
      err++;
 80091fe:	7afb      	ldrb	r3, [r7, #11]
 8009200:	3301      	adds	r3, #1
 8009202:	72fb      	strb	r3, [r7, #11]
      break;
 8009204:	bf00      	nop
  }

  if (err != 0U)
 8009206:	7afb      	ldrb	r3, [r7, #11]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d11e      	bne.n	800924a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	88db      	ldrh	r3, [r3, #6]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d016      	beq.n	8009242 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009214:	893b      	ldrh	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00e      	beq.n	8009238 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	88da      	ldrh	r2, [r3, #6]
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	4293      	cmp	r3, r2
 8009222:	bf28      	it	cs
 8009224:	4613      	movcs	r3, r2
 8009226:	b29b      	uxth	r3, r3
 8009228:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800922a:	893b      	ldrh	r3, [r7, #8]
 800922c:	461a      	mov	r2, r3
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa5d 	bl	80096f0 <USBD_CtlSendData>
 8009236:	e009      	b.n	800924c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9e7 	bl	800960e <USBD_CtlError>
 8009240:	e004      	b.n	800924c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fa91 	bl	800976a <USBD_CtlSendStatus>
 8009248:	e000      	b.n	800924c <USBD_GetDescriptor+0x2cc>
    return;
 800924a:	bf00      	nop
  }
}
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	889b      	ldrh	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d131      	bne.n	80092ca <USBD_SetAddress+0x76>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d12d      	bne.n	80092ca <USBD_SetAddress+0x76>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	2b7f      	cmp	r3, #127	; 0x7f
 8009274:	d829      	bhi.n	80092ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	885b      	ldrh	r3, [r3, #2]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009280:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b03      	cmp	r3, #3
 800928c:	d104      	bne.n	8009298 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9bc 	bl	800960e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009296:	e01d      	b.n	80092d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7bfa      	ldrb	r2, [r7, #15]
 800929c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f003 fbd1 	bl	800ca4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa5d 	bl	800976a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	e009      	b.n	80092d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	e004      	b.n	80092d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f99e 	bl	800960e <USBD_CtlError>
  }
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	4b4e      	ldr	r3, [pc, #312]	; (800942c <USBD_SetConfig+0x150>)
 80092f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092f4:	4b4d      	ldr	r3, [pc, #308]	; (800942c <USBD_SetConfig+0x150>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d905      	bls.n	8009308 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f985 	bl	800960e <USBD_CtlError>
    return USBD_FAIL;
 8009304:	2303      	movs	r3, #3
 8009306:	e08c      	b.n	8009422 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d002      	beq.n	800931a <USBD_SetConfig+0x3e>
 8009314:	2b03      	cmp	r3, #3
 8009316:	d029      	beq.n	800936c <USBD_SetConfig+0x90>
 8009318:	e075      	b.n	8009406 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800931a:	4b44      	ldr	r3, [pc, #272]	; (800942c <USBD_SetConfig+0x150>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d020      	beq.n	8009364 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009322:	4b42      	ldr	r3, [pc, #264]	; (800942c <USBD_SetConfig+0x150>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800932c:	4b3f      	ldr	r3, [pc, #252]	; (800942c <USBD_SetConfig+0x150>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe ffe7 	bl	8008306 <USBD_SetClassConfig>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d008      	beq.n	8009354 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f962 	bl	800960e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2202      	movs	r2, #2
 800934e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009352:	e065      	b.n	8009420 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa08 	bl	800976a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2203      	movs	r2, #3
 800935e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009362:	e05d      	b.n	8009420 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fa00 	bl	800976a <USBD_CtlSendStatus>
      break;
 800936a:	e059      	b.n	8009420 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <USBD_SetConfig+0x150>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d112      	bne.n	800939a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800937c:	4b2b      	ldr	r3, [pc, #172]	; (800942c <USBD_SetConfig+0x150>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009386:	4b29      	ldr	r3, [pc, #164]	; (800942c <USBD_SetConfig+0x150>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe ffd6 	bl	800833e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f9e9 	bl	800976a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009398:	e042      	b.n	8009420 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <USBD_SetConfig+0x150>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d02a      	beq.n	80093fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7fe ffc4 	bl	800833e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093b6:	4b1d      	ldr	r3, [pc, #116]	; (800942c <USBD_SetConfig+0x150>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <USBD_SetConfig+0x150>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fe ff9d 	bl	8008306 <USBD_SetClassConfig>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f918 	bl	800960e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fe ffa9 	bl	800833e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093f4:	e014      	b.n	8009420 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9b7 	bl	800976a <USBD_CtlSendStatus>
      break;
 80093fc:	e010      	b.n	8009420 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9b3 	bl	800976a <USBD_CtlSendStatus>
      break;
 8009404:	e00c      	b.n	8009420 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f900 	bl	800960e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <USBD_SetConfig+0x150>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe ff92 	bl	800833e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800941a:	2303      	movs	r3, #3
 800941c:	73fb      	strb	r3, [r7, #15]
      break;
 800941e:	bf00      	nop
  }

  return ret;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	2000059c 	.word	0x2000059c

08009430 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d004      	beq.n	800944c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f8e2 	bl	800960e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800944a:	e023      	b.n	8009494 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b02      	cmp	r3, #2
 8009456:	dc02      	bgt.n	800945e <USBD_GetConfig+0x2e>
 8009458:	2b00      	cmp	r3, #0
 800945a:	dc03      	bgt.n	8009464 <USBD_GetConfig+0x34>
 800945c:	e015      	b.n	800948a <USBD_GetConfig+0x5a>
 800945e:	2b03      	cmp	r3, #3
 8009460:	d00b      	beq.n	800947a <USBD_GetConfig+0x4a>
 8009462:	e012      	b.n	800948a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3308      	adds	r3, #8
 800946e:	2201      	movs	r2, #1
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f93c 	bl	80096f0 <USBD_CtlSendData>
        break;
 8009478:	e00c      	b.n	8009494 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3304      	adds	r3, #4
 800947e:	2201      	movs	r2, #1
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f934 	bl	80096f0 <USBD_CtlSendData>
        break;
 8009488:	e004      	b.n	8009494 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f8be 	bl	800960e <USBD_CtlError>
        break;
 8009492:	bf00      	nop
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d81e      	bhi.n	80094f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	88db      	ldrh	r3, [r3, #6]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d004      	beq.n	80094c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8a5 	bl	800960e <USBD_CtlError>
        break;
 80094c4:	e01a      	b.n	80094fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f043 0202 	orr.w	r2, r3, #2
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	330c      	adds	r3, #12
 80094e6:	2202      	movs	r2, #2
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f900 	bl	80096f0 <USBD_CtlSendData>
      break;
 80094f0:	e004      	b.n	80094fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f88a 	bl	800960e <USBD_CtlError>
      break;
 80094fa:	bf00      	nop
  }
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	885b      	ldrh	r3, [r3, #2]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d107      	bne.n	8009526 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f923 	bl	800976a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009524:	e013      	b.n	800954e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	885b      	ldrh	r3, [r3, #2]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d10b      	bne.n	8009546 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	889b      	ldrh	r3, [r3, #4]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b29b      	uxth	r3, r3
 8009536:	b2da      	uxtb	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f913 	bl	800976a <USBD_CtlSendStatus>
}
 8009544:	e003      	b.n	800954e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f860 	bl	800960e <USBD_CtlError>
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009566:	b2db      	uxtb	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	2b02      	cmp	r3, #2
 800956c:	d80b      	bhi.n	8009586 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d10c      	bne.n	8009590 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f8f3 	bl	800976a <USBD_CtlSendStatus>
      }
      break;
 8009584:	e004      	b.n	8009590 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f840 	bl	800960e <USBD_CtlError>
      break;
 800958e:	e000      	b.n	8009592 <USBD_ClrFeature+0x3c>
      break;
 8009590:	bf00      	nop
  }
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3301      	adds	r3, #1
 80095b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff fa41 	bl	8008a4c <SWAPBYTE>
 80095ca:	4603      	mov	r3, r0
 80095cc:	461a      	mov	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3301      	adds	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fa34 	bl	8008a4c <SWAPBYTE>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3301      	adds	r3, #1
 80095f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3301      	adds	r3, #1
 80095f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fa27 	bl	8008a4c <SWAPBYTE>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	80da      	strh	r2, [r3, #6]
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009618:	2180      	movs	r1, #128	; 0x80
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f003 f9ac 	bl	800c978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f003 f9a8 	bl	800c978 <USBD_LL_StallEP>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800963c:	2300      	movs	r3, #0
 800963e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d036      	beq.n	80096b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800964a:	6938      	ldr	r0, [r7, #16]
 800964c:	f000 f836 	bl	80096bc <USBD_GetLen>
 8009650:	4603      	mov	r3, r0
 8009652:	3301      	adds	r3, #1
 8009654:	b29b      	uxth	r3, r3
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	4413      	add	r3, r2
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7812      	ldrb	r2, [r2, #0]
 8009668:	701a      	strb	r2, [r3, #0]
  idx++;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	3301      	adds	r3, #1
 800966e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4413      	add	r3, r2
 8009676:	2203      	movs	r2, #3
 8009678:	701a      	strb	r2, [r3, #0]
  idx++;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	3301      	adds	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009680:	e013      	b.n	80096aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	4413      	add	r3, r2
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	7812      	ldrb	r2, [r2, #0]
 800968c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	3301      	adds	r3, #1
 8009692:	613b      	str	r3, [r7, #16]
    idx++;
 8009694:	7dfb      	ldrb	r3, [r7, #23]
 8009696:	3301      	adds	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	4413      	add	r3, r2
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
 80096a6:	3301      	adds	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e7      	bne.n	8009682 <USBD_GetString+0x52>
 80096b2:	e000      	b.n	80096b6 <USBD_GetString+0x86>
    return;
 80096b4:	bf00      	nop
  }
}
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096cc:	e005      	b.n	80096da <USBD_GetLen+0x1e>
  {
    len++;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	3301      	adds	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f5      	bne.n	80096ce <USBD_GetLen+0x12>
  }

  return len;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2202      	movs	r2, #2
 8009700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	2100      	movs	r1, #0
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f003 f9b7 	bl	800ca8a <USBD_LL_Transmit>

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	2100      	movs	r1, #0
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f003 f9a6 	bl	800ca8a <USBD_LL_Transmit>

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	2100      	movs	r1, #0
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f003 f9b6 	bl	800cacc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2204      	movs	r2, #4
 8009776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800977a:	2300      	movs	r3, #0
 800977c:	2200      	movs	r2, #0
 800977e:	2100      	movs	r1, #0
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f003 f982 	bl	800ca8a <USBD_LL_Transmit>

  return USBD_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2205      	movs	r2, #5
 800979c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097a0:	2300      	movs	r3, #0
 80097a2:	2200      	movs	r2, #0
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f003 f990 	bl	800cacc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <__NVIC_SetPriority>:
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	db0a      	blt.n	80097e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	490c      	ldr	r1, [pc, #48]	; (8009804 <__NVIC_SetPriority+0x4c>)
 80097d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d6:	0112      	lsls	r2, r2, #4
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	440b      	add	r3, r1
 80097dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097e0:	e00a      	b.n	80097f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	4908      	ldr	r1, [pc, #32]	; (8009808 <__NVIC_SetPriority+0x50>)
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	3b04      	subs	r3, #4
 80097f0:	0112      	lsls	r2, r2, #4
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	440b      	add	r3, r1
 80097f6:	761a      	strb	r2, [r3, #24]
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	e000e100 	.word	0xe000e100
 8009808:	e000ed00 	.word	0xe000ed00

0800980c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <SysTick_Handler+0x1c>)
 8009812:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009814:	f001 fd28 	bl	800b268 <xTaskGetSchedulerState>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d001      	beq.n	8009822 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800981e:	f002 fb13 	bl	800be48 <xPortSysTickHandler>
  }
}
 8009822:	bf00      	nop
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	e000e010 	.word	0xe000e010

0800982c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009830:	2100      	movs	r1, #0
 8009832:	f06f 0004 	mvn.w	r0, #4
 8009836:	f7ff ffbf 	bl	80097b8 <__NVIC_SetPriority>
#endif
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009846:	f3ef 8305 	mrs	r3, IPSR
 800984a:	603b      	str	r3, [r7, #0]
  return(result);
 800984c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009852:	f06f 0305 	mvn.w	r3, #5
 8009856:	607b      	str	r3, [r7, #4]
 8009858:	e00c      	b.n	8009874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <osKernelInitialize+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <osKernelInitialize+0x44>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009868:	2300      	movs	r3, #0
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	e002      	b.n	8009874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295
 8009872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009874:	687b      	ldr	r3, [r7, #4]
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	200005a0 	.word	0x200005a0

08009888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	603b      	str	r3, [r7, #0]
  return(result);
 8009894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800989a:	f06f 0305 	mvn.w	r3, #5
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e010      	b.n	80098c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <osKernelStart+0x48>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d109      	bne.n	80098be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098aa:	f7ff ffbf 	bl	800982c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ae:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <osKernelStart+0x48>)
 80098b0:	2202      	movs	r2, #2
 80098b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098b4:	f001 f87c 	bl	800a9b0 <vTaskStartScheduler>
      stat = osOK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e002      	b.n	80098c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295
 80098c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098c4:	687b      	ldr	r3, [r7, #4]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	200005a0 	.word	0x200005a0

080098d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e4:	f3ef 8305 	mrs	r3, IPSR
 80098e8:	617b      	str	r3, [r7, #20]
  return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d17e      	bne.n	80099ee <osThreadNew+0x11a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d07b      	beq.n	80099ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098fa:	2318      	movs	r3, #24
 80098fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d045      	beq.n	800999a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <osThreadNew+0x48>
        name = attr->name;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <osThreadNew+0x6e>
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b38      	cmp	r3, #56	; 0x38
 8009934:	d805      	bhi.n	8009942 <osThreadNew+0x6e>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <osThreadNew+0x72>
        return (NULL);
 8009942:	2300      	movs	r3, #0
 8009944:	e054      	b.n	80099f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	089b      	lsrs	r3, r3, #2
 8009954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00e      	beq.n	800997c <osThreadNew+0xa8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	2bbb      	cmp	r3, #187	; 0xbb
 8009964:	d90a      	bls.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <osThreadNew+0xa8>
        mem = 1;
 8009976:	2301      	movs	r3, #1
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	e010      	b.n	800999e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10c      	bne.n	800999e <osThreadNew+0xca>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <osThreadNew+0xca>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <osThreadNew+0xca>
          mem = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e001      	b.n	800999e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d110      	bne.n	80099c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099ac:	9202      	str	r2, [sp, #8]
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6a3a      	ldr	r2, [r7, #32]
 80099b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fe0c 	bl	800a5d8 <xTaskCreateStatic>
 80099c0:	4603      	mov	r3, r0
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	e013      	b.n	80099ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 fe57 	bl	800a692 <xTaskCreate>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d001      	beq.n	80099ee <osThreadNew+0x11a>
            hTask = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099ee:	693b      	ldr	r3, [r7, #16]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3728      	adds	r7, #40	; 0x28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a00:	f3ef 8305 	mrs	r3, IPSR
 8009a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <osDelay+0x1c>
    stat = osErrorISR;
 8009a0c:	f06f 0305 	mvn.w	r3, #5
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e007      	b.n	8009a24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 ff92 	bl	800a948 <vTaskDelay>
    }
  }

  return (stat);
 8009a24:	68fb      	ldr	r3, [r7, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4a07      	ldr	r2, [pc, #28]	; (8009a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8009a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4a06      	ldr	r2, [pc, #24]	; (8009a60 <vApplicationGetIdleTaskMemory+0x30>)
 8009a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2280      	movs	r2, #128	; 0x80
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	200005a4 	.word	0x200005a4
 8009a60:	20000660 	.word	0x20000660

08009a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a07      	ldr	r2, [pc, #28]	; (8009a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4a06      	ldr	r2, [pc, #24]	; (8009a94 <vApplicationGetTimerTaskMemory+0x30>)
 8009a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a82:	601a      	str	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	20000860 	.word	0x20000860
 8009a94:	2000091c 	.word	0x2000091c

08009a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f103 0208 	add.w	r2, r3, #8
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f103 0208 	add.w	r2, r3, #8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0208 	add.w	r2, r3, #8
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d103      	bne.n	8009b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e00c      	b.n	8009b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	e002      	b.n	8009b68 <vListInsert+0x2e>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d2f6      	bcs.n	8009b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	601a      	str	r2, [r3, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6892      	ldr	r2, [r2, #8]
 8009bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6852      	ldr	r2, [r2, #4]
 8009bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d103      	bne.n	8009be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	1e5a      	subs	r2, r3, #1
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c2a:	f002 f87b 	bl	800bd24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	441a      	add	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	68f9      	ldr	r1, [r7, #12]
 8009c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c60:	fb01 f303 	mul.w	r3, r1, r3
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	22ff      	movs	r2, #255	; 0xff
 8009c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d114      	bne.n	8009caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01a      	beq.n	8009cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3310      	adds	r3, #16
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 f929 	bl	800aee4 <xTaskRemoveFromEventList>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d012      	beq.n	8009cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <xQueueGenericReset+0xcc>)
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	e009      	b.n	8009cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3310      	adds	r3, #16
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fef2 	bl	8009a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3324      	adds	r3, #36	; 0x24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff feed 	bl	8009a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cbe:	f002 f861 	bl	800bd84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cc2:	2301      	movs	r3, #1
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08e      	sub	sp, #56	; 0x38
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <xQueueGenericCreateStatic+0x52>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <xQueueGenericCreateStatic+0x56>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericCreateStatic+0x58>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <xQueueGenericCreateStatic+0x7e>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <xQueueGenericCreateStatic+0x82>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueGenericCreateStatic+0x84>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	61fb      	str	r3, [r7, #28]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d6e:	2350      	movs	r3, #80	; 0x50
 8009d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b50      	cmp	r3, #80	; 0x50
 8009d76:	d00a      	beq.n	8009d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	61bb      	str	r3, [r7, #24]
}
 8009d8a:	bf00      	nop
 8009d8c:	e7fe      	b.n	8009d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00d      	beq.n	8009db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	4613      	mov	r3, r2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 f805 	bl	8009dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3730      	adds	r7, #48	; 0x30
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d103      	bne.n	8009ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	69ba      	ldr	r2, [r7, #24]
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e002      	b.n	8009de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dee:	2101      	movs	r1, #1
 8009df0:	69b8      	ldr	r0, [r7, #24]
 8009df2:	f7ff ff05 	bl	8009c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	78fa      	ldrb	r2, [r7, #3]
 8009dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08e      	sub	sp, #56	; 0x38
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e16:	2300      	movs	r3, #0
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xQueueGenericSend+0x32>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d103      	bne.n	8009e48 <xQueueGenericSend+0x40>
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <xQueueGenericSend+0x44>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e000      	b.n	8009e4e <xQueueGenericSend+0x46>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <xQueueGenericSend+0x60>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d103      	bne.n	8009e76 <xQueueGenericSend+0x6e>
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d101      	bne.n	8009e7a <xQueueGenericSend+0x72>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e000      	b.n	8009e7c <xQueueGenericSend+0x74>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10a      	bne.n	8009e96 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	623b      	str	r3, [r7, #32]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e96:	f001 f9e7 	bl	800b268 <xTaskGetSchedulerState>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <xQueueGenericSend+0x9e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <xQueueGenericSend+0xa2>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e000      	b.n	8009eac <xQueueGenericSend+0xa4>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	61fb      	str	r3, [r7, #28]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ec6:	f001 ff2d 	bl	800bd24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d302      	bcc.n	8009edc <xQueueGenericSend+0xd4>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d129      	bne.n	8009f30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee2:	f000 fa0b 	bl	800a2fc <prvCopyDataToQueue>
 8009ee6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d010      	beq.n	8009f12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	3324      	adds	r3, #36	; 0x24
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 fff5 	bl	800aee4 <xTaskRemoveFromEventList>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d013      	beq.n	8009f28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f00:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <xQueueGenericSend+0x1f8>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	e00a      	b.n	8009f28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d007      	beq.n	8009f28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f18:	4b39      	ldr	r3, [pc, #228]	; (800a000 <xQueueGenericSend+0x1f8>)
 8009f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f28:	f001 ff2c 	bl	800bd84 <vPortExitCritical>
				return pdPASS;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e063      	b.n	8009ff8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d103      	bne.n	8009f3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f36:	f001 ff25 	bl	800bd84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e05c      	b.n	8009ff8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f44:	f107 0314 	add.w	r3, r7, #20
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 f82f 	bl	800afac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f52:	f001 ff17 	bl	800bd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f56:	f000 fd9b 	bl	800aa90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f5a:	f001 fee3 	bl	800bd24 <vPortEnterCritical>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f64:	b25b      	sxtb	r3, r3
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d103      	bne.n	8009f74 <xQueueGenericSend+0x16c>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f80:	d103      	bne.n	8009f8a <xQueueGenericSend+0x182>
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f8a:	f001 fefb 	bl	800bd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f8e:	1d3a      	adds	r2, r7, #4
 8009f90:	f107 0314 	add.w	r3, r7, #20
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 f81e 	bl	800afd8 <xTaskCheckForTimeOut>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d124      	bne.n	8009fec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa4:	f000 faa2 	bl	800a4ec <prvIsQueueFull>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d018      	beq.n	8009fe0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	3310      	adds	r3, #16
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 ff44 	bl	800ae44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fbe:	f000 fa2d 	bl	800a41c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fc2:	f000 fd73 	bl	800aaac <xTaskResumeAll>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f47f af7c 	bne.w	8009ec6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <xQueueGenericSend+0x1f8>)
 8009fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	e772      	b.n	8009ec6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fe2:	f000 fa1b 	bl	800a41c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fe6:	f000 fd61 	bl	800aaac <xTaskResumeAll>
 8009fea:	e76c      	b.n	8009ec6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fee:	f000 fa15 	bl	800a41c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ff2:	f000 fd5b 	bl	800aaac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ff6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3738      	adds	r7, #56	; 0x38
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b090      	sub	sp, #64	; 0x40
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d103      	bne.n	800a040 <xQueueGenericSendFromISR+0x3c>
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <xQueueGenericSendFromISR+0x40>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <xQueueGenericSendFromISR+0x42>
 800a044:	2300      	movs	r3, #0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d103      	bne.n	800a06e <xQueueGenericSendFromISR+0x6a>
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <xQueueGenericSendFromISR+0x6e>
 800a06e:	2301      	movs	r3, #1
 800a070:	e000      	b.n	800a074 <xQueueGenericSendFromISR+0x70>
 800a072:	2300      	movs	r3, #0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	623b      	str	r3, [r7, #32]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a08e:	f001 ff2b 	bl	800bee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a092:	f3ef 8211 	mrs	r2, BASEPRI
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	61fa      	str	r2, [r7, #28]
 800a0a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d302      	bcc.n	800a0c0 <xQueueGenericSendFromISR+0xbc>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d12f      	bne.n	800a120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0d6:	f000 f911 	bl	800a2fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e2:	d112      	bne.n	800a10a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d016      	beq.n	800a11a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fef7 	bl	800aee4 <xTaskRemoveFromEventList>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00e      	beq.n	800a11a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e007      	b.n	800a11a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a10a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a10e:	3301      	adds	r3, #1
 800a110:	b2db      	uxtb	r3, r3
 800a112:	b25a      	sxtb	r2, r3
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a11a:	2301      	movs	r3, #1
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a11e:	e001      	b.n	800a124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a120:	2300      	movs	r3, #0
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a126:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a12e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a132:	4618      	mov	r0, r3
 800a134:	3740      	adds	r7, #64	; 0x40
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08c      	sub	sp, #48	; 0x30
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a148:	2300      	movs	r3, #0
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <xQueueReceive+0x30>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	623b      	str	r3, [r7, #32]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d103      	bne.n	800a17a <xQueueReceive+0x3e>
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <xQueueReceive+0x42>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <xQueueReceive+0x44>
 800a17e:	2300      	movs	r3, #0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <xQueueReceive+0x5e>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	61fb      	str	r3, [r7, #28]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a19a:	f001 f865 	bl	800b268 <xTaskGetSchedulerState>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <xQueueReceive+0x6e>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <xQueueReceive+0x72>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <xQueueReceive+0x74>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <xQueueReceive+0x8e>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61bb      	str	r3, [r7, #24]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1ca:	f001 fdab 	bl	800bd24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01f      	beq.n	800a21a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1de:	f000 f8f7 	bl	800a3d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1e5a      	subs	r2, r3, #1
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	3310      	adds	r3, #16
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fe74 	bl	800aee4 <xTaskRemoveFromEventList>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a202:	4b3d      	ldr	r3, [pc, #244]	; (800a2f8 <xQueueReceive+0x1bc>)
 800a204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a212:	f001 fdb7 	bl	800bd84 <vPortExitCritical>
				return pdPASS;
 800a216:	2301      	movs	r3, #1
 800a218:	e069      	b.n	800a2ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a220:	f001 fdb0 	bl	800bd84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a224:	2300      	movs	r3, #0
 800a226:	e062      	b.n	800a2ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a22e:	f107 0310 	add.w	r3, r7, #16
 800a232:	4618      	mov	r0, r3
 800a234:	f000 feba 	bl	800afac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a238:	2301      	movs	r3, #1
 800a23a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a23c:	f001 fda2 	bl	800bd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a240:	f000 fc26 	bl	800aa90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a244:	f001 fd6e 	bl	800bd24 <vPortEnterCritical>
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d103      	bne.n	800a25e <xQueueReceive+0x122>
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a264:	b25b      	sxtb	r3, r3
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26a:	d103      	bne.n	800a274 <xQueueReceive+0x138>
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a274:	f001 fd86 	bl	800bd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a278:	1d3a      	adds	r2, r7, #4
 800a27a:	f107 0310 	add.w	r3, r7, #16
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fea9 	bl	800afd8 <xTaskCheckForTimeOut>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d123      	bne.n	800a2d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a28e:	f000 f917 	bl	800a4c0 <prvIsQueueEmpty>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d017      	beq.n	800a2c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fdcf 	bl	800ae44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a8:	f000 f8b8 	bl	800a41c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2ac:	f000 fbfe 	bl	800aaac <xTaskResumeAll>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d189      	bne.n	800a1ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2b6:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <xQueueReceive+0x1bc>)
 800a2b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	e780      	b.n	800a1ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ca:	f000 f8a7 	bl	800a41c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ce:	f000 fbed 	bl	800aaac <xTaskResumeAll>
 800a2d2:	e77a      	b.n	800a1ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d6:	f000 f8a1 	bl	800a41c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2da:	f000 fbe7 	bl	800aaac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e0:	f000 f8ee 	bl	800a4c0 <prvIsQueueEmpty>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f43f af6f 	beq.w	800a1ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3730      	adds	r7, #48	; 0x30
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10d      	bne.n	800a336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d14d      	bne.n	800a3be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 ffbc 	bl	800b2a4 <xTaskPriorityDisinherit>
 800a32c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	609a      	str	r2, [r3, #8]
 800a334:	e043      	b.n	800a3be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d119      	bne.n	800a370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6858      	ldr	r0, [r3, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	461a      	mov	r2, r3
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	f002 fd49 	bl	800cdde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	441a      	add	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	429a      	cmp	r2, r3
 800a364:	d32b      	bcc.n	800a3be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	605a      	str	r2, [r3, #4]
 800a36e:	e026      	b.n	800a3be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68d8      	ldr	r0, [r3, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	461a      	mov	r2, r3
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	f002 fd2f 	bl	800cdde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a388:	425b      	negs	r3, r3
 800a38a:	441a      	add	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d207      	bcs.n	800a3ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	441a      	add	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d105      	bne.n	800a3be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3c6:	697b      	ldr	r3, [r7, #20]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d018      	beq.n	800a414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	441a      	add	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68da      	ldr	r2, [r3, #12]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d303      	bcc.n	800a404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68d9      	ldr	r1, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40c:	461a      	mov	r2, r3
 800a40e:	6838      	ldr	r0, [r7, #0]
 800a410:	f002 fce5 	bl	800cdde <memcpy>
	}
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a424:	f001 fc7e 	bl	800bd24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a430:	e011      	b.n	800a456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d012      	beq.n	800a460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3324      	adds	r3, #36	; 0x24
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fd50 	bl	800aee4 <xTaskRemoveFromEventList>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a44a:	f000 fe27 	bl	800b09c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	3b01      	subs	r3, #1
 800a452:	b2db      	uxtb	r3, r3
 800a454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dce9      	bgt.n	800a432 <prvUnlockQueue+0x16>
 800a45e:	e000      	b.n	800a462 <prvUnlockQueue+0x46>
					break;
 800a460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a46a:	f001 fc8b 	bl	800bd84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a46e:	f001 fc59 	bl	800bd24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a47a:	e011      	b.n	800a4a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d012      	beq.n	800a4aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3310      	adds	r3, #16
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fd2b 	bl	800aee4 <xTaskRemoveFromEventList>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a494:	f000 fe02 	bl	800b09c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dce9      	bgt.n	800a47c <prvUnlockQueue+0x60>
 800a4a8:	e000      	b.n	800a4ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	22ff      	movs	r2, #255	; 0xff
 800a4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4b4:	f001 fc66 	bl	800bd84 <vPortExitCritical>
}
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4c8:	f001 fc2c 	bl	800bd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e001      	b.n	800a4de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fc51 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4f4:	f001 fc16 	bl	800bd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a500:	429a      	cmp	r2, r3
 800a502:	d102      	bne.n	800a50a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e001      	b.n	800a50e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a50e:	f001 fc39 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800a512:	68fb      	ldr	r3, [r7, #12]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	e014      	b.n	800a556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a52c:	4a0f      	ldr	r2, [pc, #60]	; (800a56c <vQueueAddToRegistry+0x50>)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10b      	bne.n	800a550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a538:	490c      	ldr	r1, [pc, #48]	; (800a56c <vQueueAddToRegistry+0x50>)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a542:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <vQueueAddToRegistry+0x50>)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	4413      	add	r3, r2
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a54e:	e006      	b.n	800a55e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b07      	cmp	r3, #7
 800a55a:	d9e7      	bls.n	800a52c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20000d1c 	.word	0x20000d1c

0800a570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a580:	f001 fbd0 	bl	800bd24 <vPortEnterCritical>
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a58a:	b25b      	sxtb	r3, r3
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d103      	bne.n	800a59a <vQueueWaitForMessageRestricted+0x2a>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d103      	bne.n	800a5b0 <vQueueWaitForMessageRestricted+0x40>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b0:	f001 fbe8 	bl	800bd84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d106      	bne.n	800a5ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	3324      	adds	r3, #36	; 0x24
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fc61 	bl	800ae8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f7ff ff26 	bl	800a41c <prvUnlockQueue>
	}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08e      	sub	sp, #56	; 0x38
 800a5dc:	af04      	add	r7, sp, #16
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	623b      	str	r3, [r7, #32]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xTaskCreateStatic+0x46>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	61fb      	str	r3, [r7, #28]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a61e:	23bc      	movs	r3, #188	; 0xbc
 800a620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	2bbc      	cmp	r3, #188	; 0xbc
 800a626:	d00a      	beq.n	800a63e <xTaskCreateStatic+0x66>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	61bb      	str	r3, [r7, #24]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a63e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	d01e      	beq.n	800a684 <xTaskCreateStatic+0xac>
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01b      	beq.n	800a684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	2202      	movs	r2, #2
 800a65a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a65e:	2300      	movs	r3, #0
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	9302      	str	r3, [sp, #8]
 800a666:	f107 0314 	add.w	r3, r7, #20
 800a66a:	9301      	str	r3, [sp, #4]
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 f850 	bl	800a71c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a67c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a67e:	f000 f8f3 	bl	800a868 <prvAddNewTaskToReadyList>
 800a682:	e001      	b.n	800a688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a688:	697b      	ldr	r3, [r7, #20]
	}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3728      	adds	r7, #40	; 0x28
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a692:	b580      	push	{r7, lr}
 800a694:	b08c      	sub	sp, #48	; 0x30
 800a696:	af04      	add	r7, sp, #16
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	603b      	str	r3, [r7, #0]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6a2:	88fb      	ldrh	r3, [r7, #6]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 fc5e 	bl	800bf68 <pvPortMalloc>
 800a6ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00e      	beq.n	800a6d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6b4:	20bc      	movs	r0, #188	; 0xbc
 800a6b6:	f001 fc57 	bl	800bf68 <pvPortMalloc>
 800a6ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d003      	beq.n	800a6ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a6c8:	e005      	b.n	800a6d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6ca:	6978      	ldr	r0, [r7, #20]
 800a6cc:	f001 fd18 	bl	800c100 <vPortFree>
 800a6d0:	e001      	b.n	800a6d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d017      	beq.n	800a70c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6e4:	88fa      	ldrh	r2, [r7, #6]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f80e 	bl	800a71c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a700:	69f8      	ldr	r0, [r7, #28]
 800a702:	f000 f8b1 	bl	800a868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a706:	2301      	movs	r3, #1
 800a708:	61bb      	str	r3, [r7, #24]
 800a70a:	e002      	b.n	800a712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a70c:	f04f 33ff 	mov.w	r3, #4294967295
 800a710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a712:	69bb      	ldr	r3, [r7, #24]
	}
 800a714:	4618      	mov	r0, r3
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	461a      	mov	r2, r3
 800a734:	21a5      	movs	r1, #165	; 0xa5
 800a736:	f002 fb60 	bl	800cdfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a744:	3b01      	subs	r3, #1
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4413      	add	r3, r2
 800a74a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	f023 0307 	bic.w	r3, r3, #7
 800a752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	617b      	str	r3, [r7, #20]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01f      	beq.n	800a7ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a77a:	2300      	movs	r3, #0
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	e012      	b.n	800a7a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	7819      	ldrb	r1, [r3, #0]
 800a788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	4413      	add	r3, r2
 800a78e:	3334      	adds	r3, #52	; 0x34
 800a790:	460a      	mov	r2, r1
 800a792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	4413      	add	r3, r2
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	2b0f      	cmp	r3, #15
 800a7aa:	d9e9      	bls.n	800a780 <prvInitialiseNewTask+0x64>
 800a7ac:	e000      	b.n	800a7b0 <prvInitialiseNewTask+0x94>
			{
				break;
 800a7ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7b8:	e003      	b.n	800a7c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	2b37      	cmp	r3, #55	; 0x37
 800a7c6:	d901      	bls.n	800a7cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7c8:	2337      	movs	r3, #55	; 0x37
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	2200      	movs	r2, #0
 800a7dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff f978 	bl	8009ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	3318      	adds	r3, #24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff f973 	bl	8009ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	2200      	movs	r2, #0
 800a814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81a:	3354      	adds	r3, #84	; 0x54
 800a81c:	2260      	movs	r2, #96	; 0x60
 800a81e:	2100      	movs	r1, #0
 800a820:	4618      	mov	r0, r3
 800a822:	f002 faea 	bl	800cdfa <memset>
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	4a0c      	ldr	r2, [pc, #48]	; (800a85c <prvInitialiseNewTask+0x140>)
 800a82a:	659a      	str	r2, [r3, #88]	; 0x58
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	4a0c      	ldr	r2, [pc, #48]	; (800a860 <prvInitialiseNewTask+0x144>)
 800a830:	65da      	str	r2, [r3, #92]	; 0x5c
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	4a0b      	ldr	r2, [pc, #44]	; (800a864 <prvInitialiseNewTask+0x148>)
 800a836:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f001 f941 	bl	800bac4 <pxPortInitialiseStack>
 800a842:	4602      	mov	r2, r0
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a854:	bf00      	nop
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	080117a8 	.word	0x080117a8
 800a860:	080117c8 	.word	0x080117c8
 800a864:	08011788 	.word	0x08011788

0800a868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a870:	f001 fa58 	bl	800bd24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a874:	4b2d      	ldr	r3, [pc, #180]	; (800a92c <prvAddNewTaskToReadyList+0xc4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3301      	adds	r3, #1
 800a87a:	4a2c      	ldr	r2, [pc, #176]	; (800a92c <prvAddNewTaskToReadyList+0xc4>)
 800a87c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a87e:	4b2c      	ldr	r3, [pc, #176]	; (800a930 <prvAddNewTaskToReadyList+0xc8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a886:	4a2a      	ldr	r2, [pc, #168]	; (800a930 <prvAddNewTaskToReadyList+0xc8>)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a88c:	4b27      	ldr	r3, [pc, #156]	; (800a92c <prvAddNewTaskToReadyList+0xc4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d110      	bne.n	800a8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a894:	f000 fc26 	bl	800b0e4 <prvInitialiseTaskLists>
 800a898:	e00d      	b.n	800a8b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a89a:	4b26      	ldr	r3, [pc, #152]	; (800a934 <prvAddNewTaskToReadyList+0xcc>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8a2:	4b23      	ldr	r3, [pc, #140]	; (800a930 <prvAddNewTaskToReadyList+0xc8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d802      	bhi.n	800a8b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8b0:	4a1f      	ldr	r2, [pc, #124]	; (800a930 <prvAddNewTaskToReadyList+0xc8>)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8b6:	4b20      	ldr	r3, [pc, #128]	; (800a938 <prvAddNewTaskToReadyList+0xd0>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	4a1e      	ldr	r2, [pc, #120]	; (800a938 <prvAddNewTaskToReadyList+0xd0>)
 800a8be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8c0:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <prvAddNewTaskToReadyList+0xd0>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8cc:	4b1b      	ldr	r3, [pc, #108]	; (800a93c <prvAddNewTaskToReadyList+0xd4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <prvAddNewTaskToReadyList+0x74>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	4a18      	ldr	r2, [pc, #96]	; (800a93c <prvAddNewTaskToReadyList+0xd4>)
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4a15      	ldr	r2, [pc, #84]	; (800a940 <prvAddNewTaskToReadyList+0xd8>)
 800a8ea:	441a      	add	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f7ff f8fd 	bl	8009af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8f8:	f001 fa44 	bl	800bd84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <prvAddNewTaskToReadyList+0xcc>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <prvAddNewTaskToReadyList+0xc8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	429a      	cmp	r2, r3
 800a910:	d207      	bcs.n	800a922 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <prvAddNewTaskToReadyList+0xdc>)
 800a914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20001230 	.word	0x20001230
 800a930:	20000d5c 	.word	0x20000d5c
 800a934:	2000123c 	.word	0x2000123c
 800a938:	2000124c 	.word	0x2000124c
 800a93c:	20001238 	.word	0x20001238
 800a940:	20000d60 	.word	0x20000d60
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d017      	beq.n	800a98a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <vTaskDelay+0x60>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <vTaskDelay+0x30>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	60bb      	str	r3, [r7, #8]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a978:	f000 f88a 	bl	800aa90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fcfe 	bl	800b380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a984:	f000 f892 	bl	800aaac <xTaskResumeAll>
 800a988:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d107      	bne.n	800a9a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a990:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <vTaskDelay+0x64>)
 800a992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9a0:	bf00      	nop
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20001258 	.word	0x20001258
 800a9ac:	e000ed04 	.word	0xe000ed04

0800a9b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08a      	sub	sp, #40	; 0x28
 800a9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9be:	463a      	mov	r2, r7
 800a9c0:	1d39      	adds	r1, r7, #4
 800a9c2:	f107 0308 	add.w	r3, r7, #8
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff f832 	bl	8009a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	9202      	str	r2, [sp, #8]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	460a      	mov	r2, r1
 800a9de:	4924      	ldr	r1, [pc, #144]	; (800aa70 <vTaskStartScheduler+0xc0>)
 800a9e0:	4824      	ldr	r0, [pc, #144]	; (800aa74 <vTaskStartScheduler+0xc4>)
 800a9e2:	f7ff fdf9 	bl	800a5d8 <xTaskCreateStatic>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4a23      	ldr	r2, [pc, #140]	; (800aa78 <vTaskStartScheduler+0xc8>)
 800a9ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <vTaskStartScheduler+0xc8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e001      	b.n	800a9fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d102      	bne.n	800aa0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa04:	f000 fd10 	bl	800b428 <xTimerCreateTimerTask>
 800aa08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d11b      	bne.n	800aa48 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa24:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <vTaskStartScheduler+0xcc>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3354      	adds	r3, #84	; 0x54
 800aa2a:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <vTaskStartScheduler+0xd0>)
 800aa2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa2e:	4b15      	ldr	r3, [pc, #84]	; (800aa84 <vTaskStartScheduler+0xd4>)
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <vTaskStartScheduler+0xd8>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa3c:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <vTaskStartScheduler+0xdc>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa42:	f001 f8cd 	bl	800bbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa46:	e00e      	b.n	800aa66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4e:	d10a      	bne.n	800aa66 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	60fb      	str	r3, [r7, #12]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <vTaskStartScheduler+0xb4>
}
 800aa66:	bf00      	nop
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0801160c 	.word	0x0801160c
 800aa74:	0800b0b5 	.word	0x0800b0b5
 800aa78:	20001254 	.word	0x20001254
 800aa7c:	20000d5c 	.word	0x20000d5c
 800aa80:	20000150 	.word	0x20000150
 800aa84:	20001250 	.word	0x20001250
 800aa88:	2000123c 	.word	0x2000123c
 800aa8c:	20001234 	.word	0x20001234

0800aa90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa90:	b480      	push	{r7}
 800aa92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <vTaskSuspendAll+0x18>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	4a03      	ldr	r2, [pc, #12]	; (800aaa8 <vTaskSuspendAll+0x18>)
 800aa9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa9e:	bf00      	nop
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	20001258 	.word	0x20001258

0800aaac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aaba:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <xTaskResumeAll+0x118>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10a      	bne.n	800aad8 <xTaskResumeAll+0x2c>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	603b      	str	r3, [r7, #0]
}
 800aad4:	bf00      	nop
 800aad6:	e7fe      	b.n	800aad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aad8:	f001 f924 	bl	800bd24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aadc:	4b39      	ldr	r3, [pc, #228]	; (800abc4 <xTaskResumeAll+0x118>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4a38      	ldr	r2, [pc, #224]	; (800abc4 <xTaskResumeAll+0x118>)
 800aae4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae6:	4b37      	ldr	r3, [pc, #220]	; (800abc4 <xTaskResumeAll+0x118>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d162      	bne.n	800abb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaee:	4b36      	ldr	r3, [pc, #216]	; (800abc8 <xTaskResumeAll+0x11c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d05e      	beq.n	800abb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaf6:	e02f      	b.n	800ab58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf8:	4b34      	ldr	r3, [pc, #208]	; (800abcc <xTaskResumeAll+0x120>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3318      	adds	r3, #24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff f851 	bl	8009bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff f84c 	bl	8009bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab18:	4b2d      	ldr	r3, [pc, #180]	; (800abd0 <xTaskResumeAll+0x124>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d903      	bls.n	800ab28 <xTaskResumeAll+0x7c>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	4a2a      	ldr	r2, [pc, #168]	; (800abd0 <xTaskResumeAll+0x124>)
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4a27      	ldr	r2, [pc, #156]	; (800abd4 <xTaskResumeAll+0x128>)
 800ab36:	441a      	add	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7fe ffd7 	bl	8009af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab48:	4b23      	ldr	r3, [pc, #140]	; (800abd8 <xTaskResumeAll+0x12c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d302      	bcc.n	800ab58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab52:	4b22      	ldr	r3, [pc, #136]	; (800abdc <xTaskResumeAll+0x130>)
 800ab54:	2201      	movs	r2, #1
 800ab56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab58:	4b1c      	ldr	r3, [pc, #112]	; (800abcc <xTaskResumeAll+0x120>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1cb      	bne.n	800aaf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab66:	f000 fb5f 	bl	800b228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <xTaskResumeAll+0x134>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d010      	beq.n	800ab98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab76:	f000 f847 	bl	800ac08 <xTaskIncrementTick>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab80:	4b16      	ldr	r3, [pc, #88]	; (800abdc <xTaskResumeAll+0x130>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f1      	bne.n	800ab76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab92:	4b13      	ldr	r3, [pc, #76]	; (800abe0 <xTaskResumeAll+0x134>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab98:	4b10      	ldr	r3, [pc, #64]	; (800abdc <xTaskResumeAll+0x130>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d009      	beq.n	800abb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aba0:	2301      	movs	r3, #1
 800aba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aba4:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <xTaskResumeAll+0x138>)
 800aba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abb4:	f001 f8e6 	bl	800bd84 <vPortExitCritical>

	return xAlreadyYielded;
 800abb8:	68bb      	ldr	r3, [r7, #8]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20001258 	.word	0x20001258
 800abc8:	20001230 	.word	0x20001230
 800abcc:	200011f0 	.word	0x200011f0
 800abd0:	20001238 	.word	0x20001238
 800abd4:	20000d60 	.word	0x20000d60
 800abd8:	20000d5c 	.word	0x20000d5c
 800abdc:	20001244 	.word	0x20001244
 800abe0:	20001240 	.word	0x20001240
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <xTaskGetTickCount+0x1c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abf4:	687b      	ldr	r3, [r7, #4]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20001234 	.word	0x20001234

0800ac08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac12:	4b4f      	ldr	r3, [pc, #316]	; (800ad50 <xTaskIncrementTick+0x148>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 808f 	bne.w	800ad3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac1c:	4b4d      	ldr	r3, [pc, #308]	; (800ad54 <xTaskIncrementTick+0x14c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac24:	4a4b      	ldr	r2, [pc, #300]	; (800ad54 <xTaskIncrementTick+0x14c>)
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d120      	bne.n	800ac72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac30:	4b49      	ldr	r3, [pc, #292]	; (800ad58 <xTaskIncrementTick+0x150>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	603b      	str	r3, [r7, #0]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <xTaskIncrementTick+0x46>
 800ac50:	4b41      	ldr	r3, [pc, #260]	; (800ad58 <xTaskIncrementTick+0x150>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	4b41      	ldr	r3, [pc, #260]	; (800ad5c <xTaskIncrementTick+0x154>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a3f      	ldr	r2, [pc, #252]	; (800ad58 <xTaskIncrementTick+0x150>)
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	4a3f      	ldr	r2, [pc, #252]	; (800ad5c <xTaskIncrementTick+0x154>)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <xTaskIncrementTick+0x158>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	4a3d      	ldr	r2, [pc, #244]	; (800ad60 <xTaskIncrementTick+0x158>)
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	f000 fadb 	bl	800b228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac72:	4b3c      	ldr	r3, [pc, #240]	; (800ad64 <xTaskIncrementTick+0x15c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d349      	bcc.n	800ad10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac7c:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <xTaskIncrementTick+0x150>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d104      	bne.n	800ac90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac86:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <xTaskIncrementTick+0x15c>)
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8c:	601a      	str	r2, [r3, #0]
					break;
 800ac8e:	e03f      	b.n	800ad10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac90:	4b31      	ldr	r3, [pc, #196]	; (800ad58 <xTaskIncrementTick+0x150>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d203      	bcs.n	800acb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aca8:	4a2e      	ldr	r2, [pc, #184]	; (800ad64 <xTaskIncrementTick+0x15c>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acae:	e02f      	b.n	800ad10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe ff79 	bl	8009bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d004      	beq.n	800accc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	3318      	adds	r3, #24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe ff70 	bl	8009bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd0:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <xTaskIncrementTick+0x160>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d903      	bls.n	800ace0 <xTaskIncrementTick+0xd8>
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	4a22      	ldr	r2, [pc, #136]	; (800ad68 <xTaskIncrementTick+0x160>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a1f      	ldr	r2, [pc, #124]	; (800ad6c <xTaskIncrementTick+0x164>)
 800acee:	441a      	add	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fe fefb 	bl	8009af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <xTaskIncrementTick+0x168>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d3b8      	bcc.n	800ac7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0e:	e7b5      	b.n	800ac7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad10:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <xTaskIncrementTick+0x168>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad16:	4915      	ldr	r1, [pc, #84]	; (800ad6c <xTaskIncrementTick+0x164>)
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d901      	bls.n	800ad2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad2c:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <xTaskIncrementTick+0x16c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e004      	b.n	800ad44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <xTaskIncrementTick+0x170>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	4a0d      	ldr	r2, [pc, #52]	; (800ad78 <xTaskIncrementTick+0x170>)
 800ad42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad44:	697b      	ldr	r3, [r7, #20]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20001258 	.word	0x20001258
 800ad54:	20001234 	.word	0x20001234
 800ad58:	200011e8 	.word	0x200011e8
 800ad5c:	200011ec 	.word	0x200011ec
 800ad60:	20001248 	.word	0x20001248
 800ad64:	20001250 	.word	0x20001250
 800ad68:	20001238 	.word	0x20001238
 800ad6c:	20000d60 	.word	0x20000d60
 800ad70:	20000d5c 	.word	0x20000d5c
 800ad74:	20001244 	.word	0x20001244
 800ad78:	20001240 	.word	0x20001240

0800ad7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad82:	4b2a      	ldr	r3, [pc, #168]	; (800ae2c <vTaskSwitchContext+0xb0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad8a:	4b29      	ldr	r3, [pc, #164]	; (800ae30 <vTaskSwitchContext+0xb4>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad90:	e046      	b.n	800ae20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad92:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <vTaskSwitchContext+0xb4>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad98:	4b26      	ldr	r3, [pc, #152]	; (800ae34 <vTaskSwitchContext+0xb8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	e010      	b.n	800adc2 <vTaskSwitchContext+0x46>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <vTaskSwitchContext+0x40>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	607b      	str	r3, [r7, #4]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <vTaskSwitchContext+0x3e>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	491d      	ldr	r1, [pc, #116]	; (800ae38 <vTaskSwitchContext+0xbc>)
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	4613      	mov	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	440b      	add	r3, r1
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0e4      	beq.n	800ada0 <vTaskSwitchContext+0x24>
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4a15      	ldr	r2, [pc, #84]	; (800ae38 <vTaskSwitchContext+0xbc>)
 800ade2:	4413      	add	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	605a      	str	r2, [r3, #4]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	3308      	adds	r3, #8
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d104      	bne.n	800ae06 <vTaskSwitchContext+0x8a>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	605a      	str	r2, [r3, #4]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	4a0b      	ldr	r2, [pc, #44]	; (800ae3c <vTaskSwitchContext+0xc0>)
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <vTaskSwitchContext+0xb8>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <vTaskSwitchContext+0xc0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3354      	adds	r3, #84	; 0x54
 800ae1c:	4a08      	ldr	r2, [pc, #32]	; (800ae40 <vTaskSwitchContext+0xc4>)
 800ae1e:	6013      	str	r3, [r2, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20001258 	.word	0x20001258
 800ae30:	20001244 	.word	0x20001244
 800ae34:	20001238 	.word	0x20001238
 800ae38:	20000d60 	.word	0x20000d60
 800ae3c:	20000d5c 	.word	0x20000d5c
 800ae40:	20000150 	.word	0x20000150

0800ae44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	60fb      	str	r3, [r7, #12]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae6a:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <vTaskPlaceOnEventList+0x44>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3318      	adds	r3, #24
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fe fe61 	bl	8009b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae78:	2101      	movs	r1, #1
 800ae7a:	6838      	ldr	r0, [r7, #0]
 800ae7c:	f000 fa80 	bl	800b380 <prvAddCurrentTaskToDelayedList>
}
 800ae80:	bf00      	nop
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20000d5c 	.word	0x20000d5c

0800ae8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	617b      	str	r3, [r7, #20]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3318      	adds	r3, #24
 800aeba:	4619      	mov	r1, r3
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7fe fe18 	bl	8009af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aec8:	f04f 33ff 	mov.w	r3, #4294967295
 800aecc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	f000 fa55 	bl	800b380 <prvAddCurrentTaskToDelayedList>
	}
 800aed6:	bf00      	nop
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000d5c 	.word	0x20000d5c

0800aee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10a      	bne.n	800af10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	60fb      	str	r3, [r7, #12]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	3318      	adds	r3, #24
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fe49 	bl	8009bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af1a:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <xTaskRemoveFromEventList+0xb0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11d      	bne.n	800af5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	3304      	adds	r3, #4
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fe40 	bl	8009bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4b19      	ldr	r3, [pc, #100]	; (800af98 <xTaskRemoveFromEventList+0xb4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d903      	bls.n	800af40 <xTaskRemoveFromEventList+0x5c>
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a16      	ldr	r2, [pc, #88]	; (800af98 <xTaskRemoveFromEventList+0xb4>)
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4a13      	ldr	r2, [pc, #76]	; (800af9c <xTaskRemoveFromEventList+0xb8>)
 800af4e:	441a      	add	r2, r3
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	3304      	adds	r3, #4
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	f7fe fdcb 	bl	8009af2 <vListInsertEnd>
 800af5c:	e005      	b.n	800af6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	3318      	adds	r3, #24
 800af62:	4619      	mov	r1, r3
 800af64:	480e      	ldr	r0, [pc, #56]	; (800afa0 <xTaskRemoveFromEventList+0xbc>)
 800af66:	f7fe fdc4 	bl	8009af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <xTaskRemoveFromEventList+0xc0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af74:	429a      	cmp	r2, r3
 800af76:	d905      	bls.n	800af84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <xTaskRemoveFromEventList+0xc4>)
 800af7e:	2201      	movs	r2, #1
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e001      	b.n	800af88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af88:	697b      	ldr	r3, [r7, #20]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20001258 	.word	0x20001258
 800af98:	20001238 	.word	0x20001238
 800af9c:	20000d60 	.word	0x20000d60
 800afa0:	200011f0 	.word	0x200011f0
 800afa4:	20000d5c 	.word	0x20000d5c
 800afa8:	20001244 	.word	0x20001244

0800afac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afb4:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <vTaskInternalSetTimeOutState+0x24>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afbc:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <vTaskInternalSetTimeOutState+0x28>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	605a      	str	r2, [r3, #4]
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20001248 	.word	0x20001248
 800afd4:	20001234 	.word	0x20001234

0800afd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	613b      	str	r3, [r7, #16]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	60fb      	str	r3, [r7, #12]
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b01a:	f000 fe83 	bl	800bd24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b01e:	4b1d      	ldr	r3, [pc, #116]	; (800b094 <xTaskCheckForTimeOut+0xbc>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d102      	bne.n	800b03e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b038:	2300      	movs	r3, #0
 800b03a:	61fb      	str	r3, [r7, #28]
 800b03c:	e023      	b.n	800b086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <xTaskCheckForTimeOut+0xc0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	d007      	beq.n	800b05a <xTaskCheckForTimeOut+0x82>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	429a      	cmp	r2, r3
 800b052:	d302      	bcc.n	800b05a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	61fb      	str	r3, [r7, #28]
 800b058:	e015      	b.n	800b086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	429a      	cmp	r2, r3
 800b062:	d20b      	bcs.n	800b07c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ff9b 	bl	800afac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	e004      	b.n	800b086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b082:	2301      	movs	r3, #1
 800b084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b086:	f000 fe7d 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800b08a:	69fb      	ldr	r3, [r7, #28]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3720      	adds	r7, #32
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20001234 	.word	0x20001234
 800b098:	20001248 	.word	0x20001248

0800b09c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0a0:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <vTaskMissedYield+0x14>)
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20001244 	.word	0x20001244

0800b0b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0bc:	f000 f852 	bl	800b164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0c0:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <prvIdleTask+0x28>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d9f9      	bls.n	800b0bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0c8:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <prvIdleTask+0x2c>)
 800b0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0d8:	e7f0      	b.n	800b0bc <prvIdleTask+0x8>
 800b0da:	bf00      	nop
 800b0dc:	20000d60 	.word	0x20000d60
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	e00c      	b.n	800b10a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4a12      	ldr	r2, [pc, #72]	; (800b144 <prvInitialiseTaskLists+0x60>)
 800b0fc:	4413      	add	r3, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fcca 	bl	8009a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b37      	cmp	r3, #55	; 0x37
 800b10e:	d9ef      	bls.n	800b0f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b110:	480d      	ldr	r0, [pc, #52]	; (800b148 <prvInitialiseTaskLists+0x64>)
 800b112:	f7fe fcc1 	bl	8009a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b116:	480d      	ldr	r0, [pc, #52]	; (800b14c <prvInitialiseTaskLists+0x68>)
 800b118:	f7fe fcbe 	bl	8009a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b11c:	480c      	ldr	r0, [pc, #48]	; (800b150 <prvInitialiseTaskLists+0x6c>)
 800b11e:	f7fe fcbb 	bl	8009a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b122:	480c      	ldr	r0, [pc, #48]	; (800b154 <prvInitialiseTaskLists+0x70>)
 800b124:	f7fe fcb8 	bl	8009a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b128:	480b      	ldr	r0, [pc, #44]	; (800b158 <prvInitialiseTaskLists+0x74>)
 800b12a:	f7fe fcb5 	bl	8009a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <prvInitialiseTaskLists+0x78>)
 800b130:	4a05      	ldr	r2, [pc, #20]	; (800b148 <prvInitialiseTaskLists+0x64>)
 800b132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <prvInitialiseTaskLists+0x7c>)
 800b136:	4a05      	ldr	r2, [pc, #20]	; (800b14c <prvInitialiseTaskLists+0x68>)
 800b138:	601a      	str	r2, [r3, #0]
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000d60 	.word	0x20000d60
 800b148:	200011c0 	.word	0x200011c0
 800b14c:	200011d4 	.word	0x200011d4
 800b150:	200011f0 	.word	0x200011f0
 800b154:	20001204 	.word	0x20001204
 800b158:	2000121c 	.word	0x2000121c
 800b15c:	200011e8 	.word	0x200011e8
 800b160:	200011ec 	.word	0x200011ec

0800b164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b16a:	e019      	b.n	800b1a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b16c:	f000 fdda 	bl	800bd24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b170:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <prvCheckTasksWaitingTermination+0x50>)
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe fd15 	bl	8009bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <prvCheckTasksWaitingTermination+0x54>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3b01      	subs	r3, #1
 800b188:	4a0b      	ldr	r2, [pc, #44]	; (800b1b8 <prvCheckTasksWaitingTermination+0x54>)
 800b18a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3b01      	subs	r3, #1
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b196:	f000 fdf5 	bl	800bd84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f810 	bl	800b1c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e1      	bne.n	800b16c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20001204 	.word	0x20001204
 800b1b8:	20001230 	.word	0x20001230
 800b1bc:	20001218 	.word	0x20001218

0800b1c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3354      	adds	r3, #84	; 0x54
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 fd39 	bl	800dc44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d108      	bne.n	800b1ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 ff8d 	bl	800c100 <vPortFree>
				vPortFree( pxTCB );
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 ff8a 	bl	800c100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1ec:	e018      	b.n	800b220 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d103      	bne.n	800b200 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 ff81 	bl	800c100 <vPortFree>
	}
 800b1fe:	e00f      	b.n	800b220 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b206:	2b02      	cmp	r3, #2
 800b208:	d00a      	beq.n	800b220 <prvDeleteTCB+0x60>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	60fb      	str	r3, [r7, #12]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <prvDeleteTCB+0x5e>
	}
 800b220:	bf00      	nop
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22e:	4b0c      	ldr	r3, [pc, #48]	; (800b260 <prvResetNextTaskUnblockTime+0x38>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d104      	bne.n	800b242 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <prvResetNextTaskUnblockTime+0x3c>)
 800b23a:	f04f 32ff 	mov.w	r2, #4294967295
 800b23e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b240:	e008      	b.n	800b254 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <prvResetNextTaskUnblockTime+0x38>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4a04      	ldr	r2, [pc, #16]	; (800b264 <prvResetNextTaskUnblockTime+0x3c>)
 800b252:	6013      	str	r3, [r2, #0]
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	200011e8 	.word	0x200011e8
 800b264:	20001250 	.word	0x20001250

0800b268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b26e:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <xTaskGetSchedulerState+0x34>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b276:	2301      	movs	r3, #1
 800b278:	607b      	str	r3, [r7, #4]
 800b27a:	e008      	b.n	800b28e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b27c:	4b08      	ldr	r3, [pc, #32]	; (800b2a0 <xTaskGetSchedulerState+0x38>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d102      	bne.n	800b28a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b284:	2302      	movs	r3, #2
 800b286:	607b      	str	r3, [r7, #4]
 800b288:	e001      	b.n	800b28e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b28a:	2300      	movs	r3, #0
 800b28c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b28e:	687b      	ldr	r3, [r7, #4]
	}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	2000123c 	.word	0x2000123c
 800b2a0:	20001258 	.word	0x20001258

0800b2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d056      	beq.n	800b368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2ba:	4b2e      	ldr	r3, [pc, #184]	; (800b374 <xTaskPriorityDisinherit+0xd0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d00a      	beq.n	800b2da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	60fb      	str	r3, [r7, #12]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60bb      	str	r3, [r7, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	e7fe      	b.n	800b2f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fc:	1e5a      	subs	r2, r3, #1
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d02c      	beq.n	800b368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b312:	2b00      	cmp	r3, #0
 800b314:	d128      	bne.n	800b368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fc46 	bl	8009bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <xTaskPriorityDisinherit+0xd4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <xTaskPriorityDisinherit+0xa4>
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <xTaskPriorityDisinherit+0xd4>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4a09      	ldr	r2, [pc, #36]	; (800b37c <xTaskPriorityDisinherit+0xd8>)
 800b356:	441a      	add	r2, r3
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f7fe fbc7 	bl	8009af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b368:	697b      	ldr	r3, [r7, #20]
	}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000d5c 	.word	0x20000d5c
 800b378:	20001238 	.word	0x20001238
 800b37c:	20000d60 	.word	0x20000d60

0800b380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b38a:	4b21      	ldr	r3, [pc, #132]	; (800b410 <prvAddCurrentTaskToDelayedList+0x90>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b390:	4b20      	ldr	r3, [pc, #128]	; (800b414 <prvAddCurrentTaskToDelayedList+0x94>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3304      	adds	r3, #4
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fc08 	bl	8009bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d10a      	bne.n	800b3ba <prvAddCurrentTaskToDelayedList+0x3a>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4819      	ldr	r0, [pc, #100]	; (800b418 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3b4:	f7fe fb9d 	bl	8009af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3b8:	e026      	b.n	800b408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3c2:	4b14      	ldr	r3, [pc, #80]	; (800b414 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d209      	bcs.n	800b3e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3d2:	4b12      	ldr	r3, [pc, #72]	; (800b41c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4610      	mov	r0, r2
 800b3e0:	f7fe fbab 	bl	8009b3a <vListInsert>
}
 800b3e4:	e010      	b.n	800b408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e6:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f7fe fba1 	bl	8009b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d202      	bcs.n	800b408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6013      	str	r3, [r2, #0]
}
 800b408:	bf00      	nop
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20001234 	.word	0x20001234
 800b414:	20000d5c 	.word	0x20000d5c
 800b418:	2000121c 	.word	0x2000121c
 800b41c:	200011ec 	.word	0x200011ec
 800b420:	200011e8 	.word	0x200011e8
 800b424:	20001250 	.word	0x20001250

0800b428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08a      	sub	sp, #40	; 0x28
 800b42c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b432:	f000 fb07 	bl	800ba44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b436:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <xTimerCreateTimerTask+0x80>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d021      	beq.n	800b482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b442:	2300      	movs	r3, #0
 800b444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b446:	1d3a      	adds	r2, r7, #4
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	f107 030c 	add.w	r3, r7, #12
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe fb07 	bl	8009a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	9202      	str	r2, [sp, #8]
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	2302      	movs	r3, #2
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	460a      	mov	r2, r1
 800b468:	4910      	ldr	r1, [pc, #64]	; (800b4ac <xTimerCreateTimerTask+0x84>)
 800b46a:	4811      	ldr	r0, [pc, #68]	; (800b4b0 <xTimerCreateTimerTask+0x88>)
 800b46c:	f7ff f8b4 	bl	800a5d8 <xTaskCreateStatic>
 800b470:	4603      	mov	r3, r0
 800b472:	4a10      	ldr	r2, [pc, #64]	; (800b4b4 <xTimerCreateTimerTask+0x8c>)
 800b474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <xTimerCreateTimerTask+0x8c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b47e:	2301      	movs	r3, #1
 800b480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	613b      	str	r3, [r7, #16]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b49e:	697b      	ldr	r3, [r7, #20]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	2000128c 	.word	0x2000128c
 800b4ac:	08011614 	.word	0x08011614
 800b4b0:	0800b5ed 	.word	0x0800b5ed
 800b4b4:	20001290 	.word	0x20001290

0800b4b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	; 0x28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10a      	bne.n	800b4e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	623b      	str	r3, [r7, #32]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4e6:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <xTimerGenericCommand+0x98>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d02a      	beq.n	800b544 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	dc18      	bgt.n	800b532 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b500:	f7ff feb2 	bl	800b268 <xTaskGetSchedulerState>
 800b504:	4603      	mov	r3, r0
 800b506:	2b02      	cmp	r3, #2
 800b508:	d109      	bne.n	800b51e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <xTimerGenericCommand+0x98>)
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f107 0110 	add.w	r1, r7, #16
 800b512:	2300      	movs	r3, #0
 800b514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b516:	f7fe fc77 	bl	8009e08 <xQueueGenericSend>
 800b51a:	6278      	str	r0, [r7, #36]	; 0x24
 800b51c:	e012      	b.n	800b544 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b51e:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <xTimerGenericCommand+0x98>)
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f107 0110 	add.w	r1, r7, #16
 800b526:	2300      	movs	r3, #0
 800b528:	2200      	movs	r2, #0
 800b52a:	f7fe fc6d 	bl	8009e08 <xQueueGenericSend>
 800b52e:	6278      	str	r0, [r7, #36]	; 0x24
 800b530:	e008      	b.n	800b544 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b532:	4b07      	ldr	r3, [pc, #28]	; (800b550 <xTimerGenericCommand+0x98>)
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	f107 0110 	add.w	r1, r7, #16
 800b53a:	2300      	movs	r3, #0
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	f7fe fd61 	bl	800a004 <xQueueGenericSendFromISR>
 800b542:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b546:	4618      	mov	r0, r3
 800b548:	3728      	adds	r7, #40	; 0x28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	2000128c 	.word	0x2000128c

0800b554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af02      	add	r7, sp, #8
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55e:	4b22      	ldr	r3, [pc, #136]	; (800b5e8 <prvProcessExpiredTimer+0x94>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	3304      	adds	r3, #4
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fb1d 	bl	8009bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b578:	f003 0304 	and.w	r3, r3, #4
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d022      	beq.n	800b5c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	699a      	ldr	r2, [r3, #24]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	18d1      	adds	r1, r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	6978      	ldr	r0, [r7, #20]
 800b58e:	f000 f8d1 	bl	800b734 <prvInsertTimerInActiveList>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01f      	beq.n	800b5d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b598:	2300      	movs	r3, #0
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2300      	movs	r3, #0
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f7ff ff88 	bl	800b4b8 <xTimerGenericCommand>
 800b5a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d113      	bne.n	800b5d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5cc:	f023 0301 	bic.w	r3, r3, #1
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	4798      	blx	r3
}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20001284 	.word	0x20001284

0800b5ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f857 	bl	800b6ac <prvGetNextExpireTime>
 800b5fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4619      	mov	r1, r3
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f803 	bl	800b610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b60a:	f000 f8d5 	bl	800b7b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b60e:	e7f1      	b.n	800b5f4 <prvTimerTask+0x8>

0800b610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b61a:	f7ff fa39 	bl	800aa90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b61e:	f107 0308 	add.w	r3, r7, #8
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f866 	bl	800b6f4 <prvSampleTimeNow>
 800b628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d130      	bne.n	800b692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <prvProcessTimerOrBlockTask+0x3c>
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d806      	bhi.n	800b64c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b63e:	f7ff fa35 	bl	800aaac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff85 	bl	800b554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b64a:	e024      	b.n	800b696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d008      	beq.n	800b664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <prvProcessTimerOrBlockTask+0x90>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d101      	bne.n	800b660 <prvProcessTimerOrBlockTask+0x50>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e000      	b.n	800b662 <prvProcessTimerOrBlockTask+0x52>
 800b660:	2300      	movs	r3, #0
 800b662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b664:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <prvProcessTimerOrBlockTask+0x94>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	4619      	mov	r1, r3
 800b672:	f7fe ff7d 	bl	800a570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b676:	f7ff fa19 	bl	800aaac <xTaskResumeAll>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10a      	bne.n	800b696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b680:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <prvProcessTimerOrBlockTask+0x98>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
}
 800b690:	e001      	b.n	800b696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b692:	f7ff fa0b 	bl	800aaac <xTaskResumeAll>
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20001288 	.word	0x20001288
 800b6a4:	2000128c 	.word	0x2000128c
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <prvGetNextExpireTime+0x44>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <prvGetNextExpireTime+0x16>
 800b6be:	2201      	movs	r2, #1
 800b6c0:	e000      	b.n	800b6c4 <prvGetNextExpireTime+0x18>
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d105      	bne.n	800b6dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <prvGetNextExpireTime+0x44>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	e001      	b.n	800b6e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20001284 	.word	0x20001284

0800b6f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6fc:	f7ff fa74 	bl	800abe8 <xTaskGetTickCount>
 800b700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <prvSampleTimeNow+0x3c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d205      	bcs.n	800b718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b70c:	f000 f936 	bl	800b97c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e002      	b.n	800b71e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b71e:	4a04      	ldr	r2, [pc, #16]	; (800b730 <prvSampleTimeNow+0x3c>)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b724:	68fb      	ldr	r3, [r7, #12]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20001294 	.word	0x20001294

0800b734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d812      	bhi.n	800b780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	429a      	cmp	r2, r3
 800b766:	d302      	bcc.n	800b76e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e01b      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b76e:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <prvInsertTimerInActiveList+0x7c>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fe f9de 	bl	8009b3a <vListInsert>
 800b77e:	e012      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d206      	bcs.n	800b796 <prvInsertTimerInActiveList+0x62>
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d302      	bcc.n	800b796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b790:	2301      	movs	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	e007      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <prvInsertTimerInActiveList+0x80>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	f7fe f9ca 	bl	8009b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001288 	.word	0x20001288
 800b7b4:	20001284 	.word	0x20001284

0800b7b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08e      	sub	sp, #56	; 0x38
 800b7bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7be:	e0ca      	b.n	800b956 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	da18      	bge.n	800b7f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7c6:	1d3b      	adds	r3, r7, #4
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	61fb      	str	r3, [r7, #28]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ee:	6850      	ldr	r0, [r2, #4]
 800b7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f2:	6892      	ldr	r2, [r2, #8]
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f2c0 80aa 	blt.w	800b954 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe f9cb 	bl	8009bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b816:	463b      	mov	r3, r7
 800b818:	4618      	mov	r0, r3
 800b81a:	f7ff ff6b 	bl	800b6f4 <prvSampleTimeNow>
 800b81e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b09      	cmp	r3, #9
 800b824:	f200 8097 	bhi.w	800b956 <prvProcessReceivedCommands+0x19e>
 800b828:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <prvProcessReceivedCommands+0x78>)
 800b82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82e:	bf00      	nop
 800b830:	0800b859 	.word	0x0800b859
 800b834:	0800b859 	.word	0x0800b859
 800b838:	0800b859 	.word	0x0800b859
 800b83c:	0800b8cd 	.word	0x0800b8cd
 800b840:	0800b8e1 	.word	0x0800b8e1
 800b844:	0800b92b 	.word	0x0800b92b
 800b848:	0800b859 	.word	0x0800b859
 800b84c:	0800b859 	.word	0x0800b859
 800b850:	0800b8cd 	.word	0x0800b8cd
 800b854:	0800b8e1 	.word	0x0800b8e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	b2da      	uxtb	r2, r3
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	18d1      	adds	r1, r2, r3
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b878:	f7ff ff5c 	bl	800b734 <prvInsertTimerInActiveList>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d069      	beq.n	800b956 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d05e      	beq.n	800b956 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	441a      	add	r2, r3
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8aa:	f7ff fe05 	bl	800b4b8 <xTimerGenericCommand>
 800b8ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d14f      	bne.n	800b956 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	61bb      	str	r3, [r7, #24]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8d2:	f023 0301 	bic.w	r3, r3, #1
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b8de:	e03a      	b.n	800b956 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	617b      	str	r3, [r7, #20]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	699a      	ldr	r2, [r3, #24]
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	18d1      	adds	r1, r2, r3
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b924:	f7ff ff06 	bl	800b734 <prvInsertTimerInActiveList>
					break;
 800b928:	e015      	b.n	800b956 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d103      	bne.n	800b940 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b93a:	f000 fbe1 	bl	800c100 <vPortFree>
 800b93e:	e00a      	b.n	800b956 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b952:	e000      	b.n	800b956 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b956:	4b08      	ldr	r3, [pc, #32]	; (800b978 <prvProcessReceivedCommands+0x1c0>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	1d39      	adds	r1, r7, #4
 800b95c:	2200      	movs	r2, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe fbec 	bl	800a13c <xQueueReceive>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	f47f af2a 	bne.w	800b7c0 <prvProcessReceivedCommands+0x8>
	}
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	3730      	adds	r7, #48	; 0x30
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	2000128c 	.word	0x2000128c

0800b97c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b982:	e048      	b.n	800ba16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b984:	4b2d      	ldr	r3, [pc, #180]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b98e:	4b2b      	ldr	r3, [pc, #172]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe f905 	bl	8009bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d02e      	beq.n	800ba16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4413      	add	r3, r2
 800b9c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d90e      	bls.n	800b9e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9d6:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	f7fe f8aa 	bl	8009b3a <vListInsert>
 800b9e6:	e016      	b.n	800ba16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fd60 	bl	800b4b8 <xTimerGenericCommand>
 800b9f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	603b      	str	r3, [r7, #0]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1b1      	bne.n	800b984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba20:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <prvSwitchTimerLists+0xc4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <prvSwitchTimerLists+0xc0>)
 800ba2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba2e:	4a04      	ldr	r2, [pc, #16]	; (800ba40 <prvSwitchTimerLists+0xc4>)
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	6013      	str	r3, [r2, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	20001284 	.word	0x20001284
 800ba40:	20001288 	.word	0x20001288

0800ba44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba4a:	f000 f96b 	bl	800bd24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba4e:	4b15      	ldr	r3, [pc, #84]	; (800baa4 <prvCheckForValidListAndQueue+0x60>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d120      	bne.n	800ba98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba56:	4814      	ldr	r0, [pc, #80]	; (800baa8 <prvCheckForValidListAndQueue+0x64>)
 800ba58:	f7fe f81e 	bl	8009a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba5c:	4813      	ldr	r0, [pc, #76]	; (800baac <prvCheckForValidListAndQueue+0x68>)
 800ba5e:	f7fe f81b 	bl	8009a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba62:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <prvCheckForValidListAndQueue+0x6c>)
 800ba64:	4a10      	ldr	r2, [pc, #64]	; (800baa8 <prvCheckForValidListAndQueue+0x64>)
 800ba66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba68:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <prvCheckForValidListAndQueue+0x70>)
 800ba6a:	4a10      	ldr	r2, [pc, #64]	; (800baac <prvCheckForValidListAndQueue+0x68>)
 800ba6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba6e:	2300      	movs	r3, #0
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <prvCheckForValidListAndQueue+0x74>)
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <prvCheckForValidListAndQueue+0x78>)
 800ba76:	2110      	movs	r1, #16
 800ba78:	200a      	movs	r0, #10
 800ba7a:	f7fe f929 	bl	8009cd0 <xQueueGenericCreateStatic>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	4a08      	ldr	r2, [pc, #32]	; (800baa4 <prvCheckForValidListAndQueue+0x60>)
 800ba82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba84:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <prvCheckForValidListAndQueue+0x60>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d005      	beq.n	800ba98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba8c:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <prvCheckForValidListAndQueue+0x60>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	490b      	ldr	r1, [pc, #44]	; (800bac0 <prvCheckForValidListAndQueue+0x7c>)
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fd42 	bl	800a51c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba98:	f000 f974 	bl	800bd84 <vPortExitCritical>
}
 800ba9c:	bf00      	nop
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	2000128c 	.word	0x2000128c
 800baa8:	2000125c 	.word	0x2000125c
 800baac:	20001270 	.word	0x20001270
 800bab0:	20001284 	.word	0x20001284
 800bab4:	20001288 	.word	0x20001288
 800bab8:	20001338 	.word	0x20001338
 800babc:	20001298 	.word	0x20001298
 800bac0:	0801161c 	.word	0x0801161c

0800bac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3b04      	subs	r3, #4
 800bad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800badc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3b04      	subs	r3, #4
 800bae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f023 0201 	bic.w	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3b04      	subs	r3, #4
 800baf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800baf4:	4a0c      	ldr	r2, [pc, #48]	; (800bb28 <pxPortInitialiseStack+0x64>)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3b14      	subs	r3, #20
 800bafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3b04      	subs	r3, #4
 800bb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f06f 0202 	mvn.w	r2, #2
 800bb12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3b20      	subs	r3, #32
 800bb18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	0800bb2d 	.word	0x0800bb2d

0800bb2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <prvTaskExitError+0x54>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3e:	d00a      	beq.n	800bb56 <prvTaskExitError+0x2a>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	60fb      	str	r3, [r7, #12]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <prvTaskExitError+0x28>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60bb      	str	r3, [r7, #8]
}
 800bb68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb6a:	bf00      	nop
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0fc      	beq.n	800bb6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	200000fc 	.word	0x200000fc
	...

0800bb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb90:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <pxCurrentTCBConst2>)
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	6808      	ldr	r0, [r1, #0]
 800bb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9a:	f380 8809 	msr	PSP, r0
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f04f 0000 	mov.w	r0, #0
 800bba6:	f380 8811 	msr	BASEPRI, r0
 800bbaa:	4770      	bx	lr
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst2>:
 800bbb0:	20000d5c 	.word	0x20000d5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbb8:	4808      	ldr	r0, [pc, #32]	; (800bbdc <prvPortStartFirstTask+0x24>)
 800bbba:	6800      	ldr	r0, [r0, #0]
 800bbbc:	6800      	ldr	r0, [r0, #0]
 800bbbe:	f380 8808 	msr	MSP, r0
 800bbc2:	f04f 0000 	mov.w	r0, #0
 800bbc6:	f380 8814 	msr	CONTROL, r0
 800bbca:	b662      	cpsie	i
 800bbcc:	b661      	cpsie	f
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	df00      	svc	0
 800bbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbda:	bf00      	nop
 800bbdc:	e000ed08 	.word	0xe000ed08

0800bbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbe6:	4b46      	ldr	r3, [pc, #280]	; (800bd00 <xPortStartScheduler+0x120>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a46      	ldr	r2, [pc, #280]	; (800bd04 <xPortStartScheduler+0x124>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d10a      	bne.n	800bc06 <xPortStartScheduler+0x26>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	613b      	str	r3, [r7, #16]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc06:	4b3e      	ldr	r3, [pc, #248]	; (800bd00 <xPortStartScheduler+0x120>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a3f      	ldr	r2, [pc, #252]	; (800bd08 <xPortStartScheduler+0x128>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d10a      	bne.n	800bc26 <xPortStartScheduler+0x46>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	60fb      	str	r3, [r7, #12]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc26:	4b39      	ldr	r3, [pc, #228]	; (800bd0c <xPortStartScheduler+0x12c>)
 800bc28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	22ff      	movs	r2, #255	; 0xff
 800bc36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	4b31      	ldr	r3, [pc, #196]	; (800bd10 <xPortStartScheduler+0x130>)
 800bc4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc4e:	4b31      	ldr	r3, [pc, #196]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc50:	2207      	movs	r2, #7
 800bc52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc54:	e009      	b.n	800bc6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc56:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	4a2d      	ldr	r2, [pc, #180]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc72:	2b80      	cmp	r3, #128	; 0x80
 800bc74:	d0ef      	beq.n	800bc56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc76:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f1c3 0307 	rsb	r3, r3, #7
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d00a      	beq.n	800bc98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60bb      	str	r3, [r7, #8]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc98:	4b1e      	ldr	r3, [pc, #120]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	4a1d      	ldr	r2, [pc, #116]	; (800bd14 <xPortStartScheduler+0x134>)
 800bca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bca2:	4b1c      	ldr	r3, [pc, #112]	; (800bd14 <xPortStartScheduler+0x134>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcaa:	4a1a      	ldr	r2, [pc, #104]	; (800bd14 <xPortStartScheduler+0x134>)
 800bcac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcb6:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a17      	ldr	r2, [pc, #92]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a14      	ldr	r2, [pc, #80]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcce:	f000 f8dd 	bl	800be8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcd2:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <xPortStartScheduler+0x13c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcd8:	f000 f8fc 	bl	800bed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcdc:	4b10      	ldr	r3, [pc, #64]	; (800bd20 <xPortStartScheduler+0x140>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <xPortStartScheduler+0x140>)
 800bce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bce8:	f7ff ff66 	bl	800bbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcec:	f7ff f846 	bl	800ad7c <vTaskSwitchContext>
	prvTaskExitError();
 800bcf0:	f7ff ff1c 	bl	800bb2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	e000ed00 	.word	0xe000ed00
 800bd04:	410fc271 	.word	0x410fc271
 800bd08:	410fc270 	.word	0x410fc270
 800bd0c:	e000e400 	.word	0xe000e400
 800bd10:	20001388 	.word	0x20001388
 800bd14:	2000138c 	.word	0x2000138c
 800bd18:	e000ed20 	.word	0xe000ed20
 800bd1c:	200000fc 	.word	0x200000fc
 800bd20:	e000ef34 	.word	0xe000ef34

0800bd24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	607b      	str	r3, [r7, #4]
}
 800bd3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	4a0d      	ldr	r2, [pc, #52]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd48:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10f      	bne.n	800bd70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd50:	4b0b      	ldr	r3, [pc, #44]	; (800bd80 <vPortEnterCritical+0x5c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00a      	beq.n	800bd70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	603b      	str	r3, [r7, #0]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <vPortEnterCritical+0x4a>
	}
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	200000fc 	.word	0x200000fc
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <vPortExitCritical+0x50>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <vPortExitCritical+0x24>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	607b      	str	r3, [r7, #4]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdb2:	4b08      	ldr	r3, [pc, #32]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d105      	bne.n	800bdc6 <vPortExitCritical+0x42>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f383 8811 	msr	BASEPRI, r3
}
 800bdc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	200000fc 	.word	0x200000fc
	...

0800bde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bde0:	f3ef 8009 	mrs	r0, PSP
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	4b15      	ldr	r3, [pc, #84]	; (800be40 <pxCurrentTCBConst>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	f01e 0f10 	tst.w	lr, #16
 800bdf0:	bf08      	it	eq
 800bdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfa:	6010      	str	r0, [r2, #0]
 800bdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be04:	f380 8811 	msr	BASEPRI, r0
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f7fe ffb4 	bl	800ad7c <vTaskSwitchContext>
 800be14:	f04f 0000 	mov.w	r0, #0
 800be18:	f380 8811 	msr	BASEPRI, r0
 800be1c:	bc09      	pop	{r0, r3}
 800be1e:	6819      	ldr	r1, [r3, #0]
 800be20:	6808      	ldr	r0, [r1, #0]
 800be22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be26:	f01e 0f10 	tst.w	lr, #16
 800be2a:	bf08      	it	eq
 800be2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be30:	f380 8809 	msr	PSP, r0
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	f3af 8000 	nop.w

0800be40 <pxCurrentTCBConst>:
 800be40:	20000d5c 	.word	0x20000d5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be44:	bf00      	nop
 800be46:	bf00      	nop

0800be48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be62:	f7fe fed1 	bl	800ac08 <xTaskIncrementTick>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <xPortSysTickHandler+0x40>)
 800be6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	f383 8811 	msr	BASEPRI, r3
}
 800be7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	e000ed04 	.word	0xe000ed04

0800be8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <vPortSetupTimerInterrupt+0x34>)
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <vPortSetupTimerInterrupt+0x38>)
 800be98:	2200      	movs	r2, #0
 800be9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <vPortSetupTimerInterrupt+0x3c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a0a      	ldr	r2, [pc, #40]	; (800becc <vPortSetupTimerInterrupt+0x40>)
 800bea2:	fba2 2303 	umull	r2, r3, r2, r3
 800bea6:	099b      	lsrs	r3, r3, #6
 800bea8:	4a09      	ldr	r2, [pc, #36]	; (800bed0 <vPortSetupTimerInterrupt+0x44>)
 800beaa:	3b01      	subs	r3, #1
 800beac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800beae:	4b04      	ldr	r3, [pc, #16]	; (800bec0 <vPortSetupTimerInterrupt+0x34>)
 800beb0:	2207      	movs	r2, #7
 800beb2:	601a      	str	r2, [r3, #0]
}
 800beb4:	bf00      	nop
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	e000e010 	.word	0xe000e010
 800bec4:	e000e018 	.word	0xe000e018
 800bec8:	2000003c 	.word	0x2000003c
 800becc:	10624dd3 	.word	0x10624dd3
 800bed0:	e000e014 	.word	0xe000e014

0800bed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bee4 <vPortEnableVFP+0x10>
 800bed8:	6801      	ldr	r1, [r0, #0]
 800beda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bede:	6001      	str	r1, [r0, #0]
 800bee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bee2:	bf00      	nop
 800bee4:	e000ed88 	.word	0xe000ed88

0800bee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800beee:	f3ef 8305 	mrs	r3, IPSR
 800bef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b0f      	cmp	r3, #15
 800bef8:	d914      	bls.n	800bf24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800befa:	4a17      	ldr	r2, [pc, #92]	; (800bf58 <vPortValidateInterruptPriority+0x70>)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf04:	4b15      	ldr	r3, [pc, #84]	; (800bf5c <vPortValidateInterruptPriority+0x74>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	7afa      	ldrb	r2, [r7, #11]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d20a      	bcs.n	800bf24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	607b      	str	r3, [r7, #4]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf24:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <vPortValidateInterruptPriority+0x78>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf2c:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <vPortValidateInterruptPriority+0x7c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d90a      	bls.n	800bf4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	603b      	str	r3, [r7, #0]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <vPortValidateInterruptPriority+0x60>
	}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	e000e3f0 	.word	0xe000e3f0
 800bf5c:	20001388 	.word	0x20001388
 800bf60:	e000ed0c 	.word	0xe000ed0c
 800bf64:	2000138c 	.word	0x2000138c

0800bf68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08a      	sub	sp, #40	; 0x28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf74:	f7fe fd8c 	bl	800aa90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf78:	4b5b      	ldr	r3, [pc, #364]	; (800c0e8 <pvPortMalloc+0x180>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf80:	f000 f920 	bl	800c1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf84:	4b59      	ldr	r3, [pc, #356]	; (800c0ec <pvPortMalloc+0x184>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f040 8093 	bne.w	800c0b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01d      	beq.n	800bfd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf98:	2208      	movs	r2, #8
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d014      	beq.n	800bfd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f003 0307 	and.w	r3, r3, #7
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <pvPortMalloc+0x6c>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d06e      	beq.n	800c0b8 <pvPortMalloc+0x150>
 800bfda:	4b45      	ldr	r3, [pc, #276]	; (800c0f0 <pvPortMalloc+0x188>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d869      	bhi.n	800c0b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfe4:	4b43      	ldr	r3, [pc, #268]	; (800c0f4 <pvPortMalloc+0x18c>)
 800bfe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfe8:	4b42      	ldr	r3, [pc, #264]	; (800c0f4 <pvPortMalloc+0x18c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfee:	e004      	b.n	800bffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	429a      	cmp	r2, r3
 800c002:	d903      	bls.n	800c00c <pvPortMalloc+0xa4>
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1f1      	bne.n	800bff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c00c:	4b36      	ldr	r3, [pc, #216]	; (800c0e8 <pvPortMalloc+0x180>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c012:	429a      	cmp	r2, r3
 800c014:	d050      	beq.n	800c0b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2208      	movs	r2, #8
 800c01c:	4413      	add	r3, r2
 800c01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	2308      	movs	r3, #8
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	429a      	cmp	r2, r3
 800c036:	d91f      	bls.n	800c078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00a      	beq.n	800c060 <pvPortMalloc+0xf8>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	613b      	str	r3, [r7, #16]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	1ad2      	subs	r2, r2, r3
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c072:	69b8      	ldr	r0, [r7, #24]
 800c074:	f000 f908 	bl	800c288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c078:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <pvPortMalloc+0x188>)
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <pvPortMalloc+0x188>)
 800c084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c086:	4b1a      	ldr	r3, [pc, #104]	; (800c0f0 <pvPortMalloc+0x188>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	4b1b      	ldr	r3, [pc, #108]	; (800c0f8 <pvPortMalloc+0x190>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d203      	bcs.n	800c09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c092:	4b17      	ldr	r3, [pc, #92]	; (800c0f0 <pvPortMalloc+0x188>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a18      	ldr	r2, [pc, #96]	; (800c0f8 <pvPortMalloc+0x190>)
 800c098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	4b13      	ldr	r3, [pc, #76]	; (800c0ec <pvPortMalloc+0x184>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0ae:	4b13      	ldr	r3, [pc, #76]	; (800c0fc <pvPortMalloc+0x194>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	4a11      	ldr	r2, [pc, #68]	; (800c0fc <pvPortMalloc+0x194>)
 800c0b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0b8:	f7fe fcf8 	bl	800aaac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	f003 0307 	and.w	r3, r3, #7
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00a      	beq.n	800c0dc <pvPortMalloc+0x174>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	60fb      	str	r3, [r7, #12]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <pvPortMalloc+0x172>
	return pvReturn;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3728      	adds	r7, #40	; 0x28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20004f98 	.word	0x20004f98
 800c0ec:	20004fac 	.word	0x20004fac
 800c0f0:	20004f9c 	.word	0x20004f9c
 800c0f4:	20004f90 	.word	0x20004f90
 800c0f8:	20004fa0 	.word	0x20004fa0
 800c0fc:	20004fa4 	.word	0x20004fa4

0800c100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d04d      	beq.n	800c1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c112:	2308      	movs	r3, #8
 800c114:	425b      	negs	r3, r3
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	4413      	add	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <vPortFree+0xb8>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10a      	bne.n	800c144 <vPortFree+0x44>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	60fb      	str	r3, [r7, #12]
}
 800c140:	bf00      	nop
 800c142:	e7fe      	b.n	800c142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00a      	beq.n	800c162 <vPortFree+0x62>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	60bb      	str	r3, [r7, #8]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <vPortFree+0xb8>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4013      	ands	r3, r2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01e      	beq.n	800c1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11a      	bne.n	800c1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <vPortFree+0xb8>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	43db      	mvns	r3, r3
 800c182:	401a      	ands	r2, r3
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c188:	f7fe fc82 	bl	800aa90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <vPortFree+0xbc>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4413      	add	r3, r2
 800c196:	4a09      	ldr	r2, [pc, #36]	; (800c1bc <vPortFree+0xbc>)
 800c198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c19a:	6938      	ldr	r0, [r7, #16]
 800c19c:	f000 f874 	bl	800c288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1a0:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <vPortFree+0xc0>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	4a06      	ldr	r2, [pc, #24]	; (800c1c0 <vPortFree+0xc0>)
 800c1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1aa:	f7fe fc7f 	bl	800aaac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20004fac 	.word	0x20004fac
 800c1bc:	20004f9c 	.word	0x20004f9c
 800c1c0:	20004fa8 	.word	0x20004fa8

0800c1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1d0:	4b27      	ldr	r3, [pc, #156]	; (800c270 <prvHeapInit+0xac>)
 800c1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00c      	beq.n	800c1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3307      	adds	r3, #7
 800c1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 0307 	bic.w	r3, r3, #7
 800c1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	4a1f      	ldr	r2, [pc, #124]	; (800c270 <prvHeapInit+0xac>)
 800c1f4:	4413      	add	r3, r2
 800c1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1fc:	4a1d      	ldr	r2, [pc, #116]	; (800c274 <prvHeapInit+0xb0>)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c202:	4b1c      	ldr	r3, [pc, #112]	; (800c274 <prvHeapInit+0xb0>)
 800c204:	2200      	movs	r2, #0
 800c206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	4413      	add	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c210:	2208      	movs	r2, #8
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f023 0307 	bic.w	r3, r3, #7
 800c21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4a15      	ldr	r2, [pc, #84]	; (800c278 <prvHeapInit+0xb4>)
 800c224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c226:	4b14      	ldr	r3, [pc, #80]	; (800c278 <prvHeapInit+0xb4>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2200      	movs	r2, #0
 800c22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <prvHeapInit+0xb4>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c244:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <prvHeapInit+0xb4>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <prvHeapInit+0xb8>)
 800c252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	4a09      	ldr	r2, [pc, #36]	; (800c280 <prvHeapInit+0xbc>)
 800c25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c25c:	4b09      	ldr	r3, [pc, #36]	; (800c284 <prvHeapInit+0xc0>)
 800c25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c262:	601a      	str	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	20001390 	.word	0x20001390
 800c274:	20004f90 	.word	0x20004f90
 800c278:	20004f98 	.word	0x20004f98
 800c27c:	20004fa0 	.word	0x20004fa0
 800c280:	20004f9c 	.word	0x20004f9c
 800c284:	20004fac 	.word	0x20004fac

0800c288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c290:	4b28      	ldr	r3, [pc, #160]	; (800c334 <prvInsertBlockIntoFreeList+0xac>)
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e002      	b.n	800c29c <prvInsertBlockIntoFreeList+0x14>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	60fb      	str	r3, [r7, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d8f7      	bhi.n	800c296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d108      	bne.n	800c2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d118      	bne.n	800c310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b15      	ldr	r3, [pc, #84]	; (800c338 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d00d      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	441a      	add	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	e008      	b.n	800c318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <prvInsertBlockIntoFreeList+0xb0>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	e003      	b.n	800c318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d002      	beq.n	800c326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c326:	bf00      	nop
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	20004f90 	.word	0x20004f90
 800c338:	20004f98 	.word	0x20004f98

0800c33c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c340:	2200      	movs	r2, #0
 800c342:	490e      	ldr	r1, [pc, #56]	; (800c37c <MX_USB_DEVICE_Init+0x40>)
 800c344:	480e      	ldr	r0, [pc, #56]	; (800c380 <MX_USB_DEVICE_Init+0x44>)
 800c346:	f7fb ff61 	bl	800820c <USBD_Init>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c350:	f7f5 fa9c 	bl	800188c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c354:	490b      	ldr	r1, [pc, #44]	; (800c384 <MX_USB_DEVICE_Init+0x48>)
 800c356:	480a      	ldr	r0, [pc, #40]	; (800c380 <MX_USB_DEVICE_Init+0x44>)
 800c358:	f7fb ff88 	bl	800826c <USBD_RegisterClass>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c362:	f7f5 fa93 	bl	800188c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c366:	4806      	ldr	r0, [pc, #24]	; (800c380 <MX_USB_DEVICE_Init+0x44>)
 800c368:	f7fb ffb6 	bl	80082d8 <USBD_Start>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c372:	f7f5 fa8b 	bl	800188c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c376:	bf00      	nop
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000100 	.word	0x20000100
 800c380:	20004fb0 	.word	0x20004fb0
 800c384:	20000048 	.word	0x20000048

0800c388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	2212      	movs	r2, #18
 800c398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c39a:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	2000011c 	.word	0x2000011c

0800c3ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6039      	str	r1, [r7, #0]
 800c3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3be:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	20000130 	.word	0x20000130

0800c3d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	6039      	str	r1, [r7, #0]
 800c3da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d105      	bne.n	800c3ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	4907      	ldr	r1, [pc, #28]	; (800c404 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3e6:	4808      	ldr	r0, [pc, #32]	; (800c408 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3e8:	f7fd f922 	bl	8009630 <USBD_GetString>
 800c3ec:	e004      	b.n	800c3f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	4904      	ldr	r1, [pc, #16]	; (800c404 <USBD_FS_ProductStrDescriptor+0x34>)
 800c3f2:	4805      	ldr	r0, [pc, #20]	; (800c408 <USBD_FS_ProductStrDescriptor+0x38>)
 800c3f4:	f7fd f91c 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3f8:	4b02      	ldr	r3, [pc, #8]	; (800c404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	2000528c 	.word	0x2000528c
 800c408:	08011624 	.word	0x08011624

0800c40c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	6039      	str	r1, [r7, #0]
 800c416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	4904      	ldr	r1, [pc, #16]	; (800c42c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c41c:	4804      	ldr	r0, [pc, #16]	; (800c430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c41e:	f7fd f907 	bl	8009630 <USBD_GetString>
  return USBD_StrDesc;
 800c422:	4b02      	ldr	r3, [pc, #8]	; (800c42c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	2000528c 	.word	0x2000528c
 800c430:	0801163c 	.word	0x0801163c

0800c434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	221a      	movs	r2, #26
 800c444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c446:	f000 f843 	bl	800c4d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c44a:	4b02      	ldr	r3, [pc, #8]	; (800c454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20000134 	.word	0x20000134

0800c458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c464:	79fb      	ldrb	r3, [r7, #7]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	4907      	ldr	r1, [pc, #28]	; (800c48c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c46e:	4808      	ldr	r0, [pc, #32]	; (800c490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c470:	f7fd f8de 	bl	8009630 <USBD_GetString>
 800c474:	e004      	b.n	800c480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	4904      	ldr	r1, [pc, #16]	; (800c48c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c47a:	4805      	ldr	r0, [pc, #20]	; (800c490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c47c:	f7fd f8d8 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c480:	4b02      	ldr	r3, [pc, #8]	; (800c48c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	2000528c 	.word	0x2000528c
 800c490:	08011650 	.word	0x08011650

0800c494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	6039      	str	r1, [r7, #0]
 800c49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d105      	bne.n	800c4b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	4907      	ldr	r1, [pc, #28]	; (800c4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4aa:	4808      	ldr	r0, [pc, #32]	; (800c4cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4ac:	f7fd f8c0 	bl	8009630 <USBD_GetString>
 800c4b0:	e004      	b.n	800c4bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	4904      	ldr	r1, [pc, #16]	; (800c4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4b6:	4805      	ldr	r0, [pc, #20]	; (800c4cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4b8:	f7fd f8ba 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4bc:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2000528c 	.word	0x2000528c
 800c4cc:	0801165c 	.word	0x0801165c

0800c4d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4d6:	4b0f      	ldr	r3, [pc, #60]	; (800c514 <Get_SerialNum+0x44>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4dc:	4b0e      	ldr	r3, [pc, #56]	; (800c518 <Get_SerialNum+0x48>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4e2:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <Get_SerialNum+0x4c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d009      	beq.n	800c50a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4f6:	2208      	movs	r2, #8
 800c4f8:	4909      	ldr	r1, [pc, #36]	; (800c520 <Get_SerialNum+0x50>)
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f000 f814 	bl	800c528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c500:	2204      	movs	r2, #4
 800c502:	4908      	ldr	r1, [pc, #32]	; (800c524 <Get_SerialNum+0x54>)
 800c504:	68b8      	ldr	r0, [r7, #8]
 800c506:	f000 f80f 	bl	800c528 <IntToUnicode>
  }
}
 800c50a:	bf00      	nop
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	1fff7a10 	.word	0x1fff7a10
 800c518:	1fff7a14 	.word	0x1fff7a14
 800c51c:	1fff7a18 	.word	0x1fff7a18
 800c520:	20000136 	.word	0x20000136
 800c524:	20000146 	.word	0x20000146

0800c528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	4613      	mov	r3, r2
 800c534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]
 800c53e:	e027      	b.n	800c590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	0f1b      	lsrs	r3, r3, #28
 800c544:	2b09      	cmp	r3, #9
 800c546:	d80b      	bhi.n	800c560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	0f1b      	lsrs	r3, r3, #28
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4619      	mov	r1, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	440b      	add	r3, r1
 800c558:	3230      	adds	r2, #48	; 0x30
 800c55a:	b2d2      	uxtb	r2, r2
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	e00a      	b.n	800c576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	0f1b      	lsrs	r3, r3, #28
 800c564:	b2da      	uxtb	r2, r3
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	4619      	mov	r1, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	440b      	add	r3, r1
 800c570:	3237      	adds	r2, #55	; 0x37
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	011b      	lsls	r3, r3, #4
 800c57a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	3301      	adds	r3, #1
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	3301      	adds	r3, #1
 800c58e:	75fb      	strb	r3, [r7, #23]
 800c590:	7dfa      	ldrb	r2, [r7, #23]
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	429a      	cmp	r2, r3
 800c596:	d3d3      	bcc.n	800c540 <IntToUnicode+0x18>
  }
}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	371c      	adds	r7, #28
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
	...

0800c5a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	60da      	str	r2, [r3, #12]
 800c5be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5c8:	d13a      	bne.n	800c640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	613b      	str	r3, [r7, #16]
 800c5ce:	4b1e      	ldr	r3, [pc, #120]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d2:	4a1d      	ldr	r2, [pc, #116]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c5d4:	f043 0301 	orr.w	r3, r3, #1
 800c5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5da:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c5ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c5f8:	230a      	movs	r3, #10
 800c5fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5fc:	f107 0314 	add.w	r3, r7, #20
 800c600:	4619      	mov	r1, r3
 800c602:	4812      	ldr	r0, [pc, #72]	; (800c64c <HAL_PCD_MspInit+0xa4>)
 800c604:	f7f6 fc0c 	bl	8002e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c608:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60c:	4a0e      	ldr	r2, [pc, #56]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c612:	6353      	str	r3, [r2, #52]	; 0x34
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
 800c618:	4b0b      	ldr	r3, [pc, #44]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c61c:	4a0a      	ldr	r2, [pc, #40]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c61e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c622:	6453      	str	r3, [r2, #68]	; 0x44
 800c624:	4b08      	ldr	r3, [pc, #32]	; (800c648 <HAL_PCD_MspInit+0xa0>)
 800c626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c630:	2200      	movs	r2, #0
 800c632:	2105      	movs	r1, #5
 800c634:	2043      	movs	r0, #67	; 0x43
 800c636:	f7f6 f8df 	bl	80027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c63a:	2043      	movs	r0, #67	; 0x43
 800c63c:	f7f6 f8f8 	bl	8002830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c640:	bf00      	nop
 800c642:	3728      	adds	r7, #40	; 0x28
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	40023800 	.word	0x40023800
 800c64c:	40020000 	.word	0x40020000

0800c650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f7fb fe83 	bl	8008372 <USBD_LL_SetupStage>
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4613      	mov	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	4413      	add	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	440b      	add	r3, r1
 800c694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7fb febd 	bl	800841c <USBD_LL_DataOutStage>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	440b      	add	r3, r1
 800c6ca:	334c      	adds	r3, #76	; 0x4c
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7fb ff56 	bl	8008582 <USBD_LL_DataInStage>
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fc f88a 	bl	8008806 <USBD_LL_SOF>
}
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c702:	2301      	movs	r3, #1
 800c704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d001      	beq.n	800c712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c70e:	f7f5 f8bd 	bl	800188c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c718:	7bfa      	ldrb	r2, [r7, #15]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fc f834 	bl	800878a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fb ffdc 	bl	80086e6 <USBD_LL_Reset>
}
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c746:	4618      	mov	r0, r3
 800c748:	f7fc f82f 	bl	80087aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6812      	ldr	r2, [r2, #0]
 800c75a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c75e:	f043 0301 	orr.w	r3, r3, #1
 800c762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a1b      	ldr	r3, [r3, #32]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d005      	beq.n	800c778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c76c:	4b04      	ldr	r3, [pc, #16]	; (800c780 <HAL_PCD_SuspendCallback+0x48>)
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	4a03      	ldr	r2, [pc, #12]	; (800c780 <HAL_PCD_SuspendCallback+0x48>)
 800c772:	f043 0306 	orr.w	r3, r3, #6
 800c776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	e000ed00 	.word	0xe000ed00

0800c784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c792:	4618      	mov	r0, r3
 800c794:	f7fc f81f 	bl	80087d6 <USBD_LL_Resume>
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7b2:	78fa      	ldrb	r2, [r7, #3]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fc f877 	bl	80088aa <USBD_LL_IsoOUTIncomplete>
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fc f833 	bl	8008846 <USBD_LL_IsoINIncomplete>
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fc f889 	bl	800890e <USBD_LL_DevConnected>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c812:	4618      	mov	r0, r3
 800c814:	f7fc f886 	bl	8008924 <USBD_LL_DevDisconnected>
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d13c      	bne.n	800c8aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c830:	4a20      	ldr	r2, [pc, #128]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a1e      	ldr	r2, [pc, #120]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c83c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c840:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c848:	4b1a      	ldr	r3, [pc, #104]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c84a:	2204      	movs	r2, #4
 800c84c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c84e:	4b19      	ldr	r3, [pc, #100]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c850:	2202      	movs	r2, #2
 800c852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c854:	4b17      	ldr	r3, [pc, #92]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c856:	2200      	movs	r2, #0
 800c858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c85a:	4b16      	ldr	r3, [pc, #88]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c85c:	2202      	movs	r2, #2
 800c85e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c860:	4b14      	ldr	r3, [pc, #80]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c862:	2200      	movs	r2, #0
 800c864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c866:	4b13      	ldr	r3, [pc, #76]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c868:	2200      	movs	r2, #0
 800c86a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c86c:	4b11      	ldr	r3, [pc, #68]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c86e:	2200      	movs	r2, #0
 800c870:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c872:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c874:	2200      	movs	r2, #0
 800c876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c878:	4b0e      	ldr	r3, [pc, #56]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c87e:	480d      	ldr	r0, [pc, #52]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c880:	f7f6 fc6b 	bl	800315a <HAL_PCD_Init>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c88a:	f7f4 ffff 	bl	800188c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c88e:	2180      	movs	r1, #128	; 0x80
 800c890:	4808      	ldr	r0, [pc, #32]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c892:	f7f7 feaa 	bl	80045ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c896:	2240      	movs	r2, #64	; 0x40
 800c898:	2100      	movs	r1, #0
 800c89a:	4806      	ldr	r0, [pc, #24]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c89c:	f7f7 fe5e 	bl	800455c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8a0:	2280      	movs	r2, #128	; 0x80
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	4803      	ldr	r0, [pc, #12]	; (800c8b4 <USBD_LL_Init+0x94>)
 800c8a6:	f7f7 fe59 	bl	800455c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	2000548c 	.word	0x2000548c

0800c8b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7f6 fd60 	bl	8003394 <HAL_PCD_Start>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 f930 	bl	800cb40 <USBD_Get_USB_Status>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	4608      	mov	r0, r1
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	70fb      	strb	r3, [r7, #3]
 800c900:	460b      	mov	r3, r1
 800c902:	70bb      	strb	r3, [r7, #2]
 800c904:	4613      	mov	r3, r2
 800c906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c916:	78bb      	ldrb	r3, [r7, #2]
 800c918:	883a      	ldrh	r2, [r7, #0]
 800c91a:	78f9      	ldrb	r1, [r7, #3]
 800c91c:	f7f7 fa31 	bl	8003d82 <HAL_PCD_EP_Open>
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f90a 	bl	800cb40 <USBD_Get_USB_Status>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c930:	7bbb      	ldrb	r3, [r7, #14]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	460b      	mov	r3, r1
 800c944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c954:	78fa      	ldrb	r2, [r7, #3]
 800c956:	4611      	mov	r1, r2
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f7 fa7a 	bl	8003e52 <HAL_PCD_EP_Close>
 800c95e:	4603      	mov	r3, r0
 800c960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f8eb 	bl	800cb40 <USBD_Get_USB_Status>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	460b      	mov	r3, r1
 800c982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c992:	78fa      	ldrb	r2, [r7, #3]
 800c994:	4611      	mov	r1, r2
 800c996:	4618      	mov	r0, r3
 800c998:	f7f7 fb3a 	bl	8004010 <HAL_PCD_EP_SetStall>
 800c99c:	4603      	mov	r3, r0
 800c99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 f8cc 	bl	800cb40 <USBD_Get_USB_Status>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b084      	sub	sp, #16
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9d0:	78fa      	ldrb	r2, [r7, #3]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7f7 fb7f 	bl	80040d8 <HAL_PCD_EP_ClrStall>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 f8ad 	bl	800cb40 <USBD_Get_USB_Status>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	da0b      	bge.n	800ca28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca16:	68f9      	ldr	r1, [r7, #12]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	440b      	add	r3, r1
 800ca22:	333e      	adds	r3, #62	; 0x3e
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	e00b      	b.n	800ca40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	4613      	mov	r3, r2
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	440b      	add	r3, r1
 800ca3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ca3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	460b      	mov	r3, r1
 800ca56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca66:	78fa      	ldrb	r2, [r7, #3]
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f7 f964 	bl	8003d38 <HAL_PCD_SetAddress>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 f862 	bl	800cb40 <USBD_Get_USB_Status>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b086      	sub	sp, #24
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]
 800ca96:	460b      	mov	r3, r1
 800ca98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800caa8:	7af9      	ldrb	r1, [r7, #11]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	f7f7 fa65 	bl	8003f7c <HAL_PCD_EP_Transmit>
 800cab2:	4603      	mov	r3, r0
 800cab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f841 	bl	800cb40 <USBD_Get_USB_Status>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cac2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	607a      	str	r2, [r7, #4]
 800cad6:	603b      	str	r3, [r7, #0]
 800cad8:	460b      	mov	r3, r1
 800cada:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800caea:	7af9      	ldrb	r1, [r7, #11]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	f7f7 f9f9 	bl	8003ee6 <HAL_PCD_EP_Receive>
 800caf4:	4603      	mov	r3, r0
 800caf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 f820 	bl	800cb40 <USBD_Get_USB_Status>
 800cb00:	4603      	mov	r3, r0
 800cb02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb04:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <USBD_static_malloc+0x18>)
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20005998 	.word	0x20005998

0800cb2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]

}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	4603      	mov	r3, r0
 800cb48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	d817      	bhi.n	800cb84 <USBD_Get_USB_Status+0x44>
 800cb54:	a201      	add	r2, pc, #4	; (adr r2, 800cb5c <USBD_Get_USB_Status+0x1c>)
 800cb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5a:	bf00      	nop
 800cb5c:	0800cb6d 	.word	0x0800cb6d
 800cb60:	0800cb73 	.word	0x0800cb73
 800cb64:	0800cb79 	.word	0x0800cb79
 800cb68:	0800cb7f 	.word	0x0800cb7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	e00b      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb72:	2303      	movs	r3, #3
 800cb74:	73fb      	strb	r3, [r7, #15]
    break;
 800cb76:	e008      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7c:	e005      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	73fb      	strb	r3, [r7, #15]
    break;
 800cb82:	e002      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb84:	2303      	movs	r3, #3
 800cb86:	73fb      	strb	r3, [r7, #15]
    break;
 800cb88:	bf00      	nop
  }
  return usb_status;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <__errno>:
 800cb98:	4b01      	ldr	r3, [pc, #4]	; (800cba0 <__errno+0x8>)
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	20000150 	.word	0x20000150

0800cba4 <std>:
 800cba4:	2300      	movs	r3, #0
 800cba6:	b510      	push	{r4, lr}
 800cba8:	4604      	mov	r4, r0
 800cbaa:	e9c0 3300 	strd	r3, r3, [r0]
 800cbae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbb2:	6083      	str	r3, [r0, #8]
 800cbb4:	8181      	strh	r1, [r0, #12]
 800cbb6:	6643      	str	r3, [r0, #100]	; 0x64
 800cbb8:	81c2      	strh	r2, [r0, #14]
 800cbba:	6183      	str	r3, [r0, #24]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	2208      	movs	r2, #8
 800cbc0:	305c      	adds	r0, #92	; 0x5c
 800cbc2:	f000 f91a 	bl	800cdfa <memset>
 800cbc6:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <std+0x38>)
 800cbc8:	6263      	str	r3, [r4, #36]	; 0x24
 800cbca:	4b05      	ldr	r3, [pc, #20]	; (800cbe0 <std+0x3c>)
 800cbcc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cbce:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <std+0x40>)
 800cbd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbd2:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <std+0x44>)
 800cbd4:	6224      	str	r4, [r4, #32]
 800cbd6:	6323      	str	r3, [r4, #48]	; 0x30
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	bf00      	nop
 800cbdc:	0800dd69 	.word	0x0800dd69
 800cbe0:	0800dd8b 	.word	0x0800dd8b
 800cbe4:	0800ddc3 	.word	0x0800ddc3
 800cbe8:	0800dde7 	.word	0x0800dde7

0800cbec <_cleanup_r>:
 800cbec:	4901      	ldr	r1, [pc, #4]	; (800cbf4 <_cleanup_r+0x8>)
 800cbee:	f000 b8af 	b.w	800cd50 <_fwalk_reent>
 800cbf2:	bf00      	nop
 800cbf4:	0800f991 	.word	0x0800f991

0800cbf8 <__sfmoreglue>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	2268      	movs	r2, #104	; 0x68
 800cbfc:	1e4d      	subs	r5, r1, #1
 800cbfe:	4355      	muls	r5, r2
 800cc00:	460e      	mov	r6, r1
 800cc02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc06:	f000 f921 	bl	800ce4c <_malloc_r>
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	b140      	cbz	r0, 800cc20 <__sfmoreglue+0x28>
 800cc0e:	2100      	movs	r1, #0
 800cc10:	e9c0 1600 	strd	r1, r6, [r0]
 800cc14:	300c      	adds	r0, #12
 800cc16:	60a0      	str	r0, [r4, #8]
 800cc18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc1c:	f000 f8ed 	bl	800cdfa <memset>
 800cc20:	4620      	mov	r0, r4
 800cc22:	bd70      	pop	{r4, r5, r6, pc}

0800cc24 <__sfp_lock_acquire>:
 800cc24:	4801      	ldr	r0, [pc, #4]	; (800cc2c <__sfp_lock_acquire+0x8>)
 800cc26:	f000 b8d8 	b.w	800cdda <__retarget_lock_acquire_recursive>
 800cc2a:	bf00      	nop
 800cc2c:	200059ad 	.word	0x200059ad

0800cc30 <__sfp_lock_release>:
 800cc30:	4801      	ldr	r0, [pc, #4]	; (800cc38 <__sfp_lock_release+0x8>)
 800cc32:	f000 b8d3 	b.w	800cddc <__retarget_lock_release_recursive>
 800cc36:	bf00      	nop
 800cc38:	200059ad 	.word	0x200059ad

0800cc3c <__sinit_lock_acquire>:
 800cc3c:	4801      	ldr	r0, [pc, #4]	; (800cc44 <__sinit_lock_acquire+0x8>)
 800cc3e:	f000 b8cc 	b.w	800cdda <__retarget_lock_acquire_recursive>
 800cc42:	bf00      	nop
 800cc44:	200059ae 	.word	0x200059ae

0800cc48 <__sinit_lock_release>:
 800cc48:	4801      	ldr	r0, [pc, #4]	; (800cc50 <__sinit_lock_release+0x8>)
 800cc4a:	f000 b8c7 	b.w	800cddc <__retarget_lock_release_recursive>
 800cc4e:	bf00      	nop
 800cc50:	200059ae 	.word	0x200059ae

0800cc54 <__sinit>:
 800cc54:	b510      	push	{r4, lr}
 800cc56:	4604      	mov	r4, r0
 800cc58:	f7ff fff0 	bl	800cc3c <__sinit_lock_acquire>
 800cc5c:	69a3      	ldr	r3, [r4, #24]
 800cc5e:	b11b      	cbz	r3, 800cc68 <__sinit+0x14>
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc64:	f7ff bff0 	b.w	800cc48 <__sinit_lock_release>
 800cc68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc6c:	6523      	str	r3, [r4, #80]	; 0x50
 800cc6e:	4b13      	ldr	r3, [pc, #76]	; (800ccbc <__sinit+0x68>)
 800cc70:	4a13      	ldr	r2, [pc, #76]	; (800ccc0 <__sinit+0x6c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc76:	42a3      	cmp	r3, r4
 800cc78:	bf04      	itt	eq
 800cc7a:	2301      	moveq	r3, #1
 800cc7c:	61a3      	streq	r3, [r4, #24]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 f820 	bl	800ccc4 <__sfp>
 800cc84:	6060      	str	r0, [r4, #4]
 800cc86:	4620      	mov	r0, r4
 800cc88:	f000 f81c 	bl	800ccc4 <__sfp>
 800cc8c:	60a0      	str	r0, [r4, #8]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f000 f818 	bl	800ccc4 <__sfp>
 800cc94:	2200      	movs	r2, #0
 800cc96:	60e0      	str	r0, [r4, #12]
 800cc98:	2104      	movs	r1, #4
 800cc9a:	6860      	ldr	r0, [r4, #4]
 800cc9c:	f7ff ff82 	bl	800cba4 <std>
 800cca0:	68a0      	ldr	r0, [r4, #8]
 800cca2:	2201      	movs	r2, #1
 800cca4:	2109      	movs	r1, #9
 800cca6:	f7ff ff7d 	bl	800cba4 <std>
 800ccaa:	68e0      	ldr	r0, [r4, #12]
 800ccac:	2202      	movs	r2, #2
 800ccae:	2112      	movs	r1, #18
 800ccb0:	f7ff ff78 	bl	800cba4 <std>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	61a3      	str	r3, [r4, #24]
 800ccb8:	e7d2      	b.n	800cc60 <__sinit+0xc>
 800ccba:	bf00      	nop
 800ccbc:	080117e8 	.word	0x080117e8
 800ccc0:	0800cbed 	.word	0x0800cbed

0800ccc4 <__sfp>:
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	f7ff ffac 	bl	800cc24 <__sfp_lock_acquire>
 800cccc:	4b1e      	ldr	r3, [pc, #120]	; (800cd48 <__sfp+0x84>)
 800ccce:	681e      	ldr	r6, [r3, #0]
 800ccd0:	69b3      	ldr	r3, [r6, #24]
 800ccd2:	b913      	cbnz	r3, 800ccda <__sfp+0x16>
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7ff ffbd 	bl	800cc54 <__sinit>
 800ccda:	3648      	adds	r6, #72	; 0x48
 800ccdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	d503      	bpl.n	800ccec <__sfp+0x28>
 800cce4:	6833      	ldr	r3, [r6, #0]
 800cce6:	b30b      	cbz	r3, 800cd2c <__sfp+0x68>
 800cce8:	6836      	ldr	r6, [r6, #0]
 800ccea:	e7f7      	b.n	800ccdc <__sfp+0x18>
 800ccec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ccf0:	b9d5      	cbnz	r5, 800cd28 <__sfp+0x64>
 800ccf2:	4b16      	ldr	r3, [pc, #88]	; (800cd4c <__sfp+0x88>)
 800ccf4:	60e3      	str	r3, [r4, #12]
 800ccf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccfa:	6665      	str	r5, [r4, #100]	; 0x64
 800ccfc:	f000 f86c 	bl	800cdd8 <__retarget_lock_init_recursive>
 800cd00:	f7ff ff96 	bl	800cc30 <__sfp_lock_release>
 800cd04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd0c:	6025      	str	r5, [r4, #0]
 800cd0e:	61a5      	str	r5, [r4, #24]
 800cd10:	2208      	movs	r2, #8
 800cd12:	4629      	mov	r1, r5
 800cd14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd18:	f000 f86f 	bl	800cdfa <memset>
 800cd1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd24:	4620      	mov	r0, r4
 800cd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd28:	3468      	adds	r4, #104	; 0x68
 800cd2a:	e7d9      	b.n	800cce0 <__sfp+0x1c>
 800cd2c:	2104      	movs	r1, #4
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f7ff ff62 	bl	800cbf8 <__sfmoreglue>
 800cd34:	4604      	mov	r4, r0
 800cd36:	6030      	str	r0, [r6, #0]
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1d5      	bne.n	800cce8 <__sfp+0x24>
 800cd3c:	f7ff ff78 	bl	800cc30 <__sfp_lock_release>
 800cd40:	230c      	movs	r3, #12
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	e7ee      	b.n	800cd24 <__sfp+0x60>
 800cd46:	bf00      	nop
 800cd48:	080117e8 	.word	0x080117e8
 800cd4c:	ffff0001 	.word	0xffff0001

0800cd50 <_fwalk_reent>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	4606      	mov	r6, r0
 800cd56:	4688      	mov	r8, r1
 800cd58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd5c:	2700      	movs	r7, #0
 800cd5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd62:	f1b9 0901 	subs.w	r9, r9, #1
 800cd66:	d505      	bpl.n	800cd74 <_fwalk_reent+0x24>
 800cd68:	6824      	ldr	r4, [r4, #0]
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	d1f7      	bne.n	800cd5e <_fwalk_reent+0xe>
 800cd6e:	4638      	mov	r0, r7
 800cd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd74:	89ab      	ldrh	r3, [r5, #12]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d907      	bls.n	800cd8a <_fwalk_reent+0x3a>
 800cd7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	d003      	beq.n	800cd8a <_fwalk_reent+0x3a>
 800cd82:	4629      	mov	r1, r5
 800cd84:	4630      	mov	r0, r6
 800cd86:	47c0      	blx	r8
 800cd88:	4307      	orrs	r7, r0
 800cd8a:	3568      	adds	r5, #104	; 0x68
 800cd8c:	e7e9      	b.n	800cd62 <_fwalk_reent+0x12>
	...

0800cd90 <__libc_init_array>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	4d0d      	ldr	r5, [pc, #52]	; (800cdc8 <__libc_init_array+0x38>)
 800cd94:	4c0d      	ldr	r4, [pc, #52]	; (800cdcc <__libc_init_array+0x3c>)
 800cd96:	1b64      	subs	r4, r4, r5
 800cd98:	10a4      	asrs	r4, r4, #2
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	42a6      	cmp	r6, r4
 800cd9e:	d109      	bne.n	800cdb4 <__libc_init_array+0x24>
 800cda0:	4d0b      	ldr	r5, [pc, #44]	; (800cdd0 <__libc_init_array+0x40>)
 800cda2:	4c0c      	ldr	r4, [pc, #48]	; (800cdd4 <__libc_init_array+0x44>)
 800cda4:	f004 fc06 	bl	80115b4 <_init>
 800cda8:	1b64      	subs	r4, r4, r5
 800cdaa:	10a4      	asrs	r4, r4, #2
 800cdac:	2600      	movs	r6, #0
 800cdae:	42a6      	cmp	r6, r4
 800cdb0:	d105      	bne.n	800cdbe <__libc_init_array+0x2e>
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}
 800cdb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb8:	4798      	blx	r3
 800cdba:	3601      	adds	r6, #1
 800cdbc:	e7ee      	b.n	800cd9c <__libc_init_array+0xc>
 800cdbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc2:	4798      	blx	r3
 800cdc4:	3601      	adds	r6, #1
 800cdc6:	e7f2      	b.n	800cdae <__libc_init_array+0x1e>
 800cdc8:	08011c34 	.word	0x08011c34
 800cdcc:	08011c34 	.word	0x08011c34
 800cdd0:	08011c34 	.word	0x08011c34
 800cdd4:	08011c38 	.word	0x08011c38

0800cdd8 <__retarget_lock_init_recursive>:
 800cdd8:	4770      	bx	lr

0800cdda <__retarget_lock_acquire_recursive>:
 800cdda:	4770      	bx	lr

0800cddc <__retarget_lock_release_recursive>:
 800cddc:	4770      	bx	lr

0800cdde <memcpy>:
 800cdde:	440a      	add	r2, r1
 800cde0:	4291      	cmp	r1, r2
 800cde2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde6:	d100      	bne.n	800cdea <memcpy+0xc>
 800cde8:	4770      	bx	lr
 800cdea:	b510      	push	{r4, lr}
 800cdec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf4:	4291      	cmp	r1, r2
 800cdf6:	d1f9      	bne.n	800cdec <memcpy+0xe>
 800cdf8:	bd10      	pop	{r4, pc}

0800cdfa <memset>:
 800cdfa:	4402      	add	r2, r0
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d100      	bne.n	800ce04 <memset+0xa>
 800ce02:	4770      	bx	lr
 800ce04:	f803 1b01 	strb.w	r1, [r3], #1
 800ce08:	e7f9      	b.n	800cdfe <memset+0x4>
	...

0800ce0c <sbrk_aligned>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	4e0e      	ldr	r6, [pc, #56]	; (800ce48 <sbrk_aligned+0x3c>)
 800ce10:	460c      	mov	r4, r1
 800ce12:	6831      	ldr	r1, [r6, #0]
 800ce14:	4605      	mov	r5, r0
 800ce16:	b911      	cbnz	r1, 800ce1e <sbrk_aligned+0x12>
 800ce18:	f000 ff70 	bl	800dcfc <_sbrk_r>
 800ce1c:	6030      	str	r0, [r6, #0]
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 ff6b 	bl	800dcfc <_sbrk_r>
 800ce26:	1c43      	adds	r3, r0, #1
 800ce28:	d00a      	beq.n	800ce40 <sbrk_aligned+0x34>
 800ce2a:	1cc4      	adds	r4, r0, #3
 800ce2c:	f024 0403 	bic.w	r4, r4, #3
 800ce30:	42a0      	cmp	r0, r4
 800ce32:	d007      	beq.n	800ce44 <sbrk_aligned+0x38>
 800ce34:	1a21      	subs	r1, r4, r0
 800ce36:	4628      	mov	r0, r5
 800ce38:	f000 ff60 	bl	800dcfc <_sbrk_r>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d101      	bne.n	800ce44 <sbrk_aligned+0x38>
 800ce40:	f04f 34ff 	mov.w	r4, #4294967295
 800ce44:	4620      	mov	r0, r4
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	200059b4 	.word	0x200059b4

0800ce4c <_malloc_r>:
 800ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	1ccd      	adds	r5, r1, #3
 800ce52:	f025 0503 	bic.w	r5, r5, #3
 800ce56:	3508      	adds	r5, #8
 800ce58:	2d0c      	cmp	r5, #12
 800ce5a:	bf38      	it	cc
 800ce5c:	250c      	movcc	r5, #12
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	4607      	mov	r7, r0
 800ce62:	db01      	blt.n	800ce68 <_malloc_r+0x1c>
 800ce64:	42a9      	cmp	r1, r5
 800ce66:	d905      	bls.n	800ce74 <_malloc_r+0x28>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	2600      	movs	r6, #0
 800ce6e:	4630      	mov	r0, r6
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	4e2e      	ldr	r6, [pc, #184]	; (800cf30 <_malloc_r+0xe4>)
 800ce76:	f003 f967 	bl	8010148 <__malloc_lock>
 800ce7a:	6833      	ldr	r3, [r6, #0]
 800ce7c:	461c      	mov	r4, r3
 800ce7e:	bb34      	cbnz	r4, 800cece <_malloc_r+0x82>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4638      	mov	r0, r7
 800ce84:	f7ff ffc2 	bl	800ce0c <sbrk_aligned>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	d14d      	bne.n	800cf2a <_malloc_r+0xde>
 800ce8e:	6834      	ldr	r4, [r6, #0]
 800ce90:	4626      	mov	r6, r4
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d140      	bne.n	800cf18 <_malloc_r+0xcc>
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	eb04 0803 	add.w	r8, r4, r3
 800cea0:	f000 ff2c 	bl	800dcfc <_sbrk_r>
 800cea4:	4580      	cmp	r8, r0
 800cea6:	d13a      	bne.n	800cf1e <_malloc_r+0xd2>
 800cea8:	6821      	ldr	r1, [r4, #0]
 800ceaa:	3503      	adds	r5, #3
 800ceac:	1a6d      	subs	r5, r5, r1
 800ceae:	f025 0503 	bic.w	r5, r5, #3
 800ceb2:	3508      	adds	r5, #8
 800ceb4:	2d0c      	cmp	r5, #12
 800ceb6:	bf38      	it	cc
 800ceb8:	250c      	movcc	r5, #12
 800ceba:	4629      	mov	r1, r5
 800cebc:	4638      	mov	r0, r7
 800cebe:	f7ff ffa5 	bl	800ce0c <sbrk_aligned>
 800cec2:	3001      	adds	r0, #1
 800cec4:	d02b      	beq.n	800cf1e <_malloc_r+0xd2>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	442b      	add	r3, r5
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	e00e      	b.n	800ceec <_malloc_r+0xa0>
 800cece:	6822      	ldr	r2, [r4, #0]
 800ced0:	1b52      	subs	r2, r2, r5
 800ced2:	d41e      	bmi.n	800cf12 <_malloc_r+0xc6>
 800ced4:	2a0b      	cmp	r2, #11
 800ced6:	d916      	bls.n	800cf06 <_malloc_r+0xba>
 800ced8:	1961      	adds	r1, r4, r5
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	6025      	str	r5, [r4, #0]
 800cede:	bf18      	it	ne
 800cee0:	6059      	strne	r1, [r3, #4]
 800cee2:	6863      	ldr	r3, [r4, #4]
 800cee4:	bf08      	it	eq
 800cee6:	6031      	streq	r1, [r6, #0]
 800cee8:	5162      	str	r2, [r4, r5]
 800ceea:	604b      	str	r3, [r1, #4]
 800ceec:	4638      	mov	r0, r7
 800ceee:	f104 060b 	add.w	r6, r4, #11
 800cef2:	f003 f92f 	bl	8010154 <__malloc_unlock>
 800cef6:	f026 0607 	bic.w	r6, r6, #7
 800cefa:	1d23      	adds	r3, r4, #4
 800cefc:	1af2      	subs	r2, r6, r3
 800cefe:	d0b6      	beq.n	800ce6e <_malloc_r+0x22>
 800cf00:	1b9b      	subs	r3, r3, r6
 800cf02:	50a3      	str	r3, [r4, r2]
 800cf04:	e7b3      	b.n	800ce6e <_malloc_r+0x22>
 800cf06:	6862      	ldr	r2, [r4, #4]
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	bf0c      	ite	eq
 800cf0c:	6032      	streq	r2, [r6, #0]
 800cf0e:	605a      	strne	r2, [r3, #4]
 800cf10:	e7ec      	b.n	800ceec <_malloc_r+0xa0>
 800cf12:	4623      	mov	r3, r4
 800cf14:	6864      	ldr	r4, [r4, #4]
 800cf16:	e7b2      	b.n	800ce7e <_malloc_r+0x32>
 800cf18:	4634      	mov	r4, r6
 800cf1a:	6876      	ldr	r6, [r6, #4]
 800cf1c:	e7b9      	b.n	800ce92 <_malloc_r+0x46>
 800cf1e:	230c      	movs	r3, #12
 800cf20:	603b      	str	r3, [r7, #0]
 800cf22:	4638      	mov	r0, r7
 800cf24:	f003 f916 	bl	8010154 <__malloc_unlock>
 800cf28:	e7a1      	b.n	800ce6e <_malloc_r+0x22>
 800cf2a:	6025      	str	r5, [r4, #0]
 800cf2c:	e7de      	b.n	800ceec <_malloc_r+0xa0>
 800cf2e:	bf00      	nop
 800cf30:	200059b0 	.word	0x200059b0

0800cf34 <__cvt>:
 800cf34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf38:	ec55 4b10 	vmov	r4, r5, d0
 800cf3c:	2d00      	cmp	r5, #0
 800cf3e:	460e      	mov	r6, r1
 800cf40:	4619      	mov	r1, r3
 800cf42:	462b      	mov	r3, r5
 800cf44:	bfbb      	ittet	lt
 800cf46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cf4a:	461d      	movlt	r5, r3
 800cf4c:	2300      	movge	r3, #0
 800cf4e:	232d      	movlt	r3, #45	; 0x2d
 800cf50:	700b      	strb	r3, [r1, #0]
 800cf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf58:	4691      	mov	r9, r2
 800cf5a:	f023 0820 	bic.w	r8, r3, #32
 800cf5e:	bfbc      	itt	lt
 800cf60:	4622      	movlt	r2, r4
 800cf62:	4614      	movlt	r4, r2
 800cf64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf68:	d005      	beq.n	800cf76 <__cvt+0x42>
 800cf6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf6e:	d100      	bne.n	800cf72 <__cvt+0x3e>
 800cf70:	3601      	adds	r6, #1
 800cf72:	2102      	movs	r1, #2
 800cf74:	e000      	b.n	800cf78 <__cvt+0x44>
 800cf76:	2103      	movs	r1, #3
 800cf78:	ab03      	add	r3, sp, #12
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	ab02      	add	r3, sp, #8
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	ec45 4b10 	vmov	d0, r4, r5
 800cf84:	4653      	mov	r3, sl
 800cf86:	4632      	mov	r2, r6
 800cf88:	f001 fe8e 	bl	800eca8 <_dtoa_r>
 800cf8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf90:	4607      	mov	r7, r0
 800cf92:	d102      	bne.n	800cf9a <__cvt+0x66>
 800cf94:	f019 0f01 	tst.w	r9, #1
 800cf98:	d022      	beq.n	800cfe0 <__cvt+0xac>
 800cf9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf9e:	eb07 0906 	add.w	r9, r7, r6
 800cfa2:	d110      	bne.n	800cfc6 <__cvt+0x92>
 800cfa4:	783b      	ldrb	r3, [r7, #0]
 800cfa6:	2b30      	cmp	r3, #48	; 0x30
 800cfa8:	d10a      	bne.n	800cfc0 <__cvt+0x8c>
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2300      	movs	r3, #0
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfb6:	b918      	cbnz	r0, 800cfc0 <__cvt+0x8c>
 800cfb8:	f1c6 0601 	rsb	r6, r6, #1
 800cfbc:	f8ca 6000 	str.w	r6, [sl]
 800cfc0:	f8da 3000 	ldr.w	r3, [sl]
 800cfc4:	4499      	add	r9, r3
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4620      	mov	r0, r4
 800cfcc:	4629      	mov	r1, r5
 800cfce:	f7f3 fd83 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfd2:	b108      	cbz	r0, 800cfd8 <__cvt+0xa4>
 800cfd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfd8:	2230      	movs	r2, #48	; 0x30
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	454b      	cmp	r3, r9
 800cfde:	d307      	bcc.n	800cff0 <__cvt+0xbc>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfe4:	1bdb      	subs	r3, r3, r7
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	b004      	add	sp, #16
 800cfec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff0:	1c59      	adds	r1, r3, #1
 800cff2:	9103      	str	r1, [sp, #12]
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	e7f0      	b.n	800cfda <__cvt+0xa6>

0800cff8 <__exponent>:
 800cff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cffa:	4603      	mov	r3, r0
 800cffc:	2900      	cmp	r1, #0
 800cffe:	bfb8      	it	lt
 800d000:	4249      	neglt	r1, r1
 800d002:	f803 2b02 	strb.w	r2, [r3], #2
 800d006:	bfb4      	ite	lt
 800d008:	222d      	movlt	r2, #45	; 0x2d
 800d00a:	222b      	movge	r2, #43	; 0x2b
 800d00c:	2909      	cmp	r1, #9
 800d00e:	7042      	strb	r2, [r0, #1]
 800d010:	dd2a      	ble.n	800d068 <__exponent+0x70>
 800d012:	f10d 0407 	add.w	r4, sp, #7
 800d016:	46a4      	mov	ip, r4
 800d018:	270a      	movs	r7, #10
 800d01a:	46a6      	mov	lr, r4
 800d01c:	460a      	mov	r2, r1
 800d01e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d022:	fb07 1516 	mls	r5, r7, r6, r1
 800d026:	3530      	adds	r5, #48	; 0x30
 800d028:	2a63      	cmp	r2, #99	; 0x63
 800d02a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d02e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d032:	4631      	mov	r1, r6
 800d034:	dcf1      	bgt.n	800d01a <__exponent+0x22>
 800d036:	3130      	adds	r1, #48	; 0x30
 800d038:	f1ae 0502 	sub.w	r5, lr, #2
 800d03c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d040:	1c44      	adds	r4, r0, #1
 800d042:	4629      	mov	r1, r5
 800d044:	4561      	cmp	r1, ip
 800d046:	d30a      	bcc.n	800d05e <__exponent+0x66>
 800d048:	f10d 0209 	add.w	r2, sp, #9
 800d04c:	eba2 020e 	sub.w	r2, r2, lr
 800d050:	4565      	cmp	r5, ip
 800d052:	bf88      	it	hi
 800d054:	2200      	movhi	r2, #0
 800d056:	4413      	add	r3, r2
 800d058:	1a18      	subs	r0, r3, r0
 800d05a:	b003      	add	sp, #12
 800d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d062:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d066:	e7ed      	b.n	800d044 <__exponent+0x4c>
 800d068:	2330      	movs	r3, #48	; 0x30
 800d06a:	3130      	adds	r1, #48	; 0x30
 800d06c:	7083      	strb	r3, [r0, #2]
 800d06e:	70c1      	strb	r1, [r0, #3]
 800d070:	1d03      	adds	r3, r0, #4
 800d072:	e7f1      	b.n	800d058 <__exponent+0x60>

0800d074 <_printf_float>:
 800d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	ed2d 8b02 	vpush	{d8}
 800d07c:	b08d      	sub	sp, #52	; 0x34
 800d07e:	460c      	mov	r4, r1
 800d080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d084:	4616      	mov	r6, r2
 800d086:	461f      	mov	r7, r3
 800d088:	4605      	mov	r5, r0
 800d08a:	f003 f82d 	bl	80100e8 <_localeconv_r>
 800d08e:	f8d0 a000 	ldr.w	sl, [r0]
 800d092:	4650      	mov	r0, sl
 800d094:	f7f3 f8a4 	bl	80001e0 <strlen>
 800d098:	2300      	movs	r3, #0
 800d09a:	930a      	str	r3, [sp, #40]	; 0x28
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	9305      	str	r3, [sp, #20]
 800d0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d0a8:	3307      	adds	r3, #7
 800d0aa:	f023 0307 	bic.w	r3, r3, #7
 800d0ae:	f103 0208 	add.w	r2, r3, #8
 800d0b2:	f8c8 2000 	str.w	r2, [r8]
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d0be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d0c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0c6:	9307      	str	r3, [sp, #28]
 800d0c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0cc:	ee08 0a10 	vmov	s16, r0
 800d0d0:	4b9f      	ldr	r3, [pc, #636]	; (800d350 <_printf_float+0x2dc>)
 800d0d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0da:	f7f3 fd2f 	bl	8000b3c <__aeabi_dcmpun>
 800d0de:	bb88      	cbnz	r0, 800d144 <_printf_float+0xd0>
 800d0e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0e4:	4b9a      	ldr	r3, [pc, #616]	; (800d350 <_printf_float+0x2dc>)
 800d0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ea:	f7f3 fd09 	bl	8000b00 <__aeabi_dcmple>
 800d0ee:	bb48      	cbnz	r0, 800d144 <_printf_float+0xd0>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	f7f3 fcf8 	bl	8000aec <__aeabi_dcmplt>
 800d0fc:	b110      	cbz	r0, 800d104 <_printf_float+0x90>
 800d0fe:	232d      	movs	r3, #45	; 0x2d
 800d100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d104:	4b93      	ldr	r3, [pc, #588]	; (800d354 <_printf_float+0x2e0>)
 800d106:	4894      	ldr	r0, [pc, #592]	; (800d358 <_printf_float+0x2e4>)
 800d108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d10c:	bf94      	ite	ls
 800d10e:	4698      	movls	r8, r3
 800d110:	4680      	movhi	r8, r0
 800d112:	2303      	movs	r3, #3
 800d114:	6123      	str	r3, [r4, #16]
 800d116:	9b05      	ldr	r3, [sp, #20]
 800d118:	f023 0204 	bic.w	r2, r3, #4
 800d11c:	6022      	str	r2, [r4, #0]
 800d11e:	f04f 0900 	mov.w	r9, #0
 800d122:	9700      	str	r7, [sp, #0]
 800d124:	4633      	mov	r3, r6
 800d126:	aa0b      	add	r2, sp, #44	; 0x2c
 800d128:	4621      	mov	r1, r4
 800d12a:	4628      	mov	r0, r5
 800d12c:	f000 f9d8 	bl	800d4e0 <_printf_common>
 800d130:	3001      	adds	r0, #1
 800d132:	f040 8090 	bne.w	800d256 <_printf_float+0x1e2>
 800d136:	f04f 30ff 	mov.w	r0, #4294967295
 800d13a:	b00d      	add	sp, #52	; 0x34
 800d13c:	ecbd 8b02 	vpop	{d8}
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	4642      	mov	r2, r8
 800d146:	464b      	mov	r3, r9
 800d148:	4640      	mov	r0, r8
 800d14a:	4649      	mov	r1, r9
 800d14c:	f7f3 fcf6 	bl	8000b3c <__aeabi_dcmpun>
 800d150:	b140      	cbz	r0, 800d164 <_printf_float+0xf0>
 800d152:	464b      	mov	r3, r9
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfbc      	itt	lt
 800d158:	232d      	movlt	r3, #45	; 0x2d
 800d15a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d15e:	487f      	ldr	r0, [pc, #508]	; (800d35c <_printf_float+0x2e8>)
 800d160:	4b7f      	ldr	r3, [pc, #508]	; (800d360 <_printf_float+0x2ec>)
 800d162:	e7d1      	b.n	800d108 <_printf_float+0x94>
 800d164:	6863      	ldr	r3, [r4, #4]
 800d166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d16a:	9206      	str	r2, [sp, #24]
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	d13f      	bne.n	800d1f0 <_printf_float+0x17c>
 800d170:	2306      	movs	r3, #6
 800d172:	6063      	str	r3, [r4, #4]
 800d174:	9b05      	ldr	r3, [sp, #20]
 800d176:	6861      	ldr	r1, [r4, #4]
 800d178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d17c:	2300      	movs	r3, #0
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	ab0a      	add	r3, sp, #40	; 0x28
 800d182:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d186:	ab09      	add	r3, sp, #36	; 0x24
 800d188:	ec49 8b10 	vmov	d0, r8, r9
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	6022      	str	r2, [r4, #0]
 800d190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d194:	4628      	mov	r0, r5
 800d196:	f7ff fecd 	bl	800cf34 <__cvt>
 800d19a:	9b06      	ldr	r3, [sp, #24]
 800d19c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d19e:	2b47      	cmp	r3, #71	; 0x47
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	d108      	bne.n	800d1b6 <_printf_float+0x142>
 800d1a4:	1cc8      	adds	r0, r1, #3
 800d1a6:	db02      	blt.n	800d1ae <_printf_float+0x13a>
 800d1a8:	6863      	ldr	r3, [r4, #4]
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	dd41      	ble.n	800d232 <_printf_float+0x1be>
 800d1ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800d1b2:	fa5f fb8b 	uxtb.w	fp, fp
 800d1b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1ba:	d820      	bhi.n	800d1fe <_printf_float+0x18a>
 800d1bc:	3901      	subs	r1, #1
 800d1be:	465a      	mov	r2, fp
 800d1c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d1c4:	9109      	str	r1, [sp, #36]	; 0x24
 800d1c6:	f7ff ff17 	bl	800cff8 <__exponent>
 800d1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1cc:	1813      	adds	r3, r2, r0
 800d1ce:	2a01      	cmp	r2, #1
 800d1d0:	4681      	mov	r9, r0
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	dc02      	bgt.n	800d1dc <_printf_float+0x168>
 800d1d6:	6822      	ldr	r2, [r4, #0]
 800d1d8:	07d2      	lsls	r2, r2, #31
 800d1da:	d501      	bpl.n	800d1e0 <_printf_float+0x16c>
 800d1dc:	3301      	adds	r3, #1
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d09c      	beq.n	800d122 <_printf_float+0xae>
 800d1e8:	232d      	movs	r3, #45	; 0x2d
 800d1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ee:	e798      	b.n	800d122 <_printf_float+0xae>
 800d1f0:	9a06      	ldr	r2, [sp, #24]
 800d1f2:	2a47      	cmp	r2, #71	; 0x47
 800d1f4:	d1be      	bne.n	800d174 <_printf_float+0x100>
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1bc      	bne.n	800d174 <_printf_float+0x100>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e7b9      	b.n	800d172 <_printf_float+0xfe>
 800d1fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d202:	d118      	bne.n	800d236 <_printf_float+0x1c2>
 800d204:	2900      	cmp	r1, #0
 800d206:	6863      	ldr	r3, [r4, #4]
 800d208:	dd0b      	ble.n	800d222 <_printf_float+0x1ae>
 800d20a:	6121      	str	r1, [r4, #16]
 800d20c:	b913      	cbnz	r3, 800d214 <_printf_float+0x1a0>
 800d20e:	6822      	ldr	r2, [r4, #0]
 800d210:	07d0      	lsls	r0, r2, #31
 800d212:	d502      	bpl.n	800d21a <_printf_float+0x1a6>
 800d214:	3301      	adds	r3, #1
 800d216:	440b      	add	r3, r1
 800d218:	6123      	str	r3, [r4, #16]
 800d21a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d21c:	f04f 0900 	mov.w	r9, #0
 800d220:	e7de      	b.n	800d1e0 <_printf_float+0x16c>
 800d222:	b913      	cbnz	r3, 800d22a <_printf_float+0x1b6>
 800d224:	6822      	ldr	r2, [r4, #0]
 800d226:	07d2      	lsls	r2, r2, #31
 800d228:	d501      	bpl.n	800d22e <_printf_float+0x1ba>
 800d22a:	3302      	adds	r3, #2
 800d22c:	e7f4      	b.n	800d218 <_printf_float+0x1a4>
 800d22e:	2301      	movs	r3, #1
 800d230:	e7f2      	b.n	800d218 <_printf_float+0x1a4>
 800d232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d238:	4299      	cmp	r1, r3
 800d23a:	db05      	blt.n	800d248 <_printf_float+0x1d4>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	6121      	str	r1, [r4, #16]
 800d240:	07d8      	lsls	r0, r3, #31
 800d242:	d5ea      	bpl.n	800d21a <_printf_float+0x1a6>
 800d244:	1c4b      	adds	r3, r1, #1
 800d246:	e7e7      	b.n	800d218 <_printf_float+0x1a4>
 800d248:	2900      	cmp	r1, #0
 800d24a:	bfd4      	ite	le
 800d24c:	f1c1 0202 	rsble	r2, r1, #2
 800d250:	2201      	movgt	r2, #1
 800d252:	4413      	add	r3, r2
 800d254:	e7e0      	b.n	800d218 <_printf_float+0x1a4>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	055a      	lsls	r2, r3, #21
 800d25a:	d407      	bmi.n	800d26c <_printf_float+0x1f8>
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	4642      	mov	r2, r8
 800d260:	4631      	mov	r1, r6
 800d262:	4628      	mov	r0, r5
 800d264:	47b8      	blx	r7
 800d266:	3001      	adds	r0, #1
 800d268:	d12c      	bne.n	800d2c4 <_printf_float+0x250>
 800d26a:	e764      	b.n	800d136 <_printf_float+0xc2>
 800d26c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d270:	f240 80e0 	bls.w	800d434 <_printf_float+0x3c0>
 800d274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d278:	2200      	movs	r2, #0
 800d27a:	2300      	movs	r3, #0
 800d27c:	f7f3 fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d280:	2800      	cmp	r0, #0
 800d282:	d034      	beq.n	800d2ee <_printf_float+0x27a>
 800d284:	4a37      	ldr	r2, [pc, #220]	; (800d364 <_printf_float+0x2f0>)
 800d286:	2301      	movs	r3, #1
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f af51 	beq.w	800d136 <_printf_float+0xc2>
 800d294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d298:	429a      	cmp	r2, r3
 800d29a:	db02      	blt.n	800d2a2 <_printf_float+0x22e>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	07d8      	lsls	r0, r3, #31
 800d2a0:	d510      	bpl.n	800d2c4 <_printf_float+0x250>
 800d2a2:	ee18 3a10 	vmov	r3, s16
 800d2a6:	4652      	mov	r2, sl
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f af41 	beq.w	800d136 <_printf_float+0xc2>
 800d2b4:	f04f 0800 	mov.w	r8, #0
 800d2b8:	f104 091a 	add.w	r9, r4, #26
 800d2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	4543      	cmp	r3, r8
 800d2c2:	dc09      	bgt.n	800d2d8 <_printf_float+0x264>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	079b      	lsls	r3, r3, #30
 800d2c8:	f100 8105 	bmi.w	800d4d6 <_printf_float+0x462>
 800d2cc:	68e0      	ldr	r0, [r4, #12]
 800d2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d0:	4298      	cmp	r0, r3
 800d2d2:	bfb8      	it	lt
 800d2d4:	4618      	movlt	r0, r3
 800d2d6:	e730      	b.n	800d13a <_printf_float+0xc6>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	464a      	mov	r2, r9
 800d2dc:	4631      	mov	r1, r6
 800d2de:	4628      	mov	r0, r5
 800d2e0:	47b8      	blx	r7
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	f43f af27 	beq.w	800d136 <_printf_float+0xc2>
 800d2e8:	f108 0801 	add.w	r8, r8, #1
 800d2ec:	e7e6      	b.n	800d2bc <_printf_float+0x248>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dc39      	bgt.n	800d368 <_printf_float+0x2f4>
 800d2f4:	4a1b      	ldr	r2, [pc, #108]	; (800d364 <_printf_float+0x2f0>)
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	47b8      	blx	r7
 800d2fe:	3001      	adds	r0, #1
 800d300:	f43f af19 	beq.w	800d136 <_printf_float+0xc2>
 800d304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d308:	4313      	orrs	r3, r2
 800d30a:	d102      	bne.n	800d312 <_printf_float+0x29e>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	07d9      	lsls	r1, r3, #31
 800d310:	d5d8      	bpl.n	800d2c4 <_printf_float+0x250>
 800d312:	ee18 3a10 	vmov	r3, s16
 800d316:	4652      	mov	r2, sl
 800d318:	4631      	mov	r1, r6
 800d31a:	4628      	mov	r0, r5
 800d31c:	47b8      	blx	r7
 800d31e:	3001      	adds	r0, #1
 800d320:	f43f af09 	beq.w	800d136 <_printf_float+0xc2>
 800d324:	f04f 0900 	mov.w	r9, #0
 800d328:	f104 0a1a 	add.w	sl, r4, #26
 800d32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32e:	425b      	negs	r3, r3
 800d330:	454b      	cmp	r3, r9
 800d332:	dc01      	bgt.n	800d338 <_printf_float+0x2c4>
 800d334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d336:	e792      	b.n	800d25e <_printf_float+0x1ea>
 800d338:	2301      	movs	r3, #1
 800d33a:	4652      	mov	r2, sl
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	47b8      	blx	r7
 800d342:	3001      	adds	r0, #1
 800d344:	f43f aef7 	beq.w	800d136 <_printf_float+0xc2>
 800d348:	f109 0901 	add.w	r9, r9, #1
 800d34c:	e7ee      	b.n	800d32c <_printf_float+0x2b8>
 800d34e:	bf00      	nop
 800d350:	7fefffff 	.word	0x7fefffff
 800d354:	080117ec 	.word	0x080117ec
 800d358:	080117f0 	.word	0x080117f0
 800d35c:	080117f8 	.word	0x080117f8
 800d360:	080117f4 	.word	0x080117f4
 800d364:	080117fc 	.word	0x080117fc
 800d368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d36a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d36c:	429a      	cmp	r2, r3
 800d36e:	bfa8      	it	ge
 800d370:	461a      	movge	r2, r3
 800d372:	2a00      	cmp	r2, #0
 800d374:	4691      	mov	r9, r2
 800d376:	dc37      	bgt.n	800d3e8 <_printf_float+0x374>
 800d378:	f04f 0b00 	mov.w	fp, #0
 800d37c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d380:	f104 021a 	add.w	r2, r4, #26
 800d384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	eba3 0309 	sub.w	r3, r3, r9
 800d38c:	455b      	cmp	r3, fp
 800d38e:	dc33      	bgt.n	800d3f8 <_printf_float+0x384>
 800d390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d394:	429a      	cmp	r2, r3
 800d396:	db3b      	blt.n	800d410 <_printf_float+0x39c>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	07da      	lsls	r2, r3, #31
 800d39c:	d438      	bmi.n	800d410 <_printf_float+0x39c>
 800d39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a0:	9a05      	ldr	r2, [sp, #20]
 800d3a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3a4:	1a9a      	subs	r2, r3, r2
 800d3a6:	eba3 0901 	sub.w	r9, r3, r1
 800d3aa:	4591      	cmp	r9, r2
 800d3ac:	bfa8      	it	ge
 800d3ae:	4691      	movge	r9, r2
 800d3b0:	f1b9 0f00 	cmp.w	r9, #0
 800d3b4:	dc35      	bgt.n	800d422 <_printf_float+0x3ae>
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3be:	f104 0a1a 	add.w	sl, r4, #26
 800d3c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3c6:	1a9b      	subs	r3, r3, r2
 800d3c8:	eba3 0309 	sub.w	r3, r3, r9
 800d3cc:	4543      	cmp	r3, r8
 800d3ce:	f77f af79 	ble.w	800d2c4 <_printf_float+0x250>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4652      	mov	r2, sl
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b8      	blx	r7
 800d3dc:	3001      	adds	r0, #1
 800d3de:	f43f aeaa 	beq.w	800d136 <_printf_float+0xc2>
 800d3e2:	f108 0801 	add.w	r8, r8, #1
 800d3e6:	e7ec      	b.n	800d3c2 <_printf_float+0x34e>
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4642      	mov	r2, r8
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	47b8      	blx	r7
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	d1c0      	bne.n	800d378 <_printf_float+0x304>
 800d3f6:	e69e      	b.n	800d136 <_printf_float+0xc2>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	9205      	str	r2, [sp, #20]
 800d400:	47b8      	blx	r7
 800d402:	3001      	adds	r0, #1
 800d404:	f43f ae97 	beq.w	800d136 <_printf_float+0xc2>
 800d408:	9a05      	ldr	r2, [sp, #20]
 800d40a:	f10b 0b01 	add.w	fp, fp, #1
 800d40e:	e7b9      	b.n	800d384 <_printf_float+0x310>
 800d410:	ee18 3a10 	vmov	r3, s16
 800d414:	4652      	mov	r2, sl
 800d416:	4631      	mov	r1, r6
 800d418:	4628      	mov	r0, r5
 800d41a:	47b8      	blx	r7
 800d41c:	3001      	adds	r0, #1
 800d41e:	d1be      	bne.n	800d39e <_printf_float+0x32a>
 800d420:	e689      	b.n	800d136 <_printf_float+0xc2>
 800d422:	9a05      	ldr	r2, [sp, #20]
 800d424:	464b      	mov	r3, r9
 800d426:	4442      	add	r2, r8
 800d428:	4631      	mov	r1, r6
 800d42a:	4628      	mov	r0, r5
 800d42c:	47b8      	blx	r7
 800d42e:	3001      	adds	r0, #1
 800d430:	d1c1      	bne.n	800d3b6 <_printf_float+0x342>
 800d432:	e680      	b.n	800d136 <_printf_float+0xc2>
 800d434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d436:	2a01      	cmp	r2, #1
 800d438:	dc01      	bgt.n	800d43e <_printf_float+0x3ca>
 800d43a:	07db      	lsls	r3, r3, #31
 800d43c:	d538      	bpl.n	800d4b0 <_printf_float+0x43c>
 800d43e:	2301      	movs	r3, #1
 800d440:	4642      	mov	r2, r8
 800d442:	4631      	mov	r1, r6
 800d444:	4628      	mov	r0, r5
 800d446:	47b8      	blx	r7
 800d448:	3001      	adds	r0, #1
 800d44a:	f43f ae74 	beq.w	800d136 <_printf_float+0xc2>
 800d44e:	ee18 3a10 	vmov	r3, s16
 800d452:	4652      	mov	r2, sl
 800d454:	4631      	mov	r1, r6
 800d456:	4628      	mov	r0, r5
 800d458:	47b8      	blx	r7
 800d45a:	3001      	adds	r0, #1
 800d45c:	f43f ae6b 	beq.w	800d136 <_printf_float+0xc2>
 800d460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d464:	2200      	movs	r2, #0
 800d466:	2300      	movs	r3, #0
 800d468:	f7f3 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800d46c:	b9d8      	cbnz	r0, 800d4a6 <_printf_float+0x432>
 800d46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d470:	f108 0201 	add.w	r2, r8, #1
 800d474:	3b01      	subs	r3, #1
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	d10e      	bne.n	800d49e <_printf_float+0x42a>
 800d480:	e659      	b.n	800d136 <_printf_float+0xc2>
 800d482:	2301      	movs	r3, #1
 800d484:	4652      	mov	r2, sl
 800d486:	4631      	mov	r1, r6
 800d488:	4628      	mov	r0, r5
 800d48a:	47b8      	blx	r7
 800d48c:	3001      	adds	r0, #1
 800d48e:	f43f ae52 	beq.w	800d136 <_printf_float+0xc2>
 800d492:	f108 0801 	add.w	r8, r8, #1
 800d496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d498:	3b01      	subs	r3, #1
 800d49a:	4543      	cmp	r3, r8
 800d49c:	dcf1      	bgt.n	800d482 <_printf_float+0x40e>
 800d49e:	464b      	mov	r3, r9
 800d4a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d4a4:	e6dc      	b.n	800d260 <_printf_float+0x1ec>
 800d4a6:	f04f 0800 	mov.w	r8, #0
 800d4aa:	f104 0a1a 	add.w	sl, r4, #26
 800d4ae:	e7f2      	b.n	800d496 <_printf_float+0x422>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	4642      	mov	r2, r8
 800d4b4:	e7df      	b.n	800d476 <_printf_float+0x402>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	464a      	mov	r2, r9
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	f43f ae38 	beq.w	800d136 <_printf_float+0xc2>
 800d4c6:	f108 0801 	add.w	r8, r8, #1
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4ce:	1a5b      	subs	r3, r3, r1
 800d4d0:	4543      	cmp	r3, r8
 800d4d2:	dcf0      	bgt.n	800d4b6 <_printf_float+0x442>
 800d4d4:	e6fa      	b.n	800d2cc <_printf_float+0x258>
 800d4d6:	f04f 0800 	mov.w	r8, #0
 800d4da:	f104 0919 	add.w	r9, r4, #25
 800d4de:	e7f4      	b.n	800d4ca <_printf_float+0x456>

0800d4e0 <_printf_common>:
 800d4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	4699      	mov	r9, r3
 800d4e8:	688a      	ldr	r2, [r1, #8]
 800d4ea:	690b      	ldr	r3, [r1, #16]
 800d4ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	bfb8      	it	lt
 800d4f4:	4613      	movlt	r3, r2
 800d4f6:	6033      	str	r3, [r6, #0]
 800d4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	b10a      	cbz	r2, 800d506 <_printf_common+0x26>
 800d502:	3301      	adds	r3, #1
 800d504:	6033      	str	r3, [r6, #0]
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	0699      	lsls	r1, r3, #26
 800d50a:	bf42      	ittt	mi
 800d50c:	6833      	ldrmi	r3, [r6, #0]
 800d50e:	3302      	addmi	r3, #2
 800d510:	6033      	strmi	r3, [r6, #0]
 800d512:	6825      	ldr	r5, [r4, #0]
 800d514:	f015 0506 	ands.w	r5, r5, #6
 800d518:	d106      	bne.n	800d528 <_printf_common+0x48>
 800d51a:	f104 0a19 	add.w	sl, r4, #25
 800d51e:	68e3      	ldr	r3, [r4, #12]
 800d520:	6832      	ldr	r2, [r6, #0]
 800d522:	1a9b      	subs	r3, r3, r2
 800d524:	42ab      	cmp	r3, r5
 800d526:	dc26      	bgt.n	800d576 <_printf_common+0x96>
 800d528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d52c:	1e13      	subs	r3, r2, #0
 800d52e:	6822      	ldr	r2, [r4, #0]
 800d530:	bf18      	it	ne
 800d532:	2301      	movne	r3, #1
 800d534:	0692      	lsls	r2, r2, #26
 800d536:	d42b      	bmi.n	800d590 <_printf_common+0xb0>
 800d538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d53c:	4649      	mov	r1, r9
 800d53e:	4638      	mov	r0, r7
 800d540:	47c0      	blx	r8
 800d542:	3001      	adds	r0, #1
 800d544:	d01e      	beq.n	800d584 <_printf_common+0xa4>
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	68e5      	ldr	r5, [r4, #12]
 800d54a:	6832      	ldr	r2, [r6, #0]
 800d54c:	f003 0306 	and.w	r3, r3, #6
 800d550:	2b04      	cmp	r3, #4
 800d552:	bf08      	it	eq
 800d554:	1aad      	subeq	r5, r5, r2
 800d556:	68a3      	ldr	r3, [r4, #8]
 800d558:	6922      	ldr	r2, [r4, #16]
 800d55a:	bf0c      	ite	eq
 800d55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d560:	2500      	movne	r5, #0
 800d562:	4293      	cmp	r3, r2
 800d564:	bfc4      	itt	gt
 800d566:	1a9b      	subgt	r3, r3, r2
 800d568:	18ed      	addgt	r5, r5, r3
 800d56a:	2600      	movs	r6, #0
 800d56c:	341a      	adds	r4, #26
 800d56e:	42b5      	cmp	r5, r6
 800d570:	d11a      	bne.n	800d5a8 <_printf_common+0xc8>
 800d572:	2000      	movs	r0, #0
 800d574:	e008      	b.n	800d588 <_printf_common+0xa8>
 800d576:	2301      	movs	r3, #1
 800d578:	4652      	mov	r2, sl
 800d57a:	4649      	mov	r1, r9
 800d57c:	4638      	mov	r0, r7
 800d57e:	47c0      	blx	r8
 800d580:	3001      	adds	r0, #1
 800d582:	d103      	bne.n	800d58c <_printf_common+0xac>
 800d584:	f04f 30ff 	mov.w	r0, #4294967295
 800d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58c:	3501      	adds	r5, #1
 800d58e:	e7c6      	b.n	800d51e <_printf_common+0x3e>
 800d590:	18e1      	adds	r1, r4, r3
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	2030      	movs	r0, #48	; 0x30
 800d596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d59a:	4422      	add	r2, r4
 800d59c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5a4:	3302      	adds	r3, #2
 800d5a6:	e7c7      	b.n	800d538 <_printf_common+0x58>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	4622      	mov	r2, r4
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	47c0      	blx	r8
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	d0e6      	beq.n	800d584 <_printf_common+0xa4>
 800d5b6:	3601      	adds	r6, #1
 800d5b8:	e7d9      	b.n	800d56e <_printf_common+0x8e>
	...

0800d5bc <_printf_i>:
 800d5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	7e0f      	ldrb	r7, [r1, #24]
 800d5c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5c4:	2f78      	cmp	r7, #120	; 0x78
 800d5c6:	4691      	mov	r9, r2
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	469a      	mov	sl, r3
 800d5ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5d2:	d807      	bhi.n	800d5e4 <_printf_i+0x28>
 800d5d4:	2f62      	cmp	r7, #98	; 0x62
 800d5d6:	d80a      	bhi.n	800d5ee <_printf_i+0x32>
 800d5d8:	2f00      	cmp	r7, #0
 800d5da:	f000 80d8 	beq.w	800d78e <_printf_i+0x1d2>
 800d5de:	2f58      	cmp	r7, #88	; 0x58
 800d5e0:	f000 80a3 	beq.w	800d72a <_printf_i+0x16e>
 800d5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5ec:	e03a      	b.n	800d664 <_printf_i+0xa8>
 800d5ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5f2:	2b15      	cmp	r3, #21
 800d5f4:	d8f6      	bhi.n	800d5e4 <_printf_i+0x28>
 800d5f6:	a101      	add	r1, pc, #4	; (adr r1, 800d5fc <_printf_i+0x40>)
 800d5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5fc:	0800d655 	.word	0x0800d655
 800d600:	0800d669 	.word	0x0800d669
 800d604:	0800d5e5 	.word	0x0800d5e5
 800d608:	0800d5e5 	.word	0x0800d5e5
 800d60c:	0800d5e5 	.word	0x0800d5e5
 800d610:	0800d5e5 	.word	0x0800d5e5
 800d614:	0800d669 	.word	0x0800d669
 800d618:	0800d5e5 	.word	0x0800d5e5
 800d61c:	0800d5e5 	.word	0x0800d5e5
 800d620:	0800d5e5 	.word	0x0800d5e5
 800d624:	0800d5e5 	.word	0x0800d5e5
 800d628:	0800d775 	.word	0x0800d775
 800d62c:	0800d699 	.word	0x0800d699
 800d630:	0800d757 	.word	0x0800d757
 800d634:	0800d5e5 	.word	0x0800d5e5
 800d638:	0800d5e5 	.word	0x0800d5e5
 800d63c:	0800d797 	.word	0x0800d797
 800d640:	0800d5e5 	.word	0x0800d5e5
 800d644:	0800d699 	.word	0x0800d699
 800d648:	0800d5e5 	.word	0x0800d5e5
 800d64c:	0800d5e5 	.word	0x0800d5e5
 800d650:	0800d75f 	.word	0x0800d75f
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	1d1a      	adds	r2, r3, #4
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	602a      	str	r2, [r5, #0]
 800d65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d664:	2301      	movs	r3, #1
 800d666:	e0a3      	b.n	800d7b0 <_printf_i+0x1f4>
 800d668:	6820      	ldr	r0, [r4, #0]
 800d66a:	6829      	ldr	r1, [r5, #0]
 800d66c:	0606      	lsls	r6, r0, #24
 800d66e:	f101 0304 	add.w	r3, r1, #4
 800d672:	d50a      	bpl.n	800d68a <_printf_i+0xce>
 800d674:	680e      	ldr	r6, [r1, #0]
 800d676:	602b      	str	r3, [r5, #0]
 800d678:	2e00      	cmp	r6, #0
 800d67a:	da03      	bge.n	800d684 <_printf_i+0xc8>
 800d67c:	232d      	movs	r3, #45	; 0x2d
 800d67e:	4276      	negs	r6, r6
 800d680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d684:	485e      	ldr	r0, [pc, #376]	; (800d800 <_printf_i+0x244>)
 800d686:	230a      	movs	r3, #10
 800d688:	e019      	b.n	800d6be <_printf_i+0x102>
 800d68a:	680e      	ldr	r6, [r1, #0]
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d692:	bf18      	it	ne
 800d694:	b236      	sxthne	r6, r6
 800d696:	e7ef      	b.n	800d678 <_printf_i+0xbc>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	6820      	ldr	r0, [r4, #0]
 800d69c:	1d19      	adds	r1, r3, #4
 800d69e:	6029      	str	r1, [r5, #0]
 800d6a0:	0601      	lsls	r1, r0, #24
 800d6a2:	d501      	bpl.n	800d6a8 <_printf_i+0xec>
 800d6a4:	681e      	ldr	r6, [r3, #0]
 800d6a6:	e002      	b.n	800d6ae <_printf_i+0xf2>
 800d6a8:	0646      	lsls	r6, r0, #25
 800d6aa:	d5fb      	bpl.n	800d6a4 <_printf_i+0xe8>
 800d6ac:	881e      	ldrh	r6, [r3, #0]
 800d6ae:	4854      	ldr	r0, [pc, #336]	; (800d800 <_printf_i+0x244>)
 800d6b0:	2f6f      	cmp	r7, #111	; 0x6f
 800d6b2:	bf0c      	ite	eq
 800d6b4:	2308      	moveq	r3, #8
 800d6b6:	230a      	movne	r3, #10
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6be:	6865      	ldr	r5, [r4, #4]
 800d6c0:	60a5      	str	r5, [r4, #8]
 800d6c2:	2d00      	cmp	r5, #0
 800d6c4:	bfa2      	ittt	ge
 800d6c6:	6821      	ldrge	r1, [r4, #0]
 800d6c8:	f021 0104 	bicge.w	r1, r1, #4
 800d6cc:	6021      	strge	r1, [r4, #0]
 800d6ce:	b90e      	cbnz	r6, 800d6d4 <_printf_i+0x118>
 800d6d0:	2d00      	cmp	r5, #0
 800d6d2:	d04d      	beq.n	800d770 <_printf_i+0x1b4>
 800d6d4:	4615      	mov	r5, r2
 800d6d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6da:	fb03 6711 	mls	r7, r3, r1, r6
 800d6de:	5dc7      	ldrb	r7, [r0, r7]
 800d6e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6e4:	4637      	mov	r7, r6
 800d6e6:	42bb      	cmp	r3, r7
 800d6e8:	460e      	mov	r6, r1
 800d6ea:	d9f4      	bls.n	800d6d6 <_printf_i+0x11a>
 800d6ec:	2b08      	cmp	r3, #8
 800d6ee:	d10b      	bne.n	800d708 <_printf_i+0x14c>
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	07de      	lsls	r6, r3, #31
 800d6f4:	d508      	bpl.n	800d708 <_printf_i+0x14c>
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	6861      	ldr	r1, [r4, #4]
 800d6fa:	4299      	cmp	r1, r3
 800d6fc:	bfde      	ittt	le
 800d6fe:	2330      	movle	r3, #48	; 0x30
 800d700:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d704:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d708:	1b52      	subs	r2, r2, r5
 800d70a:	6122      	str	r2, [r4, #16]
 800d70c:	f8cd a000 	str.w	sl, [sp]
 800d710:	464b      	mov	r3, r9
 800d712:	aa03      	add	r2, sp, #12
 800d714:	4621      	mov	r1, r4
 800d716:	4640      	mov	r0, r8
 800d718:	f7ff fee2 	bl	800d4e0 <_printf_common>
 800d71c:	3001      	adds	r0, #1
 800d71e:	d14c      	bne.n	800d7ba <_printf_i+0x1fe>
 800d720:	f04f 30ff 	mov.w	r0, #4294967295
 800d724:	b004      	add	sp, #16
 800d726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72a:	4835      	ldr	r0, [pc, #212]	; (800d800 <_printf_i+0x244>)
 800d72c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d730:	6829      	ldr	r1, [r5, #0]
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	f851 6b04 	ldr.w	r6, [r1], #4
 800d738:	6029      	str	r1, [r5, #0]
 800d73a:	061d      	lsls	r5, r3, #24
 800d73c:	d514      	bpl.n	800d768 <_printf_i+0x1ac>
 800d73e:	07df      	lsls	r7, r3, #31
 800d740:	bf44      	itt	mi
 800d742:	f043 0320 	orrmi.w	r3, r3, #32
 800d746:	6023      	strmi	r3, [r4, #0]
 800d748:	b91e      	cbnz	r6, 800d752 <_printf_i+0x196>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f023 0320 	bic.w	r3, r3, #32
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	2310      	movs	r3, #16
 800d754:	e7b0      	b.n	800d6b8 <_printf_i+0xfc>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	f043 0320 	orr.w	r3, r3, #32
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	2378      	movs	r3, #120	; 0x78
 800d760:	4828      	ldr	r0, [pc, #160]	; (800d804 <_printf_i+0x248>)
 800d762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d766:	e7e3      	b.n	800d730 <_printf_i+0x174>
 800d768:	0659      	lsls	r1, r3, #25
 800d76a:	bf48      	it	mi
 800d76c:	b2b6      	uxthmi	r6, r6
 800d76e:	e7e6      	b.n	800d73e <_printf_i+0x182>
 800d770:	4615      	mov	r5, r2
 800d772:	e7bb      	b.n	800d6ec <_printf_i+0x130>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	6826      	ldr	r6, [r4, #0]
 800d778:	6961      	ldr	r1, [r4, #20]
 800d77a:	1d18      	adds	r0, r3, #4
 800d77c:	6028      	str	r0, [r5, #0]
 800d77e:	0635      	lsls	r5, r6, #24
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	d501      	bpl.n	800d788 <_printf_i+0x1cc>
 800d784:	6019      	str	r1, [r3, #0]
 800d786:	e002      	b.n	800d78e <_printf_i+0x1d2>
 800d788:	0670      	lsls	r0, r6, #25
 800d78a:	d5fb      	bpl.n	800d784 <_printf_i+0x1c8>
 800d78c:	8019      	strh	r1, [r3, #0]
 800d78e:	2300      	movs	r3, #0
 800d790:	6123      	str	r3, [r4, #16]
 800d792:	4615      	mov	r5, r2
 800d794:	e7ba      	b.n	800d70c <_printf_i+0x150>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	1d1a      	adds	r2, r3, #4
 800d79a:	602a      	str	r2, [r5, #0]
 800d79c:	681d      	ldr	r5, [r3, #0]
 800d79e:	6862      	ldr	r2, [r4, #4]
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f7f2 fd24 	bl	80001f0 <memchr>
 800d7a8:	b108      	cbz	r0, 800d7ae <_printf_i+0x1f2>
 800d7aa:	1b40      	subs	r0, r0, r5
 800d7ac:	6060      	str	r0, [r4, #4]
 800d7ae:	6863      	ldr	r3, [r4, #4]
 800d7b0:	6123      	str	r3, [r4, #16]
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7b8:	e7a8      	b.n	800d70c <_printf_i+0x150>
 800d7ba:	6923      	ldr	r3, [r4, #16]
 800d7bc:	462a      	mov	r2, r5
 800d7be:	4649      	mov	r1, r9
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	47d0      	blx	sl
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d0ab      	beq.n	800d720 <_printf_i+0x164>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	079b      	lsls	r3, r3, #30
 800d7cc:	d413      	bmi.n	800d7f6 <_printf_i+0x23a>
 800d7ce:	68e0      	ldr	r0, [r4, #12]
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	4298      	cmp	r0, r3
 800d7d4:	bfb8      	it	lt
 800d7d6:	4618      	movlt	r0, r3
 800d7d8:	e7a4      	b.n	800d724 <_printf_i+0x168>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4632      	mov	r2, r6
 800d7de:	4649      	mov	r1, r9
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	47d0      	blx	sl
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	d09b      	beq.n	800d720 <_printf_i+0x164>
 800d7e8:	3501      	adds	r5, #1
 800d7ea:	68e3      	ldr	r3, [r4, #12]
 800d7ec:	9903      	ldr	r1, [sp, #12]
 800d7ee:	1a5b      	subs	r3, r3, r1
 800d7f0:	42ab      	cmp	r3, r5
 800d7f2:	dcf2      	bgt.n	800d7da <_printf_i+0x21e>
 800d7f4:	e7eb      	b.n	800d7ce <_printf_i+0x212>
 800d7f6:	2500      	movs	r5, #0
 800d7f8:	f104 0619 	add.w	r6, r4, #25
 800d7fc:	e7f5      	b.n	800d7ea <_printf_i+0x22e>
 800d7fe:	bf00      	nop
 800d800:	080117fe 	.word	0x080117fe
 800d804:	0801180f 	.word	0x0801180f

0800d808 <_scanf_float>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	b087      	sub	sp, #28
 800d80e:	4617      	mov	r7, r2
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	688b      	ldr	r3, [r1, #8]
 800d814:	1e5a      	subs	r2, r3, #1
 800d816:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d81a:	bf83      	ittte	hi
 800d81c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d820:	195b      	addhi	r3, r3, r5
 800d822:	9302      	strhi	r3, [sp, #8]
 800d824:	2300      	movls	r3, #0
 800d826:	bf86      	itte	hi
 800d828:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d82c:	608b      	strhi	r3, [r1, #8]
 800d82e:	9302      	strls	r3, [sp, #8]
 800d830:	680b      	ldr	r3, [r1, #0]
 800d832:	468b      	mov	fp, r1
 800d834:	2500      	movs	r5, #0
 800d836:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d83a:	f84b 3b1c 	str.w	r3, [fp], #28
 800d83e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d842:	4680      	mov	r8, r0
 800d844:	460c      	mov	r4, r1
 800d846:	465e      	mov	r6, fp
 800d848:	46aa      	mov	sl, r5
 800d84a:	46a9      	mov	r9, r5
 800d84c:	9501      	str	r5, [sp, #4]
 800d84e:	68a2      	ldr	r2, [r4, #8]
 800d850:	b152      	cbz	r2, 800d868 <_scanf_float+0x60>
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b4e      	cmp	r3, #78	; 0x4e
 800d858:	d864      	bhi.n	800d924 <_scanf_float+0x11c>
 800d85a:	2b40      	cmp	r3, #64	; 0x40
 800d85c:	d83c      	bhi.n	800d8d8 <_scanf_float+0xd0>
 800d85e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d862:	b2c8      	uxtb	r0, r1
 800d864:	280e      	cmp	r0, #14
 800d866:	d93a      	bls.n	800d8de <_scanf_float+0xd6>
 800d868:	f1b9 0f00 	cmp.w	r9, #0
 800d86c:	d003      	beq.n	800d876 <_scanf_float+0x6e>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d87a:	f1ba 0f01 	cmp.w	sl, #1
 800d87e:	f200 8113 	bhi.w	800daa8 <_scanf_float+0x2a0>
 800d882:	455e      	cmp	r6, fp
 800d884:	f200 8105 	bhi.w	800da92 <_scanf_float+0x28a>
 800d888:	2501      	movs	r5, #1
 800d88a:	4628      	mov	r0, r5
 800d88c:	b007      	add	sp, #28
 800d88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d892:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d896:	2a0d      	cmp	r2, #13
 800d898:	d8e6      	bhi.n	800d868 <_scanf_float+0x60>
 800d89a:	a101      	add	r1, pc, #4	; (adr r1, 800d8a0 <_scanf_float+0x98>)
 800d89c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d8a0:	0800d9df 	.word	0x0800d9df
 800d8a4:	0800d869 	.word	0x0800d869
 800d8a8:	0800d869 	.word	0x0800d869
 800d8ac:	0800d869 	.word	0x0800d869
 800d8b0:	0800da3f 	.word	0x0800da3f
 800d8b4:	0800da17 	.word	0x0800da17
 800d8b8:	0800d869 	.word	0x0800d869
 800d8bc:	0800d869 	.word	0x0800d869
 800d8c0:	0800d9ed 	.word	0x0800d9ed
 800d8c4:	0800d869 	.word	0x0800d869
 800d8c8:	0800d869 	.word	0x0800d869
 800d8cc:	0800d869 	.word	0x0800d869
 800d8d0:	0800d869 	.word	0x0800d869
 800d8d4:	0800d9a5 	.word	0x0800d9a5
 800d8d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d8dc:	e7db      	b.n	800d896 <_scanf_float+0x8e>
 800d8de:	290e      	cmp	r1, #14
 800d8e0:	d8c2      	bhi.n	800d868 <_scanf_float+0x60>
 800d8e2:	a001      	add	r0, pc, #4	; (adr r0, 800d8e8 <_scanf_float+0xe0>)
 800d8e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d8e8:	0800d997 	.word	0x0800d997
 800d8ec:	0800d869 	.word	0x0800d869
 800d8f0:	0800d997 	.word	0x0800d997
 800d8f4:	0800da2b 	.word	0x0800da2b
 800d8f8:	0800d869 	.word	0x0800d869
 800d8fc:	0800d945 	.word	0x0800d945
 800d900:	0800d981 	.word	0x0800d981
 800d904:	0800d981 	.word	0x0800d981
 800d908:	0800d981 	.word	0x0800d981
 800d90c:	0800d981 	.word	0x0800d981
 800d910:	0800d981 	.word	0x0800d981
 800d914:	0800d981 	.word	0x0800d981
 800d918:	0800d981 	.word	0x0800d981
 800d91c:	0800d981 	.word	0x0800d981
 800d920:	0800d981 	.word	0x0800d981
 800d924:	2b6e      	cmp	r3, #110	; 0x6e
 800d926:	d809      	bhi.n	800d93c <_scanf_float+0x134>
 800d928:	2b60      	cmp	r3, #96	; 0x60
 800d92a:	d8b2      	bhi.n	800d892 <_scanf_float+0x8a>
 800d92c:	2b54      	cmp	r3, #84	; 0x54
 800d92e:	d077      	beq.n	800da20 <_scanf_float+0x218>
 800d930:	2b59      	cmp	r3, #89	; 0x59
 800d932:	d199      	bne.n	800d868 <_scanf_float+0x60>
 800d934:	2d07      	cmp	r5, #7
 800d936:	d197      	bne.n	800d868 <_scanf_float+0x60>
 800d938:	2508      	movs	r5, #8
 800d93a:	e029      	b.n	800d990 <_scanf_float+0x188>
 800d93c:	2b74      	cmp	r3, #116	; 0x74
 800d93e:	d06f      	beq.n	800da20 <_scanf_float+0x218>
 800d940:	2b79      	cmp	r3, #121	; 0x79
 800d942:	e7f6      	b.n	800d932 <_scanf_float+0x12a>
 800d944:	6821      	ldr	r1, [r4, #0]
 800d946:	05c8      	lsls	r0, r1, #23
 800d948:	d51a      	bpl.n	800d980 <_scanf_float+0x178>
 800d94a:	9b02      	ldr	r3, [sp, #8]
 800d94c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d950:	6021      	str	r1, [r4, #0]
 800d952:	f109 0901 	add.w	r9, r9, #1
 800d956:	b11b      	cbz	r3, 800d960 <_scanf_float+0x158>
 800d958:	3b01      	subs	r3, #1
 800d95a:	3201      	adds	r2, #1
 800d95c:	9302      	str	r3, [sp, #8]
 800d95e:	60a2      	str	r2, [r4, #8]
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	3b01      	subs	r3, #1
 800d964:	60a3      	str	r3, [r4, #8]
 800d966:	6923      	ldr	r3, [r4, #16]
 800d968:	3301      	adds	r3, #1
 800d96a:	6123      	str	r3, [r4, #16]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	3b01      	subs	r3, #1
 800d970:	2b00      	cmp	r3, #0
 800d972:	607b      	str	r3, [r7, #4]
 800d974:	f340 8084 	ble.w	800da80 <_scanf_float+0x278>
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	603b      	str	r3, [r7, #0]
 800d97e:	e766      	b.n	800d84e <_scanf_float+0x46>
 800d980:	eb1a 0f05 	cmn.w	sl, r5
 800d984:	f47f af70 	bne.w	800d868 <_scanf_float+0x60>
 800d988:	6822      	ldr	r2, [r4, #0]
 800d98a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d98e:	6022      	str	r2, [r4, #0]
 800d990:	f806 3b01 	strb.w	r3, [r6], #1
 800d994:	e7e4      	b.n	800d960 <_scanf_float+0x158>
 800d996:	6822      	ldr	r2, [r4, #0]
 800d998:	0610      	lsls	r0, r2, #24
 800d99a:	f57f af65 	bpl.w	800d868 <_scanf_float+0x60>
 800d99e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9a2:	e7f4      	b.n	800d98e <_scanf_float+0x186>
 800d9a4:	f1ba 0f00 	cmp.w	sl, #0
 800d9a8:	d10e      	bne.n	800d9c8 <_scanf_float+0x1c0>
 800d9aa:	f1b9 0f00 	cmp.w	r9, #0
 800d9ae:	d10e      	bne.n	800d9ce <_scanf_float+0x1c6>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d9b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d9ba:	d108      	bne.n	800d9ce <_scanf_float+0x1c6>
 800d9bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d9c0:	6022      	str	r2, [r4, #0]
 800d9c2:	f04f 0a01 	mov.w	sl, #1
 800d9c6:	e7e3      	b.n	800d990 <_scanf_float+0x188>
 800d9c8:	f1ba 0f02 	cmp.w	sl, #2
 800d9cc:	d055      	beq.n	800da7a <_scanf_float+0x272>
 800d9ce:	2d01      	cmp	r5, #1
 800d9d0:	d002      	beq.n	800d9d8 <_scanf_float+0x1d0>
 800d9d2:	2d04      	cmp	r5, #4
 800d9d4:	f47f af48 	bne.w	800d868 <_scanf_float+0x60>
 800d9d8:	3501      	adds	r5, #1
 800d9da:	b2ed      	uxtb	r5, r5
 800d9dc:	e7d8      	b.n	800d990 <_scanf_float+0x188>
 800d9de:	f1ba 0f01 	cmp.w	sl, #1
 800d9e2:	f47f af41 	bne.w	800d868 <_scanf_float+0x60>
 800d9e6:	f04f 0a02 	mov.w	sl, #2
 800d9ea:	e7d1      	b.n	800d990 <_scanf_float+0x188>
 800d9ec:	b97d      	cbnz	r5, 800da0e <_scanf_float+0x206>
 800d9ee:	f1b9 0f00 	cmp.w	r9, #0
 800d9f2:	f47f af3c 	bne.w	800d86e <_scanf_float+0x66>
 800d9f6:	6822      	ldr	r2, [r4, #0]
 800d9f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d9fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da00:	f47f af39 	bne.w	800d876 <_scanf_float+0x6e>
 800da04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da08:	6022      	str	r2, [r4, #0]
 800da0a:	2501      	movs	r5, #1
 800da0c:	e7c0      	b.n	800d990 <_scanf_float+0x188>
 800da0e:	2d03      	cmp	r5, #3
 800da10:	d0e2      	beq.n	800d9d8 <_scanf_float+0x1d0>
 800da12:	2d05      	cmp	r5, #5
 800da14:	e7de      	b.n	800d9d4 <_scanf_float+0x1cc>
 800da16:	2d02      	cmp	r5, #2
 800da18:	f47f af26 	bne.w	800d868 <_scanf_float+0x60>
 800da1c:	2503      	movs	r5, #3
 800da1e:	e7b7      	b.n	800d990 <_scanf_float+0x188>
 800da20:	2d06      	cmp	r5, #6
 800da22:	f47f af21 	bne.w	800d868 <_scanf_float+0x60>
 800da26:	2507      	movs	r5, #7
 800da28:	e7b2      	b.n	800d990 <_scanf_float+0x188>
 800da2a:	6822      	ldr	r2, [r4, #0]
 800da2c:	0591      	lsls	r1, r2, #22
 800da2e:	f57f af1b 	bpl.w	800d868 <_scanf_float+0x60>
 800da32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800da36:	6022      	str	r2, [r4, #0]
 800da38:	f8cd 9004 	str.w	r9, [sp, #4]
 800da3c:	e7a8      	b.n	800d990 <_scanf_float+0x188>
 800da3e:	6822      	ldr	r2, [r4, #0]
 800da40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800da44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800da48:	d006      	beq.n	800da58 <_scanf_float+0x250>
 800da4a:	0550      	lsls	r0, r2, #21
 800da4c:	f57f af0c 	bpl.w	800d868 <_scanf_float+0x60>
 800da50:	f1b9 0f00 	cmp.w	r9, #0
 800da54:	f43f af0f 	beq.w	800d876 <_scanf_float+0x6e>
 800da58:	0591      	lsls	r1, r2, #22
 800da5a:	bf58      	it	pl
 800da5c:	9901      	ldrpl	r1, [sp, #4]
 800da5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da62:	bf58      	it	pl
 800da64:	eba9 0101 	subpl.w	r1, r9, r1
 800da68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800da6c:	bf58      	it	pl
 800da6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800da72:	6022      	str	r2, [r4, #0]
 800da74:	f04f 0900 	mov.w	r9, #0
 800da78:	e78a      	b.n	800d990 <_scanf_float+0x188>
 800da7a:	f04f 0a03 	mov.w	sl, #3
 800da7e:	e787      	b.n	800d990 <_scanf_float+0x188>
 800da80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da84:	4639      	mov	r1, r7
 800da86:	4640      	mov	r0, r8
 800da88:	4798      	blx	r3
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f aedf 	beq.w	800d84e <_scanf_float+0x46>
 800da90:	e6ea      	b.n	800d868 <_scanf_float+0x60>
 800da92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da9a:	463a      	mov	r2, r7
 800da9c:	4640      	mov	r0, r8
 800da9e:	4798      	blx	r3
 800daa0:	6923      	ldr	r3, [r4, #16]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	6123      	str	r3, [r4, #16]
 800daa6:	e6ec      	b.n	800d882 <_scanf_float+0x7a>
 800daa8:	1e6b      	subs	r3, r5, #1
 800daaa:	2b06      	cmp	r3, #6
 800daac:	d825      	bhi.n	800dafa <_scanf_float+0x2f2>
 800daae:	2d02      	cmp	r5, #2
 800dab0:	d836      	bhi.n	800db20 <_scanf_float+0x318>
 800dab2:	455e      	cmp	r6, fp
 800dab4:	f67f aee8 	bls.w	800d888 <_scanf_float+0x80>
 800dab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dabc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dac0:	463a      	mov	r2, r7
 800dac2:	4640      	mov	r0, r8
 800dac4:	4798      	blx	r3
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	3b01      	subs	r3, #1
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	e7f1      	b.n	800dab2 <_scanf_float+0x2aa>
 800dace:	9802      	ldr	r0, [sp, #8]
 800dad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dad4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dad8:	9002      	str	r0, [sp, #8]
 800dada:	463a      	mov	r2, r7
 800dadc:	4640      	mov	r0, r8
 800dade:	4798      	blx	r3
 800dae0:	6923      	ldr	r3, [r4, #16]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daea:	fa5f fa8a 	uxtb.w	sl, sl
 800daee:	f1ba 0f02 	cmp.w	sl, #2
 800daf2:	d1ec      	bne.n	800dace <_scanf_float+0x2c6>
 800daf4:	3d03      	subs	r5, #3
 800daf6:	b2ed      	uxtb	r5, r5
 800daf8:	1b76      	subs	r6, r6, r5
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	05da      	lsls	r2, r3, #23
 800dafe:	d52f      	bpl.n	800db60 <_scanf_float+0x358>
 800db00:	055b      	lsls	r3, r3, #21
 800db02:	d510      	bpl.n	800db26 <_scanf_float+0x31e>
 800db04:	455e      	cmp	r6, fp
 800db06:	f67f aebf 	bls.w	800d888 <_scanf_float+0x80>
 800db0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db12:	463a      	mov	r2, r7
 800db14:	4640      	mov	r0, r8
 800db16:	4798      	blx	r3
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	e7f1      	b.n	800db04 <_scanf_float+0x2fc>
 800db20:	46aa      	mov	sl, r5
 800db22:	9602      	str	r6, [sp, #8]
 800db24:	e7df      	b.n	800dae6 <_scanf_float+0x2de>
 800db26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	2965      	cmp	r1, #101	; 0x65
 800db2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800db32:	f106 35ff 	add.w	r5, r6, #4294967295
 800db36:	6123      	str	r3, [r4, #16]
 800db38:	d00c      	beq.n	800db54 <_scanf_float+0x34c>
 800db3a:	2945      	cmp	r1, #69	; 0x45
 800db3c:	d00a      	beq.n	800db54 <_scanf_float+0x34c>
 800db3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db42:	463a      	mov	r2, r7
 800db44:	4640      	mov	r0, r8
 800db46:	4798      	blx	r3
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800db4e:	3b01      	subs	r3, #1
 800db50:	1eb5      	subs	r5, r6, #2
 800db52:	6123      	str	r3, [r4, #16]
 800db54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db58:	463a      	mov	r2, r7
 800db5a:	4640      	mov	r0, r8
 800db5c:	4798      	blx	r3
 800db5e:	462e      	mov	r6, r5
 800db60:	6825      	ldr	r5, [r4, #0]
 800db62:	f015 0510 	ands.w	r5, r5, #16
 800db66:	d159      	bne.n	800dc1c <_scanf_float+0x414>
 800db68:	7035      	strb	r5, [r6, #0]
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800db70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db74:	d11b      	bne.n	800dbae <_scanf_float+0x3a6>
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	454b      	cmp	r3, r9
 800db7a:	eba3 0209 	sub.w	r2, r3, r9
 800db7e:	d123      	bne.n	800dbc8 <_scanf_float+0x3c0>
 800db80:	2200      	movs	r2, #0
 800db82:	4659      	mov	r1, fp
 800db84:	4640      	mov	r0, r8
 800db86:	f000 ff55 	bl	800ea34 <_strtod_r>
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	f012 0f02 	tst.w	r2, #2
 800db92:	ec57 6b10 	vmov	r6, r7, d0
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	d021      	beq.n	800dbde <_scanf_float+0x3d6>
 800db9a:	9903      	ldr	r1, [sp, #12]
 800db9c:	1d1a      	adds	r2, r3, #4
 800db9e:	600a      	str	r2, [r1, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	e9c3 6700 	strd	r6, r7, [r3]
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	60e3      	str	r3, [r4, #12]
 800dbac:	e66d      	b.n	800d88a <_scanf_float+0x82>
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d0e5      	beq.n	800db80 <_scanf_float+0x378>
 800dbb4:	9905      	ldr	r1, [sp, #20]
 800dbb6:	230a      	movs	r3, #10
 800dbb8:	462a      	mov	r2, r5
 800dbba:	3101      	adds	r1, #1
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	f000 ffc1 	bl	800eb44 <_strtol_r>
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	9e05      	ldr	r6, [sp, #20]
 800dbc6:	1ac2      	subs	r2, r0, r3
 800dbc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dbcc:	429e      	cmp	r6, r3
 800dbce:	bf28      	it	cs
 800dbd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dbd4:	4912      	ldr	r1, [pc, #72]	; (800dc20 <_scanf_float+0x418>)
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f000 f8a6 	bl	800dd28 <siprintf>
 800dbdc:	e7d0      	b.n	800db80 <_scanf_float+0x378>
 800dbde:	9903      	ldr	r1, [sp, #12]
 800dbe0:	f012 0f04 	tst.w	r2, #4
 800dbe4:	f103 0204 	add.w	r2, r3, #4
 800dbe8:	600a      	str	r2, [r1, #0]
 800dbea:	d1d9      	bne.n	800dba0 <_scanf_float+0x398>
 800dbec:	f8d3 8000 	ldr.w	r8, [r3]
 800dbf0:	ee10 2a10 	vmov	r2, s0
 800dbf4:	ee10 0a10 	vmov	r0, s0
 800dbf8:	463b      	mov	r3, r7
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	f7f2 ff9e 	bl	8000b3c <__aeabi_dcmpun>
 800dc00:	b128      	cbz	r0, 800dc0e <_scanf_float+0x406>
 800dc02:	4808      	ldr	r0, [pc, #32]	; (800dc24 <_scanf_float+0x41c>)
 800dc04:	f000 f88a 	bl	800dd1c <nanf>
 800dc08:	ed88 0a00 	vstr	s0, [r8]
 800dc0c:	e7cb      	b.n	800dba6 <_scanf_float+0x39e>
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	f7f2 fff1 	bl	8000bf8 <__aeabi_d2f>
 800dc16:	f8c8 0000 	str.w	r0, [r8]
 800dc1a:	e7c4      	b.n	800dba6 <_scanf_float+0x39e>
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	e634      	b.n	800d88a <_scanf_float+0x82>
 800dc20:	08011820 	.word	0x08011820
 800dc24:	08011c28 	.word	0x08011c28

0800dc28 <cleanup_glue>:
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	6809      	ldr	r1, [r1, #0]
 800dc2e:	4605      	mov	r5, r0
 800dc30:	b109      	cbz	r1, 800dc36 <cleanup_glue+0xe>
 800dc32:	f7ff fff9 	bl	800dc28 <cleanup_glue>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4628      	mov	r0, r5
 800dc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc3e:	f002 bf67 	b.w	8010b10 <_free_r>
	...

0800dc44 <_reclaim_reent>:
 800dc44:	4b2c      	ldr	r3, [pc, #176]	; (800dcf8 <_reclaim_reent+0xb4>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4283      	cmp	r3, r0
 800dc4a:	b570      	push	{r4, r5, r6, lr}
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	d051      	beq.n	800dcf4 <_reclaim_reent+0xb0>
 800dc50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dc52:	b143      	cbz	r3, 800dc66 <_reclaim_reent+0x22>
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d14a      	bne.n	800dcf0 <_reclaim_reent+0xac>
 800dc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc5c:	6819      	ldr	r1, [r3, #0]
 800dc5e:	b111      	cbz	r1, 800dc66 <_reclaim_reent+0x22>
 800dc60:	4620      	mov	r0, r4
 800dc62:	f002 ff55 	bl	8010b10 <_free_r>
 800dc66:	6961      	ldr	r1, [r4, #20]
 800dc68:	b111      	cbz	r1, 800dc70 <_reclaim_reent+0x2c>
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f002 ff50 	bl	8010b10 <_free_r>
 800dc70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc72:	b111      	cbz	r1, 800dc7a <_reclaim_reent+0x36>
 800dc74:	4620      	mov	r0, r4
 800dc76:	f002 ff4b 	bl	8010b10 <_free_r>
 800dc7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc7c:	b111      	cbz	r1, 800dc84 <_reclaim_reent+0x40>
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f002 ff46 	bl	8010b10 <_free_r>
 800dc84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc86:	b111      	cbz	r1, 800dc8e <_reclaim_reent+0x4a>
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f002 ff41 	bl	8010b10 <_free_r>
 800dc8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dc90:	b111      	cbz	r1, 800dc98 <_reclaim_reent+0x54>
 800dc92:	4620      	mov	r0, r4
 800dc94:	f002 ff3c 	bl	8010b10 <_free_r>
 800dc98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dc9a:	b111      	cbz	r1, 800dca2 <_reclaim_reent+0x5e>
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f002 ff37 	bl	8010b10 <_free_r>
 800dca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dca4:	b111      	cbz	r1, 800dcac <_reclaim_reent+0x68>
 800dca6:	4620      	mov	r0, r4
 800dca8:	f002 ff32 	bl	8010b10 <_free_r>
 800dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcae:	b111      	cbz	r1, 800dcb6 <_reclaim_reent+0x72>
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f002 ff2d 	bl	8010b10 <_free_r>
 800dcb6:	69a3      	ldr	r3, [r4, #24]
 800dcb8:	b1e3      	cbz	r3, 800dcf4 <_reclaim_reent+0xb0>
 800dcba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	4798      	blx	r3
 800dcc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dcc2:	b1b9      	cbz	r1, 800dcf4 <_reclaim_reent+0xb0>
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcca:	f7ff bfad 	b.w	800dc28 <cleanup_glue>
 800dcce:	5949      	ldr	r1, [r1, r5]
 800dcd0:	b941      	cbnz	r1, 800dce4 <_reclaim_reent+0xa0>
 800dcd2:	3504      	adds	r5, #4
 800dcd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcd6:	2d80      	cmp	r5, #128	; 0x80
 800dcd8:	68d9      	ldr	r1, [r3, #12]
 800dcda:	d1f8      	bne.n	800dcce <_reclaim_reent+0x8a>
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f002 ff17 	bl	8010b10 <_free_r>
 800dce2:	e7ba      	b.n	800dc5a <_reclaim_reent+0x16>
 800dce4:	680e      	ldr	r6, [r1, #0]
 800dce6:	4620      	mov	r0, r4
 800dce8:	f002 ff12 	bl	8010b10 <_free_r>
 800dcec:	4631      	mov	r1, r6
 800dcee:	e7ef      	b.n	800dcd0 <_reclaim_reent+0x8c>
 800dcf0:	2500      	movs	r5, #0
 800dcf2:	e7ef      	b.n	800dcd4 <_reclaim_reent+0x90>
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20000150 	.word	0x20000150

0800dcfc <_sbrk_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4d06      	ldr	r5, [pc, #24]	; (800dd18 <_sbrk_r+0x1c>)
 800dd00:	2300      	movs	r3, #0
 800dd02:	4604      	mov	r4, r0
 800dd04:	4608      	mov	r0, r1
 800dd06:	602b      	str	r3, [r5, #0]
 800dd08:	f7f4 fafc 	bl	8002304 <_sbrk>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d102      	bne.n	800dd16 <_sbrk_r+0x1a>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b103      	cbz	r3, 800dd16 <_sbrk_r+0x1a>
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	200059b8 	.word	0x200059b8

0800dd1c <nanf>:
 800dd1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd24 <nanf+0x8>
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	7fc00000 	.word	0x7fc00000

0800dd28 <siprintf>:
 800dd28:	b40e      	push	{r1, r2, r3}
 800dd2a:	b500      	push	{lr}
 800dd2c:	b09c      	sub	sp, #112	; 0x70
 800dd2e:	ab1d      	add	r3, sp, #116	; 0x74
 800dd30:	9002      	str	r0, [sp, #8]
 800dd32:	9006      	str	r0, [sp, #24]
 800dd34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd38:	4809      	ldr	r0, [pc, #36]	; (800dd60 <siprintf+0x38>)
 800dd3a:	9107      	str	r1, [sp, #28]
 800dd3c:	9104      	str	r1, [sp, #16]
 800dd3e:	4909      	ldr	r1, [pc, #36]	; (800dd64 <siprintf+0x3c>)
 800dd40:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd44:	9105      	str	r1, [sp, #20]
 800dd46:	6800      	ldr	r0, [r0, #0]
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	a902      	add	r1, sp, #8
 800dd4c:	f002 ff88 	bl	8010c60 <_svfiprintf_r>
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]
 800dd56:	b01c      	add	sp, #112	; 0x70
 800dd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd5c:	b003      	add	sp, #12
 800dd5e:	4770      	bx	lr
 800dd60:	20000150 	.word	0x20000150
 800dd64:	ffff0208 	.word	0xffff0208

0800dd68 <__sread>:
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd70:	f003 f876 	bl	8010e60 <_read_r>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	bfab      	itete	ge
 800dd78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd7a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd7c:	181b      	addge	r3, r3, r0
 800dd7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd82:	bfac      	ite	ge
 800dd84:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd86:	81a3      	strhlt	r3, [r4, #12]
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <__swrite>:
 800dd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8e:	461f      	mov	r7, r3
 800dd90:	898b      	ldrh	r3, [r1, #12]
 800dd92:	05db      	lsls	r3, r3, #23
 800dd94:	4605      	mov	r5, r0
 800dd96:	460c      	mov	r4, r1
 800dd98:	4616      	mov	r6, r2
 800dd9a:	d505      	bpl.n	800dda8 <__swrite+0x1e>
 800dd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda0:	2302      	movs	r3, #2
 800dda2:	2200      	movs	r2, #0
 800dda4:	f002 f9a4 	bl	80100f0 <_lseek_r>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	463b      	mov	r3, r7
 800ddb8:	4628      	mov	r0, r5
 800ddba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbe:	f000 bec3 	b.w	800eb48 <_write_r>

0800ddc2 <__sseek>:
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddca:	f002 f991 	bl	80100f0 <_lseek_r>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	bf15      	itete	ne
 800ddd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddde:	81a3      	strheq	r3, [r4, #12]
 800dde0:	bf18      	it	ne
 800dde2:	81a3      	strhne	r3, [r4, #12]
 800dde4:	bd10      	pop	{r4, pc}

0800dde6 <__sclose>:
 800dde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddea:	f000 bebf 	b.w	800eb6c <_close_r>

0800ddee <sulp>:
 800ddee:	b570      	push	{r4, r5, r6, lr}
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	460d      	mov	r5, r1
 800ddf4:	ec45 4b10 	vmov	d0, r4, r5
 800ddf8:	4616      	mov	r6, r2
 800ddfa:	f002 fd23 	bl	8010844 <__ulp>
 800ddfe:	ec51 0b10 	vmov	r0, r1, d0
 800de02:	b17e      	cbz	r6, 800de24 <sulp+0x36>
 800de04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800de08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dd09      	ble.n	800de24 <sulp+0x36>
 800de10:	051b      	lsls	r3, r3, #20
 800de12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800de16:	2400      	movs	r4, #0
 800de18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800de1c:	4622      	mov	r2, r4
 800de1e:	462b      	mov	r3, r5
 800de20:	f7f2 fbf2 	bl	8000608 <__aeabi_dmul>
 800de24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de28 <_strtod_l>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	ed2d 8b02 	vpush	{d8}
 800de30:	b09d      	sub	sp, #116	; 0x74
 800de32:	461f      	mov	r7, r3
 800de34:	2300      	movs	r3, #0
 800de36:	9318      	str	r3, [sp, #96]	; 0x60
 800de38:	4ba2      	ldr	r3, [pc, #648]	; (800e0c4 <_strtod_l+0x29c>)
 800de3a:	9213      	str	r2, [sp, #76]	; 0x4c
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	9305      	str	r3, [sp, #20]
 800de40:	4604      	mov	r4, r0
 800de42:	4618      	mov	r0, r3
 800de44:	4688      	mov	r8, r1
 800de46:	f7f2 f9cb 	bl	80001e0 <strlen>
 800de4a:	f04f 0a00 	mov.w	sl, #0
 800de4e:	4605      	mov	r5, r0
 800de50:	f04f 0b00 	mov.w	fp, #0
 800de54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800de58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de5a:	781a      	ldrb	r2, [r3, #0]
 800de5c:	2a2b      	cmp	r2, #43	; 0x2b
 800de5e:	d04e      	beq.n	800defe <_strtod_l+0xd6>
 800de60:	d83b      	bhi.n	800deda <_strtod_l+0xb2>
 800de62:	2a0d      	cmp	r2, #13
 800de64:	d834      	bhi.n	800ded0 <_strtod_l+0xa8>
 800de66:	2a08      	cmp	r2, #8
 800de68:	d834      	bhi.n	800ded4 <_strtod_l+0xac>
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	d03e      	beq.n	800deec <_strtod_l+0xc4>
 800de6e:	2300      	movs	r3, #0
 800de70:	930a      	str	r3, [sp, #40]	; 0x28
 800de72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de74:	7833      	ldrb	r3, [r6, #0]
 800de76:	2b30      	cmp	r3, #48	; 0x30
 800de78:	f040 80b0 	bne.w	800dfdc <_strtod_l+0x1b4>
 800de7c:	7873      	ldrb	r3, [r6, #1]
 800de7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de82:	2b58      	cmp	r3, #88	; 0x58
 800de84:	d168      	bne.n	800df58 <_strtod_l+0x130>
 800de86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	ab18      	add	r3, sp, #96	; 0x60
 800de8c:	9702      	str	r7, [sp, #8]
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	4a8d      	ldr	r2, [pc, #564]	; (800e0c8 <_strtod_l+0x2a0>)
 800de92:	ab19      	add	r3, sp, #100	; 0x64
 800de94:	a917      	add	r1, sp, #92	; 0x5c
 800de96:	4620      	mov	r0, r4
 800de98:	f001 fe1e 	bl	800fad8 <__gethex>
 800de9c:	f010 0707 	ands.w	r7, r0, #7
 800dea0:	4605      	mov	r5, r0
 800dea2:	d005      	beq.n	800deb0 <_strtod_l+0x88>
 800dea4:	2f06      	cmp	r7, #6
 800dea6:	d12c      	bne.n	800df02 <_strtod_l+0xda>
 800dea8:	3601      	adds	r6, #1
 800deaa:	2300      	movs	r3, #0
 800deac:	9617      	str	r6, [sp, #92]	; 0x5c
 800deae:	930a      	str	r3, [sp, #40]	; 0x28
 800deb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f040 8590 	bne.w	800e9d8 <_strtod_l+0xbb0>
 800deb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deba:	b1eb      	cbz	r3, 800def8 <_strtod_l+0xd0>
 800debc:	4652      	mov	r2, sl
 800debe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dec2:	ec43 2b10 	vmov	d0, r2, r3
 800dec6:	b01d      	add	sp, #116	; 0x74
 800dec8:	ecbd 8b02 	vpop	{d8}
 800decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	2a20      	cmp	r2, #32
 800ded2:	d1cc      	bne.n	800de6e <_strtod_l+0x46>
 800ded4:	3301      	adds	r3, #1
 800ded6:	9317      	str	r3, [sp, #92]	; 0x5c
 800ded8:	e7be      	b.n	800de58 <_strtod_l+0x30>
 800deda:	2a2d      	cmp	r2, #45	; 0x2d
 800dedc:	d1c7      	bne.n	800de6e <_strtod_l+0x46>
 800dede:	2201      	movs	r2, #1
 800dee0:	920a      	str	r2, [sp, #40]	; 0x28
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	9217      	str	r2, [sp, #92]	; 0x5c
 800dee6:	785b      	ldrb	r3, [r3, #1]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1c2      	bne.n	800de72 <_strtod_l+0x4a>
 800deec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800def2:	2b00      	cmp	r3, #0
 800def4:	f040 856e 	bne.w	800e9d4 <_strtod_l+0xbac>
 800def8:	4652      	mov	r2, sl
 800defa:	465b      	mov	r3, fp
 800defc:	e7e1      	b.n	800dec2 <_strtod_l+0x9a>
 800defe:	2200      	movs	r2, #0
 800df00:	e7ee      	b.n	800dee0 <_strtod_l+0xb8>
 800df02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df04:	b13a      	cbz	r2, 800df16 <_strtod_l+0xee>
 800df06:	2135      	movs	r1, #53	; 0x35
 800df08:	a81a      	add	r0, sp, #104	; 0x68
 800df0a:	f002 fda6 	bl	8010a5a <__copybits>
 800df0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df10:	4620      	mov	r0, r4
 800df12:	f002 f965 	bl	80101e0 <_Bfree>
 800df16:	3f01      	subs	r7, #1
 800df18:	2f04      	cmp	r7, #4
 800df1a:	d806      	bhi.n	800df2a <_strtod_l+0x102>
 800df1c:	e8df f007 	tbb	[pc, r7]
 800df20:	1714030a 	.word	0x1714030a
 800df24:	0a          	.byte	0x0a
 800df25:	00          	.byte	0x00
 800df26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800df2a:	0728      	lsls	r0, r5, #28
 800df2c:	d5c0      	bpl.n	800deb0 <_strtod_l+0x88>
 800df2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800df32:	e7bd      	b.n	800deb0 <_strtod_l+0x88>
 800df34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800df38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800df3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800df42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800df46:	e7f0      	b.n	800df2a <_strtod_l+0x102>
 800df48:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e0cc <_strtod_l+0x2a4>
 800df4c:	e7ed      	b.n	800df2a <_strtod_l+0x102>
 800df4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800df52:	f04f 3aff 	mov.w	sl, #4294967295
 800df56:	e7e8      	b.n	800df2a <_strtod_l+0x102>
 800df58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800df5e:	785b      	ldrb	r3, [r3, #1]
 800df60:	2b30      	cmp	r3, #48	; 0x30
 800df62:	d0f9      	beq.n	800df58 <_strtod_l+0x130>
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0a3      	beq.n	800deb0 <_strtod_l+0x88>
 800df68:	2301      	movs	r3, #1
 800df6a:	f04f 0900 	mov.w	r9, #0
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df72:	9308      	str	r3, [sp, #32]
 800df74:	f8cd 901c 	str.w	r9, [sp, #28]
 800df78:	464f      	mov	r7, r9
 800df7a:	220a      	movs	r2, #10
 800df7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800df7e:	7806      	ldrb	r6, [r0, #0]
 800df80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800df84:	b2d9      	uxtb	r1, r3
 800df86:	2909      	cmp	r1, #9
 800df88:	d92a      	bls.n	800dfe0 <_strtod_l+0x1b8>
 800df8a:	9905      	ldr	r1, [sp, #20]
 800df8c:	462a      	mov	r2, r5
 800df8e:	f002 ff83 	bl	8010e98 <strncmp>
 800df92:	b398      	cbz	r0, 800dffc <_strtod_l+0x1d4>
 800df94:	2000      	movs	r0, #0
 800df96:	4632      	mov	r2, r6
 800df98:	463d      	mov	r5, r7
 800df9a:	9005      	str	r0, [sp, #20]
 800df9c:	4603      	mov	r3, r0
 800df9e:	2a65      	cmp	r2, #101	; 0x65
 800dfa0:	d001      	beq.n	800dfa6 <_strtod_l+0x17e>
 800dfa2:	2a45      	cmp	r2, #69	; 0x45
 800dfa4:	d118      	bne.n	800dfd8 <_strtod_l+0x1b0>
 800dfa6:	b91d      	cbnz	r5, 800dfb0 <_strtod_l+0x188>
 800dfa8:	9a04      	ldr	r2, [sp, #16]
 800dfaa:	4302      	orrs	r2, r0
 800dfac:	d09e      	beq.n	800deec <_strtod_l+0xc4>
 800dfae:	2500      	movs	r5, #0
 800dfb0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dfb4:	f108 0201 	add.w	r2, r8, #1
 800dfb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfba:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dfbe:	2a2b      	cmp	r2, #43	; 0x2b
 800dfc0:	d075      	beq.n	800e0ae <_strtod_l+0x286>
 800dfc2:	2a2d      	cmp	r2, #45	; 0x2d
 800dfc4:	d07b      	beq.n	800e0be <_strtod_l+0x296>
 800dfc6:	f04f 0c00 	mov.w	ip, #0
 800dfca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dfce:	2909      	cmp	r1, #9
 800dfd0:	f240 8082 	bls.w	800e0d8 <_strtod_l+0x2b0>
 800dfd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dfd8:	2600      	movs	r6, #0
 800dfda:	e09d      	b.n	800e118 <_strtod_l+0x2f0>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e7c4      	b.n	800df6a <_strtod_l+0x142>
 800dfe0:	2f08      	cmp	r7, #8
 800dfe2:	bfd8      	it	le
 800dfe4:	9907      	ldrle	r1, [sp, #28]
 800dfe6:	f100 0001 	add.w	r0, r0, #1
 800dfea:	bfda      	itte	le
 800dfec:	fb02 3301 	mlale	r3, r2, r1, r3
 800dff0:	9307      	strle	r3, [sp, #28]
 800dff2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dff6:	3701      	adds	r7, #1
 800dff8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dffa:	e7bf      	b.n	800df7c <_strtod_l+0x154>
 800dffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dffe:	195a      	adds	r2, r3, r5
 800e000:	9217      	str	r2, [sp, #92]	; 0x5c
 800e002:	5d5a      	ldrb	r2, [r3, r5]
 800e004:	2f00      	cmp	r7, #0
 800e006:	d037      	beq.n	800e078 <_strtod_l+0x250>
 800e008:	9005      	str	r0, [sp, #20]
 800e00a:	463d      	mov	r5, r7
 800e00c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e010:	2b09      	cmp	r3, #9
 800e012:	d912      	bls.n	800e03a <_strtod_l+0x212>
 800e014:	2301      	movs	r3, #1
 800e016:	e7c2      	b.n	800df9e <_strtod_l+0x176>
 800e018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e01e:	785a      	ldrb	r2, [r3, #1]
 800e020:	3001      	adds	r0, #1
 800e022:	2a30      	cmp	r2, #48	; 0x30
 800e024:	d0f8      	beq.n	800e018 <_strtod_l+0x1f0>
 800e026:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	f200 84d9 	bhi.w	800e9e2 <_strtod_l+0xbba>
 800e030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e032:	9005      	str	r0, [sp, #20]
 800e034:	2000      	movs	r0, #0
 800e036:	9308      	str	r3, [sp, #32]
 800e038:	4605      	mov	r5, r0
 800e03a:	3a30      	subs	r2, #48	; 0x30
 800e03c:	f100 0301 	add.w	r3, r0, #1
 800e040:	d014      	beq.n	800e06c <_strtod_l+0x244>
 800e042:	9905      	ldr	r1, [sp, #20]
 800e044:	4419      	add	r1, r3
 800e046:	9105      	str	r1, [sp, #20]
 800e048:	462b      	mov	r3, r5
 800e04a:	eb00 0e05 	add.w	lr, r0, r5
 800e04e:	210a      	movs	r1, #10
 800e050:	4573      	cmp	r3, lr
 800e052:	d113      	bne.n	800e07c <_strtod_l+0x254>
 800e054:	182b      	adds	r3, r5, r0
 800e056:	2b08      	cmp	r3, #8
 800e058:	f105 0501 	add.w	r5, r5, #1
 800e05c:	4405      	add	r5, r0
 800e05e:	dc1c      	bgt.n	800e09a <_strtod_l+0x272>
 800e060:	9907      	ldr	r1, [sp, #28]
 800e062:	230a      	movs	r3, #10
 800e064:	fb03 2301 	mla	r3, r3, r1, r2
 800e068:	9307      	str	r3, [sp, #28]
 800e06a:	2300      	movs	r3, #0
 800e06c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e06e:	1c51      	adds	r1, r2, #1
 800e070:	9117      	str	r1, [sp, #92]	; 0x5c
 800e072:	7852      	ldrb	r2, [r2, #1]
 800e074:	4618      	mov	r0, r3
 800e076:	e7c9      	b.n	800e00c <_strtod_l+0x1e4>
 800e078:	4638      	mov	r0, r7
 800e07a:	e7d2      	b.n	800e022 <_strtod_l+0x1fa>
 800e07c:	2b08      	cmp	r3, #8
 800e07e:	dc04      	bgt.n	800e08a <_strtod_l+0x262>
 800e080:	9e07      	ldr	r6, [sp, #28]
 800e082:	434e      	muls	r6, r1
 800e084:	9607      	str	r6, [sp, #28]
 800e086:	3301      	adds	r3, #1
 800e088:	e7e2      	b.n	800e050 <_strtod_l+0x228>
 800e08a:	f103 0c01 	add.w	ip, r3, #1
 800e08e:	f1bc 0f10 	cmp.w	ip, #16
 800e092:	bfd8      	it	le
 800e094:	fb01 f909 	mulle.w	r9, r1, r9
 800e098:	e7f5      	b.n	800e086 <_strtod_l+0x25e>
 800e09a:	2d10      	cmp	r5, #16
 800e09c:	bfdc      	itt	le
 800e09e:	230a      	movle	r3, #10
 800e0a0:	fb03 2909 	mlale	r9, r3, r9, r2
 800e0a4:	e7e1      	b.n	800e06a <_strtod_l+0x242>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9305      	str	r3, [sp, #20]
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e77c      	b.n	800dfa8 <_strtod_l+0x180>
 800e0ae:	f04f 0c00 	mov.w	ip, #0
 800e0b2:	f108 0202 	add.w	r2, r8, #2
 800e0b6:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e0bc:	e785      	b.n	800dfca <_strtod_l+0x1a2>
 800e0be:	f04f 0c01 	mov.w	ip, #1
 800e0c2:	e7f6      	b.n	800e0b2 <_strtod_l+0x28a>
 800e0c4:	08011a70 	.word	0x08011a70
 800e0c8:	08011828 	.word	0x08011828
 800e0cc:	7ff00000 	.word	0x7ff00000
 800e0d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0d2:	1c51      	adds	r1, r2, #1
 800e0d4:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0d6:	7852      	ldrb	r2, [r2, #1]
 800e0d8:	2a30      	cmp	r2, #48	; 0x30
 800e0da:	d0f9      	beq.n	800e0d0 <_strtod_l+0x2a8>
 800e0dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e0e0:	2908      	cmp	r1, #8
 800e0e2:	f63f af79 	bhi.w	800dfd8 <_strtod_l+0x1b0>
 800e0e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e0ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0ec:	9206      	str	r2, [sp, #24]
 800e0ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0f0:	1c51      	adds	r1, r2, #1
 800e0f2:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0f4:	7852      	ldrb	r2, [r2, #1]
 800e0f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e0fa:	2e09      	cmp	r6, #9
 800e0fc:	d937      	bls.n	800e16e <_strtod_l+0x346>
 800e0fe:	9e06      	ldr	r6, [sp, #24]
 800e100:	1b89      	subs	r1, r1, r6
 800e102:	2908      	cmp	r1, #8
 800e104:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e108:	dc02      	bgt.n	800e110 <_strtod_l+0x2e8>
 800e10a:	4576      	cmp	r6, lr
 800e10c:	bfa8      	it	ge
 800e10e:	4676      	movge	r6, lr
 800e110:	f1bc 0f00 	cmp.w	ip, #0
 800e114:	d000      	beq.n	800e118 <_strtod_l+0x2f0>
 800e116:	4276      	negs	r6, r6
 800e118:	2d00      	cmp	r5, #0
 800e11a:	d14d      	bne.n	800e1b8 <_strtod_l+0x390>
 800e11c:	9904      	ldr	r1, [sp, #16]
 800e11e:	4301      	orrs	r1, r0
 800e120:	f47f aec6 	bne.w	800deb0 <_strtod_l+0x88>
 800e124:	2b00      	cmp	r3, #0
 800e126:	f47f aee1 	bne.w	800deec <_strtod_l+0xc4>
 800e12a:	2a69      	cmp	r2, #105	; 0x69
 800e12c:	d027      	beq.n	800e17e <_strtod_l+0x356>
 800e12e:	dc24      	bgt.n	800e17a <_strtod_l+0x352>
 800e130:	2a49      	cmp	r2, #73	; 0x49
 800e132:	d024      	beq.n	800e17e <_strtod_l+0x356>
 800e134:	2a4e      	cmp	r2, #78	; 0x4e
 800e136:	f47f aed9 	bne.w	800deec <_strtod_l+0xc4>
 800e13a:	499f      	ldr	r1, [pc, #636]	; (800e3b8 <_strtod_l+0x590>)
 800e13c:	a817      	add	r0, sp, #92	; 0x5c
 800e13e:	f001 ff23 	bl	800ff88 <__match>
 800e142:	2800      	cmp	r0, #0
 800e144:	f43f aed2 	beq.w	800deec <_strtod_l+0xc4>
 800e148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b28      	cmp	r3, #40	; 0x28
 800e14e:	d12d      	bne.n	800e1ac <_strtod_l+0x384>
 800e150:	499a      	ldr	r1, [pc, #616]	; (800e3bc <_strtod_l+0x594>)
 800e152:	aa1a      	add	r2, sp, #104	; 0x68
 800e154:	a817      	add	r0, sp, #92	; 0x5c
 800e156:	f001 ff2b 	bl	800ffb0 <__hexnan>
 800e15a:	2805      	cmp	r0, #5
 800e15c:	d126      	bne.n	800e1ac <_strtod_l+0x384>
 800e15e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e160:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e164:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e168:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e16c:	e6a0      	b.n	800deb0 <_strtod_l+0x88>
 800e16e:	210a      	movs	r1, #10
 800e170:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e174:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e178:	e7b9      	b.n	800e0ee <_strtod_l+0x2c6>
 800e17a:	2a6e      	cmp	r2, #110	; 0x6e
 800e17c:	e7db      	b.n	800e136 <_strtod_l+0x30e>
 800e17e:	4990      	ldr	r1, [pc, #576]	; (800e3c0 <_strtod_l+0x598>)
 800e180:	a817      	add	r0, sp, #92	; 0x5c
 800e182:	f001 ff01 	bl	800ff88 <__match>
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f aeb0 	beq.w	800deec <_strtod_l+0xc4>
 800e18c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e18e:	498d      	ldr	r1, [pc, #564]	; (800e3c4 <_strtod_l+0x59c>)
 800e190:	3b01      	subs	r3, #1
 800e192:	a817      	add	r0, sp, #92	; 0x5c
 800e194:	9317      	str	r3, [sp, #92]	; 0x5c
 800e196:	f001 fef7 	bl	800ff88 <__match>
 800e19a:	b910      	cbnz	r0, 800e1a2 <_strtod_l+0x37a>
 800e19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e19e:	3301      	adds	r3, #1
 800e1a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e1a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e3d4 <_strtod_l+0x5ac>
 800e1a6:	f04f 0a00 	mov.w	sl, #0
 800e1aa:	e681      	b.n	800deb0 <_strtod_l+0x88>
 800e1ac:	4886      	ldr	r0, [pc, #536]	; (800e3c8 <_strtod_l+0x5a0>)
 800e1ae:	f002 fe6b 	bl	8010e88 <nan>
 800e1b2:	ec5b ab10 	vmov	sl, fp, d0
 800e1b6:	e67b      	b.n	800deb0 <_strtod_l+0x88>
 800e1b8:	9b05      	ldr	r3, [sp, #20]
 800e1ba:	9807      	ldr	r0, [sp, #28]
 800e1bc:	1af3      	subs	r3, r6, r3
 800e1be:	2f00      	cmp	r7, #0
 800e1c0:	bf08      	it	eq
 800e1c2:	462f      	moveq	r7, r5
 800e1c4:	2d10      	cmp	r5, #16
 800e1c6:	9306      	str	r3, [sp, #24]
 800e1c8:	46a8      	mov	r8, r5
 800e1ca:	bfa8      	it	ge
 800e1cc:	f04f 0810 	movge.w	r8, #16
 800e1d0:	f7f2 f9a0 	bl	8000514 <__aeabi_ui2d>
 800e1d4:	2d09      	cmp	r5, #9
 800e1d6:	4682      	mov	sl, r0
 800e1d8:	468b      	mov	fp, r1
 800e1da:	dd13      	ble.n	800e204 <_strtod_l+0x3dc>
 800e1dc:	4b7b      	ldr	r3, [pc, #492]	; (800e3cc <_strtod_l+0x5a4>)
 800e1de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e1e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e1e6:	f7f2 fa0f 	bl	8000608 <__aeabi_dmul>
 800e1ea:	4682      	mov	sl, r0
 800e1ec:	4648      	mov	r0, r9
 800e1ee:	468b      	mov	fp, r1
 800e1f0:	f7f2 f990 	bl	8000514 <__aeabi_ui2d>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4650      	mov	r0, sl
 800e1fa:	4659      	mov	r1, fp
 800e1fc:	f7f2 f84e 	bl	800029c <__adddf3>
 800e200:	4682      	mov	sl, r0
 800e202:	468b      	mov	fp, r1
 800e204:	2d0f      	cmp	r5, #15
 800e206:	dc38      	bgt.n	800e27a <_strtod_l+0x452>
 800e208:	9b06      	ldr	r3, [sp, #24]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f43f ae50 	beq.w	800deb0 <_strtod_l+0x88>
 800e210:	dd24      	ble.n	800e25c <_strtod_l+0x434>
 800e212:	2b16      	cmp	r3, #22
 800e214:	dc0b      	bgt.n	800e22e <_strtod_l+0x406>
 800e216:	496d      	ldr	r1, [pc, #436]	; (800e3cc <_strtod_l+0x5a4>)
 800e218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e220:	4652      	mov	r2, sl
 800e222:	465b      	mov	r3, fp
 800e224:	f7f2 f9f0 	bl	8000608 <__aeabi_dmul>
 800e228:	4682      	mov	sl, r0
 800e22a:	468b      	mov	fp, r1
 800e22c:	e640      	b.n	800deb0 <_strtod_l+0x88>
 800e22e:	9a06      	ldr	r2, [sp, #24]
 800e230:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e234:	4293      	cmp	r3, r2
 800e236:	db20      	blt.n	800e27a <_strtod_l+0x452>
 800e238:	4c64      	ldr	r4, [pc, #400]	; (800e3cc <_strtod_l+0x5a4>)
 800e23a:	f1c5 050f 	rsb	r5, r5, #15
 800e23e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e242:	4652      	mov	r2, sl
 800e244:	465b      	mov	r3, fp
 800e246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e24a:	f7f2 f9dd 	bl	8000608 <__aeabi_dmul>
 800e24e:	9b06      	ldr	r3, [sp, #24]
 800e250:	1b5d      	subs	r5, r3, r5
 800e252:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e256:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e25a:	e7e3      	b.n	800e224 <_strtod_l+0x3fc>
 800e25c:	9b06      	ldr	r3, [sp, #24]
 800e25e:	3316      	adds	r3, #22
 800e260:	db0b      	blt.n	800e27a <_strtod_l+0x452>
 800e262:	9b05      	ldr	r3, [sp, #20]
 800e264:	1b9e      	subs	r6, r3, r6
 800e266:	4b59      	ldr	r3, [pc, #356]	; (800e3cc <_strtod_l+0x5a4>)
 800e268:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e26c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e270:	4650      	mov	r0, sl
 800e272:	4659      	mov	r1, fp
 800e274:	f7f2 faf2 	bl	800085c <__aeabi_ddiv>
 800e278:	e7d6      	b.n	800e228 <_strtod_l+0x400>
 800e27a:	9b06      	ldr	r3, [sp, #24]
 800e27c:	eba5 0808 	sub.w	r8, r5, r8
 800e280:	4498      	add	r8, r3
 800e282:	f1b8 0f00 	cmp.w	r8, #0
 800e286:	dd74      	ble.n	800e372 <_strtod_l+0x54a>
 800e288:	f018 030f 	ands.w	r3, r8, #15
 800e28c:	d00a      	beq.n	800e2a4 <_strtod_l+0x47c>
 800e28e:	494f      	ldr	r1, [pc, #316]	; (800e3cc <_strtod_l+0x5a4>)
 800e290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e294:	4652      	mov	r2, sl
 800e296:	465b      	mov	r3, fp
 800e298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e29c:	f7f2 f9b4 	bl	8000608 <__aeabi_dmul>
 800e2a0:	4682      	mov	sl, r0
 800e2a2:	468b      	mov	fp, r1
 800e2a4:	f038 080f 	bics.w	r8, r8, #15
 800e2a8:	d04f      	beq.n	800e34a <_strtod_l+0x522>
 800e2aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e2ae:	dd22      	ble.n	800e2f6 <_strtod_l+0x4ce>
 800e2b0:	2500      	movs	r5, #0
 800e2b2:	462e      	mov	r6, r5
 800e2b4:	9507      	str	r5, [sp, #28]
 800e2b6:	9505      	str	r5, [sp, #20]
 800e2b8:	2322      	movs	r3, #34	; 0x22
 800e2ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e3d4 <_strtod_l+0x5ac>
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	f04f 0a00 	mov.w	sl, #0
 800e2c4:	9b07      	ldr	r3, [sp, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f43f adf2 	beq.w	800deb0 <_strtod_l+0x88>
 800e2cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f001 ff86 	bl	80101e0 <_Bfree>
 800e2d4:	9905      	ldr	r1, [sp, #20]
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f001 ff82 	bl	80101e0 <_Bfree>
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f001 ff7e 	bl	80101e0 <_Bfree>
 800e2e4:	9907      	ldr	r1, [sp, #28]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f001 ff7a 	bl	80101e0 <_Bfree>
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f001 ff76 	bl	80101e0 <_Bfree>
 800e2f4:	e5dc      	b.n	800deb0 <_strtod_l+0x88>
 800e2f6:	4b36      	ldr	r3, [pc, #216]	; (800e3d0 <_strtod_l+0x5a8>)
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e300:	4650      	mov	r0, sl
 800e302:	4659      	mov	r1, fp
 800e304:	4699      	mov	r9, r3
 800e306:	f1b8 0f01 	cmp.w	r8, #1
 800e30a:	dc21      	bgt.n	800e350 <_strtod_l+0x528>
 800e30c:	b10b      	cbz	r3, 800e312 <_strtod_l+0x4ea>
 800e30e:	4682      	mov	sl, r0
 800e310:	468b      	mov	fp, r1
 800e312:	4b2f      	ldr	r3, [pc, #188]	; (800e3d0 <_strtod_l+0x5a8>)
 800e314:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e318:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e31c:	4652      	mov	r2, sl
 800e31e:	465b      	mov	r3, fp
 800e320:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e324:	f7f2 f970 	bl	8000608 <__aeabi_dmul>
 800e328:	4b2a      	ldr	r3, [pc, #168]	; (800e3d4 <_strtod_l+0x5ac>)
 800e32a:	460a      	mov	r2, r1
 800e32c:	400b      	ands	r3, r1
 800e32e:	492a      	ldr	r1, [pc, #168]	; (800e3d8 <_strtod_l+0x5b0>)
 800e330:	428b      	cmp	r3, r1
 800e332:	4682      	mov	sl, r0
 800e334:	d8bc      	bhi.n	800e2b0 <_strtod_l+0x488>
 800e336:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e33a:	428b      	cmp	r3, r1
 800e33c:	bf86      	itte	hi
 800e33e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e3dc <_strtod_l+0x5b4>
 800e342:	f04f 3aff 	movhi.w	sl, #4294967295
 800e346:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e34a:	2300      	movs	r3, #0
 800e34c:	9304      	str	r3, [sp, #16]
 800e34e:	e084      	b.n	800e45a <_strtod_l+0x632>
 800e350:	f018 0f01 	tst.w	r8, #1
 800e354:	d005      	beq.n	800e362 <_strtod_l+0x53a>
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	f7f2 f954 	bl	8000608 <__aeabi_dmul>
 800e360:	2301      	movs	r3, #1
 800e362:	9a04      	ldr	r2, [sp, #16]
 800e364:	3208      	adds	r2, #8
 800e366:	f109 0901 	add.w	r9, r9, #1
 800e36a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e36e:	9204      	str	r2, [sp, #16]
 800e370:	e7c9      	b.n	800e306 <_strtod_l+0x4de>
 800e372:	d0ea      	beq.n	800e34a <_strtod_l+0x522>
 800e374:	f1c8 0800 	rsb	r8, r8, #0
 800e378:	f018 020f 	ands.w	r2, r8, #15
 800e37c:	d00a      	beq.n	800e394 <_strtod_l+0x56c>
 800e37e:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <_strtod_l+0x5a4>)
 800e380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e384:	4650      	mov	r0, sl
 800e386:	4659      	mov	r1, fp
 800e388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38c:	f7f2 fa66 	bl	800085c <__aeabi_ddiv>
 800e390:	4682      	mov	sl, r0
 800e392:	468b      	mov	fp, r1
 800e394:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e398:	d0d7      	beq.n	800e34a <_strtod_l+0x522>
 800e39a:	f1b8 0f1f 	cmp.w	r8, #31
 800e39e:	dd1f      	ble.n	800e3e0 <_strtod_l+0x5b8>
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	462e      	mov	r6, r5
 800e3a4:	9507      	str	r5, [sp, #28]
 800e3a6:	9505      	str	r5, [sp, #20]
 800e3a8:	2322      	movs	r3, #34	; 0x22
 800e3aa:	f04f 0a00 	mov.w	sl, #0
 800e3ae:	f04f 0b00 	mov.w	fp, #0
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	e786      	b.n	800e2c4 <_strtod_l+0x49c>
 800e3b6:	bf00      	nop
 800e3b8:	080117f9 	.word	0x080117f9
 800e3bc:	0801183c 	.word	0x0801183c
 800e3c0:	080117f1 	.word	0x080117f1
 800e3c4:	0801197c 	.word	0x0801197c
 800e3c8:	08011c28 	.word	0x08011c28
 800e3cc:	08011b08 	.word	0x08011b08
 800e3d0:	08011ae0 	.word	0x08011ae0
 800e3d4:	7ff00000 	.word	0x7ff00000
 800e3d8:	7ca00000 	.word	0x7ca00000
 800e3dc:	7fefffff 	.word	0x7fefffff
 800e3e0:	f018 0310 	ands.w	r3, r8, #16
 800e3e4:	bf18      	it	ne
 800e3e6:	236a      	movne	r3, #106	; 0x6a
 800e3e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e798 <_strtod_l+0x970>
 800e3ec:	9304      	str	r3, [sp, #16]
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	4659      	mov	r1, fp
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f018 0f01 	tst.w	r8, #1
 800e3f8:	d004      	beq.n	800e404 <_strtod_l+0x5dc>
 800e3fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e3fe:	f7f2 f903 	bl	8000608 <__aeabi_dmul>
 800e402:	2301      	movs	r3, #1
 800e404:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e408:	f109 0908 	add.w	r9, r9, #8
 800e40c:	d1f2      	bne.n	800e3f4 <_strtod_l+0x5cc>
 800e40e:	b10b      	cbz	r3, 800e414 <_strtod_l+0x5ec>
 800e410:	4682      	mov	sl, r0
 800e412:	468b      	mov	fp, r1
 800e414:	9b04      	ldr	r3, [sp, #16]
 800e416:	b1c3      	cbz	r3, 800e44a <_strtod_l+0x622>
 800e418:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e41c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e420:	2b00      	cmp	r3, #0
 800e422:	4659      	mov	r1, fp
 800e424:	dd11      	ble.n	800e44a <_strtod_l+0x622>
 800e426:	2b1f      	cmp	r3, #31
 800e428:	f340 8124 	ble.w	800e674 <_strtod_l+0x84c>
 800e42c:	2b34      	cmp	r3, #52	; 0x34
 800e42e:	bfde      	ittt	le
 800e430:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e434:	f04f 33ff 	movle.w	r3, #4294967295
 800e438:	fa03 f202 	lslle.w	r2, r3, r2
 800e43c:	f04f 0a00 	mov.w	sl, #0
 800e440:	bfcc      	ite	gt
 800e442:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e446:	ea02 0b01 	andle.w	fp, r2, r1
 800e44a:	2200      	movs	r2, #0
 800e44c:	2300      	movs	r3, #0
 800e44e:	4650      	mov	r0, sl
 800e450:	4659      	mov	r1, fp
 800e452:	f7f2 fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 800e456:	2800      	cmp	r0, #0
 800e458:	d1a2      	bne.n	800e3a0 <_strtod_l+0x578>
 800e45a:	9b07      	ldr	r3, [sp, #28]
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	9908      	ldr	r1, [sp, #32]
 800e460:	462b      	mov	r3, r5
 800e462:	463a      	mov	r2, r7
 800e464:	4620      	mov	r0, r4
 800e466:	f001 ff23 	bl	80102b0 <__s2b>
 800e46a:	9007      	str	r0, [sp, #28]
 800e46c:	2800      	cmp	r0, #0
 800e46e:	f43f af1f 	beq.w	800e2b0 <_strtod_l+0x488>
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	1b9e      	subs	r6, r3, r6
 800e476:	9b06      	ldr	r3, [sp, #24]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bfb4      	ite	lt
 800e47c:	4633      	movlt	r3, r6
 800e47e:	2300      	movge	r3, #0
 800e480:	930c      	str	r3, [sp, #48]	; 0x30
 800e482:	9b06      	ldr	r3, [sp, #24]
 800e484:	2500      	movs	r5, #0
 800e486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e48a:	9312      	str	r3, [sp, #72]	; 0x48
 800e48c:	462e      	mov	r6, r5
 800e48e:	9b07      	ldr	r3, [sp, #28]
 800e490:	4620      	mov	r0, r4
 800e492:	6859      	ldr	r1, [r3, #4]
 800e494:	f001 fe64 	bl	8010160 <_Balloc>
 800e498:	9005      	str	r0, [sp, #20]
 800e49a:	2800      	cmp	r0, #0
 800e49c:	f43f af0c 	beq.w	800e2b8 <_strtod_l+0x490>
 800e4a0:	9b07      	ldr	r3, [sp, #28]
 800e4a2:	691a      	ldr	r2, [r3, #16]
 800e4a4:	3202      	adds	r2, #2
 800e4a6:	f103 010c 	add.w	r1, r3, #12
 800e4aa:	0092      	lsls	r2, r2, #2
 800e4ac:	300c      	adds	r0, #12
 800e4ae:	f7fe fc96 	bl	800cdde <memcpy>
 800e4b2:	ec4b ab10 	vmov	d0, sl, fp
 800e4b6:	aa1a      	add	r2, sp, #104	; 0x68
 800e4b8:	a919      	add	r1, sp, #100	; 0x64
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f002 fa3e 	bl	801093c <__d2b>
 800e4c0:	ec4b ab18 	vmov	d8, sl, fp
 800e4c4:	9018      	str	r0, [sp, #96]	; 0x60
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f43f aef6 	beq.w	800e2b8 <_strtod_l+0x490>
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f001 ff88 	bl	80103e4 <__i2b>
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	f43f aeee 	beq.w	800e2b8 <_strtod_l+0x490>
 800e4dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4de:	9904      	ldr	r1, [sp, #16]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	bfab      	itete	ge
 800e4e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e4e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e4e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e4ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e4ee:	bfac      	ite	ge
 800e4f0:	eb03 0902 	addge.w	r9, r3, r2
 800e4f4:	1ad7      	sublt	r7, r2, r3
 800e4f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4f8:	eba3 0801 	sub.w	r8, r3, r1
 800e4fc:	4490      	add	r8, r2
 800e4fe:	4ba1      	ldr	r3, [pc, #644]	; (800e784 <_strtod_l+0x95c>)
 800e500:	f108 38ff 	add.w	r8, r8, #4294967295
 800e504:	4598      	cmp	r8, r3
 800e506:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e50a:	f280 80c7 	bge.w	800e69c <_strtod_l+0x874>
 800e50e:	eba3 0308 	sub.w	r3, r3, r8
 800e512:	2b1f      	cmp	r3, #31
 800e514:	eba2 0203 	sub.w	r2, r2, r3
 800e518:	f04f 0101 	mov.w	r1, #1
 800e51c:	f300 80b1 	bgt.w	800e682 <_strtod_l+0x85a>
 800e520:	fa01 f303 	lsl.w	r3, r1, r3
 800e524:	930d      	str	r3, [sp, #52]	; 0x34
 800e526:	2300      	movs	r3, #0
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	eb09 0802 	add.w	r8, r9, r2
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	45c1      	cmp	r9, r8
 800e532:	4417      	add	r7, r2
 800e534:	441f      	add	r7, r3
 800e536:	464b      	mov	r3, r9
 800e538:	bfa8      	it	ge
 800e53a:	4643      	movge	r3, r8
 800e53c:	42bb      	cmp	r3, r7
 800e53e:	bfa8      	it	ge
 800e540:	463b      	movge	r3, r7
 800e542:	2b00      	cmp	r3, #0
 800e544:	bfc2      	ittt	gt
 800e546:	eba8 0803 	subgt.w	r8, r8, r3
 800e54a:	1aff      	subgt	r7, r7, r3
 800e54c:	eba9 0903 	subgt.w	r9, r9, r3
 800e550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e552:	2b00      	cmp	r3, #0
 800e554:	dd17      	ble.n	800e586 <_strtod_l+0x75e>
 800e556:	4631      	mov	r1, r6
 800e558:	461a      	mov	r2, r3
 800e55a:	4620      	mov	r0, r4
 800e55c:	f002 f802 	bl	8010564 <__pow5mult>
 800e560:	4606      	mov	r6, r0
 800e562:	2800      	cmp	r0, #0
 800e564:	f43f aea8 	beq.w	800e2b8 <_strtod_l+0x490>
 800e568:	4601      	mov	r1, r0
 800e56a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e56c:	4620      	mov	r0, r4
 800e56e:	f001 ff4f 	bl	8010410 <__multiply>
 800e572:	900b      	str	r0, [sp, #44]	; 0x2c
 800e574:	2800      	cmp	r0, #0
 800e576:	f43f ae9f 	beq.w	800e2b8 <_strtod_l+0x490>
 800e57a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e57c:	4620      	mov	r0, r4
 800e57e:	f001 fe2f 	bl	80101e0 <_Bfree>
 800e582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e584:	9318      	str	r3, [sp, #96]	; 0x60
 800e586:	f1b8 0f00 	cmp.w	r8, #0
 800e58a:	f300 808c 	bgt.w	800e6a6 <_strtod_l+0x87e>
 800e58e:	9b06      	ldr	r3, [sp, #24]
 800e590:	2b00      	cmp	r3, #0
 800e592:	dd08      	ble.n	800e5a6 <_strtod_l+0x77e>
 800e594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e596:	9905      	ldr	r1, [sp, #20]
 800e598:	4620      	mov	r0, r4
 800e59a:	f001 ffe3 	bl	8010564 <__pow5mult>
 800e59e:	9005      	str	r0, [sp, #20]
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	f43f ae89 	beq.w	800e2b8 <_strtod_l+0x490>
 800e5a6:	2f00      	cmp	r7, #0
 800e5a8:	dd08      	ble.n	800e5bc <_strtod_l+0x794>
 800e5aa:	9905      	ldr	r1, [sp, #20]
 800e5ac:	463a      	mov	r2, r7
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f002 f832 	bl	8010618 <__lshift>
 800e5b4:	9005      	str	r0, [sp, #20]
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	f43f ae7e 	beq.w	800e2b8 <_strtod_l+0x490>
 800e5bc:	f1b9 0f00 	cmp.w	r9, #0
 800e5c0:	dd08      	ble.n	800e5d4 <_strtod_l+0x7ac>
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	464a      	mov	r2, r9
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f002 f826 	bl	8010618 <__lshift>
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	f43f ae72 	beq.w	800e2b8 <_strtod_l+0x490>
 800e5d4:	9a05      	ldr	r2, [sp, #20]
 800e5d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f002 f8a9 	bl	8010730 <__mdiff>
 800e5de:	4605      	mov	r5, r0
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	f43f ae69 	beq.w	800e2b8 <_strtod_l+0x490>
 800e5e6:	68c3      	ldr	r3, [r0, #12]
 800e5e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60c3      	str	r3, [r0, #12]
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	f002 f882 	bl	80106f8 <__mcmp>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	da60      	bge.n	800e6ba <_strtod_l+0x892>
 800e5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5fa:	ea53 030a 	orrs.w	r3, r3, sl
 800e5fe:	f040 8082 	bne.w	800e706 <_strtod_l+0x8de>
 800e602:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e606:	2b00      	cmp	r3, #0
 800e608:	d17d      	bne.n	800e706 <_strtod_l+0x8de>
 800e60a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e60e:	0d1b      	lsrs	r3, r3, #20
 800e610:	051b      	lsls	r3, r3, #20
 800e612:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e616:	d976      	bls.n	800e706 <_strtod_l+0x8de>
 800e618:	696b      	ldr	r3, [r5, #20]
 800e61a:	b913      	cbnz	r3, 800e622 <_strtod_l+0x7fa>
 800e61c:	692b      	ldr	r3, [r5, #16]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	dd71      	ble.n	800e706 <_strtod_l+0x8de>
 800e622:	4629      	mov	r1, r5
 800e624:	2201      	movs	r2, #1
 800e626:	4620      	mov	r0, r4
 800e628:	f001 fff6 	bl	8010618 <__lshift>
 800e62c:	4631      	mov	r1, r6
 800e62e:	4605      	mov	r5, r0
 800e630:	f002 f862 	bl	80106f8 <__mcmp>
 800e634:	2800      	cmp	r0, #0
 800e636:	dd66      	ble.n	800e706 <_strtod_l+0x8de>
 800e638:	9904      	ldr	r1, [sp, #16]
 800e63a:	4a53      	ldr	r2, [pc, #332]	; (800e788 <_strtod_l+0x960>)
 800e63c:	465b      	mov	r3, fp
 800e63e:	2900      	cmp	r1, #0
 800e640:	f000 8081 	beq.w	800e746 <_strtod_l+0x91e>
 800e644:	ea02 010b 	and.w	r1, r2, fp
 800e648:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e64c:	dc7b      	bgt.n	800e746 <_strtod_l+0x91e>
 800e64e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e652:	f77f aea9 	ble.w	800e3a8 <_strtod_l+0x580>
 800e656:	4b4d      	ldr	r3, [pc, #308]	; (800e78c <_strtod_l+0x964>)
 800e658:	4650      	mov	r0, sl
 800e65a:	4659      	mov	r1, fp
 800e65c:	2200      	movs	r2, #0
 800e65e:	f7f1 ffd3 	bl	8000608 <__aeabi_dmul>
 800e662:	460b      	mov	r3, r1
 800e664:	4303      	orrs	r3, r0
 800e666:	bf08      	it	eq
 800e668:	2322      	moveq	r3, #34	; 0x22
 800e66a:	4682      	mov	sl, r0
 800e66c:	468b      	mov	fp, r1
 800e66e:	bf08      	it	eq
 800e670:	6023      	streq	r3, [r4, #0]
 800e672:	e62b      	b.n	800e2cc <_strtod_l+0x4a4>
 800e674:	f04f 32ff 	mov.w	r2, #4294967295
 800e678:	fa02 f303 	lsl.w	r3, r2, r3
 800e67c:	ea03 0a0a 	and.w	sl, r3, sl
 800e680:	e6e3      	b.n	800e44a <_strtod_l+0x622>
 800e682:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e686:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e68a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e68e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e692:	fa01 f308 	lsl.w	r3, r1, r8
 800e696:	9308      	str	r3, [sp, #32]
 800e698:	910d      	str	r1, [sp, #52]	; 0x34
 800e69a:	e746      	b.n	800e52a <_strtod_l+0x702>
 800e69c:	2300      	movs	r3, #0
 800e69e:	9308      	str	r3, [sp, #32]
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800e6a4:	e741      	b.n	800e52a <_strtod_l+0x702>
 800e6a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f001 ffb4 	bl	8010618 <__lshift>
 800e6b0:	9018      	str	r0, [sp, #96]	; 0x60
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	f47f af6b 	bne.w	800e58e <_strtod_l+0x766>
 800e6b8:	e5fe      	b.n	800e2b8 <_strtod_l+0x490>
 800e6ba:	465f      	mov	r7, fp
 800e6bc:	d16e      	bne.n	800e79c <_strtod_l+0x974>
 800e6be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6c4:	b342      	cbz	r2, 800e718 <_strtod_l+0x8f0>
 800e6c6:	4a32      	ldr	r2, [pc, #200]	; (800e790 <_strtod_l+0x968>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d128      	bne.n	800e71e <_strtod_l+0x8f6>
 800e6cc:	9b04      	ldr	r3, [sp, #16]
 800e6ce:	4651      	mov	r1, sl
 800e6d0:	b1eb      	cbz	r3, 800e70e <_strtod_l+0x8e6>
 800e6d2:	4b2d      	ldr	r3, [pc, #180]	; (800e788 <_strtod_l+0x960>)
 800e6d4:	403b      	ands	r3, r7
 800e6d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295
 800e6de:	d819      	bhi.n	800e714 <_strtod_l+0x8ec>
 800e6e0:	0d1b      	lsrs	r3, r3, #20
 800e6e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ea:	4299      	cmp	r1, r3
 800e6ec:	d117      	bne.n	800e71e <_strtod_l+0x8f6>
 800e6ee:	4b29      	ldr	r3, [pc, #164]	; (800e794 <_strtod_l+0x96c>)
 800e6f0:	429f      	cmp	r7, r3
 800e6f2:	d102      	bne.n	800e6fa <_strtod_l+0x8d2>
 800e6f4:	3101      	adds	r1, #1
 800e6f6:	f43f addf 	beq.w	800e2b8 <_strtod_l+0x490>
 800e6fa:	4b23      	ldr	r3, [pc, #140]	; (800e788 <_strtod_l+0x960>)
 800e6fc:	403b      	ands	r3, r7
 800e6fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e702:	f04f 0a00 	mov.w	sl, #0
 800e706:	9b04      	ldr	r3, [sp, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1a4      	bne.n	800e656 <_strtod_l+0x82e>
 800e70c:	e5de      	b.n	800e2cc <_strtod_l+0x4a4>
 800e70e:	f04f 33ff 	mov.w	r3, #4294967295
 800e712:	e7ea      	b.n	800e6ea <_strtod_l+0x8c2>
 800e714:	4613      	mov	r3, r2
 800e716:	e7e8      	b.n	800e6ea <_strtod_l+0x8c2>
 800e718:	ea53 030a 	orrs.w	r3, r3, sl
 800e71c:	d08c      	beq.n	800e638 <_strtod_l+0x810>
 800e71e:	9b08      	ldr	r3, [sp, #32]
 800e720:	b1db      	cbz	r3, 800e75a <_strtod_l+0x932>
 800e722:	423b      	tst	r3, r7
 800e724:	d0ef      	beq.n	800e706 <_strtod_l+0x8de>
 800e726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e728:	9a04      	ldr	r2, [sp, #16]
 800e72a:	4650      	mov	r0, sl
 800e72c:	4659      	mov	r1, fp
 800e72e:	b1c3      	cbz	r3, 800e762 <_strtod_l+0x93a>
 800e730:	f7ff fb5d 	bl	800ddee <sulp>
 800e734:	4602      	mov	r2, r0
 800e736:	460b      	mov	r3, r1
 800e738:	ec51 0b18 	vmov	r0, r1, d8
 800e73c:	f7f1 fdae 	bl	800029c <__adddf3>
 800e740:	4682      	mov	sl, r0
 800e742:	468b      	mov	fp, r1
 800e744:	e7df      	b.n	800e706 <_strtod_l+0x8de>
 800e746:	4013      	ands	r3, r2
 800e748:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e74c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e750:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e754:	f04f 3aff 	mov.w	sl, #4294967295
 800e758:	e7d5      	b.n	800e706 <_strtod_l+0x8de>
 800e75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e75c:	ea13 0f0a 	tst.w	r3, sl
 800e760:	e7e0      	b.n	800e724 <_strtod_l+0x8fc>
 800e762:	f7ff fb44 	bl	800ddee <sulp>
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	ec51 0b18 	vmov	r0, r1, d8
 800e76e:	f7f1 fd93 	bl	8000298 <__aeabi_dsub>
 800e772:	2200      	movs	r2, #0
 800e774:	2300      	movs	r3, #0
 800e776:	4682      	mov	sl, r0
 800e778:	468b      	mov	fp, r1
 800e77a:	f7f2 f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d0c1      	beq.n	800e706 <_strtod_l+0x8de>
 800e782:	e611      	b.n	800e3a8 <_strtod_l+0x580>
 800e784:	fffffc02 	.word	0xfffffc02
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	39500000 	.word	0x39500000
 800e790:	000fffff 	.word	0x000fffff
 800e794:	7fefffff 	.word	0x7fefffff
 800e798:	08011850 	.word	0x08011850
 800e79c:	4631      	mov	r1, r6
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f002 f928 	bl	80109f4 <__ratio>
 800e7a4:	ec59 8b10 	vmov	r8, r9, d0
 800e7a8:	ee10 0a10 	vmov	r0, s0
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	f7f2 f9a4 	bl	8000b00 <__aeabi_dcmple>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d07a      	beq.n	800e8b2 <_strtod_l+0xa8a>
 800e7bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d04a      	beq.n	800e858 <_strtod_l+0xa30>
 800e7c2:	4b95      	ldr	r3, [pc, #596]	; (800ea18 <_strtod_l+0xbf0>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e7ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ea18 <_strtod_l+0xbf0>
 800e7ce:	f04f 0800 	mov.w	r8, #0
 800e7d2:	4b92      	ldr	r3, [pc, #584]	; (800ea1c <_strtod_l+0xbf4>)
 800e7d4:	403b      	ands	r3, r7
 800e7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800e7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7da:	4b91      	ldr	r3, [pc, #580]	; (800ea20 <_strtod_l+0xbf8>)
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	f040 80b0 	bne.w	800e942 <_strtod_l+0xb1a>
 800e7e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e7ea:	ec4b ab10 	vmov	d0, sl, fp
 800e7ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7f2:	f002 f827 	bl	8010844 <__ulp>
 800e7f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7fa:	ec53 2b10 	vmov	r2, r3, d0
 800e7fe:	f7f1 ff03 	bl	8000608 <__aeabi_dmul>
 800e802:	4652      	mov	r2, sl
 800e804:	465b      	mov	r3, fp
 800e806:	f7f1 fd49 	bl	800029c <__adddf3>
 800e80a:	460b      	mov	r3, r1
 800e80c:	4983      	ldr	r1, [pc, #524]	; (800ea1c <_strtod_l+0xbf4>)
 800e80e:	4a85      	ldr	r2, [pc, #532]	; (800ea24 <_strtod_l+0xbfc>)
 800e810:	4019      	ands	r1, r3
 800e812:	4291      	cmp	r1, r2
 800e814:	4682      	mov	sl, r0
 800e816:	d960      	bls.n	800e8da <_strtod_l+0xab2>
 800e818:	ee18 3a90 	vmov	r3, s17
 800e81c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e820:	4293      	cmp	r3, r2
 800e822:	d104      	bne.n	800e82e <_strtod_l+0xa06>
 800e824:	ee18 3a10 	vmov	r3, s16
 800e828:	3301      	adds	r3, #1
 800e82a:	f43f ad45 	beq.w	800e2b8 <_strtod_l+0x490>
 800e82e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ea30 <_strtod_l+0xc08>
 800e832:	f04f 3aff 	mov.w	sl, #4294967295
 800e836:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e838:	4620      	mov	r0, r4
 800e83a:	f001 fcd1 	bl	80101e0 <_Bfree>
 800e83e:	9905      	ldr	r1, [sp, #20]
 800e840:	4620      	mov	r0, r4
 800e842:	f001 fccd 	bl	80101e0 <_Bfree>
 800e846:	4631      	mov	r1, r6
 800e848:	4620      	mov	r0, r4
 800e84a:	f001 fcc9 	bl	80101e0 <_Bfree>
 800e84e:	4629      	mov	r1, r5
 800e850:	4620      	mov	r0, r4
 800e852:	f001 fcc5 	bl	80101e0 <_Bfree>
 800e856:	e61a      	b.n	800e48e <_strtod_l+0x666>
 800e858:	f1ba 0f00 	cmp.w	sl, #0
 800e85c:	d11b      	bne.n	800e896 <_strtod_l+0xa6e>
 800e85e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e862:	b9f3      	cbnz	r3, 800e8a2 <_strtod_l+0xa7a>
 800e864:	4b6c      	ldr	r3, [pc, #432]	; (800ea18 <_strtod_l+0xbf0>)
 800e866:	2200      	movs	r2, #0
 800e868:	4640      	mov	r0, r8
 800e86a:	4649      	mov	r1, r9
 800e86c:	f7f2 f93e 	bl	8000aec <__aeabi_dcmplt>
 800e870:	b9d0      	cbnz	r0, 800e8a8 <_strtod_l+0xa80>
 800e872:	4640      	mov	r0, r8
 800e874:	4649      	mov	r1, r9
 800e876:	4b6c      	ldr	r3, [pc, #432]	; (800ea28 <_strtod_l+0xc00>)
 800e878:	2200      	movs	r2, #0
 800e87a:	f7f1 fec5 	bl	8000608 <__aeabi_dmul>
 800e87e:	4680      	mov	r8, r0
 800e880:	4689      	mov	r9, r1
 800e882:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e886:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e88a:	9315      	str	r3, [sp, #84]	; 0x54
 800e88c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e894:	e79d      	b.n	800e7d2 <_strtod_l+0x9aa>
 800e896:	f1ba 0f01 	cmp.w	sl, #1
 800e89a:	d102      	bne.n	800e8a2 <_strtod_l+0xa7a>
 800e89c:	2f00      	cmp	r7, #0
 800e89e:	f43f ad83 	beq.w	800e3a8 <_strtod_l+0x580>
 800e8a2:	4b62      	ldr	r3, [pc, #392]	; (800ea2c <_strtod_l+0xc04>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	e78e      	b.n	800e7c6 <_strtod_l+0x99e>
 800e8a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ea28 <_strtod_l+0xc00>
 800e8ac:	f04f 0800 	mov.w	r8, #0
 800e8b0:	e7e7      	b.n	800e882 <_strtod_l+0xa5a>
 800e8b2:	4b5d      	ldr	r3, [pc, #372]	; (800ea28 <_strtod_l+0xc00>)
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f7f1 fea5 	bl	8000608 <__aeabi_dmul>
 800e8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8c0:	4680      	mov	r8, r0
 800e8c2:	4689      	mov	r9, r1
 800e8c4:	b933      	cbnz	r3, 800e8d4 <_strtod_l+0xaac>
 800e8c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8ca:	900e      	str	r0, [sp, #56]	; 0x38
 800e8cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e8d2:	e7dd      	b.n	800e890 <_strtod_l+0xa68>
 800e8d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e8d8:	e7f9      	b.n	800e8ce <_strtod_l+0xaa6>
 800e8da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e8de:	9b04      	ldr	r3, [sp, #16]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1a8      	bne.n	800e836 <_strtod_l+0xa0e>
 800e8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8ea:	0d1b      	lsrs	r3, r3, #20
 800e8ec:	051b      	lsls	r3, r3, #20
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d1a1      	bne.n	800e836 <_strtod_l+0xa0e>
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f2 f9e7 	bl	8000cc8 <__aeabi_d2lz>
 800e8fa:	f7f1 fe57 	bl	80005ac <__aeabi_l2d>
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	4640      	mov	r0, r8
 800e904:	4649      	mov	r1, r9
 800e906:	f7f1 fcc7 	bl	8000298 <__aeabi_dsub>
 800e90a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e90c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e910:	ea43 030a 	orr.w	r3, r3, sl
 800e914:	4313      	orrs	r3, r2
 800e916:	4680      	mov	r8, r0
 800e918:	4689      	mov	r9, r1
 800e91a:	d055      	beq.n	800e9c8 <_strtod_l+0xba0>
 800e91c:	a336      	add	r3, pc, #216	; (adr r3, 800e9f8 <_strtod_l+0xbd0>)
 800e91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e922:	f7f2 f8e3 	bl	8000aec <__aeabi_dcmplt>
 800e926:	2800      	cmp	r0, #0
 800e928:	f47f acd0 	bne.w	800e2cc <_strtod_l+0x4a4>
 800e92c:	a334      	add	r3, pc, #208	; (adr r3, 800ea00 <_strtod_l+0xbd8>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	4640      	mov	r0, r8
 800e934:	4649      	mov	r1, r9
 800e936:	f7f2 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	f43f af7b 	beq.w	800e836 <_strtod_l+0xa0e>
 800e940:	e4c4      	b.n	800e2cc <_strtod_l+0x4a4>
 800e942:	9b04      	ldr	r3, [sp, #16]
 800e944:	b333      	cbz	r3, 800e994 <_strtod_l+0xb6c>
 800e946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e948:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e94c:	d822      	bhi.n	800e994 <_strtod_l+0xb6c>
 800e94e:	a32e      	add	r3, pc, #184	; (adr r3, 800ea08 <_strtod_l+0xbe0>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	4640      	mov	r0, r8
 800e956:	4649      	mov	r1, r9
 800e958:	f7f2 f8d2 	bl	8000b00 <__aeabi_dcmple>
 800e95c:	b1a0      	cbz	r0, 800e988 <_strtod_l+0xb60>
 800e95e:	4649      	mov	r1, r9
 800e960:	4640      	mov	r0, r8
 800e962:	f7f2 f929 	bl	8000bb8 <__aeabi_d2uiz>
 800e966:	2801      	cmp	r0, #1
 800e968:	bf38      	it	cc
 800e96a:	2001      	movcc	r0, #1
 800e96c:	f7f1 fdd2 	bl	8000514 <__aeabi_ui2d>
 800e970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e972:	4680      	mov	r8, r0
 800e974:	4689      	mov	r9, r1
 800e976:	bb23      	cbnz	r3, 800e9c2 <_strtod_l+0xb9a>
 800e978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e97c:	9010      	str	r0, [sp, #64]	; 0x40
 800e97e:	9311      	str	r3, [sp, #68]	; 0x44
 800e980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e984:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e98c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e990:	1a9b      	subs	r3, r3, r2
 800e992:	9309      	str	r3, [sp, #36]	; 0x24
 800e994:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e998:	eeb0 0a48 	vmov.f32	s0, s16
 800e99c:	eef0 0a68 	vmov.f32	s1, s17
 800e9a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e9a4:	f001 ff4e 	bl	8010844 <__ulp>
 800e9a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e9ac:	ec53 2b10 	vmov	r2, r3, d0
 800e9b0:	f7f1 fe2a 	bl	8000608 <__aeabi_dmul>
 800e9b4:	ec53 2b18 	vmov	r2, r3, d8
 800e9b8:	f7f1 fc70 	bl	800029c <__adddf3>
 800e9bc:	4682      	mov	sl, r0
 800e9be:	468b      	mov	fp, r1
 800e9c0:	e78d      	b.n	800e8de <_strtod_l+0xab6>
 800e9c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e9c6:	e7db      	b.n	800e980 <_strtod_l+0xb58>
 800e9c8:	a311      	add	r3, pc, #68	; (adr r3, 800ea10 <_strtod_l+0xbe8>)
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	f7f2 f88d 	bl	8000aec <__aeabi_dcmplt>
 800e9d2:	e7b2      	b.n	800e93a <_strtod_l+0xb12>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9dc:	6013      	str	r3, [r2, #0]
 800e9de:	f7ff ba6b 	b.w	800deb8 <_strtod_l+0x90>
 800e9e2:	2a65      	cmp	r2, #101	; 0x65
 800e9e4:	f43f ab5f 	beq.w	800e0a6 <_strtod_l+0x27e>
 800e9e8:	2a45      	cmp	r2, #69	; 0x45
 800e9ea:	f43f ab5c 	beq.w	800e0a6 <_strtod_l+0x27e>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	f7ff bb94 	b.w	800e11c <_strtod_l+0x2f4>
 800e9f4:	f3af 8000 	nop.w
 800e9f8:	94a03595 	.word	0x94a03595
 800e9fc:	3fdfffff 	.word	0x3fdfffff
 800ea00:	35afe535 	.word	0x35afe535
 800ea04:	3fe00000 	.word	0x3fe00000
 800ea08:	ffc00000 	.word	0xffc00000
 800ea0c:	41dfffff 	.word	0x41dfffff
 800ea10:	94a03595 	.word	0x94a03595
 800ea14:	3fcfffff 	.word	0x3fcfffff
 800ea18:	3ff00000 	.word	0x3ff00000
 800ea1c:	7ff00000 	.word	0x7ff00000
 800ea20:	7fe00000 	.word	0x7fe00000
 800ea24:	7c9fffff 	.word	0x7c9fffff
 800ea28:	3fe00000 	.word	0x3fe00000
 800ea2c:	bff00000 	.word	0xbff00000
 800ea30:	7fefffff 	.word	0x7fefffff

0800ea34 <_strtod_r>:
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <_strtod_r+0x8>)
 800ea36:	f7ff b9f7 	b.w	800de28 <_strtod_l>
 800ea3a:	bf00      	nop
 800ea3c:	200001b8 	.word	0x200001b8

0800ea40 <_strtol_l.constprop.0>:
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea46:	d001      	beq.n	800ea4c <_strtol_l.constprop.0+0xc>
 800ea48:	2b24      	cmp	r3, #36	; 0x24
 800ea4a:	d906      	bls.n	800ea5a <_strtol_l.constprop.0+0x1a>
 800ea4c:	f7fe f8a4 	bl	800cb98 <__errno>
 800ea50:	2316      	movs	r3, #22
 800ea52:	6003      	str	r3, [r0, #0]
 800ea54:	2000      	movs	r0, #0
 800ea56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eb40 <_strtol_l.constprop.0+0x100>
 800ea5e:	460d      	mov	r5, r1
 800ea60:	462e      	mov	r6, r5
 800ea62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea66:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ea6a:	f017 0708 	ands.w	r7, r7, #8
 800ea6e:	d1f7      	bne.n	800ea60 <_strtol_l.constprop.0+0x20>
 800ea70:	2c2d      	cmp	r4, #45	; 0x2d
 800ea72:	d132      	bne.n	800eada <_strtol_l.constprop.0+0x9a>
 800ea74:	782c      	ldrb	r4, [r5, #0]
 800ea76:	2701      	movs	r7, #1
 800ea78:	1cb5      	adds	r5, r6, #2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d05b      	beq.n	800eb36 <_strtol_l.constprop.0+0xf6>
 800ea7e:	2b10      	cmp	r3, #16
 800ea80:	d109      	bne.n	800ea96 <_strtol_l.constprop.0+0x56>
 800ea82:	2c30      	cmp	r4, #48	; 0x30
 800ea84:	d107      	bne.n	800ea96 <_strtol_l.constprop.0+0x56>
 800ea86:	782c      	ldrb	r4, [r5, #0]
 800ea88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ea8c:	2c58      	cmp	r4, #88	; 0x58
 800ea8e:	d14d      	bne.n	800eb2c <_strtol_l.constprop.0+0xec>
 800ea90:	786c      	ldrb	r4, [r5, #1]
 800ea92:	2310      	movs	r3, #16
 800ea94:	3502      	adds	r5, #2
 800ea96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ea9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea9e:	f04f 0c00 	mov.w	ip, #0
 800eaa2:	fbb8 f9f3 	udiv	r9, r8, r3
 800eaa6:	4666      	mov	r6, ip
 800eaa8:	fb03 8a19 	mls	sl, r3, r9, r8
 800eaac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eab0:	f1be 0f09 	cmp.w	lr, #9
 800eab4:	d816      	bhi.n	800eae4 <_strtol_l.constprop.0+0xa4>
 800eab6:	4674      	mov	r4, lr
 800eab8:	42a3      	cmp	r3, r4
 800eaba:	dd24      	ble.n	800eb06 <_strtol_l.constprop.0+0xc6>
 800eabc:	f1bc 0f00 	cmp.w	ip, #0
 800eac0:	db1e      	blt.n	800eb00 <_strtol_l.constprop.0+0xc0>
 800eac2:	45b1      	cmp	r9, r6
 800eac4:	d31c      	bcc.n	800eb00 <_strtol_l.constprop.0+0xc0>
 800eac6:	d101      	bne.n	800eacc <_strtol_l.constprop.0+0x8c>
 800eac8:	45a2      	cmp	sl, r4
 800eaca:	db19      	blt.n	800eb00 <_strtol_l.constprop.0+0xc0>
 800eacc:	fb06 4603 	mla	r6, r6, r3, r4
 800ead0:	f04f 0c01 	mov.w	ip, #1
 800ead4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ead8:	e7e8      	b.n	800eaac <_strtol_l.constprop.0+0x6c>
 800eada:	2c2b      	cmp	r4, #43	; 0x2b
 800eadc:	bf04      	itt	eq
 800eade:	782c      	ldrbeq	r4, [r5, #0]
 800eae0:	1cb5      	addeq	r5, r6, #2
 800eae2:	e7ca      	b.n	800ea7a <_strtol_l.constprop.0+0x3a>
 800eae4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eae8:	f1be 0f19 	cmp.w	lr, #25
 800eaec:	d801      	bhi.n	800eaf2 <_strtol_l.constprop.0+0xb2>
 800eaee:	3c37      	subs	r4, #55	; 0x37
 800eaf0:	e7e2      	b.n	800eab8 <_strtol_l.constprop.0+0x78>
 800eaf2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eaf6:	f1be 0f19 	cmp.w	lr, #25
 800eafa:	d804      	bhi.n	800eb06 <_strtol_l.constprop.0+0xc6>
 800eafc:	3c57      	subs	r4, #87	; 0x57
 800eafe:	e7db      	b.n	800eab8 <_strtol_l.constprop.0+0x78>
 800eb00:	f04f 3cff 	mov.w	ip, #4294967295
 800eb04:	e7e6      	b.n	800ead4 <_strtol_l.constprop.0+0x94>
 800eb06:	f1bc 0f00 	cmp.w	ip, #0
 800eb0a:	da05      	bge.n	800eb18 <_strtol_l.constprop.0+0xd8>
 800eb0c:	2322      	movs	r3, #34	; 0x22
 800eb0e:	6003      	str	r3, [r0, #0]
 800eb10:	4646      	mov	r6, r8
 800eb12:	b942      	cbnz	r2, 800eb26 <_strtol_l.constprop.0+0xe6>
 800eb14:	4630      	mov	r0, r6
 800eb16:	e79e      	b.n	800ea56 <_strtol_l.constprop.0+0x16>
 800eb18:	b107      	cbz	r7, 800eb1c <_strtol_l.constprop.0+0xdc>
 800eb1a:	4276      	negs	r6, r6
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	d0f9      	beq.n	800eb14 <_strtol_l.constprop.0+0xd4>
 800eb20:	f1bc 0f00 	cmp.w	ip, #0
 800eb24:	d000      	beq.n	800eb28 <_strtol_l.constprop.0+0xe8>
 800eb26:	1e69      	subs	r1, r5, #1
 800eb28:	6011      	str	r1, [r2, #0]
 800eb2a:	e7f3      	b.n	800eb14 <_strtol_l.constprop.0+0xd4>
 800eb2c:	2430      	movs	r4, #48	; 0x30
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d1b1      	bne.n	800ea96 <_strtol_l.constprop.0+0x56>
 800eb32:	2308      	movs	r3, #8
 800eb34:	e7af      	b.n	800ea96 <_strtol_l.constprop.0+0x56>
 800eb36:	2c30      	cmp	r4, #48	; 0x30
 800eb38:	d0a5      	beq.n	800ea86 <_strtol_l.constprop.0+0x46>
 800eb3a:	230a      	movs	r3, #10
 800eb3c:	e7ab      	b.n	800ea96 <_strtol_l.constprop.0+0x56>
 800eb3e:	bf00      	nop
 800eb40:	08011879 	.word	0x08011879

0800eb44 <_strtol_r>:
 800eb44:	f7ff bf7c 	b.w	800ea40 <_strtol_l.constprop.0>

0800eb48 <_write_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4d07      	ldr	r5, [pc, #28]	; (800eb68 <_write_r+0x20>)
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	4608      	mov	r0, r1
 800eb50:	4611      	mov	r1, r2
 800eb52:	2200      	movs	r2, #0
 800eb54:	602a      	str	r2, [r5, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	f7f3 fb83 	bl	8002262 <_write>
 800eb5c:	1c43      	adds	r3, r0, #1
 800eb5e:	d102      	bne.n	800eb66 <_write_r+0x1e>
 800eb60:	682b      	ldr	r3, [r5, #0]
 800eb62:	b103      	cbz	r3, 800eb66 <_write_r+0x1e>
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	bd38      	pop	{r3, r4, r5, pc}
 800eb68:	200059b8 	.word	0x200059b8

0800eb6c <_close_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d06      	ldr	r5, [pc, #24]	; (800eb88 <_close_r+0x1c>)
 800eb70:	2300      	movs	r3, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	4608      	mov	r0, r1
 800eb76:	602b      	str	r3, [r5, #0]
 800eb78:	f7f3 fb8f 	bl	800229a <_close>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_close_r+0x1a>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_close_r+0x1a>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	200059b8 	.word	0x200059b8

0800eb8c <quorem>:
 800eb8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	6903      	ldr	r3, [r0, #16]
 800eb92:	690c      	ldr	r4, [r1, #16]
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	4607      	mov	r7, r0
 800eb98:	f2c0 8081 	blt.w	800ec9e <quorem+0x112>
 800eb9c:	3c01      	subs	r4, #1
 800eb9e:	f101 0814 	add.w	r8, r1, #20
 800eba2:	f100 0514 	add.w	r5, r0, #20
 800eba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebaa:	9301      	str	r3, [sp, #4]
 800ebac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebc4:	d331      	bcc.n	800ec2a <quorem+0x9e>
 800ebc6:	f04f 0e00 	mov.w	lr, #0
 800ebca:	4640      	mov	r0, r8
 800ebcc:	46ac      	mov	ip, r5
 800ebce:	46f2      	mov	sl, lr
 800ebd0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebd4:	b293      	uxth	r3, r2
 800ebd6:	fb06 e303 	mla	r3, r6, r3, lr
 800ebda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	ebaa 0303 	sub.w	r3, sl, r3
 800ebe4:	f8dc a000 	ldr.w	sl, [ip]
 800ebe8:	0c12      	lsrs	r2, r2, #16
 800ebea:	fa13 f38a 	uxtah	r3, r3, sl
 800ebee:	fb06 e202 	mla	r2, r6, r2, lr
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	9b00      	ldr	r3, [sp, #0]
 800ebf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebfa:	b292      	uxth	r2, r2
 800ebfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ec00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec04:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec08:	4581      	cmp	r9, r0
 800ec0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec0e:	f84c 3b04 	str.w	r3, [ip], #4
 800ec12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec16:	d2db      	bcs.n	800ebd0 <quorem+0x44>
 800ec18:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec1c:	b92b      	cbnz	r3, 800ec2a <quorem+0x9e>
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	3b04      	subs	r3, #4
 800ec22:	429d      	cmp	r5, r3
 800ec24:	461a      	mov	r2, r3
 800ec26:	d32e      	bcc.n	800ec86 <quorem+0xfa>
 800ec28:	613c      	str	r4, [r7, #16]
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f001 fd64 	bl	80106f8 <__mcmp>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	db24      	blt.n	800ec7e <quorem+0xf2>
 800ec34:	3601      	adds	r6, #1
 800ec36:	4628      	mov	r0, r5
 800ec38:	f04f 0c00 	mov.w	ip, #0
 800ec3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec40:	f8d0 e000 	ldr.w	lr, [r0]
 800ec44:	b293      	uxth	r3, r2
 800ec46:	ebac 0303 	sub.w	r3, ip, r3
 800ec4a:	0c12      	lsrs	r2, r2, #16
 800ec4c:	fa13 f38e 	uxtah	r3, r3, lr
 800ec50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec5e:	45c1      	cmp	r9, r8
 800ec60:	f840 3b04 	str.w	r3, [r0], #4
 800ec64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec68:	d2e8      	bcs.n	800ec3c <quorem+0xb0>
 800ec6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec72:	b922      	cbnz	r2, 800ec7e <quorem+0xf2>
 800ec74:	3b04      	subs	r3, #4
 800ec76:	429d      	cmp	r5, r3
 800ec78:	461a      	mov	r2, r3
 800ec7a:	d30a      	bcc.n	800ec92 <quorem+0x106>
 800ec7c:	613c      	str	r4, [r7, #16]
 800ec7e:	4630      	mov	r0, r6
 800ec80:	b003      	add	sp, #12
 800ec82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec86:	6812      	ldr	r2, [r2, #0]
 800ec88:	3b04      	subs	r3, #4
 800ec8a:	2a00      	cmp	r2, #0
 800ec8c:	d1cc      	bne.n	800ec28 <quorem+0x9c>
 800ec8e:	3c01      	subs	r4, #1
 800ec90:	e7c7      	b.n	800ec22 <quorem+0x96>
 800ec92:	6812      	ldr	r2, [r2, #0]
 800ec94:	3b04      	subs	r3, #4
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	d1f0      	bne.n	800ec7c <quorem+0xf0>
 800ec9a:	3c01      	subs	r4, #1
 800ec9c:	e7eb      	b.n	800ec76 <quorem+0xea>
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e7ee      	b.n	800ec80 <quorem+0xf4>
 800eca2:	0000      	movs	r0, r0
 800eca4:	0000      	movs	r0, r0
	...

0800eca8 <_dtoa_r>:
 800eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecac:	ed2d 8b04 	vpush	{d8-d9}
 800ecb0:	ec57 6b10 	vmov	r6, r7, d0
 800ecb4:	b093      	sub	sp, #76	; 0x4c
 800ecb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ecb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecbc:	9106      	str	r1, [sp, #24]
 800ecbe:	ee10 aa10 	vmov	sl, s0
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	9209      	str	r2, [sp, #36]	; 0x24
 800ecc6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecc8:	46bb      	mov	fp, r7
 800ecca:	b975      	cbnz	r5, 800ecea <_dtoa_r+0x42>
 800eccc:	2010      	movs	r0, #16
 800ecce:	f001 fa21 	bl	8010114 <malloc>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	6260      	str	r0, [r4, #36]	; 0x24
 800ecd6:	b920      	cbnz	r0, 800ece2 <_dtoa_r+0x3a>
 800ecd8:	4ba7      	ldr	r3, [pc, #668]	; (800ef78 <_dtoa_r+0x2d0>)
 800ecda:	21ea      	movs	r1, #234	; 0xea
 800ecdc:	48a7      	ldr	r0, [pc, #668]	; (800ef7c <_dtoa_r+0x2d4>)
 800ecde:	f002 f8fd 	bl	8010edc <__assert_func>
 800ece2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ece6:	6005      	str	r5, [r0, #0]
 800ece8:	60c5      	str	r5, [r0, #12]
 800ecea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecec:	6819      	ldr	r1, [r3, #0]
 800ecee:	b151      	cbz	r1, 800ed06 <_dtoa_r+0x5e>
 800ecf0:	685a      	ldr	r2, [r3, #4]
 800ecf2:	604a      	str	r2, [r1, #4]
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	4093      	lsls	r3, r2
 800ecf8:	608b      	str	r3, [r1, #8]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f001 fa70 	bl	80101e0 <_Bfree>
 800ed00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed02:	2200      	movs	r2, #0
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	1e3b      	subs	r3, r7, #0
 800ed08:	bfaa      	itet	ge
 800ed0a:	2300      	movge	r3, #0
 800ed0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ed10:	f8c8 3000 	strge.w	r3, [r8]
 800ed14:	4b9a      	ldr	r3, [pc, #616]	; (800ef80 <_dtoa_r+0x2d8>)
 800ed16:	bfbc      	itt	lt
 800ed18:	2201      	movlt	r2, #1
 800ed1a:	f8c8 2000 	strlt.w	r2, [r8]
 800ed1e:	ea33 030b 	bics.w	r3, r3, fp
 800ed22:	d11b      	bne.n	800ed5c <_dtoa_r+0xb4>
 800ed24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed26:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed2a:	6013      	str	r3, [r2, #0]
 800ed2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed30:	4333      	orrs	r3, r6
 800ed32:	f000 8592 	beq.w	800f85a <_dtoa_r+0xbb2>
 800ed36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed38:	b963      	cbnz	r3, 800ed54 <_dtoa_r+0xac>
 800ed3a:	4b92      	ldr	r3, [pc, #584]	; (800ef84 <_dtoa_r+0x2dc>)
 800ed3c:	e022      	b.n	800ed84 <_dtoa_r+0xdc>
 800ed3e:	4b92      	ldr	r3, [pc, #584]	; (800ef88 <_dtoa_r+0x2e0>)
 800ed40:	9301      	str	r3, [sp, #4]
 800ed42:	3308      	adds	r3, #8
 800ed44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	9801      	ldr	r0, [sp, #4]
 800ed4a:	b013      	add	sp, #76	; 0x4c
 800ed4c:	ecbd 8b04 	vpop	{d8-d9}
 800ed50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed54:	4b8b      	ldr	r3, [pc, #556]	; (800ef84 <_dtoa_r+0x2dc>)
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	3303      	adds	r3, #3
 800ed5a:	e7f3      	b.n	800ed44 <_dtoa_r+0x9c>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	4650      	mov	r0, sl
 800ed62:	4659      	mov	r1, fp
 800ed64:	f7f1 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed68:	ec4b ab19 	vmov	d9, sl, fp
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	b158      	cbz	r0, 800ed88 <_dtoa_r+0xe0>
 800ed70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed72:	2301      	movs	r3, #1
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 856b 	beq.w	800f854 <_dtoa_r+0xbac>
 800ed7e:	4883      	ldr	r0, [pc, #524]	; (800ef8c <_dtoa_r+0x2e4>)
 800ed80:	6018      	str	r0, [r3, #0]
 800ed82:	1e43      	subs	r3, r0, #1
 800ed84:	9301      	str	r3, [sp, #4]
 800ed86:	e7df      	b.n	800ed48 <_dtoa_r+0xa0>
 800ed88:	ec4b ab10 	vmov	d0, sl, fp
 800ed8c:	aa10      	add	r2, sp, #64	; 0x40
 800ed8e:	a911      	add	r1, sp, #68	; 0x44
 800ed90:	4620      	mov	r0, r4
 800ed92:	f001 fdd3 	bl	801093c <__d2b>
 800ed96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ed9a:	ee08 0a10 	vmov	s16, r0
 800ed9e:	2d00      	cmp	r5, #0
 800eda0:	f000 8084 	beq.w	800eeac <_dtoa_r+0x204>
 800eda4:	ee19 3a90 	vmov	r3, s19
 800eda8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800edb0:	4656      	mov	r6, sl
 800edb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800edb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800edbe:	4b74      	ldr	r3, [pc, #464]	; (800ef90 <_dtoa_r+0x2e8>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fa67 	bl	8000298 <__aeabi_dsub>
 800edca:	a365      	add	r3, pc, #404	; (adr r3, 800ef60 <_dtoa_r+0x2b8>)
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	f7f1 fc1a 	bl	8000608 <__aeabi_dmul>
 800edd4:	a364      	add	r3, pc, #400	; (adr r3, 800ef68 <_dtoa_r+0x2c0>)
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	f7f1 fa5f 	bl	800029c <__adddf3>
 800edde:	4606      	mov	r6, r0
 800ede0:	4628      	mov	r0, r5
 800ede2:	460f      	mov	r7, r1
 800ede4:	f7f1 fba6 	bl	8000534 <__aeabi_i2d>
 800ede8:	a361      	add	r3, pc, #388	; (adr r3, 800ef70 <_dtoa_r+0x2c8>)
 800edea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edee:	f7f1 fc0b 	bl	8000608 <__aeabi_dmul>
 800edf2:	4602      	mov	r2, r0
 800edf4:	460b      	mov	r3, r1
 800edf6:	4630      	mov	r0, r6
 800edf8:	4639      	mov	r1, r7
 800edfa:	f7f1 fa4f 	bl	800029c <__adddf3>
 800edfe:	4606      	mov	r6, r0
 800ee00:	460f      	mov	r7, r1
 800ee02:	f7f1 feb1 	bl	8000b68 <__aeabi_d2iz>
 800ee06:	2200      	movs	r2, #0
 800ee08:	9000      	str	r0, [sp, #0]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	4639      	mov	r1, r7
 800ee10:	f7f1 fe6c 	bl	8000aec <__aeabi_dcmplt>
 800ee14:	b150      	cbz	r0, 800ee2c <_dtoa_r+0x184>
 800ee16:	9800      	ldr	r0, [sp, #0]
 800ee18:	f7f1 fb8c 	bl	8000534 <__aeabi_i2d>
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	463b      	mov	r3, r7
 800ee20:	f7f1 fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee24:	b910      	cbnz	r0, 800ee2c <_dtoa_r+0x184>
 800ee26:	9b00      	ldr	r3, [sp, #0]
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	9b00      	ldr	r3, [sp, #0]
 800ee2e:	2b16      	cmp	r3, #22
 800ee30:	d85a      	bhi.n	800eee8 <_dtoa_r+0x240>
 800ee32:	9a00      	ldr	r2, [sp, #0]
 800ee34:	4b57      	ldr	r3, [pc, #348]	; (800ef94 <_dtoa_r+0x2ec>)
 800ee36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	ec51 0b19 	vmov	r0, r1, d9
 800ee42:	f7f1 fe53 	bl	8000aec <__aeabi_dcmplt>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d050      	beq.n	800eeec <_dtoa_r+0x244>
 800ee4a:	9b00      	ldr	r3, [sp, #0]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	2300      	movs	r3, #0
 800ee52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee56:	1b5d      	subs	r5, r3, r5
 800ee58:	1e6b      	subs	r3, r5, #1
 800ee5a:	9305      	str	r3, [sp, #20]
 800ee5c:	bf45      	ittet	mi
 800ee5e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee62:	9304      	strmi	r3, [sp, #16]
 800ee64:	2300      	movpl	r3, #0
 800ee66:	2300      	movmi	r3, #0
 800ee68:	bf4c      	ite	mi
 800ee6a:	9305      	strmi	r3, [sp, #20]
 800ee6c:	9304      	strpl	r3, [sp, #16]
 800ee6e:	9b00      	ldr	r3, [sp, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	db3d      	blt.n	800eef0 <_dtoa_r+0x248>
 800ee74:	9b05      	ldr	r3, [sp, #20]
 800ee76:	9a00      	ldr	r2, [sp, #0]
 800ee78:	920a      	str	r2, [sp, #40]	; 0x28
 800ee7a:	4413      	add	r3, r2
 800ee7c:	9305      	str	r3, [sp, #20]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9307      	str	r3, [sp, #28]
 800ee82:	9b06      	ldr	r3, [sp, #24]
 800ee84:	2b09      	cmp	r3, #9
 800ee86:	f200 8089 	bhi.w	800ef9c <_dtoa_r+0x2f4>
 800ee8a:	2b05      	cmp	r3, #5
 800ee8c:	bfc4      	itt	gt
 800ee8e:	3b04      	subgt	r3, #4
 800ee90:	9306      	strgt	r3, [sp, #24]
 800ee92:	9b06      	ldr	r3, [sp, #24]
 800ee94:	f1a3 0302 	sub.w	r3, r3, #2
 800ee98:	bfcc      	ite	gt
 800ee9a:	2500      	movgt	r5, #0
 800ee9c:	2501      	movle	r5, #1
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	f200 8087 	bhi.w	800efb2 <_dtoa_r+0x30a>
 800eea4:	e8df f003 	tbb	[pc, r3]
 800eea8:	59383a2d 	.word	0x59383a2d
 800eeac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eeb0:	441d      	add	r5, r3
 800eeb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eeb6:	2b20      	cmp	r3, #32
 800eeb8:	bfc1      	itttt	gt
 800eeba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eebe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eec2:	fa0b f303 	lslgt.w	r3, fp, r3
 800eec6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eeca:	bfda      	itte	le
 800eecc:	f1c3 0320 	rsble	r3, r3, #32
 800eed0:	fa06 f003 	lslle.w	r0, r6, r3
 800eed4:	4318      	orrgt	r0, r3
 800eed6:	f7f1 fb1d 	bl	8000514 <__aeabi_ui2d>
 800eeda:	2301      	movs	r3, #1
 800eedc:	4606      	mov	r6, r0
 800eede:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eee2:	3d01      	subs	r5, #1
 800eee4:	930e      	str	r3, [sp, #56]	; 0x38
 800eee6:	e76a      	b.n	800edbe <_dtoa_r+0x116>
 800eee8:	2301      	movs	r3, #1
 800eeea:	e7b2      	b.n	800ee52 <_dtoa_r+0x1aa>
 800eeec:	900b      	str	r0, [sp, #44]	; 0x2c
 800eeee:	e7b1      	b.n	800ee54 <_dtoa_r+0x1ac>
 800eef0:	9b04      	ldr	r3, [sp, #16]
 800eef2:	9a00      	ldr	r2, [sp, #0]
 800eef4:	1a9b      	subs	r3, r3, r2
 800eef6:	9304      	str	r3, [sp, #16]
 800eef8:	4253      	negs	r3, r2
 800eefa:	9307      	str	r3, [sp, #28]
 800eefc:	2300      	movs	r3, #0
 800eefe:	930a      	str	r3, [sp, #40]	; 0x28
 800ef00:	e7bf      	b.n	800ee82 <_dtoa_r+0x1da>
 800ef02:	2300      	movs	r3, #0
 800ef04:	9308      	str	r3, [sp, #32]
 800ef06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	dc55      	bgt.n	800efb8 <_dtoa_r+0x310>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef12:	461a      	mov	r2, r3
 800ef14:	9209      	str	r2, [sp, #36]	; 0x24
 800ef16:	e00c      	b.n	800ef32 <_dtoa_r+0x28a>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e7f3      	b.n	800ef04 <_dtoa_r+0x25c>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef20:	9308      	str	r3, [sp, #32]
 800ef22:	9b00      	ldr	r3, [sp, #0]
 800ef24:	4413      	add	r3, r2
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	bfb8      	it	lt
 800ef30:	2301      	movlt	r3, #1
 800ef32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef34:	2200      	movs	r2, #0
 800ef36:	6042      	str	r2, [r0, #4]
 800ef38:	2204      	movs	r2, #4
 800ef3a:	f102 0614 	add.w	r6, r2, #20
 800ef3e:	429e      	cmp	r6, r3
 800ef40:	6841      	ldr	r1, [r0, #4]
 800ef42:	d93d      	bls.n	800efc0 <_dtoa_r+0x318>
 800ef44:	4620      	mov	r0, r4
 800ef46:	f001 f90b 	bl	8010160 <_Balloc>
 800ef4a:	9001      	str	r0, [sp, #4]
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d13b      	bne.n	800efc8 <_dtoa_r+0x320>
 800ef50:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <_dtoa_r+0x2f0>)
 800ef52:	4602      	mov	r2, r0
 800ef54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef58:	e6c0      	b.n	800ecdc <_dtoa_r+0x34>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e7df      	b.n	800ef1e <_dtoa_r+0x276>
 800ef5e:	bf00      	nop
 800ef60:	636f4361 	.word	0x636f4361
 800ef64:	3fd287a7 	.word	0x3fd287a7
 800ef68:	8b60c8b3 	.word	0x8b60c8b3
 800ef6c:	3fc68a28 	.word	0x3fc68a28
 800ef70:	509f79fb 	.word	0x509f79fb
 800ef74:	3fd34413 	.word	0x3fd34413
 800ef78:	08011986 	.word	0x08011986
 800ef7c:	0801199d 	.word	0x0801199d
 800ef80:	7ff00000 	.word	0x7ff00000
 800ef84:	08011982 	.word	0x08011982
 800ef88:	08011979 	.word	0x08011979
 800ef8c:	080117fd 	.word	0x080117fd
 800ef90:	3ff80000 	.word	0x3ff80000
 800ef94:	08011b08 	.word	0x08011b08
 800ef98:	080119f8 	.word	0x080119f8
 800ef9c:	2501      	movs	r5, #1
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9306      	str	r3, [sp, #24]
 800efa2:	9508      	str	r5, [sp, #32]
 800efa4:	f04f 33ff 	mov.w	r3, #4294967295
 800efa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efac:	2200      	movs	r2, #0
 800efae:	2312      	movs	r3, #18
 800efb0:	e7b0      	b.n	800ef14 <_dtoa_r+0x26c>
 800efb2:	2301      	movs	r3, #1
 800efb4:	9308      	str	r3, [sp, #32]
 800efb6:	e7f5      	b.n	800efa4 <_dtoa_r+0x2fc>
 800efb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efbe:	e7b8      	b.n	800ef32 <_dtoa_r+0x28a>
 800efc0:	3101      	adds	r1, #1
 800efc2:	6041      	str	r1, [r0, #4]
 800efc4:	0052      	lsls	r2, r2, #1
 800efc6:	e7b8      	b.n	800ef3a <_dtoa_r+0x292>
 800efc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efca:	9a01      	ldr	r2, [sp, #4]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	2b0e      	cmp	r3, #14
 800efd2:	f200 809d 	bhi.w	800f110 <_dtoa_r+0x468>
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	f000 809a 	beq.w	800f110 <_dtoa_r+0x468>
 800efdc:	9b00      	ldr	r3, [sp, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dd32      	ble.n	800f048 <_dtoa_r+0x3a0>
 800efe2:	4ab7      	ldr	r2, [pc, #732]	; (800f2c0 <_dtoa_r+0x618>)
 800efe4:	f003 030f 	and.w	r3, r3, #15
 800efe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800efec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eff0:	9b00      	ldr	r3, [sp, #0]
 800eff2:	05d8      	lsls	r0, r3, #23
 800eff4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eff8:	d516      	bpl.n	800f028 <_dtoa_r+0x380>
 800effa:	4bb2      	ldr	r3, [pc, #712]	; (800f2c4 <_dtoa_r+0x61c>)
 800effc:	ec51 0b19 	vmov	r0, r1, d9
 800f000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f004:	f7f1 fc2a 	bl	800085c <__aeabi_ddiv>
 800f008:	f007 070f 	and.w	r7, r7, #15
 800f00c:	4682      	mov	sl, r0
 800f00e:	468b      	mov	fp, r1
 800f010:	2503      	movs	r5, #3
 800f012:	4eac      	ldr	r6, [pc, #688]	; (800f2c4 <_dtoa_r+0x61c>)
 800f014:	b957      	cbnz	r7, 800f02c <_dtoa_r+0x384>
 800f016:	4642      	mov	r2, r8
 800f018:	464b      	mov	r3, r9
 800f01a:	4650      	mov	r0, sl
 800f01c:	4659      	mov	r1, fp
 800f01e:	f7f1 fc1d 	bl	800085c <__aeabi_ddiv>
 800f022:	4682      	mov	sl, r0
 800f024:	468b      	mov	fp, r1
 800f026:	e028      	b.n	800f07a <_dtoa_r+0x3d2>
 800f028:	2502      	movs	r5, #2
 800f02a:	e7f2      	b.n	800f012 <_dtoa_r+0x36a>
 800f02c:	07f9      	lsls	r1, r7, #31
 800f02e:	d508      	bpl.n	800f042 <_dtoa_r+0x39a>
 800f030:	4640      	mov	r0, r8
 800f032:	4649      	mov	r1, r9
 800f034:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f038:	f7f1 fae6 	bl	8000608 <__aeabi_dmul>
 800f03c:	3501      	adds	r5, #1
 800f03e:	4680      	mov	r8, r0
 800f040:	4689      	mov	r9, r1
 800f042:	107f      	asrs	r7, r7, #1
 800f044:	3608      	adds	r6, #8
 800f046:	e7e5      	b.n	800f014 <_dtoa_r+0x36c>
 800f048:	f000 809b 	beq.w	800f182 <_dtoa_r+0x4da>
 800f04c:	9b00      	ldr	r3, [sp, #0]
 800f04e:	4f9d      	ldr	r7, [pc, #628]	; (800f2c4 <_dtoa_r+0x61c>)
 800f050:	425e      	negs	r6, r3
 800f052:	4b9b      	ldr	r3, [pc, #620]	; (800f2c0 <_dtoa_r+0x618>)
 800f054:	f006 020f 	and.w	r2, r6, #15
 800f058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	ec51 0b19 	vmov	r0, r1, d9
 800f064:	f7f1 fad0 	bl	8000608 <__aeabi_dmul>
 800f068:	1136      	asrs	r6, r6, #4
 800f06a:	4682      	mov	sl, r0
 800f06c:	468b      	mov	fp, r1
 800f06e:	2300      	movs	r3, #0
 800f070:	2502      	movs	r5, #2
 800f072:	2e00      	cmp	r6, #0
 800f074:	d17a      	bne.n	800f16c <_dtoa_r+0x4c4>
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1d3      	bne.n	800f022 <_dtoa_r+0x37a>
 800f07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f000 8082 	beq.w	800f186 <_dtoa_r+0x4de>
 800f082:	4b91      	ldr	r3, [pc, #580]	; (800f2c8 <_dtoa_r+0x620>)
 800f084:	2200      	movs	r2, #0
 800f086:	4650      	mov	r0, sl
 800f088:	4659      	mov	r1, fp
 800f08a:	f7f1 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d079      	beq.n	800f186 <_dtoa_r+0x4de>
 800f092:	9b03      	ldr	r3, [sp, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d076      	beq.n	800f186 <_dtoa_r+0x4de>
 800f098:	9b02      	ldr	r3, [sp, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dd36      	ble.n	800f10c <_dtoa_r+0x464>
 800f09e:	9b00      	ldr	r3, [sp, #0]
 800f0a0:	4650      	mov	r0, sl
 800f0a2:	4659      	mov	r1, fp
 800f0a4:	1e5f      	subs	r7, r3, #1
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4b88      	ldr	r3, [pc, #544]	; (800f2cc <_dtoa_r+0x624>)
 800f0aa:	f7f1 faad 	bl	8000608 <__aeabi_dmul>
 800f0ae:	9e02      	ldr	r6, [sp, #8]
 800f0b0:	4682      	mov	sl, r0
 800f0b2:	468b      	mov	fp, r1
 800f0b4:	3501      	adds	r5, #1
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7f1 fa3c 	bl	8000534 <__aeabi_i2d>
 800f0bc:	4652      	mov	r2, sl
 800f0be:	465b      	mov	r3, fp
 800f0c0:	f7f1 faa2 	bl	8000608 <__aeabi_dmul>
 800f0c4:	4b82      	ldr	r3, [pc, #520]	; (800f2d0 <_dtoa_r+0x628>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f7f1 f8e8 	bl	800029c <__adddf3>
 800f0cc:	46d0      	mov	r8, sl
 800f0ce:	46d9      	mov	r9, fp
 800f0d0:	4682      	mov	sl, r0
 800f0d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f0d6:	2e00      	cmp	r6, #0
 800f0d8:	d158      	bne.n	800f18c <_dtoa_r+0x4e4>
 800f0da:	4b7e      	ldr	r3, [pc, #504]	; (800f2d4 <_dtoa_r+0x62c>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 f8d9 	bl	8000298 <__aeabi_dsub>
 800f0e6:	4652      	mov	r2, sl
 800f0e8:	465b      	mov	r3, fp
 800f0ea:	4680      	mov	r8, r0
 800f0ec:	4689      	mov	r9, r1
 800f0ee:	f7f1 fd1b 	bl	8000b28 <__aeabi_dcmpgt>
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	f040 8295 	bne.w	800f622 <_dtoa_r+0x97a>
 800f0f8:	4652      	mov	r2, sl
 800f0fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f0fe:	4640      	mov	r0, r8
 800f100:	4649      	mov	r1, r9
 800f102:	f7f1 fcf3 	bl	8000aec <__aeabi_dcmplt>
 800f106:	2800      	cmp	r0, #0
 800f108:	f040 8289 	bne.w	800f61e <_dtoa_r+0x976>
 800f10c:	ec5b ab19 	vmov	sl, fp, d9
 800f110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f112:	2b00      	cmp	r3, #0
 800f114:	f2c0 8148 	blt.w	800f3a8 <_dtoa_r+0x700>
 800f118:	9a00      	ldr	r2, [sp, #0]
 800f11a:	2a0e      	cmp	r2, #14
 800f11c:	f300 8144 	bgt.w	800f3a8 <_dtoa_r+0x700>
 800f120:	4b67      	ldr	r3, [pc, #412]	; (800f2c0 <_dtoa_r+0x618>)
 800f122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f280 80d5 	bge.w	800f2dc <_dtoa_r+0x634>
 800f132:	9b03      	ldr	r3, [sp, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	f300 80d1 	bgt.w	800f2dc <_dtoa_r+0x634>
 800f13a:	f040 826f 	bne.w	800f61c <_dtoa_r+0x974>
 800f13e:	4b65      	ldr	r3, [pc, #404]	; (800f2d4 <_dtoa_r+0x62c>)
 800f140:	2200      	movs	r2, #0
 800f142:	4640      	mov	r0, r8
 800f144:	4649      	mov	r1, r9
 800f146:	f7f1 fa5f 	bl	8000608 <__aeabi_dmul>
 800f14a:	4652      	mov	r2, sl
 800f14c:	465b      	mov	r3, fp
 800f14e:	f7f1 fce1 	bl	8000b14 <__aeabi_dcmpge>
 800f152:	9e03      	ldr	r6, [sp, #12]
 800f154:	4637      	mov	r7, r6
 800f156:	2800      	cmp	r0, #0
 800f158:	f040 8245 	bne.w	800f5e6 <_dtoa_r+0x93e>
 800f15c:	9d01      	ldr	r5, [sp, #4]
 800f15e:	2331      	movs	r3, #49	; 0x31
 800f160:	f805 3b01 	strb.w	r3, [r5], #1
 800f164:	9b00      	ldr	r3, [sp, #0]
 800f166:	3301      	adds	r3, #1
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	e240      	b.n	800f5ee <_dtoa_r+0x946>
 800f16c:	07f2      	lsls	r2, r6, #31
 800f16e:	d505      	bpl.n	800f17c <_dtoa_r+0x4d4>
 800f170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f174:	f7f1 fa48 	bl	8000608 <__aeabi_dmul>
 800f178:	3501      	adds	r5, #1
 800f17a:	2301      	movs	r3, #1
 800f17c:	1076      	asrs	r6, r6, #1
 800f17e:	3708      	adds	r7, #8
 800f180:	e777      	b.n	800f072 <_dtoa_r+0x3ca>
 800f182:	2502      	movs	r5, #2
 800f184:	e779      	b.n	800f07a <_dtoa_r+0x3d2>
 800f186:	9f00      	ldr	r7, [sp, #0]
 800f188:	9e03      	ldr	r6, [sp, #12]
 800f18a:	e794      	b.n	800f0b6 <_dtoa_r+0x40e>
 800f18c:	9901      	ldr	r1, [sp, #4]
 800f18e:	4b4c      	ldr	r3, [pc, #304]	; (800f2c0 <_dtoa_r+0x618>)
 800f190:	4431      	add	r1, r6
 800f192:	910d      	str	r1, [sp, #52]	; 0x34
 800f194:	9908      	ldr	r1, [sp, #32]
 800f196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f19a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	d043      	beq.n	800f22a <_dtoa_r+0x582>
 800f1a2:	494d      	ldr	r1, [pc, #308]	; (800f2d8 <_dtoa_r+0x630>)
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f7f1 fb59 	bl	800085c <__aeabi_ddiv>
 800f1aa:	4652      	mov	r2, sl
 800f1ac:	465b      	mov	r3, fp
 800f1ae:	f7f1 f873 	bl	8000298 <__aeabi_dsub>
 800f1b2:	9d01      	ldr	r5, [sp, #4]
 800f1b4:	4682      	mov	sl, r0
 800f1b6:	468b      	mov	fp, r1
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	4640      	mov	r0, r8
 800f1bc:	f7f1 fcd4 	bl	8000b68 <__aeabi_d2iz>
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	f7f1 f9b7 	bl	8000534 <__aeabi_i2d>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4640      	mov	r0, r8
 800f1cc:	4649      	mov	r1, r9
 800f1ce:	f7f1 f863 	bl	8000298 <__aeabi_dsub>
 800f1d2:	3630      	adds	r6, #48	; 0x30
 800f1d4:	f805 6b01 	strb.w	r6, [r5], #1
 800f1d8:	4652      	mov	r2, sl
 800f1da:	465b      	mov	r3, fp
 800f1dc:	4680      	mov	r8, r0
 800f1de:	4689      	mov	r9, r1
 800f1e0:	f7f1 fc84 	bl	8000aec <__aeabi_dcmplt>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d163      	bne.n	800f2b0 <_dtoa_r+0x608>
 800f1e8:	4642      	mov	r2, r8
 800f1ea:	464b      	mov	r3, r9
 800f1ec:	4936      	ldr	r1, [pc, #216]	; (800f2c8 <_dtoa_r+0x620>)
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	f7f1 f852 	bl	8000298 <__aeabi_dsub>
 800f1f4:	4652      	mov	r2, sl
 800f1f6:	465b      	mov	r3, fp
 800f1f8:	f7f1 fc78 	bl	8000aec <__aeabi_dcmplt>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	f040 80b5 	bne.w	800f36c <_dtoa_r+0x6c4>
 800f202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f204:	429d      	cmp	r5, r3
 800f206:	d081      	beq.n	800f10c <_dtoa_r+0x464>
 800f208:	4b30      	ldr	r3, [pc, #192]	; (800f2cc <_dtoa_r+0x624>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	4650      	mov	r0, sl
 800f20e:	4659      	mov	r1, fp
 800f210:	f7f1 f9fa 	bl	8000608 <__aeabi_dmul>
 800f214:	4b2d      	ldr	r3, [pc, #180]	; (800f2cc <_dtoa_r+0x624>)
 800f216:	4682      	mov	sl, r0
 800f218:	468b      	mov	fp, r1
 800f21a:	4640      	mov	r0, r8
 800f21c:	4649      	mov	r1, r9
 800f21e:	2200      	movs	r2, #0
 800f220:	f7f1 f9f2 	bl	8000608 <__aeabi_dmul>
 800f224:	4680      	mov	r8, r0
 800f226:	4689      	mov	r9, r1
 800f228:	e7c6      	b.n	800f1b8 <_dtoa_r+0x510>
 800f22a:	4650      	mov	r0, sl
 800f22c:	4659      	mov	r1, fp
 800f22e:	f7f1 f9eb 	bl	8000608 <__aeabi_dmul>
 800f232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f234:	9d01      	ldr	r5, [sp, #4]
 800f236:	930f      	str	r3, [sp, #60]	; 0x3c
 800f238:	4682      	mov	sl, r0
 800f23a:	468b      	mov	fp, r1
 800f23c:	4649      	mov	r1, r9
 800f23e:	4640      	mov	r0, r8
 800f240:	f7f1 fc92 	bl	8000b68 <__aeabi_d2iz>
 800f244:	4606      	mov	r6, r0
 800f246:	f7f1 f975 	bl	8000534 <__aeabi_i2d>
 800f24a:	3630      	adds	r6, #48	; 0x30
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	4640      	mov	r0, r8
 800f252:	4649      	mov	r1, r9
 800f254:	f7f1 f820 	bl	8000298 <__aeabi_dsub>
 800f258:	f805 6b01 	strb.w	r6, [r5], #1
 800f25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f25e:	429d      	cmp	r5, r3
 800f260:	4680      	mov	r8, r0
 800f262:	4689      	mov	r9, r1
 800f264:	f04f 0200 	mov.w	r2, #0
 800f268:	d124      	bne.n	800f2b4 <_dtoa_r+0x60c>
 800f26a:	4b1b      	ldr	r3, [pc, #108]	; (800f2d8 <_dtoa_r+0x630>)
 800f26c:	4650      	mov	r0, sl
 800f26e:	4659      	mov	r1, fp
 800f270:	f7f1 f814 	bl	800029c <__adddf3>
 800f274:	4602      	mov	r2, r0
 800f276:	460b      	mov	r3, r1
 800f278:	4640      	mov	r0, r8
 800f27a:	4649      	mov	r1, r9
 800f27c:	f7f1 fc54 	bl	8000b28 <__aeabi_dcmpgt>
 800f280:	2800      	cmp	r0, #0
 800f282:	d173      	bne.n	800f36c <_dtoa_r+0x6c4>
 800f284:	4652      	mov	r2, sl
 800f286:	465b      	mov	r3, fp
 800f288:	4913      	ldr	r1, [pc, #76]	; (800f2d8 <_dtoa_r+0x630>)
 800f28a:	2000      	movs	r0, #0
 800f28c:	f7f1 f804 	bl	8000298 <__aeabi_dsub>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4640      	mov	r0, r8
 800f296:	4649      	mov	r1, r9
 800f298:	f7f1 fc28 	bl	8000aec <__aeabi_dcmplt>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	f43f af35 	beq.w	800f10c <_dtoa_r+0x464>
 800f2a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f2a4:	1e6b      	subs	r3, r5, #1
 800f2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2ac:	2b30      	cmp	r3, #48	; 0x30
 800f2ae:	d0f8      	beq.n	800f2a2 <_dtoa_r+0x5fa>
 800f2b0:	9700      	str	r7, [sp, #0]
 800f2b2:	e049      	b.n	800f348 <_dtoa_r+0x6a0>
 800f2b4:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <_dtoa_r+0x624>)
 800f2b6:	f7f1 f9a7 	bl	8000608 <__aeabi_dmul>
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	4689      	mov	r9, r1
 800f2be:	e7bd      	b.n	800f23c <_dtoa_r+0x594>
 800f2c0:	08011b08 	.word	0x08011b08
 800f2c4:	08011ae0 	.word	0x08011ae0
 800f2c8:	3ff00000 	.word	0x3ff00000
 800f2cc:	40240000 	.word	0x40240000
 800f2d0:	401c0000 	.word	0x401c0000
 800f2d4:	40140000 	.word	0x40140000
 800f2d8:	3fe00000 	.word	0x3fe00000
 800f2dc:	9d01      	ldr	r5, [sp, #4]
 800f2de:	4656      	mov	r6, sl
 800f2e0:	465f      	mov	r7, fp
 800f2e2:	4642      	mov	r2, r8
 800f2e4:	464b      	mov	r3, r9
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	f7f1 fab7 	bl	800085c <__aeabi_ddiv>
 800f2ee:	f7f1 fc3b 	bl	8000b68 <__aeabi_d2iz>
 800f2f2:	4682      	mov	sl, r0
 800f2f4:	f7f1 f91e 	bl	8000534 <__aeabi_i2d>
 800f2f8:	4642      	mov	r2, r8
 800f2fa:	464b      	mov	r3, r9
 800f2fc:	f7f1 f984 	bl	8000608 <__aeabi_dmul>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4630      	mov	r0, r6
 800f306:	4639      	mov	r1, r7
 800f308:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f30c:	f7f0 ffc4 	bl	8000298 <__aeabi_dsub>
 800f310:	f805 6b01 	strb.w	r6, [r5], #1
 800f314:	9e01      	ldr	r6, [sp, #4]
 800f316:	9f03      	ldr	r7, [sp, #12]
 800f318:	1bae      	subs	r6, r5, r6
 800f31a:	42b7      	cmp	r7, r6
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	d135      	bne.n	800f38e <_dtoa_r+0x6e6>
 800f322:	f7f0 ffbb 	bl	800029c <__adddf3>
 800f326:	4642      	mov	r2, r8
 800f328:	464b      	mov	r3, r9
 800f32a:	4606      	mov	r6, r0
 800f32c:	460f      	mov	r7, r1
 800f32e:	f7f1 fbfb 	bl	8000b28 <__aeabi_dcmpgt>
 800f332:	b9d0      	cbnz	r0, 800f36a <_dtoa_r+0x6c2>
 800f334:	4642      	mov	r2, r8
 800f336:	464b      	mov	r3, r9
 800f338:	4630      	mov	r0, r6
 800f33a:	4639      	mov	r1, r7
 800f33c:	f7f1 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f340:	b110      	cbz	r0, 800f348 <_dtoa_r+0x6a0>
 800f342:	f01a 0f01 	tst.w	sl, #1
 800f346:	d110      	bne.n	800f36a <_dtoa_r+0x6c2>
 800f348:	4620      	mov	r0, r4
 800f34a:	ee18 1a10 	vmov	r1, s16
 800f34e:	f000 ff47 	bl	80101e0 <_Bfree>
 800f352:	2300      	movs	r3, #0
 800f354:	9800      	ldr	r0, [sp, #0]
 800f356:	702b      	strb	r3, [r5, #0]
 800f358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f35a:	3001      	adds	r0, #1
 800f35c:	6018      	str	r0, [r3, #0]
 800f35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f360:	2b00      	cmp	r3, #0
 800f362:	f43f acf1 	beq.w	800ed48 <_dtoa_r+0xa0>
 800f366:	601d      	str	r5, [r3, #0]
 800f368:	e4ee      	b.n	800ed48 <_dtoa_r+0xa0>
 800f36a:	9f00      	ldr	r7, [sp, #0]
 800f36c:	462b      	mov	r3, r5
 800f36e:	461d      	mov	r5, r3
 800f370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f374:	2a39      	cmp	r2, #57	; 0x39
 800f376:	d106      	bne.n	800f386 <_dtoa_r+0x6de>
 800f378:	9a01      	ldr	r2, [sp, #4]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d1f7      	bne.n	800f36e <_dtoa_r+0x6c6>
 800f37e:	9901      	ldr	r1, [sp, #4]
 800f380:	2230      	movs	r2, #48	; 0x30
 800f382:	3701      	adds	r7, #1
 800f384:	700a      	strb	r2, [r1, #0]
 800f386:	781a      	ldrb	r2, [r3, #0]
 800f388:	3201      	adds	r2, #1
 800f38a:	701a      	strb	r2, [r3, #0]
 800f38c:	e790      	b.n	800f2b0 <_dtoa_r+0x608>
 800f38e:	4ba6      	ldr	r3, [pc, #664]	; (800f628 <_dtoa_r+0x980>)
 800f390:	2200      	movs	r2, #0
 800f392:	f7f1 f939 	bl	8000608 <__aeabi_dmul>
 800f396:	2200      	movs	r2, #0
 800f398:	2300      	movs	r3, #0
 800f39a:	4606      	mov	r6, r0
 800f39c:	460f      	mov	r7, r1
 800f39e:	f7f1 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d09d      	beq.n	800f2e2 <_dtoa_r+0x63a>
 800f3a6:	e7cf      	b.n	800f348 <_dtoa_r+0x6a0>
 800f3a8:	9a08      	ldr	r2, [sp, #32]
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	f000 80d7 	beq.w	800f55e <_dtoa_r+0x8b6>
 800f3b0:	9a06      	ldr	r2, [sp, #24]
 800f3b2:	2a01      	cmp	r2, #1
 800f3b4:	f300 80ba 	bgt.w	800f52c <_dtoa_r+0x884>
 800f3b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3ba:	2a00      	cmp	r2, #0
 800f3bc:	f000 80b2 	beq.w	800f524 <_dtoa_r+0x87c>
 800f3c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3c4:	9e07      	ldr	r6, [sp, #28]
 800f3c6:	9d04      	ldr	r5, [sp, #16]
 800f3c8:	9a04      	ldr	r2, [sp, #16]
 800f3ca:	441a      	add	r2, r3
 800f3cc:	9204      	str	r2, [sp, #16]
 800f3ce:	9a05      	ldr	r2, [sp, #20]
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	441a      	add	r2, r3
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	9205      	str	r2, [sp, #20]
 800f3d8:	f001 f804 	bl	80103e4 <__i2b>
 800f3dc:	4607      	mov	r7, r0
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	dd0c      	ble.n	800f3fc <_dtoa_r+0x754>
 800f3e2:	9b05      	ldr	r3, [sp, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dd09      	ble.n	800f3fc <_dtoa_r+0x754>
 800f3e8:	42ab      	cmp	r3, r5
 800f3ea:	9a04      	ldr	r2, [sp, #16]
 800f3ec:	bfa8      	it	ge
 800f3ee:	462b      	movge	r3, r5
 800f3f0:	1ad2      	subs	r2, r2, r3
 800f3f2:	9204      	str	r2, [sp, #16]
 800f3f4:	9a05      	ldr	r2, [sp, #20]
 800f3f6:	1aed      	subs	r5, r5, r3
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	9305      	str	r3, [sp, #20]
 800f3fc:	9b07      	ldr	r3, [sp, #28]
 800f3fe:	b31b      	cbz	r3, 800f448 <_dtoa_r+0x7a0>
 800f400:	9b08      	ldr	r3, [sp, #32]
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80af 	beq.w	800f566 <_dtoa_r+0x8be>
 800f408:	2e00      	cmp	r6, #0
 800f40a:	dd13      	ble.n	800f434 <_dtoa_r+0x78c>
 800f40c:	4639      	mov	r1, r7
 800f40e:	4632      	mov	r2, r6
 800f410:	4620      	mov	r0, r4
 800f412:	f001 f8a7 	bl	8010564 <__pow5mult>
 800f416:	ee18 2a10 	vmov	r2, s16
 800f41a:	4601      	mov	r1, r0
 800f41c:	4607      	mov	r7, r0
 800f41e:	4620      	mov	r0, r4
 800f420:	f000 fff6 	bl	8010410 <__multiply>
 800f424:	ee18 1a10 	vmov	r1, s16
 800f428:	4680      	mov	r8, r0
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 fed8 	bl	80101e0 <_Bfree>
 800f430:	ee08 8a10 	vmov	s16, r8
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	1b9a      	subs	r2, r3, r6
 800f438:	d006      	beq.n	800f448 <_dtoa_r+0x7a0>
 800f43a:	ee18 1a10 	vmov	r1, s16
 800f43e:	4620      	mov	r0, r4
 800f440:	f001 f890 	bl	8010564 <__pow5mult>
 800f444:	ee08 0a10 	vmov	s16, r0
 800f448:	2101      	movs	r1, #1
 800f44a:	4620      	mov	r0, r4
 800f44c:	f000 ffca 	bl	80103e4 <__i2b>
 800f450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f452:	2b00      	cmp	r3, #0
 800f454:	4606      	mov	r6, r0
 800f456:	f340 8088 	ble.w	800f56a <_dtoa_r+0x8c2>
 800f45a:	461a      	mov	r2, r3
 800f45c:	4601      	mov	r1, r0
 800f45e:	4620      	mov	r0, r4
 800f460:	f001 f880 	bl	8010564 <__pow5mult>
 800f464:	9b06      	ldr	r3, [sp, #24]
 800f466:	2b01      	cmp	r3, #1
 800f468:	4606      	mov	r6, r0
 800f46a:	f340 8081 	ble.w	800f570 <_dtoa_r+0x8c8>
 800f46e:	f04f 0800 	mov.w	r8, #0
 800f472:	6933      	ldr	r3, [r6, #16]
 800f474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f478:	6918      	ldr	r0, [r3, #16]
 800f47a:	f000 ff63 	bl	8010344 <__hi0bits>
 800f47e:	f1c0 0020 	rsb	r0, r0, #32
 800f482:	9b05      	ldr	r3, [sp, #20]
 800f484:	4418      	add	r0, r3
 800f486:	f010 001f 	ands.w	r0, r0, #31
 800f48a:	f000 8092 	beq.w	800f5b2 <_dtoa_r+0x90a>
 800f48e:	f1c0 0320 	rsb	r3, r0, #32
 800f492:	2b04      	cmp	r3, #4
 800f494:	f340 808a 	ble.w	800f5ac <_dtoa_r+0x904>
 800f498:	f1c0 001c 	rsb	r0, r0, #28
 800f49c:	9b04      	ldr	r3, [sp, #16]
 800f49e:	4403      	add	r3, r0
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	9b05      	ldr	r3, [sp, #20]
 800f4a4:	4403      	add	r3, r0
 800f4a6:	4405      	add	r5, r0
 800f4a8:	9305      	str	r3, [sp, #20]
 800f4aa:	9b04      	ldr	r3, [sp, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	dd07      	ble.n	800f4c0 <_dtoa_r+0x818>
 800f4b0:	ee18 1a10 	vmov	r1, s16
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f001 f8ae 	bl	8010618 <__lshift>
 800f4bc:	ee08 0a10 	vmov	s16, r0
 800f4c0:	9b05      	ldr	r3, [sp, #20]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	dd05      	ble.n	800f4d2 <_dtoa_r+0x82a>
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f001 f8a4 	bl	8010618 <__lshift>
 800f4d0:	4606      	mov	r6, r0
 800f4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d06e      	beq.n	800f5b6 <_dtoa_r+0x90e>
 800f4d8:	ee18 0a10 	vmov	r0, s16
 800f4dc:	4631      	mov	r1, r6
 800f4de:	f001 f90b 	bl	80106f8 <__mcmp>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	da67      	bge.n	800f5b6 <_dtoa_r+0x90e>
 800f4e6:	9b00      	ldr	r3, [sp, #0]
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	ee18 1a10 	vmov	r1, s16
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	220a      	movs	r2, #10
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fe95 	bl	8010224 <__multadd>
 800f4fa:	9b08      	ldr	r3, [sp, #32]
 800f4fc:	ee08 0a10 	vmov	s16, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 81b1 	beq.w	800f868 <_dtoa_r+0xbc0>
 800f506:	2300      	movs	r3, #0
 800f508:	4639      	mov	r1, r7
 800f50a:	220a      	movs	r2, #10
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 fe89 	bl	8010224 <__multadd>
 800f512:	9b02      	ldr	r3, [sp, #8]
 800f514:	2b00      	cmp	r3, #0
 800f516:	4607      	mov	r7, r0
 800f518:	f300 808e 	bgt.w	800f638 <_dtoa_r+0x990>
 800f51c:	9b06      	ldr	r3, [sp, #24]
 800f51e:	2b02      	cmp	r3, #2
 800f520:	dc51      	bgt.n	800f5c6 <_dtoa_r+0x91e>
 800f522:	e089      	b.n	800f638 <_dtoa_r+0x990>
 800f524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f52a:	e74b      	b.n	800f3c4 <_dtoa_r+0x71c>
 800f52c:	9b03      	ldr	r3, [sp, #12]
 800f52e:	1e5e      	subs	r6, r3, #1
 800f530:	9b07      	ldr	r3, [sp, #28]
 800f532:	42b3      	cmp	r3, r6
 800f534:	bfbf      	itttt	lt
 800f536:	9b07      	ldrlt	r3, [sp, #28]
 800f538:	9607      	strlt	r6, [sp, #28]
 800f53a:	1af2      	sublt	r2, r6, r3
 800f53c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f53e:	bfb6      	itet	lt
 800f540:	189b      	addlt	r3, r3, r2
 800f542:	1b9e      	subge	r6, r3, r6
 800f544:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f546:	9b03      	ldr	r3, [sp, #12]
 800f548:	bfb8      	it	lt
 800f54a:	2600      	movlt	r6, #0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	bfb7      	itett	lt
 800f550:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f554:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f558:	1a9d      	sublt	r5, r3, r2
 800f55a:	2300      	movlt	r3, #0
 800f55c:	e734      	b.n	800f3c8 <_dtoa_r+0x720>
 800f55e:	9e07      	ldr	r6, [sp, #28]
 800f560:	9d04      	ldr	r5, [sp, #16]
 800f562:	9f08      	ldr	r7, [sp, #32]
 800f564:	e73b      	b.n	800f3de <_dtoa_r+0x736>
 800f566:	9a07      	ldr	r2, [sp, #28]
 800f568:	e767      	b.n	800f43a <_dtoa_r+0x792>
 800f56a:	9b06      	ldr	r3, [sp, #24]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	dc18      	bgt.n	800f5a2 <_dtoa_r+0x8fa>
 800f570:	f1ba 0f00 	cmp.w	sl, #0
 800f574:	d115      	bne.n	800f5a2 <_dtoa_r+0x8fa>
 800f576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f57a:	b993      	cbnz	r3, 800f5a2 <_dtoa_r+0x8fa>
 800f57c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f580:	0d1b      	lsrs	r3, r3, #20
 800f582:	051b      	lsls	r3, r3, #20
 800f584:	b183      	cbz	r3, 800f5a8 <_dtoa_r+0x900>
 800f586:	9b04      	ldr	r3, [sp, #16]
 800f588:	3301      	adds	r3, #1
 800f58a:	9304      	str	r3, [sp, #16]
 800f58c:	9b05      	ldr	r3, [sp, #20]
 800f58e:	3301      	adds	r3, #1
 800f590:	9305      	str	r3, [sp, #20]
 800f592:	f04f 0801 	mov.w	r8, #1
 800f596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f47f af6a 	bne.w	800f472 <_dtoa_r+0x7ca>
 800f59e:	2001      	movs	r0, #1
 800f5a0:	e76f      	b.n	800f482 <_dtoa_r+0x7da>
 800f5a2:	f04f 0800 	mov.w	r8, #0
 800f5a6:	e7f6      	b.n	800f596 <_dtoa_r+0x8ee>
 800f5a8:	4698      	mov	r8, r3
 800f5aa:	e7f4      	b.n	800f596 <_dtoa_r+0x8ee>
 800f5ac:	f43f af7d 	beq.w	800f4aa <_dtoa_r+0x802>
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	301c      	adds	r0, #28
 800f5b4:	e772      	b.n	800f49c <_dtoa_r+0x7f4>
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	dc37      	bgt.n	800f62c <_dtoa_r+0x984>
 800f5bc:	9b06      	ldr	r3, [sp, #24]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	dd34      	ble.n	800f62c <_dtoa_r+0x984>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	9302      	str	r3, [sp, #8]
 800f5c6:	9b02      	ldr	r3, [sp, #8]
 800f5c8:	b96b      	cbnz	r3, 800f5e6 <_dtoa_r+0x93e>
 800f5ca:	4631      	mov	r1, r6
 800f5cc:	2205      	movs	r2, #5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f000 fe28 	bl	8010224 <__multadd>
 800f5d4:	4601      	mov	r1, r0
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	ee18 0a10 	vmov	r0, s16
 800f5dc:	f001 f88c 	bl	80106f8 <__mcmp>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	f73f adbb 	bgt.w	800f15c <_dtoa_r+0x4b4>
 800f5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e8:	9d01      	ldr	r5, [sp, #4]
 800f5ea:	43db      	mvns	r3, r3
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	f04f 0800 	mov.w	r8, #0
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f000 fdf3 	bl	80101e0 <_Bfree>
 800f5fa:	2f00      	cmp	r7, #0
 800f5fc:	f43f aea4 	beq.w	800f348 <_dtoa_r+0x6a0>
 800f600:	f1b8 0f00 	cmp.w	r8, #0
 800f604:	d005      	beq.n	800f612 <_dtoa_r+0x96a>
 800f606:	45b8      	cmp	r8, r7
 800f608:	d003      	beq.n	800f612 <_dtoa_r+0x96a>
 800f60a:	4641      	mov	r1, r8
 800f60c:	4620      	mov	r0, r4
 800f60e:	f000 fde7 	bl	80101e0 <_Bfree>
 800f612:	4639      	mov	r1, r7
 800f614:	4620      	mov	r0, r4
 800f616:	f000 fde3 	bl	80101e0 <_Bfree>
 800f61a:	e695      	b.n	800f348 <_dtoa_r+0x6a0>
 800f61c:	2600      	movs	r6, #0
 800f61e:	4637      	mov	r7, r6
 800f620:	e7e1      	b.n	800f5e6 <_dtoa_r+0x93e>
 800f622:	9700      	str	r7, [sp, #0]
 800f624:	4637      	mov	r7, r6
 800f626:	e599      	b.n	800f15c <_dtoa_r+0x4b4>
 800f628:	40240000 	.word	0x40240000
 800f62c:	9b08      	ldr	r3, [sp, #32]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 80ca 	beq.w	800f7c8 <_dtoa_r+0xb20>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	9302      	str	r3, [sp, #8]
 800f638:	2d00      	cmp	r5, #0
 800f63a:	dd05      	ble.n	800f648 <_dtoa_r+0x9a0>
 800f63c:	4639      	mov	r1, r7
 800f63e:	462a      	mov	r2, r5
 800f640:	4620      	mov	r0, r4
 800f642:	f000 ffe9 	bl	8010618 <__lshift>
 800f646:	4607      	mov	r7, r0
 800f648:	f1b8 0f00 	cmp.w	r8, #0
 800f64c:	d05b      	beq.n	800f706 <_dtoa_r+0xa5e>
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	4620      	mov	r0, r4
 800f652:	f000 fd85 	bl	8010160 <_Balloc>
 800f656:	4605      	mov	r5, r0
 800f658:	b928      	cbnz	r0, 800f666 <_dtoa_r+0x9be>
 800f65a:	4b87      	ldr	r3, [pc, #540]	; (800f878 <_dtoa_r+0xbd0>)
 800f65c:	4602      	mov	r2, r0
 800f65e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f662:	f7ff bb3b 	b.w	800ecdc <_dtoa_r+0x34>
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	3202      	adds	r2, #2
 800f66a:	0092      	lsls	r2, r2, #2
 800f66c:	f107 010c 	add.w	r1, r7, #12
 800f670:	300c      	adds	r0, #12
 800f672:	f7fd fbb4 	bl	800cdde <memcpy>
 800f676:	2201      	movs	r2, #1
 800f678:	4629      	mov	r1, r5
 800f67a:	4620      	mov	r0, r4
 800f67c:	f000 ffcc 	bl	8010618 <__lshift>
 800f680:	9b01      	ldr	r3, [sp, #4]
 800f682:	f103 0901 	add.w	r9, r3, #1
 800f686:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f68a:	4413      	add	r3, r2
 800f68c:	9305      	str	r3, [sp, #20]
 800f68e:	f00a 0301 	and.w	r3, sl, #1
 800f692:	46b8      	mov	r8, r7
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	4607      	mov	r7, r0
 800f698:	4631      	mov	r1, r6
 800f69a:	ee18 0a10 	vmov	r0, s16
 800f69e:	f7ff fa75 	bl	800eb8c <quorem>
 800f6a2:	4641      	mov	r1, r8
 800f6a4:	9002      	str	r0, [sp, #8]
 800f6a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f6aa:	ee18 0a10 	vmov	r0, s16
 800f6ae:	f001 f823 	bl	80106f8 <__mcmp>
 800f6b2:	463a      	mov	r2, r7
 800f6b4:	9003      	str	r0, [sp, #12]
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f001 f839 	bl	8010730 <__mdiff>
 800f6be:	68c2      	ldr	r2, [r0, #12]
 800f6c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	bb02      	cbnz	r2, 800f70a <_dtoa_r+0xa62>
 800f6c8:	4601      	mov	r1, r0
 800f6ca:	ee18 0a10 	vmov	r0, s16
 800f6ce:	f001 f813 	bl	80106f8 <__mcmp>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	9207      	str	r2, [sp, #28]
 800f6da:	f000 fd81 	bl	80101e0 <_Bfree>
 800f6de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f6e2:	ea43 0102 	orr.w	r1, r3, r2
 800f6e6:	9b04      	ldr	r3, [sp, #16]
 800f6e8:	430b      	orrs	r3, r1
 800f6ea:	464d      	mov	r5, r9
 800f6ec:	d10f      	bne.n	800f70e <_dtoa_r+0xa66>
 800f6ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f6f2:	d02a      	beq.n	800f74a <_dtoa_r+0xaa2>
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dd02      	ble.n	800f700 <_dtoa_r+0xa58>
 800f6fa:	9b02      	ldr	r3, [sp, #8]
 800f6fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f700:	f88b a000 	strb.w	sl, [fp]
 800f704:	e775      	b.n	800f5f2 <_dtoa_r+0x94a>
 800f706:	4638      	mov	r0, r7
 800f708:	e7ba      	b.n	800f680 <_dtoa_r+0x9d8>
 800f70a:	2201      	movs	r2, #1
 800f70c:	e7e2      	b.n	800f6d4 <_dtoa_r+0xa2c>
 800f70e:	9b03      	ldr	r3, [sp, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	db04      	blt.n	800f71e <_dtoa_r+0xa76>
 800f714:	9906      	ldr	r1, [sp, #24]
 800f716:	430b      	orrs	r3, r1
 800f718:	9904      	ldr	r1, [sp, #16]
 800f71a:	430b      	orrs	r3, r1
 800f71c:	d122      	bne.n	800f764 <_dtoa_r+0xabc>
 800f71e:	2a00      	cmp	r2, #0
 800f720:	ddee      	ble.n	800f700 <_dtoa_r+0xa58>
 800f722:	ee18 1a10 	vmov	r1, s16
 800f726:	2201      	movs	r2, #1
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 ff75 	bl	8010618 <__lshift>
 800f72e:	4631      	mov	r1, r6
 800f730:	ee08 0a10 	vmov	s16, r0
 800f734:	f000 ffe0 	bl	80106f8 <__mcmp>
 800f738:	2800      	cmp	r0, #0
 800f73a:	dc03      	bgt.n	800f744 <_dtoa_r+0xa9c>
 800f73c:	d1e0      	bne.n	800f700 <_dtoa_r+0xa58>
 800f73e:	f01a 0f01 	tst.w	sl, #1
 800f742:	d0dd      	beq.n	800f700 <_dtoa_r+0xa58>
 800f744:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f748:	d1d7      	bne.n	800f6fa <_dtoa_r+0xa52>
 800f74a:	2339      	movs	r3, #57	; 0x39
 800f74c:	f88b 3000 	strb.w	r3, [fp]
 800f750:	462b      	mov	r3, r5
 800f752:	461d      	mov	r5, r3
 800f754:	3b01      	subs	r3, #1
 800f756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f75a:	2a39      	cmp	r2, #57	; 0x39
 800f75c:	d071      	beq.n	800f842 <_dtoa_r+0xb9a>
 800f75e:	3201      	adds	r2, #1
 800f760:	701a      	strb	r2, [r3, #0]
 800f762:	e746      	b.n	800f5f2 <_dtoa_r+0x94a>
 800f764:	2a00      	cmp	r2, #0
 800f766:	dd07      	ble.n	800f778 <_dtoa_r+0xad0>
 800f768:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f76c:	d0ed      	beq.n	800f74a <_dtoa_r+0xaa2>
 800f76e:	f10a 0301 	add.w	r3, sl, #1
 800f772:	f88b 3000 	strb.w	r3, [fp]
 800f776:	e73c      	b.n	800f5f2 <_dtoa_r+0x94a>
 800f778:	9b05      	ldr	r3, [sp, #20]
 800f77a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f77e:	4599      	cmp	r9, r3
 800f780:	d047      	beq.n	800f812 <_dtoa_r+0xb6a>
 800f782:	ee18 1a10 	vmov	r1, s16
 800f786:	2300      	movs	r3, #0
 800f788:	220a      	movs	r2, #10
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 fd4a 	bl	8010224 <__multadd>
 800f790:	45b8      	cmp	r8, r7
 800f792:	ee08 0a10 	vmov	s16, r0
 800f796:	f04f 0300 	mov.w	r3, #0
 800f79a:	f04f 020a 	mov.w	r2, #10
 800f79e:	4641      	mov	r1, r8
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	d106      	bne.n	800f7b2 <_dtoa_r+0xb0a>
 800f7a4:	f000 fd3e 	bl	8010224 <__multadd>
 800f7a8:	4680      	mov	r8, r0
 800f7aa:	4607      	mov	r7, r0
 800f7ac:	f109 0901 	add.w	r9, r9, #1
 800f7b0:	e772      	b.n	800f698 <_dtoa_r+0x9f0>
 800f7b2:	f000 fd37 	bl	8010224 <__multadd>
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	4680      	mov	r8, r0
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	220a      	movs	r2, #10
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f000 fd30 	bl	8010224 <__multadd>
 800f7c4:	4607      	mov	r7, r0
 800f7c6:	e7f1      	b.n	800f7ac <_dtoa_r+0xb04>
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	9302      	str	r3, [sp, #8]
 800f7cc:	9d01      	ldr	r5, [sp, #4]
 800f7ce:	ee18 0a10 	vmov	r0, s16
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	f7ff f9da 	bl	800eb8c <quorem>
 800f7d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f7dc:	9b01      	ldr	r3, [sp, #4]
 800f7de:	f805 ab01 	strb.w	sl, [r5], #1
 800f7e2:	1aea      	subs	r2, r5, r3
 800f7e4:	9b02      	ldr	r3, [sp, #8]
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	dd09      	ble.n	800f7fe <_dtoa_r+0xb56>
 800f7ea:	ee18 1a10 	vmov	r1, s16
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	220a      	movs	r2, #10
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 fd16 	bl	8010224 <__multadd>
 800f7f8:	ee08 0a10 	vmov	s16, r0
 800f7fc:	e7e7      	b.n	800f7ce <_dtoa_r+0xb26>
 800f7fe:	9b02      	ldr	r3, [sp, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	bfc8      	it	gt
 800f804:	461d      	movgt	r5, r3
 800f806:	9b01      	ldr	r3, [sp, #4]
 800f808:	bfd8      	it	le
 800f80a:	2501      	movle	r5, #1
 800f80c:	441d      	add	r5, r3
 800f80e:	f04f 0800 	mov.w	r8, #0
 800f812:	ee18 1a10 	vmov	r1, s16
 800f816:	2201      	movs	r2, #1
 800f818:	4620      	mov	r0, r4
 800f81a:	f000 fefd 	bl	8010618 <__lshift>
 800f81e:	4631      	mov	r1, r6
 800f820:	ee08 0a10 	vmov	s16, r0
 800f824:	f000 ff68 	bl	80106f8 <__mcmp>
 800f828:	2800      	cmp	r0, #0
 800f82a:	dc91      	bgt.n	800f750 <_dtoa_r+0xaa8>
 800f82c:	d102      	bne.n	800f834 <_dtoa_r+0xb8c>
 800f82e:	f01a 0f01 	tst.w	sl, #1
 800f832:	d18d      	bne.n	800f750 <_dtoa_r+0xaa8>
 800f834:	462b      	mov	r3, r5
 800f836:	461d      	mov	r5, r3
 800f838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f83c:	2a30      	cmp	r2, #48	; 0x30
 800f83e:	d0fa      	beq.n	800f836 <_dtoa_r+0xb8e>
 800f840:	e6d7      	b.n	800f5f2 <_dtoa_r+0x94a>
 800f842:	9a01      	ldr	r2, [sp, #4]
 800f844:	429a      	cmp	r2, r3
 800f846:	d184      	bne.n	800f752 <_dtoa_r+0xaaa>
 800f848:	9b00      	ldr	r3, [sp, #0]
 800f84a:	3301      	adds	r3, #1
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	2331      	movs	r3, #49	; 0x31
 800f850:	7013      	strb	r3, [r2, #0]
 800f852:	e6ce      	b.n	800f5f2 <_dtoa_r+0x94a>
 800f854:	4b09      	ldr	r3, [pc, #36]	; (800f87c <_dtoa_r+0xbd4>)
 800f856:	f7ff ba95 	b.w	800ed84 <_dtoa_r+0xdc>
 800f85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f47f aa6e 	bne.w	800ed3e <_dtoa_r+0x96>
 800f862:	4b07      	ldr	r3, [pc, #28]	; (800f880 <_dtoa_r+0xbd8>)
 800f864:	f7ff ba8e 	b.w	800ed84 <_dtoa_r+0xdc>
 800f868:	9b02      	ldr	r3, [sp, #8]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	dcae      	bgt.n	800f7cc <_dtoa_r+0xb24>
 800f86e:	9b06      	ldr	r3, [sp, #24]
 800f870:	2b02      	cmp	r3, #2
 800f872:	f73f aea8 	bgt.w	800f5c6 <_dtoa_r+0x91e>
 800f876:	e7a9      	b.n	800f7cc <_dtoa_r+0xb24>
 800f878:	080119f8 	.word	0x080119f8
 800f87c:	080117fc 	.word	0x080117fc
 800f880:	08011979 	.word	0x08011979

0800f884 <__sflush_r>:
 800f884:	898a      	ldrh	r2, [r1, #12]
 800f886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88a:	4605      	mov	r5, r0
 800f88c:	0710      	lsls	r0, r2, #28
 800f88e:	460c      	mov	r4, r1
 800f890:	d458      	bmi.n	800f944 <__sflush_r+0xc0>
 800f892:	684b      	ldr	r3, [r1, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	dc05      	bgt.n	800f8a4 <__sflush_r+0x20>
 800f898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	dc02      	bgt.n	800f8a4 <__sflush_r+0x20>
 800f89e:	2000      	movs	r0, #0
 800f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8a6:	2e00      	cmp	r6, #0
 800f8a8:	d0f9      	beq.n	800f89e <__sflush_r+0x1a>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8b0:	682f      	ldr	r7, [r5, #0]
 800f8b2:	602b      	str	r3, [r5, #0]
 800f8b4:	d032      	beq.n	800f91c <__sflush_r+0x98>
 800f8b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8b8:	89a3      	ldrh	r3, [r4, #12]
 800f8ba:	075a      	lsls	r2, r3, #29
 800f8bc:	d505      	bpl.n	800f8ca <__sflush_r+0x46>
 800f8be:	6863      	ldr	r3, [r4, #4]
 800f8c0:	1ac0      	subs	r0, r0, r3
 800f8c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8c4:	b10b      	cbz	r3, 800f8ca <__sflush_r+0x46>
 800f8c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8c8:	1ac0      	subs	r0, r0, r3
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8d0:	6a21      	ldr	r1, [r4, #32]
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	47b0      	blx	r6
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	89a3      	ldrh	r3, [r4, #12]
 800f8da:	d106      	bne.n	800f8ea <__sflush_r+0x66>
 800f8dc:	6829      	ldr	r1, [r5, #0]
 800f8de:	291d      	cmp	r1, #29
 800f8e0:	d82c      	bhi.n	800f93c <__sflush_r+0xb8>
 800f8e2:	4a2a      	ldr	r2, [pc, #168]	; (800f98c <__sflush_r+0x108>)
 800f8e4:	40ca      	lsrs	r2, r1
 800f8e6:	07d6      	lsls	r6, r2, #31
 800f8e8:	d528      	bpl.n	800f93c <__sflush_r+0xb8>
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	6062      	str	r2, [r4, #4]
 800f8ee:	04d9      	lsls	r1, r3, #19
 800f8f0:	6922      	ldr	r2, [r4, #16]
 800f8f2:	6022      	str	r2, [r4, #0]
 800f8f4:	d504      	bpl.n	800f900 <__sflush_r+0x7c>
 800f8f6:	1c42      	adds	r2, r0, #1
 800f8f8:	d101      	bne.n	800f8fe <__sflush_r+0x7a>
 800f8fa:	682b      	ldr	r3, [r5, #0]
 800f8fc:	b903      	cbnz	r3, 800f900 <__sflush_r+0x7c>
 800f8fe:	6560      	str	r0, [r4, #84]	; 0x54
 800f900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f902:	602f      	str	r7, [r5, #0]
 800f904:	2900      	cmp	r1, #0
 800f906:	d0ca      	beq.n	800f89e <__sflush_r+0x1a>
 800f908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f90c:	4299      	cmp	r1, r3
 800f90e:	d002      	beq.n	800f916 <__sflush_r+0x92>
 800f910:	4628      	mov	r0, r5
 800f912:	f001 f8fd 	bl	8010b10 <_free_r>
 800f916:	2000      	movs	r0, #0
 800f918:	6360      	str	r0, [r4, #52]	; 0x34
 800f91a:	e7c1      	b.n	800f8a0 <__sflush_r+0x1c>
 800f91c:	6a21      	ldr	r1, [r4, #32]
 800f91e:	2301      	movs	r3, #1
 800f920:	4628      	mov	r0, r5
 800f922:	47b0      	blx	r6
 800f924:	1c41      	adds	r1, r0, #1
 800f926:	d1c7      	bne.n	800f8b8 <__sflush_r+0x34>
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d0c4      	beq.n	800f8b8 <__sflush_r+0x34>
 800f92e:	2b1d      	cmp	r3, #29
 800f930:	d001      	beq.n	800f936 <__sflush_r+0xb2>
 800f932:	2b16      	cmp	r3, #22
 800f934:	d101      	bne.n	800f93a <__sflush_r+0xb6>
 800f936:	602f      	str	r7, [r5, #0]
 800f938:	e7b1      	b.n	800f89e <__sflush_r+0x1a>
 800f93a:	89a3      	ldrh	r3, [r4, #12]
 800f93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f940:	81a3      	strh	r3, [r4, #12]
 800f942:	e7ad      	b.n	800f8a0 <__sflush_r+0x1c>
 800f944:	690f      	ldr	r7, [r1, #16]
 800f946:	2f00      	cmp	r7, #0
 800f948:	d0a9      	beq.n	800f89e <__sflush_r+0x1a>
 800f94a:	0793      	lsls	r3, r2, #30
 800f94c:	680e      	ldr	r6, [r1, #0]
 800f94e:	bf08      	it	eq
 800f950:	694b      	ldreq	r3, [r1, #20]
 800f952:	600f      	str	r7, [r1, #0]
 800f954:	bf18      	it	ne
 800f956:	2300      	movne	r3, #0
 800f958:	eba6 0807 	sub.w	r8, r6, r7
 800f95c:	608b      	str	r3, [r1, #8]
 800f95e:	f1b8 0f00 	cmp.w	r8, #0
 800f962:	dd9c      	ble.n	800f89e <__sflush_r+0x1a>
 800f964:	6a21      	ldr	r1, [r4, #32]
 800f966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f968:	4643      	mov	r3, r8
 800f96a:	463a      	mov	r2, r7
 800f96c:	4628      	mov	r0, r5
 800f96e:	47b0      	blx	r6
 800f970:	2800      	cmp	r0, #0
 800f972:	dc06      	bgt.n	800f982 <__sflush_r+0xfe>
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	f04f 30ff 	mov.w	r0, #4294967295
 800f980:	e78e      	b.n	800f8a0 <__sflush_r+0x1c>
 800f982:	4407      	add	r7, r0
 800f984:	eba8 0800 	sub.w	r8, r8, r0
 800f988:	e7e9      	b.n	800f95e <__sflush_r+0xda>
 800f98a:	bf00      	nop
 800f98c:	20400001 	.word	0x20400001

0800f990 <_fflush_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	690b      	ldr	r3, [r1, #16]
 800f994:	4605      	mov	r5, r0
 800f996:	460c      	mov	r4, r1
 800f998:	b913      	cbnz	r3, 800f9a0 <_fflush_r+0x10>
 800f99a:	2500      	movs	r5, #0
 800f99c:	4628      	mov	r0, r5
 800f99e:	bd38      	pop	{r3, r4, r5, pc}
 800f9a0:	b118      	cbz	r0, 800f9aa <_fflush_r+0x1a>
 800f9a2:	6983      	ldr	r3, [r0, #24]
 800f9a4:	b90b      	cbnz	r3, 800f9aa <_fflush_r+0x1a>
 800f9a6:	f7fd f955 	bl	800cc54 <__sinit>
 800f9aa:	4b14      	ldr	r3, [pc, #80]	; (800f9fc <_fflush_r+0x6c>)
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	d11b      	bne.n	800f9e8 <_fflush_r+0x58>
 800f9b0:	686c      	ldr	r4, [r5, #4]
 800f9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d0ef      	beq.n	800f99a <_fflush_r+0xa>
 800f9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9bc:	07d0      	lsls	r0, r2, #31
 800f9be:	d404      	bmi.n	800f9ca <_fflush_r+0x3a>
 800f9c0:	0599      	lsls	r1, r3, #22
 800f9c2:	d402      	bmi.n	800f9ca <_fflush_r+0x3a>
 800f9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9c6:	f7fd fa08 	bl	800cdda <__retarget_lock_acquire_recursive>
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	f7ff ff59 	bl	800f884 <__sflush_r>
 800f9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9d4:	07da      	lsls	r2, r3, #31
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	d4e0      	bmi.n	800f99c <_fflush_r+0xc>
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	059b      	lsls	r3, r3, #22
 800f9de:	d4dd      	bmi.n	800f99c <_fflush_r+0xc>
 800f9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9e2:	f7fd f9fb 	bl	800cddc <__retarget_lock_release_recursive>
 800f9e6:	e7d9      	b.n	800f99c <_fflush_r+0xc>
 800f9e8:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <_fflush_r+0x70>)
 800f9ea:	429c      	cmp	r4, r3
 800f9ec:	d101      	bne.n	800f9f2 <_fflush_r+0x62>
 800f9ee:	68ac      	ldr	r4, [r5, #8]
 800f9f0:	e7df      	b.n	800f9b2 <_fflush_r+0x22>
 800f9f2:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <_fflush_r+0x74>)
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	bf08      	it	eq
 800f9f8:	68ec      	ldreq	r4, [r5, #12]
 800f9fa:	e7da      	b.n	800f9b2 <_fflush_r+0x22>
 800f9fc:	080117a8 	.word	0x080117a8
 800fa00:	080117c8 	.word	0x080117c8
 800fa04:	08011788 	.word	0x08011788

0800fa08 <rshift>:
 800fa08:	6903      	ldr	r3, [r0, #16]
 800fa0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa16:	f100 0414 	add.w	r4, r0, #20
 800fa1a:	dd45      	ble.n	800faa8 <rshift+0xa0>
 800fa1c:	f011 011f 	ands.w	r1, r1, #31
 800fa20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa28:	d10c      	bne.n	800fa44 <rshift+0x3c>
 800fa2a:	f100 0710 	add.w	r7, r0, #16
 800fa2e:	4629      	mov	r1, r5
 800fa30:	42b1      	cmp	r1, r6
 800fa32:	d334      	bcc.n	800fa9e <rshift+0x96>
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	1eea      	subs	r2, r5, #3
 800fa3a:	4296      	cmp	r6, r2
 800fa3c:	bf38      	it	cc
 800fa3e:	2300      	movcc	r3, #0
 800fa40:	4423      	add	r3, r4
 800fa42:	e015      	b.n	800fa70 <rshift+0x68>
 800fa44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa48:	f1c1 0820 	rsb	r8, r1, #32
 800fa4c:	40cf      	lsrs	r7, r1
 800fa4e:	f105 0e04 	add.w	lr, r5, #4
 800fa52:	46a1      	mov	r9, r4
 800fa54:	4576      	cmp	r6, lr
 800fa56:	46f4      	mov	ip, lr
 800fa58:	d815      	bhi.n	800fa86 <rshift+0x7e>
 800fa5a:	1a9a      	subs	r2, r3, r2
 800fa5c:	0092      	lsls	r2, r2, #2
 800fa5e:	3a04      	subs	r2, #4
 800fa60:	3501      	adds	r5, #1
 800fa62:	42ae      	cmp	r6, r5
 800fa64:	bf38      	it	cc
 800fa66:	2200      	movcc	r2, #0
 800fa68:	18a3      	adds	r3, r4, r2
 800fa6a:	50a7      	str	r7, [r4, r2]
 800fa6c:	b107      	cbz	r7, 800fa70 <rshift+0x68>
 800fa6e:	3304      	adds	r3, #4
 800fa70:	1b1a      	subs	r2, r3, r4
 800fa72:	42a3      	cmp	r3, r4
 800fa74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa78:	bf08      	it	eq
 800fa7a:	2300      	moveq	r3, #0
 800fa7c:	6102      	str	r2, [r0, #16]
 800fa7e:	bf08      	it	eq
 800fa80:	6143      	streq	r3, [r0, #20]
 800fa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa86:	f8dc c000 	ldr.w	ip, [ip]
 800fa8a:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa8e:	ea4c 0707 	orr.w	r7, ip, r7
 800fa92:	f849 7b04 	str.w	r7, [r9], #4
 800fa96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa9a:	40cf      	lsrs	r7, r1
 800fa9c:	e7da      	b.n	800fa54 <rshift+0x4c>
 800fa9e:	f851 cb04 	ldr.w	ip, [r1], #4
 800faa2:	f847 cf04 	str.w	ip, [r7, #4]!
 800faa6:	e7c3      	b.n	800fa30 <rshift+0x28>
 800faa8:	4623      	mov	r3, r4
 800faaa:	e7e1      	b.n	800fa70 <rshift+0x68>

0800faac <__hexdig_fun>:
 800faac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fab0:	2b09      	cmp	r3, #9
 800fab2:	d802      	bhi.n	800faba <__hexdig_fun+0xe>
 800fab4:	3820      	subs	r0, #32
 800fab6:	b2c0      	uxtb	r0, r0
 800fab8:	4770      	bx	lr
 800faba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fabe:	2b05      	cmp	r3, #5
 800fac0:	d801      	bhi.n	800fac6 <__hexdig_fun+0x1a>
 800fac2:	3847      	subs	r0, #71	; 0x47
 800fac4:	e7f7      	b.n	800fab6 <__hexdig_fun+0xa>
 800fac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800faca:	2b05      	cmp	r3, #5
 800facc:	d801      	bhi.n	800fad2 <__hexdig_fun+0x26>
 800face:	3827      	subs	r0, #39	; 0x27
 800fad0:	e7f1      	b.n	800fab6 <__hexdig_fun+0xa>
 800fad2:	2000      	movs	r0, #0
 800fad4:	4770      	bx	lr
	...

0800fad8 <__gethex>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	ed2d 8b02 	vpush	{d8}
 800fae0:	b089      	sub	sp, #36	; 0x24
 800fae2:	ee08 0a10 	vmov	s16, r0
 800fae6:	9304      	str	r3, [sp, #16]
 800fae8:	4bb4      	ldr	r3, [pc, #720]	; (800fdbc <__gethex+0x2e4>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	4618      	mov	r0, r3
 800faf0:	468b      	mov	fp, r1
 800faf2:	4690      	mov	r8, r2
 800faf4:	f7f0 fb74 	bl	80001e0 <strlen>
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	f8db 2000 	ldr.w	r2, [fp]
 800fafe:	4403      	add	r3, r0
 800fb00:	4682      	mov	sl, r0
 800fb02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb06:	9305      	str	r3, [sp, #20]
 800fb08:	1c93      	adds	r3, r2, #2
 800fb0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fb12:	32fe      	adds	r2, #254	; 0xfe
 800fb14:	18d1      	adds	r1, r2, r3
 800fb16:	461f      	mov	r7, r3
 800fb18:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb1c:	9100      	str	r1, [sp, #0]
 800fb1e:	2830      	cmp	r0, #48	; 0x30
 800fb20:	d0f8      	beq.n	800fb14 <__gethex+0x3c>
 800fb22:	f7ff ffc3 	bl	800faac <__hexdig_fun>
 800fb26:	4604      	mov	r4, r0
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d13a      	bne.n	800fba2 <__gethex+0xca>
 800fb2c:	9901      	ldr	r1, [sp, #4]
 800fb2e:	4652      	mov	r2, sl
 800fb30:	4638      	mov	r0, r7
 800fb32:	f001 f9b1 	bl	8010e98 <strncmp>
 800fb36:	4605      	mov	r5, r0
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d168      	bne.n	800fc0e <__gethex+0x136>
 800fb3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fb40:	eb07 060a 	add.w	r6, r7, sl
 800fb44:	f7ff ffb2 	bl	800faac <__hexdig_fun>
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d062      	beq.n	800fc12 <__gethex+0x13a>
 800fb4c:	4633      	mov	r3, r6
 800fb4e:	7818      	ldrb	r0, [r3, #0]
 800fb50:	2830      	cmp	r0, #48	; 0x30
 800fb52:	461f      	mov	r7, r3
 800fb54:	f103 0301 	add.w	r3, r3, #1
 800fb58:	d0f9      	beq.n	800fb4e <__gethex+0x76>
 800fb5a:	f7ff ffa7 	bl	800faac <__hexdig_fun>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	fab0 f480 	clz	r4, r0
 800fb64:	0964      	lsrs	r4, r4, #5
 800fb66:	4635      	mov	r5, r6
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	463a      	mov	r2, r7
 800fb6c:	4616      	mov	r6, r2
 800fb6e:	3201      	adds	r2, #1
 800fb70:	7830      	ldrb	r0, [r6, #0]
 800fb72:	f7ff ff9b 	bl	800faac <__hexdig_fun>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d1f8      	bne.n	800fb6c <__gethex+0x94>
 800fb7a:	9901      	ldr	r1, [sp, #4]
 800fb7c:	4652      	mov	r2, sl
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f001 f98a 	bl	8010e98 <strncmp>
 800fb84:	b980      	cbnz	r0, 800fba8 <__gethex+0xd0>
 800fb86:	b94d      	cbnz	r5, 800fb9c <__gethex+0xc4>
 800fb88:	eb06 050a 	add.w	r5, r6, sl
 800fb8c:	462a      	mov	r2, r5
 800fb8e:	4616      	mov	r6, r2
 800fb90:	3201      	adds	r2, #1
 800fb92:	7830      	ldrb	r0, [r6, #0]
 800fb94:	f7ff ff8a 	bl	800faac <__hexdig_fun>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d1f8      	bne.n	800fb8e <__gethex+0xb6>
 800fb9c:	1bad      	subs	r5, r5, r6
 800fb9e:	00ad      	lsls	r5, r5, #2
 800fba0:	e004      	b.n	800fbac <__gethex+0xd4>
 800fba2:	2400      	movs	r4, #0
 800fba4:	4625      	mov	r5, r4
 800fba6:	e7e0      	b.n	800fb6a <__gethex+0x92>
 800fba8:	2d00      	cmp	r5, #0
 800fbaa:	d1f7      	bne.n	800fb9c <__gethex+0xc4>
 800fbac:	7833      	ldrb	r3, [r6, #0]
 800fbae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fbb2:	2b50      	cmp	r3, #80	; 0x50
 800fbb4:	d13b      	bne.n	800fc2e <__gethex+0x156>
 800fbb6:	7873      	ldrb	r3, [r6, #1]
 800fbb8:	2b2b      	cmp	r3, #43	; 0x2b
 800fbba:	d02c      	beq.n	800fc16 <__gethex+0x13e>
 800fbbc:	2b2d      	cmp	r3, #45	; 0x2d
 800fbbe:	d02e      	beq.n	800fc1e <__gethex+0x146>
 800fbc0:	1c71      	adds	r1, r6, #1
 800fbc2:	f04f 0900 	mov.w	r9, #0
 800fbc6:	7808      	ldrb	r0, [r1, #0]
 800fbc8:	f7ff ff70 	bl	800faac <__hexdig_fun>
 800fbcc:	1e43      	subs	r3, r0, #1
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b18      	cmp	r3, #24
 800fbd2:	d82c      	bhi.n	800fc2e <__gethex+0x156>
 800fbd4:	f1a0 0210 	sub.w	r2, r0, #16
 800fbd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fbdc:	f7ff ff66 	bl	800faac <__hexdig_fun>
 800fbe0:	1e43      	subs	r3, r0, #1
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b18      	cmp	r3, #24
 800fbe6:	d91d      	bls.n	800fc24 <__gethex+0x14c>
 800fbe8:	f1b9 0f00 	cmp.w	r9, #0
 800fbec:	d000      	beq.n	800fbf0 <__gethex+0x118>
 800fbee:	4252      	negs	r2, r2
 800fbf0:	4415      	add	r5, r2
 800fbf2:	f8cb 1000 	str.w	r1, [fp]
 800fbf6:	b1e4      	cbz	r4, 800fc32 <__gethex+0x15a>
 800fbf8:	9b00      	ldr	r3, [sp, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	bf14      	ite	ne
 800fbfe:	2700      	movne	r7, #0
 800fc00:	2706      	moveq	r7, #6
 800fc02:	4638      	mov	r0, r7
 800fc04:	b009      	add	sp, #36	; 0x24
 800fc06:	ecbd 8b02 	vpop	{d8}
 800fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0e:	463e      	mov	r6, r7
 800fc10:	4625      	mov	r5, r4
 800fc12:	2401      	movs	r4, #1
 800fc14:	e7ca      	b.n	800fbac <__gethex+0xd4>
 800fc16:	f04f 0900 	mov.w	r9, #0
 800fc1a:	1cb1      	adds	r1, r6, #2
 800fc1c:	e7d3      	b.n	800fbc6 <__gethex+0xee>
 800fc1e:	f04f 0901 	mov.w	r9, #1
 800fc22:	e7fa      	b.n	800fc1a <__gethex+0x142>
 800fc24:	230a      	movs	r3, #10
 800fc26:	fb03 0202 	mla	r2, r3, r2, r0
 800fc2a:	3a10      	subs	r2, #16
 800fc2c:	e7d4      	b.n	800fbd8 <__gethex+0x100>
 800fc2e:	4631      	mov	r1, r6
 800fc30:	e7df      	b.n	800fbf2 <__gethex+0x11a>
 800fc32:	1bf3      	subs	r3, r6, r7
 800fc34:	3b01      	subs	r3, #1
 800fc36:	4621      	mov	r1, r4
 800fc38:	2b07      	cmp	r3, #7
 800fc3a:	dc0b      	bgt.n	800fc54 <__gethex+0x17c>
 800fc3c:	ee18 0a10 	vmov	r0, s16
 800fc40:	f000 fa8e 	bl	8010160 <_Balloc>
 800fc44:	4604      	mov	r4, r0
 800fc46:	b940      	cbnz	r0, 800fc5a <__gethex+0x182>
 800fc48:	4b5d      	ldr	r3, [pc, #372]	; (800fdc0 <__gethex+0x2e8>)
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	21de      	movs	r1, #222	; 0xde
 800fc4e:	485d      	ldr	r0, [pc, #372]	; (800fdc4 <__gethex+0x2ec>)
 800fc50:	f001 f944 	bl	8010edc <__assert_func>
 800fc54:	3101      	adds	r1, #1
 800fc56:	105b      	asrs	r3, r3, #1
 800fc58:	e7ee      	b.n	800fc38 <__gethex+0x160>
 800fc5a:	f100 0914 	add.w	r9, r0, #20
 800fc5e:	f04f 0b00 	mov.w	fp, #0
 800fc62:	f1ca 0301 	rsb	r3, sl, #1
 800fc66:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc6a:	f8cd b000 	str.w	fp, [sp]
 800fc6e:	9306      	str	r3, [sp, #24]
 800fc70:	42b7      	cmp	r7, r6
 800fc72:	d340      	bcc.n	800fcf6 <__gethex+0x21e>
 800fc74:	9802      	ldr	r0, [sp, #8]
 800fc76:	9b00      	ldr	r3, [sp, #0]
 800fc78:	f840 3b04 	str.w	r3, [r0], #4
 800fc7c:	eba0 0009 	sub.w	r0, r0, r9
 800fc80:	1080      	asrs	r0, r0, #2
 800fc82:	0146      	lsls	r6, r0, #5
 800fc84:	6120      	str	r0, [r4, #16]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f000 fb5c 	bl	8010344 <__hi0bits>
 800fc8c:	1a30      	subs	r0, r6, r0
 800fc8e:	f8d8 6000 	ldr.w	r6, [r8]
 800fc92:	42b0      	cmp	r0, r6
 800fc94:	dd63      	ble.n	800fd5e <__gethex+0x286>
 800fc96:	1b87      	subs	r7, r0, r6
 800fc98:	4639      	mov	r1, r7
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f000 ff00 	bl	8010aa0 <__any_on>
 800fca0:	4682      	mov	sl, r0
 800fca2:	b1a8      	cbz	r0, 800fcd0 <__gethex+0x1f8>
 800fca4:	1e7b      	subs	r3, r7, #1
 800fca6:	1159      	asrs	r1, r3, #5
 800fca8:	f003 021f 	and.w	r2, r3, #31
 800fcac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fcb0:	f04f 0a01 	mov.w	sl, #1
 800fcb4:	fa0a f202 	lsl.w	r2, sl, r2
 800fcb8:	420a      	tst	r2, r1
 800fcba:	d009      	beq.n	800fcd0 <__gethex+0x1f8>
 800fcbc:	4553      	cmp	r3, sl
 800fcbe:	dd05      	ble.n	800fccc <__gethex+0x1f4>
 800fcc0:	1eb9      	subs	r1, r7, #2
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f000 feec 	bl	8010aa0 <__any_on>
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d145      	bne.n	800fd58 <__gethex+0x280>
 800fccc:	f04f 0a02 	mov.w	sl, #2
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7ff fe98 	bl	800fa08 <rshift>
 800fcd8:	443d      	add	r5, r7
 800fcda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcde:	42ab      	cmp	r3, r5
 800fce0:	da4c      	bge.n	800fd7c <__gethex+0x2a4>
 800fce2:	ee18 0a10 	vmov	r0, s16
 800fce6:	4621      	mov	r1, r4
 800fce8:	f000 fa7a 	bl	80101e0 <_Bfree>
 800fcec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fcee:	2300      	movs	r3, #0
 800fcf0:	6013      	str	r3, [r2, #0]
 800fcf2:	27a3      	movs	r7, #163	; 0xa3
 800fcf4:	e785      	b.n	800fc02 <__gethex+0x12a>
 800fcf6:	1e73      	subs	r3, r6, #1
 800fcf8:	9a05      	ldr	r2, [sp, #20]
 800fcfa:	9303      	str	r3, [sp, #12]
 800fcfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d019      	beq.n	800fd38 <__gethex+0x260>
 800fd04:	f1bb 0f20 	cmp.w	fp, #32
 800fd08:	d107      	bne.n	800fd1a <__gethex+0x242>
 800fd0a:	9b02      	ldr	r3, [sp, #8]
 800fd0c:	9a00      	ldr	r2, [sp, #0]
 800fd0e:	f843 2b04 	str.w	r2, [r3], #4
 800fd12:	9302      	str	r3, [sp, #8]
 800fd14:	2300      	movs	r3, #0
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	469b      	mov	fp, r3
 800fd1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fd1e:	f7ff fec5 	bl	800faac <__hexdig_fun>
 800fd22:	9b00      	ldr	r3, [sp, #0]
 800fd24:	f000 000f 	and.w	r0, r0, #15
 800fd28:	fa00 f00b 	lsl.w	r0, r0, fp
 800fd2c:	4303      	orrs	r3, r0
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	f10b 0b04 	add.w	fp, fp, #4
 800fd34:	9b03      	ldr	r3, [sp, #12]
 800fd36:	e00d      	b.n	800fd54 <__gethex+0x27c>
 800fd38:	9b03      	ldr	r3, [sp, #12]
 800fd3a:	9a06      	ldr	r2, [sp, #24]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	42bb      	cmp	r3, r7
 800fd40:	d3e0      	bcc.n	800fd04 <__gethex+0x22c>
 800fd42:	4618      	mov	r0, r3
 800fd44:	9901      	ldr	r1, [sp, #4]
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	4652      	mov	r2, sl
 800fd4a:	f001 f8a5 	bl	8010e98 <strncmp>
 800fd4e:	9b07      	ldr	r3, [sp, #28]
 800fd50:	2800      	cmp	r0, #0
 800fd52:	d1d7      	bne.n	800fd04 <__gethex+0x22c>
 800fd54:	461e      	mov	r6, r3
 800fd56:	e78b      	b.n	800fc70 <__gethex+0x198>
 800fd58:	f04f 0a03 	mov.w	sl, #3
 800fd5c:	e7b8      	b.n	800fcd0 <__gethex+0x1f8>
 800fd5e:	da0a      	bge.n	800fd76 <__gethex+0x29e>
 800fd60:	1a37      	subs	r7, r6, r0
 800fd62:	4621      	mov	r1, r4
 800fd64:	ee18 0a10 	vmov	r0, s16
 800fd68:	463a      	mov	r2, r7
 800fd6a:	f000 fc55 	bl	8010618 <__lshift>
 800fd6e:	1bed      	subs	r5, r5, r7
 800fd70:	4604      	mov	r4, r0
 800fd72:	f100 0914 	add.w	r9, r0, #20
 800fd76:	f04f 0a00 	mov.w	sl, #0
 800fd7a:	e7ae      	b.n	800fcda <__gethex+0x202>
 800fd7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fd80:	42a8      	cmp	r0, r5
 800fd82:	dd72      	ble.n	800fe6a <__gethex+0x392>
 800fd84:	1b45      	subs	r5, r0, r5
 800fd86:	42ae      	cmp	r6, r5
 800fd88:	dc36      	bgt.n	800fdf8 <__gethex+0x320>
 800fd8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d02a      	beq.n	800fde8 <__gethex+0x310>
 800fd92:	2b03      	cmp	r3, #3
 800fd94:	d02c      	beq.n	800fdf0 <__gethex+0x318>
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d11c      	bne.n	800fdd4 <__gethex+0x2fc>
 800fd9a:	42ae      	cmp	r6, r5
 800fd9c:	d11a      	bne.n	800fdd4 <__gethex+0x2fc>
 800fd9e:	2e01      	cmp	r6, #1
 800fda0:	d112      	bne.n	800fdc8 <__gethex+0x2f0>
 800fda2:	9a04      	ldr	r2, [sp, #16]
 800fda4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fda8:	6013      	str	r3, [r2, #0]
 800fdaa:	2301      	movs	r3, #1
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	f8c9 3000 	str.w	r3, [r9]
 800fdb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdb4:	2762      	movs	r7, #98	; 0x62
 800fdb6:	601c      	str	r4, [r3, #0]
 800fdb8:	e723      	b.n	800fc02 <__gethex+0x12a>
 800fdba:	bf00      	nop
 800fdbc:	08011a70 	.word	0x08011a70
 800fdc0:	080119f8 	.word	0x080119f8
 800fdc4:	08011a09 	.word	0x08011a09
 800fdc8:	1e71      	subs	r1, r6, #1
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fe68 	bl	8010aa0 <__any_on>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d1e6      	bne.n	800fda2 <__gethex+0x2ca>
 800fdd4:	ee18 0a10 	vmov	r0, s16
 800fdd8:	4621      	mov	r1, r4
 800fdda:	f000 fa01 	bl	80101e0 <_Bfree>
 800fdde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fde0:	2300      	movs	r3, #0
 800fde2:	6013      	str	r3, [r2, #0]
 800fde4:	2750      	movs	r7, #80	; 0x50
 800fde6:	e70c      	b.n	800fc02 <__gethex+0x12a>
 800fde8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1f2      	bne.n	800fdd4 <__gethex+0x2fc>
 800fdee:	e7d8      	b.n	800fda2 <__gethex+0x2ca>
 800fdf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1d5      	bne.n	800fda2 <__gethex+0x2ca>
 800fdf6:	e7ed      	b.n	800fdd4 <__gethex+0x2fc>
 800fdf8:	1e6f      	subs	r7, r5, #1
 800fdfa:	f1ba 0f00 	cmp.w	sl, #0
 800fdfe:	d131      	bne.n	800fe64 <__gethex+0x38c>
 800fe00:	b127      	cbz	r7, 800fe0c <__gethex+0x334>
 800fe02:	4639      	mov	r1, r7
 800fe04:	4620      	mov	r0, r4
 800fe06:	f000 fe4b 	bl	8010aa0 <__any_on>
 800fe0a:	4682      	mov	sl, r0
 800fe0c:	117b      	asrs	r3, r7, #5
 800fe0e:	2101      	movs	r1, #1
 800fe10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fe14:	f007 071f 	and.w	r7, r7, #31
 800fe18:	fa01 f707 	lsl.w	r7, r1, r7
 800fe1c:	421f      	tst	r7, r3
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4620      	mov	r0, r4
 800fe22:	bf18      	it	ne
 800fe24:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe28:	1b76      	subs	r6, r6, r5
 800fe2a:	f7ff fded 	bl	800fa08 <rshift>
 800fe2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe32:	2702      	movs	r7, #2
 800fe34:	f1ba 0f00 	cmp.w	sl, #0
 800fe38:	d048      	beq.n	800fecc <__gethex+0x3f4>
 800fe3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d015      	beq.n	800fe6e <__gethex+0x396>
 800fe42:	2b03      	cmp	r3, #3
 800fe44:	d017      	beq.n	800fe76 <__gethex+0x39e>
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d109      	bne.n	800fe5e <__gethex+0x386>
 800fe4a:	f01a 0f02 	tst.w	sl, #2
 800fe4e:	d006      	beq.n	800fe5e <__gethex+0x386>
 800fe50:	f8d9 0000 	ldr.w	r0, [r9]
 800fe54:	ea4a 0a00 	orr.w	sl, sl, r0
 800fe58:	f01a 0f01 	tst.w	sl, #1
 800fe5c:	d10e      	bne.n	800fe7c <__gethex+0x3a4>
 800fe5e:	f047 0710 	orr.w	r7, r7, #16
 800fe62:	e033      	b.n	800fecc <__gethex+0x3f4>
 800fe64:	f04f 0a01 	mov.w	sl, #1
 800fe68:	e7d0      	b.n	800fe0c <__gethex+0x334>
 800fe6a:	2701      	movs	r7, #1
 800fe6c:	e7e2      	b.n	800fe34 <__gethex+0x35c>
 800fe6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe70:	f1c3 0301 	rsb	r3, r3, #1
 800fe74:	9315      	str	r3, [sp, #84]	; 0x54
 800fe76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d0f0      	beq.n	800fe5e <__gethex+0x386>
 800fe7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe80:	f104 0314 	add.w	r3, r4, #20
 800fe84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe8c:	f04f 0c00 	mov.w	ip, #0
 800fe90:	4618      	mov	r0, r3
 800fe92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe9a:	d01c      	beq.n	800fed6 <__gethex+0x3fe>
 800fe9c:	3201      	adds	r2, #1
 800fe9e:	6002      	str	r2, [r0, #0]
 800fea0:	2f02      	cmp	r7, #2
 800fea2:	f104 0314 	add.w	r3, r4, #20
 800fea6:	d13f      	bne.n	800ff28 <__gethex+0x450>
 800fea8:	f8d8 2000 	ldr.w	r2, [r8]
 800feac:	3a01      	subs	r2, #1
 800feae:	42b2      	cmp	r2, r6
 800feb0:	d10a      	bne.n	800fec8 <__gethex+0x3f0>
 800feb2:	1171      	asrs	r1, r6, #5
 800feb4:	2201      	movs	r2, #1
 800feb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800feba:	f006 061f 	and.w	r6, r6, #31
 800febe:	fa02 f606 	lsl.w	r6, r2, r6
 800fec2:	421e      	tst	r6, r3
 800fec4:	bf18      	it	ne
 800fec6:	4617      	movne	r7, r2
 800fec8:	f047 0720 	orr.w	r7, r7, #32
 800fecc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fece:	601c      	str	r4, [r3, #0]
 800fed0:	9b04      	ldr	r3, [sp, #16]
 800fed2:	601d      	str	r5, [r3, #0]
 800fed4:	e695      	b.n	800fc02 <__gethex+0x12a>
 800fed6:	4299      	cmp	r1, r3
 800fed8:	f843 cc04 	str.w	ip, [r3, #-4]
 800fedc:	d8d8      	bhi.n	800fe90 <__gethex+0x3b8>
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	459b      	cmp	fp, r3
 800fee2:	db19      	blt.n	800ff18 <__gethex+0x440>
 800fee4:	6861      	ldr	r1, [r4, #4]
 800fee6:	ee18 0a10 	vmov	r0, s16
 800feea:	3101      	adds	r1, #1
 800feec:	f000 f938 	bl	8010160 <_Balloc>
 800fef0:	4681      	mov	r9, r0
 800fef2:	b918      	cbnz	r0, 800fefc <__gethex+0x424>
 800fef4:	4b1a      	ldr	r3, [pc, #104]	; (800ff60 <__gethex+0x488>)
 800fef6:	4602      	mov	r2, r0
 800fef8:	2184      	movs	r1, #132	; 0x84
 800fefa:	e6a8      	b.n	800fc4e <__gethex+0x176>
 800fefc:	6922      	ldr	r2, [r4, #16]
 800fefe:	3202      	adds	r2, #2
 800ff00:	f104 010c 	add.w	r1, r4, #12
 800ff04:	0092      	lsls	r2, r2, #2
 800ff06:	300c      	adds	r0, #12
 800ff08:	f7fc ff69 	bl	800cdde <memcpy>
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	ee18 0a10 	vmov	r0, s16
 800ff12:	f000 f965 	bl	80101e0 <_Bfree>
 800ff16:	464c      	mov	r4, r9
 800ff18:	6923      	ldr	r3, [r4, #16]
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff20:	6122      	str	r2, [r4, #16]
 800ff22:	2201      	movs	r2, #1
 800ff24:	615a      	str	r2, [r3, #20]
 800ff26:	e7bb      	b.n	800fea0 <__gethex+0x3c8>
 800ff28:	6922      	ldr	r2, [r4, #16]
 800ff2a:	455a      	cmp	r2, fp
 800ff2c:	dd0b      	ble.n	800ff46 <__gethex+0x46e>
 800ff2e:	2101      	movs	r1, #1
 800ff30:	4620      	mov	r0, r4
 800ff32:	f7ff fd69 	bl	800fa08 <rshift>
 800ff36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff3a:	3501      	adds	r5, #1
 800ff3c:	42ab      	cmp	r3, r5
 800ff3e:	f6ff aed0 	blt.w	800fce2 <__gethex+0x20a>
 800ff42:	2701      	movs	r7, #1
 800ff44:	e7c0      	b.n	800fec8 <__gethex+0x3f0>
 800ff46:	f016 061f 	ands.w	r6, r6, #31
 800ff4a:	d0fa      	beq.n	800ff42 <__gethex+0x46a>
 800ff4c:	4453      	add	r3, sl
 800ff4e:	f1c6 0620 	rsb	r6, r6, #32
 800ff52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff56:	f000 f9f5 	bl	8010344 <__hi0bits>
 800ff5a:	42b0      	cmp	r0, r6
 800ff5c:	dbe7      	blt.n	800ff2e <__gethex+0x456>
 800ff5e:	e7f0      	b.n	800ff42 <__gethex+0x46a>
 800ff60:	080119f8 	.word	0x080119f8

0800ff64 <L_shift>:
 800ff64:	f1c2 0208 	rsb	r2, r2, #8
 800ff68:	0092      	lsls	r2, r2, #2
 800ff6a:	b570      	push	{r4, r5, r6, lr}
 800ff6c:	f1c2 0620 	rsb	r6, r2, #32
 800ff70:	6843      	ldr	r3, [r0, #4]
 800ff72:	6804      	ldr	r4, [r0, #0]
 800ff74:	fa03 f506 	lsl.w	r5, r3, r6
 800ff78:	432c      	orrs	r4, r5
 800ff7a:	40d3      	lsrs	r3, r2
 800ff7c:	6004      	str	r4, [r0, #0]
 800ff7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff82:	4288      	cmp	r0, r1
 800ff84:	d3f4      	bcc.n	800ff70 <L_shift+0xc>
 800ff86:	bd70      	pop	{r4, r5, r6, pc}

0800ff88 <__match>:
 800ff88:	b530      	push	{r4, r5, lr}
 800ff8a:	6803      	ldr	r3, [r0, #0]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff92:	b914      	cbnz	r4, 800ff9a <__match+0x12>
 800ff94:	6003      	str	r3, [r0, #0]
 800ff96:	2001      	movs	r0, #1
 800ff98:	bd30      	pop	{r4, r5, pc}
 800ff9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ffa2:	2d19      	cmp	r5, #25
 800ffa4:	bf98      	it	ls
 800ffa6:	3220      	addls	r2, #32
 800ffa8:	42a2      	cmp	r2, r4
 800ffaa:	d0f0      	beq.n	800ff8e <__match+0x6>
 800ffac:	2000      	movs	r0, #0
 800ffae:	e7f3      	b.n	800ff98 <__match+0x10>

0800ffb0 <__hexnan>:
 800ffb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb4:	680b      	ldr	r3, [r1, #0]
 800ffb6:	115e      	asrs	r6, r3, #5
 800ffb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ffbc:	f013 031f 	ands.w	r3, r3, #31
 800ffc0:	b087      	sub	sp, #28
 800ffc2:	bf18      	it	ne
 800ffc4:	3604      	addne	r6, #4
 800ffc6:	2500      	movs	r5, #0
 800ffc8:	1f37      	subs	r7, r6, #4
 800ffca:	4690      	mov	r8, r2
 800ffcc:	6802      	ldr	r2, [r0, #0]
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	4682      	mov	sl, r0
 800ffd2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ffd6:	46b9      	mov	r9, r7
 800ffd8:	463c      	mov	r4, r7
 800ffda:	9502      	str	r5, [sp, #8]
 800ffdc:	46ab      	mov	fp, r5
 800ffde:	7851      	ldrb	r1, [r2, #1]
 800ffe0:	1c53      	adds	r3, r2, #1
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	b341      	cbz	r1, 8010038 <__hexnan+0x88>
 800ffe6:	4608      	mov	r0, r1
 800ffe8:	9205      	str	r2, [sp, #20]
 800ffea:	9104      	str	r1, [sp, #16]
 800ffec:	f7ff fd5e 	bl	800faac <__hexdig_fun>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d14f      	bne.n	8010094 <__hexnan+0xe4>
 800fff4:	9904      	ldr	r1, [sp, #16]
 800fff6:	9a05      	ldr	r2, [sp, #20]
 800fff8:	2920      	cmp	r1, #32
 800fffa:	d818      	bhi.n	801002e <__hexnan+0x7e>
 800fffc:	9b02      	ldr	r3, [sp, #8]
 800fffe:	459b      	cmp	fp, r3
 8010000:	dd13      	ble.n	801002a <__hexnan+0x7a>
 8010002:	454c      	cmp	r4, r9
 8010004:	d206      	bcs.n	8010014 <__hexnan+0x64>
 8010006:	2d07      	cmp	r5, #7
 8010008:	dc04      	bgt.n	8010014 <__hexnan+0x64>
 801000a:	462a      	mov	r2, r5
 801000c:	4649      	mov	r1, r9
 801000e:	4620      	mov	r0, r4
 8010010:	f7ff ffa8 	bl	800ff64 <L_shift>
 8010014:	4544      	cmp	r4, r8
 8010016:	d950      	bls.n	80100ba <__hexnan+0x10a>
 8010018:	2300      	movs	r3, #0
 801001a:	f1a4 0904 	sub.w	r9, r4, #4
 801001e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010022:	f8cd b008 	str.w	fp, [sp, #8]
 8010026:	464c      	mov	r4, r9
 8010028:	461d      	mov	r5, r3
 801002a:	9a03      	ldr	r2, [sp, #12]
 801002c:	e7d7      	b.n	800ffde <__hexnan+0x2e>
 801002e:	2929      	cmp	r1, #41	; 0x29
 8010030:	d156      	bne.n	80100e0 <__hexnan+0x130>
 8010032:	3202      	adds	r2, #2
 8010034:	f8ca 2000 	str.w	r2, [sl]
 8010038:	f1bb 0f00 	cmp.w	fp, #0
 801003c:	d050      	beq.n	80100e0 <__hexnan+0x130>
 801003e:	454c      	cmp	r4, r9
 8010040:	d206      	bcs.n	8010050 <__hexnan+0xa0>
 8010042:	2d07      	cmp	r5, #7
 8010044:	dc04      	bgt.n	8010050 <__hexnan+0xa0>
 8010046:	462a      	mov	r2, r5
 8010048:	4649      	mov	r1, r9
 801004a:	4620      	mov	r0, r4
 801004c:	f7ff ff8a 	bl	800ff64 <L_shift>
 8010050:	4544      	cmp	r4, r8
 8010052:	d934      	bls.n	80100be <__hexnan+0x10e>
 8010054:	f1a8 0204 	sub.w	r2, r8, #4
 8010058:	4623      	mov	r3, r4
 801005a:	f853 1b04 	ldr.w	r1, [r3], #4
 801005e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010062:	429f      	cmp	r7, r3
 8010064:	d2f9      	bcs.n	801005a <__hexnan+0xaa>
 8010066:	1b3b      	subs	r3, r7, r4
 8010068:	f023 0303 	bic.w	r3, r3, #3
 801006c:	3304      	adds	r3, #4
 801006e:	3401      	adds	r4, #1
 8010070:	3e03      	subs	r6, #3
 8010072:	42b4      	cmp	r4, r6
 8010074:	bf88      	it	hi
 8010076:	2304      	movhi	r3, #4
 8010078:	4443      	add	r3, r8
 801007a:	2200      	movs	r2, #0
 801007c:	f843 2b04 	str.w	r2, [r3], #4
 8010080:	429f      	cmp	r7, r3
 8010082:	d2fb      	bcs.n	801007c <__hexnan+0xcc>
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	b91b      	cbnz	r3, 8010090 <__hexnan+0xe0>
 8010088:	4547      	cmp	r7, r8
 801008a:	d127      	bne.n	80100dc <__hexnan+0x12c>
 801008c:	2301      	movs	r3, #1
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	2005      	movs	r0, #5
 8010092:	e026      	b.n	80100e2 <__hexnan+0x132>
 8010094:	3501      	adds	r5, #1
 8010096:	2d08      	cmp	r5, #8
 8010098:	f10b 0b01 	add.w	fp, fp, #1
 801009c:	dd06      	ble.n	80100ac <__hexnan+0xfc>
 801009e:	4544      	cmp	r4, r8
 80100a0:	d9c3      	bls.n	801002a <__hexnan+0x7a>
 80100a2:	2300      	movs	r3, #0
 80100a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80100a8:	2501      	movs	r5, #1
 80100aa:	3c04      	subs	r4, #4
 80100ac:	6822      	ldr	r2, [r4, #0]
 80100ae:	f000 000f 	and.w	r0, r0, #15
 80100b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80100b6:	6022      	str	r2, [r4, #0]
 80100b8:	e7b7      	b.n	801002a <__hexnan+0x7a>
 80100ba:	2508      	movs	r5, #8
 80100bc:	e7b5      	b.n	801002a <__hexnan+0x7a>
 80100be:	9b01      	ldr	r3, [sp, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0df      	beq.n	8010084 <__hexnan+0xd4>
 80100c4:	f04f 32ff 	mov.w	r2, #4294967295
 80100c8:	f1c3 0320 	rsb	r3, r3, #32
 80100cc:	fa22 f303 	lsr.w	r3, r2, r3
 80100d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80100d4:	401a      	ands	r2, r3
 80100d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80100da:	e7d3      	b.n	8010084 <__hexnan+0xd4>
 80100dc:	3f04      	subs	r7, #4
 80100de:	e7d1      	b.n	8010084 <__hexnan+0xd4>
 80100e0:	2004      	movs	r0, #4
 80100e2:	b007      	add	sp, #28
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100e8 <_localeconv_r>:
 80100e8:	4800      	ldr	r0, [pc, #0]	; (80100ec <_localeconv_r+0x4>)
 80100ea:	4770      	bx	lr
 80100ec:	200002a8 	.word	0x200002a8

080100f0 <_lseek_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d07      	ldr	r5, [pc, #28]	; (8010110 <_lseek_r+0x20>)
 80100f4:	4604      	mov	r4, r0
 80100f6:	4608      	mov	r0, r1
 80100f8:	4611      	mov	r1, r2
 80100fa:	2200      	movs	r2, #0
 80100fc:	602a      	str	r2, [r5, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	f7f2 f8f2 	bl	80022e8 <_lseek>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d102      	bne.n	801010e <_lseek_r+0x1e>
 8010108:	682b      	ldr	r3, [r5, #0]
 801010a:	b103      	cbz	r3, 801010e <_lseek_r+0x1e>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	200059b8 	.word	0x200059b8

08010114 <malloc>:
 8010114:	4b02      	ldr	r3, [pc, #8]	; (8010120 <malloc+0xc>)
 8010116:	4601      	mov	r1, r0
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	f7fc be97 	b.w	800ce4c <_malloc_r>
 801011e:	bf00      	nop
 8010120:	20000150 	.word	0x20000150

08010124 <__ascii_mbtowc>:
 8010124:	b082      	sub	sp, #8
 8010126:	b901      	cbnz	r1, 801012a <__ascii_mbtowc+0x6>
 8010128:	a901      	add	r1, sp, #4
 801012a:	b142      	cbz	r2, 801013e <__ascii_mbtowc+0x1a>
 801012c:	b14b      	cbz	r3, 8010142 <__ascii_mbtowc+0x1e>
 801012e:	7813      	ldrb	r3, [r2, #0]
 8010130:	600b      	str	r3, [r1, #0]
 8010132:	7812      	ldrb	r2, [r2, #0]
 8010134:	1e10      	subs	r0, r2, #0
 8010136:	bf18      	it	ne
 8010138:	2001      	movne	r0, #1
 801013a:	b002      	add	sp, #8
 801013c:	4770      	bx	lr
 801013e:	4610      	mov	r0, r2
 8010140:	e7fb      	b.n	801013a <__ascii_mbtowc+0x16>
 8010142:	f06f 0001 	mvn.w	r0, #1
 8010146:	e7f8      	b.n	801013a <__ascii_mbtowc+0x16>

08010148 <__malloc_lock>:
 8010148:	4801      	ldr	r0, [pc, #4]	; (8010150 <__malloc_lock+0x8>)
 801014a:	f7fc be46 	b.w	800cdda <__retarget_lock_acquire_recursive>
 801014e:	bf00      	nop
 8010150:	200059ac 	.word	0x200059ac

08010154 <__malloc_unlock>:
 8010154:	4801      	ldr	r0, [pc, #4]	; (801015c <__malloc_unlock+0x8>)
 8010156:	f7fc be41 	b.w	800cddc <__retarget_lock_release_recursive>
 801015a:	bf00      	nop
 801015c:	200059ac 	.word	0x200059ac

08010160 <_Balloc>:
 8010160:	b570      	push	{r4, r5, r6, lr}
 8010162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010164:	4604      	mov	r4, r0
 8010166:	460d      	mov	r5, r1
 8010168:	b976      	cbnz	r6, 8010188 <_Balloc+0x28>
 801016a:	2010      	movs	r0, #16
 801016c:	f7ff ffd2 	bl	8010114 <malloc>
 8010170:	4602      	mov	r2, r0
 8010172:	6260      	str	r0, [r4, #36]	; 0x24
 8010174:	b920      	cbnz	r0, 8010180 <_Balloc+0x20>
 8010176:	4b18      	ldr	r3, [pc, #96]	; (80101d8 <_Balloc+0x78>)
 8010178:	4818      	ldr	r0, [pc, #96]	; (80101dc <_Balloc+0x7c>)
 801017a:	2166      	movs	r1, #102	; 0x66
 801017c:	f000 feae 	bl	8010edc <__assert_func>
 8010180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010184:	6006      	str	r6, [r0, #0]
 8010186:	60c6      	str	r6, [r0, #12]
 8010188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801018a:	68f3      	ldr	r3, [r6, #12]
 801018c:	b183      	cbz	r3, 80101b0 <_Balloc+0x50>
 801018e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010196:	b9b8      	cbnz	r0, 80101c8 <_Balloc+0x68>
 8010198:	2101      	movs	r1, #1
 801019a:	fa01 f605 	lsl.w	r6, r1, r5
 801019e:	1d72      	adds	r2, r6, #5
 80101a0:	0092      	lsls	r2, r2, #2
 80101a2:	4620      	mov	r0, r4
 80101a4:	f000 fc9d 	bl	8010ae2 <_calloc_r>
 80101a8:	b160      	cbz	r0, 80101c4 <_Balloc+0x64>
 80101aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80101ae:	e00e      	b.n	80101ce <_Balloc+0x6e>
 80101b0:	2221      	movs	r2, #33	; 0x21
 80101b2:	2104      	movs	r1, #4
 80101b4:	4620      	mov	r0, r4
 80101b6:	f000 fc94 	bl	8010ae2 <_calloc_r>
 80101ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101bc:	60f0      	str	r0, [r6, #12]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d1e4      	bne.n	801018e <_Balloc+0x2e>
 80101c4:	2000      	movs	r0, #0
 80101c6:	bd70      	pop	{r4, r5, r6, pc}
 80101c8:	6802      	ldr	r2, [r0, #0]
 80101ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101ce:	2300      	movs	r3, #0
 80101d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101d4:	e7f7      	b.n	80101c6 <_Balloc+0x66>
 80101d6:	bf00      	nop
 80101d8:	08011986 	.word	0x08011986
 80101dc:	08011a84 	.word	0x08011a84

080101e0 <_Bfree>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101e4:	4605      	mov	r5, r0
 80101e6:	460c      	mov	r4, r1
 80101e8:	b976      	cbnz	r6, 8010208 <_Bfree+0x28>
 80101ea:	2010      	movs	r0, #16
 80101ec:	f7ff ff92 	bl	8010114 <malloc>
 80101f0:	4602      	mov	r2, r0
 80101f2:	6268      	str	r0, [r5, #36]	; 0x24
 80101f4:	b920      	cbnz	r0, 8010200 <_Bfree+0x20>
 80101f6:	4b09      	ldr	r3, [pc, #36]	; (801021c <_Bfree+0x3c>)
 80101f8:	4809      	ldr	r0, [pc, #36]	; (8010220 <_Bfree+0x40>)
 80101fa:	218a      	movs	r1, #138	; 0x8a
 80101fc:	f000 fe6e 	bl	8010edc <__assert_func>
 8010200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010204:	6006      	str	r6, [r0, #0]
 8010206:	60c6      	str	r6, [r0, #12]
 8010208:	b13c      	cbz	r4, 801021a <_Bfree+0x3a>
 801020a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801020c:	6862      	ldr	r2, [r4, #4]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010214:	6021      	str	r1, [r4, #0]
 8010216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801021a:	bd70      	pop	{r4, r5, r6, pc}
 801021c:	08011986 	.word	0x08011986
 8010220:	08011a84 	.word	0x08011a84

08010224 <__multadd>:
 8010224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010228:	690d      	ldr	r5, [r1, #16]
 801022a:	4607      	mov	r7, r0
 801022c:	460c      	mov	r4, r1
 801022e:	461e      	mov	r6, r3
 8010230:	f101 0c14 	add.w	ip, r1, #20
 8010234:	2000      	movs	r0, #0
 8010236:	f8dc 3000 	ldr.w	r3, [ip]
 801023a:	b299      	uxth	r1, r3
 801023c:	fb02 6101 	mla	r1, r2, r1, r6
 8010240:	0c1e      	lsrs	r6, r3, #16
 8010242:	0c0b      	lsrs	r3, r1, #16
 8010244:	fb02 3306 	mla	r3, r2, r6, r3
 8010248:	b289      	uxth	r1, r1
 801024a:	3001      	adds	r0, #1
 801024c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010250:	4285      	cmp	r5, r0
 8010252:	f84c 1b04 	str.w	r1, [ip], #4
 8010256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801025a:	dcec      	bgt.n	8010236 <__multadd+0x12>
 801025c:	b30e      	cbz	r6, 80102a2 <__multadd+0x7e>
 801025e:	68a3      	ldr	r3, [r4, #8]
 8010260:	42ab      	cmp	r3, r5
 8010262:	dc19      	bgt.n	8010298 <__multadd+0x74>
 8010264:	6861      	ldr	r1, [r4, #4]
 8010266:	4638      	mov	r0, r7
 8010268:	3101      	adds	r1, #1
 801026a:	f7ff ff79 	bl	8010160 <_Balloc>
 801026e:	4680      	mov	r8, r0
 8010270:	b928      	cbnz	r0, 801027e <__multadd+0x5a>
 8010272:	4602      	mov	r2, r0
 8010274:	4b0c      	ldr	r3, [pc, #48]	; (80102a8 <__multadd+0x84>)
 8010276:	480d      	ldr	r0, [pc, #52]	; (80102ac <__multadd+0x88>)
 8010278:	21b5      	movs	r1, #181	; 0xb5
 801027a:	f000 fe2f 	bl	8010edc <__assert_func>
 801027e:	6922      	ldr	r2, [r4, #16]
 8010280:	3202      	adds	r2, #2
 8010282:	f104 010c 	add.w	r1, r4, #12
 8010286:	0092      	lsls	r2, r2, #2
 8010288:	300c      	adds	r0, #12
 801028a:	f7fc fda8 	bl	800cdde <memcpy>
 801028e:	4621      	mov	r1, r4
 8010290:	4638      	mov	r0, r7
 8010292:	f7ff ffa5 	bl	80101e0 <_Bfree>
 8010296:	4644      	mov	r4, r8
 8010298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801029c:	3501      	adds	r5, #1
 801029e:	615e      	str	r6, [r3, #20]
 80102a0:	6125      	str	r5, [r4, #16]
 80102a2:	4620      	mov	r0, r4
 80102a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a8:	080119f8 	.word	0x080119f8
 80102ac:	08011a84 	.word	0x08011a84

080102b0 <__s2b>:
 80102b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102b4:	460c      	mov	r4, r1
 80102b6:	4615      	mov	r5, r2
 80102b8:	461f      	mov	r7, r3
 80102ba:	2209      	movs	r2, #9
 80102bc:	3308      	adds	r3, #8
 80102be:	4606      	mov	r6, r0
 80102c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80102c4:	2100      	movs	r1, #0
 80102c6:	2201      	movs	r2, #1
 80102c8:	429a      	cmp	r2, r3
 80102ca:	db09      	blt.n	80102e0 <__s2b+0x30>
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff ff47 	bl	8010160 <_Balloc>
 80102d2:	b940      	cbnz	r0, 80102e6 <__s2b+0x36>
 80102d4:	4602      	mov	r2, r0
 80102d6:	4b19      	ldr	r3, [pc, #100]	; (801033c <__s2b+0x8c>)
 80102d8:	4819      	ldr	r0, [pc, #100]	; (8010340 <__s2b+0x90>)
 80102da:	21ce      	movs	r1, #206	; 0xce
 80102dc:	f000 fdfe 	bl	8010edc <__assert_func>
 80102e0:	0052      	lsls	r2, r2, #1
 80102e2:	3101      	adds	r1, #1
 80102e4:	e7f0      	b.n	80102c8 <__s2b+0x18>
 80102e6:	9b08      	ldr	r3, [sp, #32]
 80102e8:	6143      	str	r3, [r0, #20]
 80102ea:	2d09      	cmp	r5, #9
 80102ec:	f04f 0301 	mov.w	r3, #1
 80102f0:	6103      	str	r3, [r0, #16]
 80102f2:	dd16      	ble.n	8010322 <__s2b+0x72>
 80102f4:	f104 0909 	add.w	r9, r4, #9
 80102f8:	46c8      	mov	r8, r9
 80102fa:	442c      	add	r4, r5
 80102fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010300:	4601      	mov	r1, r0
 8010302:	3b30      	subs	r3, #48	; 0x30
 8010304:	220a      	movs	r2, #10
 8010306:	4630      	mov	r0, r6
 8010308:	f7ff ff8c 	bl	8010224 <__multadd>
 801030c:	45a0      	cmp	r8, r4
 801030e:	d1f5      	bne.n	80102fc <__s2b+0x4c>
 8010310:	f1a5 0408 	sub.w	r4, r5, #8
 8010314:	444c      	add	r4, r9
 8010316:	1b2d      	subs	r5, r5, r4
 8010318:	1963      	adds	r3, r4, r5
 801031a:	42bb      	cmp	r3, r7
 801031c:	db04      	blt.n	8010328 <__s2b+0x78>
 801031e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010322:	340a      	adds	r4, #10
 8010324:	2509      	movs	r5, #9
 8010326:	e7f6      	b.n	8010316 <__s2b+0x66>
 8010328:	f814 3b01 	ldrb.w	r3, [r4], #1
 801032c:	4601      	mov	r1, r0
 801032e:	3b30      	subs	r3, #48	; 0x30
 8010330:	220a      	movs	r2, #10
 8010332:	4630      	mov	r0, r6
 8010334:	f7ff ff76 	bl	8010224 <__multadd>
 8010338:	e7ee      	b.n	8010318 <__s2b+0x68>
 801033a:	bf00      	nop
 801033c:	080119f8 	.word	0x080119f8
 8010340:	08011a84 	.word	0x08011a84

08010344 <__hi0bits>:
 8010344:	0c03      	lsrs	r3, r0, #16
 8010346:	041b      	lsls	r3, r3, #16
 8010348:	b9d3      	cbnz	r3, 8010380 <__hi0bits+0x3c>
 801034a:	0400      	lsls	r0, r0, #16
 801034c:	2310      	movs	r3, #16
 801034e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010352:	bf04      	itt	eq
 8010354:	0200      	lsleq	r0, r0, #8
 8010356:	3308      	addeq	r3, #8
 8010358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801035c:	bf04      	itt	eq
 801035e:	0100      	lsleq	r0, r0, #4
 8010360:	3304      	addeq	r3, #4
 8010362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010366:	bf04      	itt	eq
 8010368:	0080      	lsleq	r0, r0, #2
 801036a:	3302      	addeq	r3, #2
 801036c:	2800      	cmp	r0, #0
 801036e:	db05      	blt.n	801037c <__hi0bits+0x38>
 8010370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010374:	f103 0301 	add.w	r3, r3, #1
 8010378:	bf08      	it	eq
 801037a:	2320      	moveq	r3, #32
 801037c:	4618      	mov	r0, r3
 801037e:	4770      	bx	lr
 8010380:	2300      	movs	r3, #0
 8010382:	e7e4      	b.n	801034e <__hi0bits+0xa>

08010384 <__lo0bits>:
 8010384:	6803      	ldr	r3, [r0, #0]
 8010386:	f013 0207 	ands.w	r2, r3, #7
 801038a:	4601      	mov	r1, r0
 801038c:	d00b      	beq.n	80103a6 <__lo0bits+0x22>
 801038e:	07da      	lsls	r2, r3, #31
 8010390:	d423      	bmi.n	80103da <__lo0bits+0x56>
 8010392:	0798      	lsls	r0, r3, #30
 8010394:	bf49      	itett	mi
 8010396:	085b      	lsrmi	r3, r3, #1
 8010398:	089b      	lsrpl	r3, r3, #2
 801039a:	2001      	movmi	r0, #1
 801039c:	600b      	strmi	r3, [r1, #0]
 801039e:	bf5c      	itt	pl
 80103a0:	600b      	strpl	r3, [r1, #0]
 80103a2:	2002      	movpl	r0, #2
 80103a4:	4770      	bx	lr
 80103a6:	b298      	uxth	r0, r3
 80103a8:	b9a8      	cbnz	r0, 80103d6 <__lo0bits+0x52>
 80103aa:	0c1b      	lsrs	r3, r3, #16
 80103ac:	2010      	movs	r0, #16
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	b90a      	cbnz	r2, 80103b6 <__lo0bits+0x32>
 80103b2:	3008      	adds	r0, #8
 80103b4:	0a1b      	lsrs	r3, r3, #8
 80103b6:	071a      	lsls	r2, r3, #28
 80103b8:	bf04      	itt	eq
 80103ba:	091b      	lsreq	r3, r3, #4
 80103bc:	3004      	addeq	r0, #4
 80103be:	079a      	lsls	r2, r3, #30
 80103c0:	bf04      	itt	eq
 80103c2:	089b      	lsreq	r3, r3, #2
 80103c4:	3002      	addeq	r0, #2
 80103c6:	07da      	lsls	r2, r3, #31
 80103c8:	d403      	bmi.n	80103d2 <__lo0bits+0x4e>
 80103ca:	085b      	lsrs	r3, r3, #1
 80103cc:	f100 0001 	add.w	r0, r0, #1
 80103d0:	d005      	beq.n	80103de <__lo0bits+0x5a>
 80103d2:	600b      	str	r3, [r1, #0]
 80103d4:	4770      	bx	lr
 80103d6:	4610      	mov	r0, r2
 80103d8:	e7e9      	b.n	80103ae <__lo0bits+0x2a>
 80103da:	2000      	movs	r0, #0
 80103dc:	4770      	bx	lr
 80103de:	2020      	movs	r0, #32
 80103e0:	4770      	bx	lr
	...

080103e4 <__i2b>:
 80103e4:	b510      	push	{r4, lr}
 80103e6:	460c      	mov	r4, r1
 80103e8:	2101      	movs	r1, #1
 80103ea:	f7ff feb9 	bl	8010160 <_Balloc>
 80103ee:	4602      	mov	r2, r0
 80103f0:	b928      	cbnz	r0, 80103fe <__i2b+0x1a>
 80103f2:	4b05      	ldr	r3, [pc, #20]	; (8010408 <__i2b+0x24>)
 80103f4:	4805      	ldr	r0, [pc, #20]	; (801040c <__i2b+0x28>)
 80103f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80103fa:	f000 fd6f 	bl	8010edc <__assert_func>
 80103fe:	2301      	movs	r3, #1
 8010400:	6144      	str	r4, [r0, #20]
 8010402:	6103      	str	r3, [r0, #16]
 8010404:	bd10      	pop	{r4, pc}
 8010406:	bf00      	nop
 8010408:	080119f8 	.word	0x080119f8
 801040c:	08011a84 	.word	0x08011a84

08010410 <__multiply>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	4691      	mov	r9, r2
 8010416:	690a      	ldr	r2, [r1, #16]
 8010418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801041c:	429a      	cmp	r2, r3
 801041e:	bfb8      	it	lt
 8010420:	460b      	movlt	r3, r1
 8010422:	460c      	mov	r4, r1
 8010424:	bfbc      	itt	lt
 8010426:	464c      	movlt	r4, r9
 8010428:	4699      	movlt	r9, r3
 801042a:	6927      	ldr	r7, [r4, #16]
 801042c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010430:	68a3      	ldr	r3, [r4, #8]
 8010432:	6861      	ldr	r1, [r4, #4]
 8010434:	eb07 060a 	add.w	r6, r7, sl
 8010438:	42b3      	cmp	r3, r6
 801043a:	b085      	sub	sp, #20
 801043c:	bfb8      	it	lt
 801043e:	3101      	addlt	r1, #1
 8010440:	f7ff fe8e 	bl	8010160 <_Balloc>
 8010444:	b930      	cbnz	r0, 8010454 <__multiply+0x44>
 8010446:	4602      	mov	r2, r0
 8010448:	4b44      	ldr	r3, [pc, #272]	; (801055c <__multiply+0x14c>)
 801044a:	4845      	ldr	r0, [pc, #276]	; (8010560 <__multiply+0x150>)
 801044c:	f240 115d 	movw	r1, #349	; 0x15d
 8010450:	f000 fd44 	bl	8010edc <__assert_func>
 8010454:	f100 0514 	add.w	r5, r0, #20
 8010458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801045c:	462b      	mov	r3, r5
 801045e:	2200      	movs	r2, #0
 8010460:	4543      	cmp	r3, r8
 8010462:	d321      	bcc.n	80104a8 <__multiply+0x98>
 8010464:	f104 0314 	add.w	r3, r4, #20
 8010468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801046c:	f109 0314 	add.w	r3, r9, #20
 8010470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010474:	9202      	str	r2, [sp, #8]
 8010476:	1b3a      	subs	r2, r7, r4
 8010478:	3a15      	subs	r2, #21
 801047a:	f022 0203 	bic.w	r2, r2, #3
 801047e:	3204      	adds	r2, #4
 8010480:	f104 0115 	add.w	r1, r4, #21
 8010484:	428f      	cmp	r7, r1
 8010486:	bf38      	it	cc
 8010488:	2204      	movcc	r2, #4
 801048a:	9201      	str	r2, [sp, #4]
 801048c:	9a02      	ldr	r2, [sp, #8]
 801048e:	9303      	str	r3, [sp, #12]
 8010490:	429a      	cmp	r2, r3
 8010492:	d80c      	bhi.n	80104ae <__multiply+0x9e>
 8010494:	2e00      	cmp	r6, #0
 8010496:	dd03      	ble.n	80104a0 <__multiply+0x90>
 8010498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801049c:	2b00      	cmp	r3, #0
 801049e:	d05a      	beq.n	8010556 <__multiply+0x146>
 80104a0:	6106      	str	r6, [r0, #16]
 80104a2:	b005      	add	sp, #20
 80104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a8:	f843 2b04 	str.w	r2, [r3], #4
 80104ac:	e7d8      	b.n	8010460 <__multiply+0x50>
 80104ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80104b2:	f1ba 0f00 	cmp.w	sl, #0
 80104b6:	d024      	beq.n	8010502 <__multiply+0xf2>
 80104b8:	f104 0e14 	add.w	lr, r4, #20
 80104bc:	46a9      	mov	r9, r5
 80104be:	f04f 0c00 	mov.w	ip, #0
 80104c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80104c6:	f8d9 1000 	ldr.w	r1, [r9]
 80104ca:	fa1f fb82 	uxth.w	fp, r2
 80104ce:	b289      	uxth	r1, r1
 80104d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80104d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80104d8:	f8d9 2000 	ldr.w	r2, [r9]
 80104dc:	4461      	add	r1, ip
 80104de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80104e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80104e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80104ea:	b289      	uxth	r1, r1
 80104ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80104f0:	4577      	cmp	r7, lr
 80104f2:	f849 1b04 	str.w	r1, [r9], #4
 80104f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80104fa:	d8e2      	bhi.n	80104c2 <__multiply+0xb2>
 80104fc:	9a01      	ldr	r2, [sp, #4]
 80104fe:	f845 c002 	str.w	ip, [r5, r2]
 8010502:	9a03      	ldr	r2, [sp, #12]
 8010504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010508:	3304      	adds	r3, #4
 801050a:	f1b9 0f00 	cmp.w	r9, #0
 801050e:	d020      	beq.n	8010552 <__multiply+0x142>
 8010510:	6829      	ldr	r1, [r5, #0]
 8010512:	f104 0c14 	add.w	ip, r4, #20
 8010516:	46ae      	mov	lr, r5
 8010518:	f04f 0a00 	mov.w	sl, #0
 801051c:	f8bc b000 	ldrh.w	fp, [ip]
 8010520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010524:	fb09 220b 	mla	r2, r9, fp, r2
 8010528:	4492      	add	sl, r2
 801052a:	b289      	uxth	r1, r1
 801052c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010530:	f84e 1b04 	str.w	r1, [lr], #4
 8010534:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010538:	f8be 1000 	ldrh.w	r1, [lr]
 801053c:	0c12      	lsrs	r2, r2, #16
 801053e:	fb09 1102 	mla	r1, r9, r2, r1
 8010542:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010546:	4567      	cmp	r7, ip
 8010548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801054c:	d8e6      	bhi.n	801051c <__multiply+0x10c>
 801054e:	9a01      	ldr	r2, [sp, #4]
 8010550:	50a9      	str	r1, [r5, r2]
 8010552:	3504      	adds	r5, #4
 8010554:	e79a      	b.n	801048c <__multiply+0x7c>
 8010556:	3e01      	subs	r6, #1
 8010558:	e79c      	b.n	8010494 <__multiply+0x84>
 801055a:	bf00      	nop
 801055c:	080119f8 	.word	0x080119f8
 8010560:	08011a84 	.word	0x08011a84

08010564 <__pow5mult>:
 8010564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010568:	4615      	mov	r5, r2
 801056a:	f012 0203 	ands.w	r2, r2, #3
 801056e:	4606      	mov	r6, r0
 8010570:	460f      	mov	r7, r1
 8010572:	d007      	beq.n	8010584 <__pow5mult+0x20>
 8010574:	4c25      	ldr	r4, [pc, #148]	; (801060c <__pow5mult+0xa8>)
 8010576:	3a01      	subs	r2, #1
 8010578:	2300      	movs	r3, #0
 801057a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801057e:	f7ff fe51 	bl	8010224 <__multadd>
 8010582:	4607      	mov	r7, r0
 8010584:	10ad      	asrs	r5, r5, #2
 8010586:	d03d      	beq.n	8010604 <__pow5mult+0xa0>
 8010588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801058a:	b97c      	cbnz	r4, 80105ac <__pow5mult+0x48>
 801058c:	2010      	movs	r0, #16
 801058e:	f7ff fdc1 	bl	8010114 <malloc>
 8010592:	4602      	mov	r2, r0
 8010594:	6270      	str	r0, [r6, #36]	; 0x24
 8010596:	b928      	cbnz	r0, 80105a4 <__pow5mult+0x40>
 8010598:	4b1d      	ldr	r3, [pc, #116]	; (8010610 <__pow5mult+0xac>)
 801059a:	481e      	ldr	r0, [pc, #120]	; (8010614 <__pow5mult+0xb0>)
 801059c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80105a0:	f000 fc9c 	bl	8010edc <__assert_func>
 80105a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105a8:	6004      	str	r4, [r0, #0]
 80105aa:	60c4      	str	r4, [r0, #12]
 80105ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80105b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80105b4:	b94c      	cbnz	r4, 80105ca <__pow5mult+0x66>
 80105b6:	f240 2171 	movw	r1, #625	; 0x271
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7ff ff12 	bl	80103e4 <__i2b>
 80105c0:	2300      	movs	r3, #0
 80105c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80105c6:	4604      	mov	r4, r0
 80105c8:	6003      	str	r3, [r0, #0]
 80105ca:	f04f 0900 	mov.w	r9, #0
 80105ce:	07eb      	lsls	r3, r5, #31
 80105d0:	d50a      	bpl.n	80105e8 <__pow5mult+0x84>
 80105d2:	4639      	mov	r1, r7
 80105d4:	4622      	mov	r2, r4
 80105d6:	4630      	mov	r0, r6
 80105d8:	f7ff ff1a 	bl	8010410 <__multiply>
 80105dc:	4639      	mov	r1, r7
 80105de:	4680      	mov	r8, r0
 80105e0:	4630      	mov	r0, r6
 80105e2:	f7ff fdfd 	bl	80101e0 <_Bfree>
 80105e6:	4647      	mov	r7, r8
 80105e8:	106d      	asrs	r5, r5, #1
 80105ea:	d00b      	beq.n	8010604 <__pow5mult+0xa0>
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	b938      	cbnz	r0, 8010600 <__pow5mult+0x9c>
 80105f0:	4622      	mov	r2, r4
 80105f2:	4621      	mov	r1, r4
 80105f4:	4630      	mov	r0, r6
 80105f6:	f7ff ff0b 	bl	8010410 <__multiply>
 80105fa:	6020      	str	r0, [r4, #0]
 80105fc:	f8c0 9000 	str.w	r9, [r0]
 8010600:	4604      	mov	r4, r0
 8010602:	e7e4      	b.n	80105ce <__pow5mult+0x6a>
 8010604:	4638      	mov	r0, r7
 8010606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801060a:	bf00      	nop
 801060c:	08011bd0 	.word	0x08011bd0
 8010610:	08011986 	.word	0x08011986
 8010614:	08011a84 	.word	0x08011a84

08010618 <__lshift>:
 8010618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801061c:	460c      	mov	r4, r1
 801061e:	6849      	ldr	r1, [r1, #4]
 8010620:	6923      	ldr	r3, [r4, #16]
 8010622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010626:	68a3      	ldr	r3, [r4, #8]
 8010628:	4607      	mov	r7, r0
 801062a:	4691      	mov	r9, r2
 801062c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010630:	f108 0601 	add.w	r6, r8, #1
 8010634:	42b3      	cmp	r3, r6
 8010636:	db0b      	blt.n	8010650 <__lshift+0x38>
 8010638:	4638      	mov	r0, r7
 801063a:	f7ff fd91 	bl	8010160 <_Balloc>
 801063e:	4605      	mov	r5, r0
 8010640:	b948      	cbnz	r0, 8010656 <__lshift+0x3e>
 8010642:	4602      	mov	r2, r0
 8010644:	4b2a      	ldr	r3, [pc, #168]	; (80106f0 <__lshift+0xd8>)
 8010646:	482b      	ldr	r0, [pc, #172]	; (80106f4 <__lshift+0xdc>)
 8010648:	f240 11d9 	movw	r1, #473	; 0x1d9
 801064c:	f000 fc46 	bl	8010edc <__assert_func>
 8010650:	3101      	adds	r1, #1
 8010652:	005b      	lsls	r3, r3, #1
 8010654:	e7ee      	b.n	8010634 <__lshift+0x1c>
 8010656:	2300      	movs	r3, #0
 8010658:	f100 0114 	add.w	r1, r0, #20
 801065c:	f100 0210 	add.w	r2, r0, #16
 8010660:	4618      	mov	r0, r3
 8010662:	4553      	cmp	r3, sl
 8010664:	db37      	blt.n	80106d6 <__lshift+0xbe>
 8010666:	6920      	ldr	r0, [r4, #16]
 8010668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801066c:	f104 0314 	add.w	r3, r4, #20
 8010670:	f019 091f 	ands.w	r9, r9, #31
 8010674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801067c:	d02f      	beq.n	80106de <__lshift+0xc6>
 801067e:	f1c9 0e20 	rsb	lr, r9, #32
 8010682:	468a      	mov	sl, r1
 8010684:	f04f 0c00 	mov.w	ip, #0
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	fa02 f209 	lsl.w	r2, r2, r9
 801068e:	ea42 020c 	orr.w	r2, r2, ip
 8010692:	f84a 2b04 	str.w	r2, [sl], #4
 8010696:	f853 2b04 	ldr.w	r2, [r3], #4
 801069a:	4298      	cmp	r0, r3
 801069c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80106a0:	d8f2      	bhi.n	8010688 <__lshift+0x70>
 80106a2:	1b03      	subs	r3, r0, r4
 80106a4:	3b15      	subs	r3, #21
 80106a6:	f023 0303 	bic.w	r3, r3, #3
 80106aa:	3304      	adds	r3, #4
 80106ac:	f104 0215 	add.w	r2, r4, #21
 80106b0:	4290      	cmp	r0, r2
 80106b2:	bf38      	it	cc
 80106b4:	2304      	movcc	r3, #4
 80106b6:	f841 c003 	str.w	ip, [r1, r3]
 80106ba:	f1bc 0f00 	cmp.w	ip, #0
 80106be:	d001      	beq.n	80106c4 <__lshift+0xac>
 80106c0:	f108 0602 	add.w	r6, r8, #2
 80106c4:	3e01      	subs	r6, #1
 80106c6:	4638      	mov	r0, r7
 80106c8:	612e      	str	r6, [r5, #16]
 80106ca:	4621      	mov	r1, r4
 80106cc:	f7ff fd88 	bl	80101e0 <_Bfree>
 80106d0:	4628      	mov	r0, r5
 80106d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80106da:	3301      	adds	r3, #1
 80106dc:	e7c1      	b.n	8010662 <__lshift+0x4a>
 80106de:	3904      	subs	r1, #4
 80106e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80106e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80106e8:	4298      	cmp	r0, r3
 80106ea:	d8f9      	bhi.n	80106e0 <__lshift+0xc8>
 80106ec:	e7ea      	b.n	80106c4 <__lshift+0xac>
 80106ee:	bf00      	nop
 80106f0:	080119f8 	.word	0x080119f8
 80106f4:	08011a84 	.word	0x08011a84

080106f8 <__mcmp>:
 80106f8:	b530      	push	{r4, r5, lr}
 80106fa:	6902      	ldr	r2, [r0, #16]
 80106fc:	690c      	ldr	r4, [r1, #16]
 80106fe:	1b12      	subs	r2, r2, r4
 8010700:	d10e      	bne.n	8010720 <__mcmp+0x28>
 8010702:	f100 0314 	add.w	r3, r0, #20
 8010706:	3114      	adds	r1, #20
 8010708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801070c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010718:	42a5      	cmp	r5, r4
 801071a:	d003      	beq.n	8010724 <__mcmp+0x2c>
 801071c:	d305      	bcc.n	801072a <__mcmp+0x32>
 801071e:	2201      	movs	r2, #1
 8010720:	4610      	mov	r0, r2
 8010722:	bd30      	pop	{r4, r5, pc}
 8010724:	4283      	cmp	r3, r0
 8010726:	d3f3      	bcc.n	8010710 <__mcmp+0x18>
 8010728:	e7fa      	b.n	8010720 <__mcmp+0x28>
 801072a:	f04f 32ff 	mov.w	r2, #4294967295
 801072e:	e7f7      	b.n	8010720 <__mcmp+0x28>

08010730 <__mdiff>:
 8010730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	460c      	mov	r4, r1
 8010736:	4606      	mov	r6, r0
 8010738:	4611      	mov	r1, r2
 801073a:	4620      	mov	r0, r4
 801073c:	4690      	mov	r8, r2
 801073e:	f7ff ffdb 	bl	80106f8 <__mcmp>
 8010742:	1e05      	subs	r5, r0, #0
 8010744:	d110      	bne.n	8010768 <__mdiff+0x38>
 8010746:	4629      	mov	r1, r5
 8010748:	4630      	mov	r0, r6
 801074a:	f7ff fd09 	bl	8010160 <_Balloc>
 801074e:	b930      	cbnz	r0, 801075e <__mdiff+0x2e>
 8010750:	4b3a      	ldr	r3, [pc, #232]	; (801083c <__mdiff+0x10c>)
 8010752:	4602      	mov	r2, r0
 8010754:	f240 2132 	movw	r1, #562	; 0x232
 8010758:	4839      	ldr	r0, [pc, #228]	; (8010840 <__mdiff+0x110>)
 801075a:	f000 fbbf 	bl	8010edc <__assert_func>
 801075e:	2301      	movs	r3, #1
 8010760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010768:	bfa4      	itt	ge
 801076a:	4643      	movge	r3, r8
 801076c:	46a0      	movge	r8, r4
 801076e:	4630      	mov	r0, r6
 8010770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010774:	bfa6      	itte	ge
 8010776:	461c      	movge	r4, r3
 8010778:	2500      	movge	r5, #0
 801077a:	2501      	movlt	r5, #1
 801077c:	f7ff fcf0 	bl	8010160 <_Balloc>
 8010780:	b920      	cbnz	r0, 801078c <__mdiff+0x5c>
 8010782:	4b2e      	ldr	r3, [pc, #184]	; (801083c <__mdiff+0x10c>)
 8010784:	4602      	mov	r2, r0
 8010786:	f44f 7110 	mov.w	r1, #576	; 0x240
 801078a:	e7e5      	b.n	8010758 <__mdiff+0x28>
 801078c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010790:	6926      	ldr	r6, [r4, #16]
 8010792:	60c5      	str	r5, [r0, #12]
 8010794:	f104 0914 	add.w	r9, r4, #20
 8010798:	f108 0514 	add.w	r5, r8, #20
 801079c:	f100 0e14 	add.w	lr, r0, #20
 80107a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80107a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80107a8:	f108 0210 	add.w	r2, r8, #16
 80107ac:	46f2      	mov	sl, lr
 80107ae:	2100      	movs	r1, #0
 80107b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80107b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80107b8:	fa1f f883 	uxth.w	r8, r3
 80107bc:	fa11 f18b 	uxtah	r1, r1, fp
 80107c0:	0c1b      	lsrs	r3, r3, #16
 80107c2:	eba1 0808 	sub.w	r8, r1, r8
 80107c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80107ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80107ce:	fa1f f888 	uxth.w	r8, r8
 80107d2:	1419      	asrs	r1, r3, #16
 80107d4:	454e      	cmp	r6, r9
 80107d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80107da:	f84a 3b04 	str.w	r3, [sl], #4
 80107de:	d8e7      	bhi.n	80107b0 <__mdiff+0x80>
 80107e0:	1b33      	subs	r3, r6, r4
 80107e2:	3b15      	subs	r3, #21
 80107e4:	f023 0303 	bic.w	r3, r3, #3
 80107e8:	3304      	adds	r3, #4
 80107ea:	3415      	adds	r4, #21
 80107ec:	42a6      	cmp	r6, r4
 80107ee:	bf38      	it	cc
 80107f0:	2304      	movcc	r3, #4
 80107f2:	441d      	add	r5, r3
 80107f4:	4473      	add	r3, lr
 80107f6:	469e      	mov	lr, r3
 80107f8:	462e      	mov	r6, r5
 80107fa:	4566      	cmp	r6, ip
 80107fc:	d30e      	bcc.n	801081c <__mdiff+0xec>
 80107fe:	f10c 0203 	add.w	r2, ip, #3
 8010802:	1b52      	subs	r2, r2, r5
 8010804:	f022 0203 	bic.w	r2, r2, #3
 8010808:	3d03      	subs	r5, #3
 801080a:	45ac      	cmp	ip, r5
 801080c:	bf38      	it	cc
 801080e:	2200      	movcc	r2, #0
 8010810:	441a      	add	r2, r3
 8010812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010816:	b17b      	cbz	r3, 8010838 <__mdiff+0x108>
 8010818:	6107      	str	r7, [r0, #16]
 801081a:	e7a3      	b.n	8010764 <__mdiff+0x34>
 801081c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010820:	fa11 f288 	uxtah	r2, r1, r8
 8010824:	1414      	asrs	r4, r2, #16
 8010826:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801082a:	b292      	uxth	r2, r2
 801082c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010830:	f84e 2b04 	str.w	r2, [lr], #4
 8010834:	1421      	asrs	r1, r4, #16
 8010836:	e7e0      	b.n	80107fa <__mdiff+0xca>
 8010838:	3f01      	subs	r7, #1
 801083a:	e7ea      	b.n	8010812 <__mdiff+0xe2>
 801083c:	080119f8 	.word	0x080119f8
 8010840:	08011a84 	.word	0x08011a84

08010844 <__ulp>:
 8010844:	b082      	sub	sp, #8
 8010846:	ed8d 0b00 	vstr	d0, [sp]
 801084a:	9b01      	ldr	r3, [sp, #4]
 801084c:	4912      	ldr	r1, [pc, #72]	; (8010898 <__ulp+0x54>)
 801084e:	4019      	ands	r1, r3
 8010850:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010854:	2900      	cmp	r1, #0
 8010856:	dd05      	ble.n	8010864 <__ulp+0x20>
 8010858:	2200      	movs	r2, #0
 801085a:	460b      	mov	r3, r1
 801085c:	ec43 2b10 	vmov	d0, r2, r3
 8010860:	b002      	add	sp, #8
 8010862:	4770      	bx	lr
 8010864:	4249      	negs	r1, r1
 8010866:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801086a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801086e:	f04f 0200 	mov.w	r2, #0
 8010872:	f04f 0300 	mov.w	r3, #0
 8010876:	da04      	bge.n	8010882 <__ulp+0x3e>
 8010878:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801087c:	fa41 f300 	asr.w	r3, r1, r0
 8010880:	e7ec      	b.n	801085c <__ulp+0x18>
 8010882:	f1a0 0114 	sub.w	r1, r0, #20
 8010886:	291e      	cmp	r1, #30
 8010888:	bfda      	itte	le
 801088a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801088e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010892:	2101      	movgt	r1, #1
 8010894:	460a      	mov	r2, r1
 8010896:	e7e1      	b.n	801085c <__ulp+0x18>
 8010898:	7ff00000 	.word	0x7ff00000

0801089c <__b2d>:
 801089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089e:	6905      	ldr	r5, [r0, #16]
 80108a0:	f100 0714 	add.w	r7, r0, #20
 80108a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80108a8:	1f2e      	subs	r6, r5, #4
 80108aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80108ae:	4620      	mov	r0, r4
 80108b0:	f7ff fd48 	bl	8010344 <__hi0bits>
 80108b4:	f1c0 0320 	rsb	r3, r0, #32
 80108b8:	280a      	cmp	r0, #10
 80108ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010938 <__b2d+0x9c>
 80108be:	600b      	str	r3, [r1, #0]
 80108c0:	dc14      	bgt.n	80108ec <__b2d+0x50>
 80108c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80108c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80108ca:	42b7      	cmp	r7, r6
 80108cc:	ea41 030c 	orr.w	r3, r1, ip
 80108d0:	bf34      	ite	cc
 80108d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80108d6:	2100      	movcs	r1, #0
 80108d8:	3015      	adds	r0, #21
 80108da:	fa04 f000 	lsl.w	r0, r4, r0
 80108de:	fa21 f10e 	lsr.w	r1, r1, lr
 80108e2:	ea40 0201 	orr.w	r2, r0, r1
 80108e6:	ec43 2b10 	vmov	d0, r2, r3
 80108ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ec:	42b7      	cmp	r7, r6
 80108ee:	bf3a      	itte	cc
 80108f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80108f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80108f8:	2100      	movcs	r1, #0
 80108fa:	380b      	subs	r0, #11
 80108fc:	d017      	beq.n	801092e <__b2d+0x92>
 80108fe:	f1c0 0c20 	rsb	ip, r0, #32
 8010902:	fa04 f500 	lsl.w	r5, r4, r0
 8010906:	42be      	cmp	r6, r7
 8010908:	fa21 f40c 	lsr.w	r4, r1, ip
 801090c:	ea45 0504 	orr.w	r5, r5, r4
 8010910:	bf8c      	ite	hi
 8010912:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010916:	2400      	movls	r4, #0
 8010918:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801091c:	fa01 f000 	lsl.w	r0, r1, r0
 8010920:	fa24 f40c 	lsr.w	r4, r4, ip
 8010924:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010928:	ea40 0204 	orr.w	r2, r0, r4
 801092c:	e7db      	b.n	80108e6 <__b2d+0x4a>
 801092e:	ea44 030c 	orr.w	r3, r4, ip
 8010932:	460a      	mov	r2, r1
 8010934:	e7d7      	b.n	80108e6 <__b2d+0x4a>
 8010936:	bf00      	nop
 8010938:	3ff00000 	.word	0x3ff00000

0801093c <__d2b>:
 801093c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010940:	4689      	mov	r9, r1
 8010942:	2101      	movs	r1, #1
 8010944:	ec57 6b10 	vmov	r6, r7, d0
 8010948:	4690      	mov	r8, r2
 801094a:	f7ff fc09 	bl	8010160 <_Balloc>
 801094e:	4604      	mov	r4, r0
 8010950:	b930      	cbnz	r0, 8010960 <__d2b+0x24>
 8010952:	4602      	mov	r2, r0
 8010954:	4b25      	ldr	r3, [pc, #148]	; (80109ec <__d2b+0xb0>)
 8010956:	4826      	ldr	r0, [pc, #152]	; (80109f0 <__d2b+0xb4>)
 8010958:	f240 310a 	movw	r1, #778	; 0x30a
 801095c:	f000 fabe 	bl	8010edc <__assert_func>
 8010960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010968:	bb35      	cbnz	r5, 80109b8 <__d2b+0x7c>
 801096a:	2e00      	cmp	r6, #0
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	d028      	beq.n	80109c2 <__d2b+0x86>
 8010970:	4668      	mov	r0, sp
 8010972:	9600      	str	r6, [sp, #0]
 8010974:	f7ff fd06 	bl	8010384 <__lo0bits>
 8010978:	9900      	ldr	r1, [sp, #0]
 801097a:	b300      	cbz	r0, 80109be <__d2b+0x82>
 801097c:	9a01      	ldr	r2, [sp, #4]
 801097e:	f1c0 0320 	rsb	r3, r0, #32
 8010982:	fa02 f303 	lsl.w	r3, r2, r3
 8010986:	430b      	orrs	r3, r1
 8010988:	40c2      	lsrs	r2, r0
 801098a:	6163      	str	r3, [r4, #20]
 801098c:	9201      	str	r2, [sp, #4]
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	61a3      	str	r3, [r4, #24]
 8010992:	2b00      	cmp	r3, #0
 8010994:	bf14      	ite	ne
 8010996:	2202      	movne	r2, #2
 8010998:	2201      	moveq	r2, #1
 801099a:	6122      	str	r2, [r4, #16]
 801099c:	b1d5      	cbz	r5, 80109d4 <__d2b+0x98>
 801099e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109a2:	4405      	add	r5, r0
 80109a4:	f8c9 5000 	str.w	r5, [r9]
 80109a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109ac:	f8c8 0000 	str.w	r0, [r8]
 80109b0:	4620      	mov	r0, r4
 80109b2:	b003      	add	sp, #12
 80109b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109bc:	e7d5      	b.n	801096a <__d2b+0x2e>
 80109be:	6161      	str	r1, [r4, #20]
 80109c0:	e7e5      	b.n	801098e <__d2b+0x52>
 80109c2:	a801      	add	r0, sp, #4
 80109c4:	f7ff fcde 	bl	8010384 <__lo0bits>
 80109c8:	9b01      	ldr	r3, [sp, #4]
 80109ca:	6163      	str	r3, [r4, #20]
 80109cc:	2201      	movs	r2, #1
 80109ce:	6122      	str	r2, [r4, #16]
 80109d0:	3020      	adds	r0, #32
 80109d2:	e7e3      	b.n	801099c <__d2b+0x60>
 80109d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109dc:	f8c9 0000 	str.w	r0, [r9]
 80109e0:	6918      	ldr	r0, [r3, #16]
 80109e2:	f7ff fcaf 	bl	8010344 <__hi0bits>
 80109e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109ea:	e7df      	b.n	80109ac <__d2b+0x70>
 80109ec:	080119f8 	.word	0x080119f8
 80109f0:	08011a84 	.word	0x08011a84

080109f4 <__ratio>:
 80109f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f8:	4688      	mov	r8, r1
 80109fa:	4669      	mov	r1, sp
 80109fc:	4681      	mov	r9, r0
 80109fe:	f7ff ff4d 	bl	801089c <__b2d>
 8010a02:	a901      	add	r1, sp, #4
 8010a04:	4640      	mov	r0, r8
 8010a06:	ec55 4b10 	vmov	r4, r5, d0
 8010a0a:	f7ff ff47 	bl	801089c <__b2d>
 8010a0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010a16:	eba3 0c02 	sub.w	ip, r3, r2
 8010a1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a1e:	1a9b      	subs	r3, r3, r2
 8010a20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010a24:	ec51 0b10 	vmov	r0, r1, d0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	bfd6      	itet	le
 8010a2c:	460a      	movle	r2, r1
 8010a2e:	462a      	movgt	r2, r5
 8010a30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a34:	468b      	mov	fp, r1
 8010a36:	462f      	mov	r7, r5
 8010a38:	bfd4      	ite	le
 8010a3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010a3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010a42:	4620      	mov	r0, r4
 8010a44:	ee10 2a10 	vmov	r2, s0
 8010a48:	465b      	mov	r3, fp
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7ef ff06 	bl	800085c <__aeabi_ddiv>
 8010a50:	ec41 0b10 	vmov	d0, r0, r1
 8010a54:	b003      	add	sp, #12
 8010a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a5a <__copybits>:
 8010a5a:	3901      	subs	r1, #1
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	1149      	asrs	r1, r1, #5
 8010a60:	6914      	ldr	r4, [r2, #16]
 8010a62:	3101      	adds	r1, #1
 8010a64:	f102 0314 	add.w	r3, r2, #20
 8010a68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a70:	1f05      	subs	r5, r0, #4
 8010a72:	42a3      	cmp	r3, r4
 8010a74:	d30c      	bcc.n	8010a90 <__copybits+0x36>
 8010a76:	1aa3      	subs	r3, r4, r2
 8010a78:	3b11      	subs	r3, #17
 8010a7a:	f023 0303 	bic.w	r3, r3, #3
 8010a7e:	3211      	adds	r2, #17
 8010a80:	42a2      	cmp	r2, r4
 8010a82:	bf88      	it	hi
 8010a84:	2300      	movhi	r3, #0
 8010a86:	4418      	add	r0, r3
 8010a88:	2300      	movs	r3, #0
 8010a8a:	4288      	cmp	r0, r1
 8010a8c:	d305      	bcc.n	8010a9a <__copybits+0x40>
 8010a8e:	bd70      	pop	{r4, r5, r6, pc}
 8010a90:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a94:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a98:	e7eb      	b.n	8010a72 <__copybits+0x18>
 8010a9a:	f840 3b04 	str.w	r3, [r0], #4
 8010a9e:	e7f4      	b.n	8010a8a <__copybits+0x30>

08010aa0 <__any_on>:
 8010aa0:	f100 0214 	add.w	r2, r0, #20
 8010aa4:	6900      	ldr	r0, [r0, #16]
 8010aa6:	114b      	asrs	r3, r1, #5
 8010aa8:	4298      	cmp	r0, r3
 8010aaa:	b510      	push	{r4, lr}
 8010aac:	db11      	blt.n	8010ad2 <__any_on+0x32>
 8010aae:	dd0a      	ble.n	8010ac6 <__any_on+0x26>
 8010ab0:	f011 011f 	ands.w	r1, r1, #31
 8010ab4:	d007      	beq.n	8010ac6 <__any_on+0x26>
 8010ab6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010aba:	fa24 f001 	lsr.w	r0, r4, r1
 8010abe:	fa00 f101 	lsl.w	r1, r0, r1
 8010ac2:	428c      	cmp	r4, r1
 8010ac4:	d10b      	bne.n	8010ade <__any_on+0x3e>
 8010ac6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d803      	bhi.n	8010ad6 <__any_on+0x36>
 8010ace:	2000      	movs	r0, #0
 8010ad0:	bd10      	pop	{r4, pc}
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	e7f7      	b.n	8010ac6 <__any_on+0x26>
 8010ad6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ada:	2900      	cmp	r1, #0
 8010adc:	d0f5      	beq.n	8010aca <__any_on+0x2a>
 8010ade:	2001      	movs	r0, #1
 8010ae0:	e7f6      	b.n	8010ad0 <__any_on+0x30>

08010ae2 <_calloc_r>:
 8010ae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ae4:	fba1 2402 	umull	r2, r4, r1, r2
 8010ae8:	b94c      	cbnz	r4, 8010afe <_calloc_r+0x1c>
 8010aea:	4611      	mov	r1, r2
 8010aec:	9201      	str	r2, [sp, #4]
 8010aee:	f7fc f9ad 	bl	800ce4c <_malloc_r>
 8010af2:	9a01      	ldr	r2, [sp, #4]
 8010af4:	4605      	mov	r5, r0
 8010af6:	b930      	cbnz	r0, 8010b06 <_calloc_r+0x24>
 8010af8:	4628      	mov	r0, r5
 8010afa:	b003      	add	sp, #12
 8010afc:	bd30      	pop	{r4, r5, pc}
 8010afe:	220c      	movs	r2, #12
 8010b00:	6002      	str	r2, [r0, #0]
 8010b02:	2500      	movs	r5, #0
 8010b04:	e7f8      	b.n	8010af8 <_calloc_r+0x16>
 8010b06:	4621      	mov	r1, r4
 8010b08:	f7fc f977 	bl	800cdfa <memset>
 8010b0c:	e7f4      	b.n	8010af8 <_calloc_r+0x16>
	...

08010b10 <_free_r>:
 8010b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b12:	2900      	cmp	r1, #0
 8010b14:	d044      	beq.n	8010ba0 <_free_r+0x90>
 8010b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b1a:	9001      	str	r0, [sp, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8010b22:	bfb8      	it	lt
 8010b24:	18e4      	addlt	r4, r4, r3
 8010b26:	f7ff fb0f 	bl	8010148 <__malloc_lock>
 8010b2a:	4a1e      	ldr	r2, [pc, #120]	; (8010ba4 <_free_r+0x94>)
 8010b2c:	9801      	ldr	r0, [sp, #4]
 8010b2e:	6813      	ldr	r3, [r2, #0]
 8010b30:	b933      	cbnz	r3, 8010b40 <_free_r+0x30>
 8010b32:	6063      	str	r3, [r4, #4]
 8010b34:	6014      	str	r4, [r2, #0]
 8010b36:	b003      	add	sp, #12
 8010b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b3c:	f7ff bb0a 	b.w	8010154 <__malloc_unlock>
 8010b40:	42a3      	cmp	r3, r4
 8010b42:	d908      	bls.n	8010b56 <_free_r+0x46>
 8010b44:	6825      	ldr	r5, [r4, #0]
 8010b46:	1961      	adds	r1, r4, r5
 8010b48:	428b      	cmp	r3, r1
 8010b4a:	bf01      	itttt	eq
 8010b4c:	6819      	ldreq	r1, [r3, #0]
 8010b4e:	685b      	ldreq	r3, [r3, #4]
 8010b50:	1949      	addeq	r1, r1, r5
 8010b52:	6021      	streq	r1, [r4, #0]
 8010b54:	e7ed      	b.n	8010b32 <_free_r+0x22>
 8010b56:	461a      	mov	r2, r3
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	b10b      	cbz	r3, 8010b60 <_free_r+0x50>
 8010b5c:	42a3      	cmp	r3, r4
 8010b5e:	d9fa      	bls.n	8010b56 <_free_r+0x46>
 8010b60:	6811      	ldr	r1, [r2, #0]
 8010b62:	1855      	adds	r5, r2, r1
 8010b64:	42a5      	cmp	r5, r4
 8010b66:	d10b      	bne.n	8010b80 <_free_r+0x70>
 8010b68:	6824      	ldr	r4, [r4, #0]
 8010b6a:	4421      	add	r1, r4
 8010b6c:	1854      	adds	r4, r2, r1
 8010b6e:	42a3      	cmp	r3, r4
 8010b70:	6011      	str	r1, [r2, #0]
 8010b72:	d1e0      	bne.n	8010b36 <_free_r+0x26>
 8010b74:	681c      	ldr	r4, [r3, #0]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	6053      	str	r3, [r2, #4]
 8010b7a:	4421      	add	r1, r4
 8010b7c:	6011      	str	r1, [r2, #0]
 8010b7e:	e7da      	b.n	8010b36 <_free_r+0x26>
 8010b80:	d902      	bls.n	8010b88 <_free_r+0x78>
 8010b82:	230c      	movs	r3, #12
 8010b84:	6003      	str	r3, [r0, #0]
 8010b86:	e7d6      	b.n	8010b36 <_free_r+0x26>
 8010b88:	6825      	ldr	r5, [r4, #0]
 8010b8a:	1961      	adds	r1, r4, r5
 8010b8c:	428b      	cmp	r3, r1
 8010b8e:	bf04      	itt	eq
 8010b90:	6819      	ldreq	r1, [r3, #0]
 8010b92:	685b      	ldreq	r3, [r3, #4]
 8010b94:	6063      	str	r3, [r4, #4]
 8010b96:	bf04      	itt	eq
 8010b98:	1949      	addeq	r1, r1, r5
 8010b9a:	6021      	streq	r1, [r4, #0]
 8010b9c:	6054      	str	r4, [r2, #4]
 8010b9e:	e7ca      	b.n	8010b36 <_free_r+0x26>
 8010ba0:	b003      	add	sp, #12
 8010ba2:	bd30      	pop	{r4, r5, pc}
 8010ba4:	200059b0 	.word	0x200059b0

08010ba8 <__ssputs_r>:
 8010ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bac:	688e      	ldr	r6, [r1, #8]
 8010bae:	429e      	cmp	r6, r3
 8010bb0:	4682      	mov	sl, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	4690      	mov	r8, r2
 8010bb6:	461f      	mov	r7, r3
 8010bb8:	d838      	bhi.n	8010c2c <__ssputs_r+0x84>
 8010bba:	898a      	ldrh	r2, [r1, #12]
 8010bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010bc0:	d032      	beq.n	8010c28 <__ssputs_r+0x80>
 8010bc2:	6825      	ldr	r5, [r4, #0]
 8010bc4:	6909      	ldr	r1, [r1, #16]
 8010bc6:	eba5 0901 	sub.w	r9, r5, r1
 8010bca:	6965      	ldr	r5, [r4, #20]
 8010bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	444b      	add	r3, r9
 8010bd8:	106d      	asrs	r5, r5, #1
 8010bda:	429d      	cmp	r5, r3
 8010bdc:	bf38      	it	cc
 8010bde:	461d      	movcc	r5, r3
 8010be0:	0553      	lsls	r3, r2, #21
 8010be2:	d531      	bpl.n	8010c48 <__ssputs_r+0xa0>
 8010be4:	4629      	mov	r1, r5
 8010be6:	f7fc f931 	bl	800ce4c <_malloc_r>
 8010bea:	4606      	mov	r6, r0
 8010bec:	b950      	cbnz	r0, 8010c04 <__ssputs_r+0x5c>
 8010bee:	230c      	movs	r3, #12
 8010bf0:	f8ca 3000 	str.w	r3, [sl]
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bfa:	81a3      	strh	r3, [r4, #12]
 8010bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c04:	6921      	ldr	r1, [r4, #16]
 8010c06:	464a      	mov	r2, r9
 8010c08:	f7fc f8e9 	bl	800cdde <memcpy>
 8010c0c:	89a3      	ldrh	r3, [r4, #12]
 8010c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c16:	81a3      	strh	r3, [r4, #12]
 8010c18:	6126      	str	r6, [r4, #16]
 8010c1a:	6165      	str	r5, [r4, #20]
 8010c1c:	444e      	add	r6, r9
 8010c1e:	eba5 0509 	sub.w	r5, r5, r9
 8010c22:	6026      	str	r6, [r4, #0]
 8010c24:	60a5      	str	r5, [r4, #8]
 8010c26:	463e      	mov	r6, r7
 8010c28:	42be      	cmp	r6, r7
 8010c2a:	d900      	bls.n	8010c2e <__ssputs_r+0x86>
 8010c2c:	463e      	mov	r6, r7
 8010c2e:	6820      	ldr	r0, [r4, #0]
 8010c30:	4632      	mov	r2, r6
 8010c32:	4641      	mov	r1, r8
 8010c34:	f000 f982 	bl	8010f3c <memmove>
 8010c38:	68a3      	ldr	r3, [r4, #8]
 8010c3a:	1b9b      	subs	r3, r3, r6
 8010c3c:	60a3      	str	r3, [r4, #8]
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	4433      	add	r3, r6
 8010c42:	6023      	str	r3, [r4, #0]
 8010c44:	2000      	movs	r0, #0
 8010c46:	e7db      	b.n	8010c00 <__ssputs_r+0x58>
 8010c48:	462a      	mov	r2, r5
 8010c4a:	f000 f991 	bl	8010f70 <_realloc_r>
 8010c4e:	4606      	mov	r6, r0
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d1e1      	bne.n	8010c18 <__ssputs_r+0x70>
 8010c54:	6921      	ldr	r1, [r4, #16]
 8010c56:	4650      	mov	r0, sl
 8010c58:	f7ff ff5a 	bl	8010b10 <_free_r>
 8010c5c:	e7c7      	b.n	8010bee <__ssputs_r+0x46>
	...

08010c60 <_svfiprintf_r>:
 8010c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c64:	4698      	mov	r8, r3
 8010c66:	898b      	ldrh	r3, [r1, #12]
 8010c68:	061b      	lsls	r3, r3, #24
 8010c6a:	b09d      	sub	sp, #116	; 0x74
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	460d      	mov	r5, r1
 8010c70:	4614      	mov	r4, r2
 8010c72:	d50e      	bpl.n	8010c92 <_svfiprintf_r+0x32>
 8010c74:	690b      	ldr	r3, [r1, #16]
 8010c76:	b963      	cbnz	r3, 8010c92 <_svfiprintf_r+0x32>
 8010c78:	2140      	movs	r1, #64	; 0x40
 8010c7a:	f7fc f8e7 	bl	800ce4c <_malloc_r>
 8010c7e:	6028      	str	r0, [r5, #0]
 8010c80:	6128      	str	r0, [r5, #16]
 8010c82:	b920      	cbnz	r0, 8010c8e <_svfiprintf_r+0x2e>
 8010c84:	230c      	movs	r3, #12
 8010c86:	603b      	str	r3, [r7, #0]
 8010c88:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8c:	e0d1      	b.n	8010e32 <_svfiprintf_r+0x1d2>
 8010c8e:	2340      	movs	r3, #64	; 0x40
 8010c90:	616b      	str	r3, [r5, #20]
 8010c92:	2300      	movs	r3, #0
 8010c94:	9309      	str	r3, [sp, #36]	; 0x24
 8010c96:	2320      	movs	r3, #32
 8010c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ca0:	2330      	movs	r3, #48	; 0x30
 8010ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e4c <_svfiprintf_r+0x1ec>
 8010ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010caa:	f04f 0901 	mov.w	r9, #1
 8010cae:	4623      	mov	r3, r4
 8010cb0:	469a      	mov	sl, r3
 8010cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb6:	b10a      	cbz	r2, 8010cbc <_svfiprintf_r+0x5c>
 8010cb8:	2a25      	cmp	r2, #37	; 0x25
 8010cba:	d1f9      	bne.n	8010cb0 <_svfiprintf_r+0x50>
 8010cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8010cc0:	d00b      	beq.n	8010cda <_svfiprintf_r+0x7a>
 8010cc2:	465b      	mov	r3, fp
 8010cc4:	4622      	mov	r2, r4
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f7ff ff6d 	bl	8010ba8 <__ssputs_r>
 8010cce:	3001      	adds	r0, #1
 8010cd0:	f000 80aa 	beq.w	8010e28 <_svfiprintf_r+0x1c8>
 8010cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cd6:	445a      	add	r2, fp
 8010cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8010cda:	f89a 3000 	ldrb.w	r3, [sl]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f000 80a2 	beq.w	8010e28 <_svfiprintf_r+0x1c8>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cee:	f10a 0a01 	add.w	sl, sl, #1
 8010cf2:	9304      	str	r3, [sp, #16]
 8010cf4:	9307      	str	r3, [sp, #28]
 8010cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8010cfc:	4654      	mov	r4, sl
 8010cfe:	2205      	movs	r2, #5
 8010d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d04:	4851      	ldr	r0, [pc, #324]	; (8010e4c <_svfiprintf_r+0x1ec>)
 8010d06:	f7ef fa73 	bl	80001f0 <memchr>
 8010d0a:	9a04      	ldr	r2, [sp, #16]
 8010d0c:	b9d8      	cbnz	r0, 8010d46 <_svfiprintf_r+0xe6>
 8010d0e:	06d0      	lsls	r0, r2, #27
 8010d10:	bf44      	itt	mi
 8010d12:	2320      	movmi	r3, #32
 8010d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d18:	0711      	lsls	r1, r2, #28
 8010d1a:	bf44      	itt	mi
 8010d1c:	232b      	movmi	r3, #43	; 0x2b
 8010d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d22:	f89a 3000 	ldrb.w	r3, [sl]
 8010d26:	2b2a      	cmp	r3, #42	; 0x2a
 8010d28:	d015      	beq.n	8010d56 <_svfiprintf_r+0xf6>
 8010d2a:	9a07      	ldr	r2, [sp, #28]
 8010d2c:	4654      	mov	r4, sl
 8010d2e:	2000      	movs	r0, #0
 8010d30:	f04f 0c0a 	mov.w	ip, #10
 8010d34:	4621      	mov	r1, r4
 8010d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d3a:	3b30      	subs	r3, #48	; 0x30
 8010d3c:	2b09      	cmp	r3, #9
 8010d3e:	d94e      	bls.n	8010dde <_svfiprintf_r+0x17e>
 8010d40:	b1b0      	cbz	r0, 8010d70 <_svfiprintf_r+0x110>
 8010d42:	9207      	str	r2, [sp, #28]
 8010d44:	e014      	b.n	8010d70 <_svfiprintf_r+0x110>
 8010d46:	eba0 0308 	sub.w	r3, r0, r8
 8010d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	9304      	str	r3, [sp, #16]
 8010d52:	46a2      	mov	sl, r4
 8010d54:	e7d2      	b.n	8010cfc <_svfiprintf_r+0x9c>
 8010d56:	9b03      	ldr	r3, [sp, #12]
 8010d58:	1d19      	adds	r1, r3, #4
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	9103      	str	r1, [sp, #12]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bfbb      	ittet	lt
 8010d62:	425b      	neglt	r3, r3
 8010d64:	f042 0202 	orrlt.w	r2, r2, #2
 8010d68:	9307      	strge	r3, [sp, #28]
 8010d6a:	9307      	strlt	r3, [sp, #28]
 8010d6c:	bfb8      	it	lt
 8010d6e:	9204      	strlt	r2, [sp, #16]
 8010d70:	7823      	ldrb	r3, [r4, #0]
 8010d72:	2b2e      	cmp	r3, #46	; 0x2e
 8010d74:	d10c      	bne.n	8010d90 <_svfiprintf_r+0x130>
 8010d76:	7863      	ldrb	r3, [r4, #1]
 8010d78:	2b2a      	cmp	r3, #42	; 0x2a
 8010d7a:	d135      	bne.n	8010de8 <_svfiprintf_r+0x188>
 8010d7c:	9b03      	ldr	r3, [sp, #12]
 8010d7e:	1d1a      	adds	r2, r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	9203      	str	r2, [sp, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bfb8      	it	lt
 8010d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d8c:	3402      	adds	r4, #2
 8010d8e:	9305      	str	r3, [sp, #20]
 8010d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e5c <_svfiprintf_r+0x1fc>
 8010d94:	7821      	ldrb	r1, [r4, #0]
 8010d96:	2203      	movs	r2, #3
 8010d98:	4650      	mov	r0, sl
 8010d9a:	f7ef fa29 	bl	80001f0 <memchr>
 8010d9e:	b140      	cbz	r0, 8010db2 <_svfiprintf_r+0x152>
 8010da0:	2340      	movs	r3, #64	; 0x40
 8010da2:	eba0 000a 	sub.w	r0, r0, sl
 8010da6:	fa03 f000 	lsl.w	r0, r3, r0
 8010daa:	9b04      	ldr	r3, [sp, #16]
 8010dac:	4303      	orrs	r3, r0
 8010dae:	3401      	adds	r4, #1
 8010db0:	9304      	str	r3, [sp, #16]
 8010db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db6:	4826      	ldr	r0, [pc, #152]	; (8010e50 <_svfiprintf_r+0x1f0>)
 8010db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dbc:	2206      	movs	r2, #6
 8010dbe:	f7ef fa17 	bl	80001f0 <memchr>
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d038      	beq.n	8010e38 <_svfiprintf_r+0x1d8>
 8010dc6:	4b23      	ldr	r3, [pc, #140]	; (8010e54 <_svfiprintf_r+0x1f4>)
 8010dc8:	bb1b      	cbnz	r3, 8010e12 <_svfiprintf_r+0x1b2>
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	3307      	adds	r3, #7
 8010dce:	f023 0307 	bic.w	r3, r3, #7
 8010dd2:	3308      	adds	r3, #8
 8010dd4:	9303      	str	r3, [sp, #12]
 8010dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd8:	4433      	add	r3, r6
 8010dda:	9309      	str	r3, [sp, #36]	; 0x24
 8010ddc:	e767      	b.n	8010cae <_svfiprintf_r+0x4e>
 8010dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8010de2:	460c      	mov	r4, r1
 8010de4:	2001      	movs	r0, #1
 8010de6:	e7a5      	b.n	8010d34 <_svfiprintf_r+0xd4>
 8010de8:	2300      	movs	r3, #0
 8010dea:	3401      	adds	r4, #1
 8010dec:	9305      	str	r3, [sp, #20]
 8010dee:	4619      	mov	r1, r3
 8010df0:	f04f 0c0a 	mov.w	ip, #10
 8010df4:	4620      	mov	r0, r4
 8010df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dfa:	3a30      	subs	r2, #48	; 0x30
 8010dfc:	2a09      	cmp	r2, #9
 8010dfe:	d903      	bls.n	8010e08 <_svfiprintf_r+0x1a8>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d0c5      	beq.n	8010d90 <_svfiprintf_r+0x130>
 8010e04:	9105      	str	r1, [sp, #20]
 8010e06:	e7c3      	b.n	8010d90 <_svfiprintf_r+0x130>
 8010e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e0c:	4604      	mov	r4, r0
 8010e0e:	2301      	movs	r3, #1
 8010e10:	e7f0      	b.n	8010df4 <_svfiprintf_r+0x194>
 8010e12:	ab03      	add	r3, sp, #12
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	462a      	mov	r2, r5
 8010e18:	4b0f      	ldr	r3, [pc, #60]	; (8010e58 <_svfiprintf_r+0x1f8>)
 8010e1a:	a904      	add	r1, sp, #16
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	f7fc f929 	bl	800d074 <_printf_float>
 8010e22:	1c42      	adds	r2, r0, #1
 8010e24:	4606      	mov	r6, r0
 8010e26:	d1d6      	bne.n	8010dd6 <_svfiprintf_r+0x176>
 8010e28:	89ab      	ldrh	r3, [r5, #12]
 8010e2a:	065b      	lsls	r3, r3, #25
 8010e2c:	f53f af2c 	bmi.w	8010c88 <_svfiprintf_r+0x28>
 8010e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e32:	b01d      	add	sp, #116	; 0x74
 8010e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e38:	ab03      	add	r3, sp, #12
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	462a      	mov	r2, r5
 8010e3e:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <_svfiprintf_r+0x1f8>)
 8010e40:	a904      	add	r1, sp, #16
 8010e42:	4638      	mov	r0, r7
 8010e44:	f7fc fbba 	bl	800d5bc <_printf_i>
 8010e48:	e7eb      	b.n	8010e22 <_svfiprintf_r+0x1c2>
 8010e4a:	bf00      	nop
 8010e4c:	08011bdc 	.word	0x08011bdc
 8010e50:	08011be6 	.word	0x08011be6
 8010e54:	0800d075 	.word	0x0800d075
 8010e58:	08010ba9 	.word	0x08010ba9
 8010e5c:	08011be2 	.word	0x08011be2

08010e60 <_read_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	4d07      	ldr	r5, [pc, #28]	; (8010e80 <_read_r+0x20>)
 8010e64:	4604      	mov	r4, r0
 8010e66:	4608      	mov	r0, r1
 8010e68:	4611      	mov	r1, r2
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	602a      	str	r2, [r5, #0]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	f7f1 f9da 	bl	8002228 <_read>
 8010e74:	1c43      	adds	r3, r0, #1
 8010e76:	d102      	bne.n	8010e7e <_read_r+0x1e>
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	b103      	cbz	r3, 8010e7e <_read_r+0x1e>
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	bd38      	pop	{r3, r4, r5, pc}
 8010e80:	200059b8 	.word	0x200059b8
 8010e84:	00000000 	.word	0x00000000

08010e88 <nan>:
 8010e88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e90 <nan+0x8>
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	00000000 	.word	0x00000000
 8010e94:	7ff80000 	.word	0x7ff80000

08010e98 <strncmp>:
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	b17a      	cbz	r2, 8010ebc <strncmp+0x24>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	3901      	subs	r1, #1
 8010ea0:	1884      	adds	r4, r0, r2
 8010ea2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ea6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010eaa:	4290      	cmp	r0, r2
 8010eac:	d101      	bne.n	8010eb2 <strncmp+0x1a>
 8010eae:	42a3      	cmp	r3, r4
 8010eb0:	d101      	bne.n	8010eb6 <strncmp+0x1e>
 8010eb2:	1a80      	subs	r0, r0, r2
 8010eb4:	bd10      	pop	{r4, pc}
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d1f3      	bne.n	8010ea2 <strncmp+0xa>
 8010eba:	e7fa      	b.n	8010eb2 <strncmp+0x1a>
 8010ebc:	4610      	mov	r0, r2
 8010ebe:	e7f9      	b.n	8010eb4 <strncmp+0x1c>

08010ec0 <__ascii_wctomb>:
 8010ec0:	b149      	cbz	r1, 8010ed6 <__ascii_wctomb+0x16>
 8010ec2:	2aff      	cmp	r2, #255	; 0xff
 8010ec4:	bf85      	ittet	hi
 8010ec6:	238a      	movhi	r3, #138	; 0x8a
 8010ec8:	6003      	strhi	r3, [r0, #0]
 8010eca:	700a      	strbls	r2, [r1, #0]
 8010ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ed0:	bf98      	it	ls
 8010ed2:	2001      	movls	r0, #1
 8010ed4:	4770      	bx	lr
 8010ed6:	4608      	mov	r0, r1
 8010ed8:	4770      	bx	lr
	...

08010edc <__assert_func>:
 8010edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ede:	4614      	mov	r4, r2
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4b09      	ldr	r3, [pc, #36]	; (8010f08 <__assert_func+0x2c>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	68d8      	ldr	r0, [r3, #12]
 8010eea:	b14c      	cbz	r4, 8010f00 <__assert_func+0x24>
 8010eec:	4b07      	ldr	r3, [pc, #28]	; (8010f0c <__assert_func+0x30>)
 8010eee:	9100      	str	r1, [sp, #0]
 8010ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ef4:	4906      	ldr	r1, [pc, #24]	; (8010f10 <__assert_func+0x34>)
 8010ef6:	462b      	mov	r3, r5
 8010ef8:	f000 f80e 	bl	8010f18 <fiprintf>
 8010efc:	f000 fa80 	bl	8011400 <abort>
 8010f00:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <__assert_func+0x38>)
 8010f02:	461c      	mov	r4, r3
 8010f04:	e7f3      	b.n	8010eee <__assert_func+0x12>
 8010f06:	bf00      	nop
 8010f08:	20000150 	.word	0x20000150
 8010f0c:	08011bed 	.word	0x08011bed
 8010f10:	08011bfa 	.word	0x08011bfa
 8010f14:	08011c28 	.word	0x08011c28

08010f18 <fiprintf>:
 8010f18:	b40e      	push	{r1, r2, r3}
 8010f1a:	b503      	push	{r0, r1, lr}
 8010f1c:	4601      	mov	r1, r0
 8010f1e:	ab03      	add	r3, sp, #12
 8010f20:	4805      	ldr	r0, [pc, #20]	; (8010f38 <fiprintf+0x20>)
 8010f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f26:	6800      	ldr	r0, [r0, #0]
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	f000 f879 	bl	8011020 <_vfiprintf_r>
 8010f2e:	b002      	add	sp, #8
 8010f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f34:	b003      	add	sp, #12
 8010f36:	4770      	bx	lr
 8010f38:	20000150 	.word	0x20000150

08010f3c <memmove>:
 8010f3c:	4288      	cmp	r0, r1
 8010f3e:	b510      	push	{r4, lr}
 8010f40:	eb01 0402 	add.w	r4, r1, r2
 8010f44:	d902      	bls.n	8010f4c <memmove+0x10>
 8010f46:	4284      	cmp	r4, r0
 8010f48:	4623      	mov	r3, r4
 8010f4a:	d807      	bhi.n	8010f5c <memmove+0x20>
 8010f4c:	1e43      	subs	r3, r0, #1
 8010f4e:	42a1      	cmp	r1, r4
 8010f50:	d008      	beq.n	8010f64 <memmove+0x28>
 8010f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f5a:	e7f8      	b.n	8010f4e <memmove+0x12>
 8010f5c:	4402      	add	r2, r0
 8010f5e:	4601      	mov	r1, r0
 8010f60:	428a      	cmp	r2, r1
 8010f62:	d100      	bne.n	8010f66 <memmove+0x2a>
 8010f64:	bd10      	pop	{r4, pc}
 8010f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f6e:	e7f7      	b.n	8010f60 <memmove+0x24>

08010f70 <_realloc_r>:
 8010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f74:	4680      	mov	r8, r0
 8010f76:	4614      	mov	r4, r2
 8010f78:	460e      	mov	r6, r1
 8010f7a:	b921      	cbnz	r1, 8010f86 <_realloc_r+0x16>
 8010f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f80:	4611      	mov	r1, r2
 8010f82:	f7fb bf63 	b.w	800ce4c <_malloc_r>
 8010f86:	b92a      	cbnz	r2, 8010f94 <_realloc_r+0x24>
 8010f88:	f7ff fdc2 	bl	8010b10 <_free_r>
 8010f8c:	4625      	mov	r5, r4
 8010f8e:	4628      	mov	r0, r5
 8010f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f94:	f000 faa0 	bl	80114d8 <_malloc_usable_size_r>
 8010f98:	4284      	cmp	r4, r0
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	d802      	bhi.n	8010fa4 <_realloc_r+0x34>
 8010f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fa2:	d812      	bhi.n	8010fca <_realloc_r+0x5a>
 8010fa4:	4621      	mov	r1, r4
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f7fb ff50 	bl	800ce4c <_malloc_r>
 8010fac:	4605      	mov	r5, r0
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0ed      	beq.n	8010f8e <_realloc_r+0x1e>
 8010fb2:	42bc      	cmp	r4, r7
 8010fb4:	4622      	mov	r2, r4
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	bf28      	it	cs
 8010fba:	463a      	movcs	r2, r7
 8010fbc:	f7fb ff0f 	bl	800cdde <memcpy>
 8010fc0:	4631      	mov	r1, r6
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	f7ff fda4 	bl	8010b10 <_free_r>
 8010fc8:	e7e1      	b.n	8010f8e <_realloc_r+0x1e>
 8010fca:	4635      	mov	r5, r6
 8010fcc:	e7df      	b.n	8010f8e <_realloc_r+0x1e>

08010fce <__sfputc_r>:
 8010fce:	6893      	ldr	r3, [r2, #8]
 8010fd0:	3b01      	subs	r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	b410      	push	{r4}
 8010fd6:	6093      	str	r3, [r2, #8]
 8010fd8:	da08      	bge.n	8010fec <__sfputc_r+0x1e>
 8010fda:	6994      	ldr	r4, [r2, #24]
 8010fdc:	42a3      	cmp	r3, r4
 8010fde:	db01      	blt.n	8010fe4 <__sfputc_r+0x16>
 8010fe0:	290a      	cmp	r1, #10
 8010fe2:	d103      	bne.n	8010fec <__sfputc_r+0x1e>
 8010fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fe8:	f000 b94a 	b.w	8011280 <__swbuf_r>
 8010fec:	6813      	ldr	r3, [r2, #0]
 8010fee:	1c58      	adds	r0, r3, #1
 8010ff0:	6010      	str	r0, [r2, #0]
 8010ff2:	7019      	strb	r1, [r3, #0]
 8010ff4:	4608      	mov	r0, r1
 8010ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <__sfputs_r>:
 8010ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffe:	4606      	mov	r6, r0
 8011000:	460f      	mov	r7, r1
 8011002:	4614      	mov	r4, r2
 8011004:	18d5      	adds	r5, r2, r3
 8011006:	42ac      	cmp	r4, r5
 8011008:	d101      	bne.n	801100e <__sfputs_r+0x12>
 801100a:	2000      	movs	r0, #0
 801100c:	e007      	b.n	801101e <__sfputs_r+0x22>
 801100e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011012:	463a      	mov	r2, r7
 8011014:	4630      	mov	r0, r6
 8011016:	f7ff ffda 	bl	8010fce <__sfputc_r>
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	d1f3      	bne.n	8011006 <__sfputs_r+0xa>
 801101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011020 <_vfiprintf_r>:
 8011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	460d      	mov	r5, r1
 8011026:	b09d      	sub	sp, #116	; 0x74
 8011028:	4614      	mov	r4, r2
 801102a:	4698      	mov	r8, r3
 801102c:	4606      	mov	r6, r0
 801102e:	b118      	cbz	r0, 8011038 <_vfiprintf_r+0x18>
 8011030:	6983      	ldr	r3, [r0, #24]
 8011032:	b90b      	cbnz	r3, 8011038 <_vfiprintf_r+0x18>
 8011034:	f7fb fe0e 	bl	800cc54 <__sinit>
 8011038:	4b89      	ldr	r3, [pc, #548]	; (8011260 <_vfiprintf_r+0x240>)
 801103a:	429d      	cmp	r5, r3
 801103c:	d11b      	bne.n	8011076 <_vfiprintf_r+0x56>
 801103e:	6875      	ldr	r5, [r6, #4]
 8011040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011042:	07d9      	lsls	r1, r3, #31
 8011044:	d405      	bmi.n	8011052 <_vfiprintf_r+0x32>
 8011046:	89ab      	ldrh	r3, [r5, #12]
 8011048:	059a      	lsls	r2, r3, #22
 801104a:	d402      	bmi.n	8011052 <_vfiprintf_r+0x32>
 801104c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801104e:	f7fb fec4 	bl	800cdda <__retarget_lock_acquire_recursive>
 8011052:	89ab      	ldrh	r3, [r5, #12]
 8011054:	071b      	lsls	r3, r3, #28
 8011056:	d501      	bpl.n	801105c <_vfiprintf_r+0x3c>
 8011058:	692b      	ldr	r3, [r5, #16]
 801105a:	b9eb      	cbnz	r3, 8011098 <_vfiprintf_r+0x78>
 801105c:	4629      	mov	r1, r5
 801105e:	4630      	mov	r0, r6
 8011060:	f000 f960 	bl	8011324 <__swsetup_r>
 8011064:	b1c0      	cbz	r0, 8011098 <_vfiprintf_r+0x78>
 8011066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011068:	07dc      	lsls	r4, r3, #31
 801106a:	d50e      	bpl.n	801108a <_vfiprintf_r+0x6a>
 801106c:	f04f 30ff 	mov.w	r0, #4294967295
 8011070:	b01d      	add	sp, #116	; 0x74
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	4b7b      	ldr	r3, [pc, #492]	; (8011264 <_vfiprintf_r+0x244>)
 8011078:	429d      	cmp	r5, r3
 801107a:	d101      	bne.n	8011080 <_vfiprintf_r+0x60>
 801107c:	68b5      	ldr	r5, [r6, #8]
 801107e:	e7df      	b.n	8011040 <_vfiprintf_r+0x20>
 8011080:	4b79      	ldr	r3, [pc, #484]	; (8011268 <_vfiprintf_r+0x248>)
 8011082:	429d      	cmp	r5, r3
 8011084:	bf08      	it	eq
 8011086:	68f5      	ldreq	r5, [r6, #12]
 8011088:	e7da      	b.n	8011040 <_vfiprintf_r+0x20>
 801108a:	89ab      	ldrh	r3, [r5, #12]
 801108c:	0598      	lsls	r0, r3, #22
 801108e:	d4ed      	bmi.n	801106c <_vfiprintf_r+0x4c>
 8011090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011092:	f7fb fea3 	bl	800cddc <__retarget_lock_release_recursive>
 8011096:	e7e9      	b.n	801106c <_vfiprintf_r+0x4c>
 8011098:	2300      	movs	r3, #0
 801109a:	9309      	str	r3, [sp, #36]	; 0x24
 801109c:	2320      	movs	r3, #32
 801109e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80110a6:	2330      	movs	r3, #48	; 0x30
 80110a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801126c <_vfiprintf_r+0x24c>
 80110ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110b0:	f04f 0901 	mov.w	r9, #1
 80110b4:	4623      	mov	r3, r4
 80110b6:	469a      	mov	sl, r3
 80110b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110bc:	b10a      	cbz	r2, 80110c2 <_vfiprintf_r+0xa2>
 80110be:	2a25      	cmp	r2, #37	; 0x25
 80110c0:	d1f9      	bne.n	80110b6 <_vfiprintf_r+0x96>
 80110c2:	ebba 0b04 	subs.w	fp, sl, r4
 80110c6:	d00b      	beq.n	80110e0 <_vfiprintf_r+0xc0>
 80110c8:	465b      	mov	r3, fp
 80110ca:	4622      	mov	r2, r4
 80110cc:	4629      	mov	r1, r5
 80110ce:	4630      	mov	r0, r6
 80110d0:	f7ff ff94 	bl	8010ffc <__sfputs_r>
 80110d4:	3001      	adds	r0, #1
 80110d6:	f000 80aa 	beq.w	801122e <_vfiprintf_r+0x20e>
 80110da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110dc:	445a      	add	r2, fp
 80110de:	9209      	str	r2, [sp, #36]	; 0x24
 80110e0:	f89a 3000 	ldrb.w	r3, [sl]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 80a2 	beq.w	801122e <_vfiprintf_r+0x20e>
 80110ea:	2300      	movs	r3, #0
 80110ec:	f04f 32ff 	mov.w	r2, #4294967295
 80110f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110f4:	f10a 0a01 	add.w	sl, sl, #1
 80110f8:	9304      	str	r3, [sp, #16]
 80110fa:	9307      	str	r3, [sp, #28]
 80110fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011100:	931a      	str	r3, [sp, #104]	; 0x68
 8011102:	4654      	mov	r4, sl
 8011104:	2205      	movs	r2, #5
 8011106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801110a:	4858      	ldr	r0, [pc, #352]	; (801126c <_vfiprintf_r+0x24c>)
 801110c:	f7ef f870 	bl	80001f0 <memchr>
 8011110:	9a04      	ldr	r2, [sp, #16]
 8011112:	b9d8      	cbnz	r0, 801114c <_vfiprintf_r+0x12c>
 8011114:	06d1      	lsls	r1, r2, #27
 8011116:	bf44      	itt	mi
 8011118:	2320      	movmi	r3, #32
 801111a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801111e:	0713      	lsls	r3, r2, #28
 8011120:	bf44      	itt	mi
 8011122:	232b      	movmi	r3, #43	; 0x2b
 8011124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011128:	f89a 3000 	ldrb.w	r3, [sl]
 801112c:	2b2a      	cmp	r3, #42	; 0x2a
 801112e:	d015      	beq.n	801115c <_vfiprintf_r+0x13c>
 8011130:	9a07      	ldr	r2, [sp, #28]
 8011132:	4654      	mov	r4, sl
 8011134:	2000      	movs	r0, #0
 8011136:	f04f 0c0a 	mov.w	ip, #10
 801113a:	4621      	mov	r1, r4
 801113c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011140:	3b30      	subs	r3, #48	; 0x30
 8011142:	2b09      	cmp	r3, #9
 8011144:	d94e      	bls.n	80111e4 <_vfiprintf_r+0x1c4>
 8011146:	b1b0      	cbz	r0, 8011176 <_vfiprintf_r+0x156>
 8011148:	9207      	str	r2, [sp, #28]
 801114a:	e014      	b.n	8011176 <_vfiprintf_r+0x156>
 801114c:	eba0 0308 	sub.w	r3, r0, r8
 8011150:	fa09 f303 	lsl.w	r3, r9, r3
 8011154:	4313      	orrs	r3, r2
 8011156:	9304      	str	r3, [sp, #16]
 8011158:	46a2      	mov	sl, r4
 801115a:	e7d2      	b.n	8011102 <_vfiprintf_r+0xe2>
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	1d19      	adds	r1, r3, #4
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	9103      	str	r1, [sp, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	bfbb      	ittet	lt
 8011168:	425b      	neglt	r3, r3
 801116a:	f042 0202 	orrlt.w	r2, r2, #2
 801116e:	9307      	strge	r3, [sp, #28]
 8011170:	9307      	strlt	r3, [sp, #28]
 8011172:	bfb8      	it	lt
 8011174:	9204      	strlt	r2, [sp, #16]
 8011176:	7823      	ldrb	r3, [r4, #0]
 8011178:	2b2e      	cmp	r3, #46	; 0x2e
 801117a:	d10c      	bne.n	8011196 <_vfiprintf_r+0x176>
 801117c:	7863      	ldrb	r3, [r4, #1]
 801117e:	2b2a      	cmp	r3, #42	; 0x2a
 8011180:	d135      	bne.n	80111ee <_vfiprintf_r+0x1ce>
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	1d1a      	adds	r2, r3, #4
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	9203      	str	r2, [sp, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	bfb8      	it	lt
 801118e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011192:	3402      	adds	r4, #2
 8011194:	9305      	str	r3, [sp, #20]
 8011196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801127c <_vfiprintf_r+0x25c>
 801119a:	7821      	ldrb	r1, [r4, #0]
 801119c:	2203      	movs	r2, #3
 801119e:	4650      	mov	r0, sl
 80111a0:	f7ef f826 	bl	80001f0 <memchr>
 80111a4:	b140      	cbz	r0, 80111b8 <_vfiprintf_r+0x198>
 80111a6:	2340      	movs	r3, #64	; 0x40
 80111a8:	eba0 000a 	sub.w	r0, r0, sl
 80111ac:	fa03 f000 	lsl.w	r0, r3, r0
 80111b0:	9b04      	ldr	r3, [sp, #16]
 80111b2:	4303      	orrs	r3, r0
 80111b4:	3401      	adds	r4, #1
 80111b6:	9304      	str	r3, [sp, #16]
 80111b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111bc:	482c      	ldr	r0, [pc, #176]	; (8011270 <_vfiprintf_r+0x250>)
 80111be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111c2:	2206      	movs	r2, #6
 80111c4:	f7ef f814 	bl	80001f0 <memchr>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	d03f      	beq.n	801124c <_vfiprintf_r+0x22c>
 80111cc:	4b29      	ldr	r3, [pc, #164]	; (8011274 <_vfiprintf_r+0x254>)
 80111ce:	bb1b      	cbnz	r3, 8011218 <_vfiprintf_r+0x1f8>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	3307      	adds	r3, #7
 80111d4:	f023 0307 	bic.w	r3, r3, #7
 80111d8:	3308      	adds	r3, #8
 80111da:	9303      	str	r3, [sp, #12]
 80111dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111de:	443b      	add	r3, r7
 80111e0:	9309      	str	r3, [sp, #36]	; 0x24
 80111e2:	e767      	b.n	80110b4 <_vfiprintf_r+0x94>
 80111e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80111e8:	460c      	mov	r4, r1
 80111ea:	2001      	movs	r0, #1
 80111ec:	e7a5      	b.n	801113a <_vfiprintf_r+0x11a>
 80111ee:	2300      	movs	r3, #0
 80111f0:	3401      	adds	r4, #1
 80111f2:	9305      	str	r3, [sp, #20]
 80111f4:	4619      	mov	r1, r3
 80111f6:	f04f 0c0a 	mov.w	ip, #10
 80111fa:	4620      	mov	r0, r4
 80111fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011200:	3a30      	subs	r2, #48	; 0x30
 8011202:	2a09      	cmp	r2, #9
 8011204:	d903      	bls.n	801120e <_vfiprintf_r+0x1ee>
 8011206:	2b00      	cmp	r3, #0
 8011208:	d0c5      	beq.n	8011196 <_vfiprintf_r+0x176>
 801120a:	9105      	str	r1, [sp, #20]
 801120c:	e7c3      	b.n	8011196 <_vfiprintf_r+0x176>
 801120e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011212:	4604      	mov	r4, r0
 8011214:	2301      	movs	r3, #1
 8011216:	e7f0      	b.n	80111fa <_vfiprintf_r+0x1da>
 8011218:	ab03      	add	r3, sp, #12
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	462a      	mov	r2, r5
 801121e:	4b16      	ldr	r3, [pc, #88]	; (8011278 <_vfiprintf_r+0x258>)
 8011220:	a904      	add	r1, sp, #16
 8011222:	4630      	mov	r0, r6
 8011224:	f7fb ff26 	bl	800d074 <_printf_float>
 8011228:	4607      	mov	r7, r0
 801122a:	1c78      	adds	r0, r7, #1
 801122c:	d1d6      	bne.n	80111dc <_vfiprintf_r+0x1bc>
 801122e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011230:	07d9      	lsls	r1, r3, #31
 8011232:	d405      	bmi.n	8011240 <_vfiprintf_r+0x220>
 8011234:	89ab      	ldrh	r3, [r5, #12]
 8011236:	059a      	lsls	r2, r3, #22
 8011238:	d402      	bmi.n	8011240 <_vfiprintf_r+0x220>
 801123a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801123c:	f7fb fdce 	bl	800cddc <__retarget_lock_release_recursive>
 8011240:	89ab      	ldrh	r3, [r5, #12]
 8011242:	065b      	lsls	r3, r3, #25
 8011244:	f53f af12 	bmi.w	801106c <_vfiprintf_r+0x4c>
 8011248:	9809      	ldr	r0, [sp, #36]	; 0x24
 801124a:	e711      	b.n	8011070 <_vfiprintf_r+0x50>
 801124c:	ab03      	add	r3, sp, #12
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	462a      	mov	r2, r5
 8011252:	4b09      	ldr	r3, [pc, #36]	; (8011278 <_vfiprintf_r+0x258>)
 8011254:	a904      	add	r1, sp, #16
 8011256:	4630      	mov	r0, r6
 8011258:	f7fc f9b0 	bl	800d5bc <_printf_i>
 801125c:	e7e4      	b.n	8011228 <_vfiprintf_r+0x208>
 801125e:	bf00      	nop
 8011260:	080117a8 	.word	0x080117a8
 8011264:	080117c8 	.word	0x080117c8
 8011268:	08011788 	.word	0x08011788
 801126c:	08011bdc 	.word	0x08011bdc
 8011270:	08011be6 	.word	0x08011be6
 8011274:	0800d075 	.word	0x0800d075
 8011278:	08010ffd 	.word	0x08010ffd
 801127c:	08011be2 	.word	0x08011be2

08011280 <__swbuf_r>:
 8011280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011282:	460e      	mov	r6, r1
 8011284:	4614      	mov	r4, r2
 8011286:	4605      	mov	r5, r0
 8011288:	b118      	cbz	r0, 8011292 <__swbuf_r+0x12>
 801128a:	6983      	ldr	r3, [r0, #24]
 801128c:	b90b      	cbnz	r3, 8011292 <__swbuf_r+0x12>
 801128e:	f7fb fce1 	bl	800cc54 <__sinit>
 8011292:	4b21      	ldr	r3, [pc, #132]	; (8011318 <__swbuf_r+0x98>)
 8011294:	429c      	cmp	r4, r3
 8011296:	d12b      	bne.n	80112f0 <__swbuf_r+0x70>
 8011298:	686c      	ldr	r4, [r5, #4]
 801129a:	69a3      	ldr	r3, [r4, #24]
 801129c:	60a3      	str	r3, [r4, #8]
 801129e:	89a3      	ldrh	r3, [r4, #12]
 80112a0:	071a      	lsls	r2, r3, #28
 80112a2:	d52f      	bpl.n	8011304 <__swbuf_r+0x84>
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	b36b      	cbz	r3, 8011304 <__swbuf_r+0x84>
 80112a8:	6923      	ldr	r3, [r4, #16]
 80112aa:	6820      	ldr	r0, [r4, #0]
 80112ac:	1ac0      	subs	r0, r0, r3
 80112ae:	6963      	ldr	r3, [r4, #20]
 80112b0:	b2f6      	uxtb	r6, r6
 80112b2:	4283      	cmp	r3, r0
 80112b4:	4637      	mov	r7, r6
 80112b6:	dc04      	bgt.n	80112c2 <__swbuf_r+0x42>
 80112b8:	4621      	mov	r1, r4
 80112ba:	4628      	mov	r0, r5
 80112bc:	f7fe fb68 	bl	800f990 <_fflush_r>
 80112c0:	bb30      	cbnz	r0, 8011310 <__swbuf_r+0x90>
 80112c2:	68a3      	ldr	r3, [r4, #8]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	60a3      	str	r3, [r4, #8]
 80112c8:	6823      	ldr	r3, [r4, #0]
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	6022      	str	r2, [r4, #0]
 80112ce:	701e      	strb	r6, [r3, #0]
 80112d0:	6963      	ldr	r3, [r4, #20]
 80112d2:	3001      	adds	r0, #1
 80112d4:	4283      	cmp	r3, r0
 80112d6:	d004      	beq.n	80112e2 <__swbuf_r+0x62>
 80112d8:	89a3      	ldrh	r3, [r4, #12]
 80112da:	07db      	lsls	r3, r3, #31
 80112dc:	d506      	bpl.n	80112ec <__swbuf_r+0x6c>
 80112de:	2e0a      	cmp	r6, #10
 80112e0:	d104      	bne.n	80112ec <__swbuf_r+0x6c>
 80112e2:	4621      	mov	r1, r4
 80112e4:	4628      	mov	r0, r5
 80112e6:	f7fe fb53 	bl	800f990 <_fflush_r>
 80112ea:	b988      	cbnz	r0, 8011310 <__swbuf_r+0x90>
 80112ec:	4638      	mov	r0, r7
 80112ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f0:	4b0a      	ldr	r3, [pc, #40]	; (801131c <__swbuf_r+0x9c>)
 80112f2:	429c      	cmp	r4, r3
 80112f4:	d101      	bne.n	80112fa <__swbuf_r+0x7a>
 80112f6:	68ac      	ldr	r4, [r5, #8]
 80112f8:	e7cf      	b.n	801129a <__swbuf_r+0x1a>
 80112fa:	4b09      	ldr	r3, [pc, #36]	; (8011320 <__swbuf_r+0xa0>)
 80112fc:	429c      	cmp	r4, r3
 80112fe:	bf08      	it	eq
 8011300:	68ec      	ldreq	r4, [r5, #12]
 8011302:	e7ca      	b.n	801129a <__swbuf_r+0x1a>
 8011304:	4621      	mov	r1, r4
 8011306:	4628      	mov	r0, r5
 8011308:	f000 f80c 	bl	8011324 <__swsetup_r>
 801130c:	2800      	cmp	r0, #0
 801130e:	d0cb      	beq.n	80112a8 <__swbuf_r+0x28>
 8011310:	f04f 37ff 	mov.w	r7, #4294967295
 8011314:	e7ea      	b.n	80112ec <__swbuf_r+0x6c>
 8011316:	bf00      	nop
 8011318:	080117a8 	.word	0x080117a8
 801131c:	080117c8 	.word	0x080117c8
 8011320:	08011788 	.word	0x08011788

08011324 <__swsetup_r>:
 8011324:	4b32      	ldr	r3, [pc, #200]	; (80113f0 <__swsetup_r+0xcc>)
 8011326:	b570      	push	{r4, r5, r6, lr}
 8011328:	681d      	ldr	r5, [r3, #0]
 801132a:	4606      	mov	r6, r0
 801132c:	460c      	mov	r4, r1
 801132e:	b125      	cbz	r5, 801133a <__swsetup_r+0x16>
 8011330:	69ab      	ldr	r3, [r5, #24]
 8011332:	b913      	cbnz	r3, 801133a <__swsetup_r+0x16>
 8011334:	4628      	mov	r0, r5
 8011336:	f7fb fc8d 	bl	800cc54 <__sinit>
 801133a:	4b2e      	ldr	r3, [pc, #184]	; (80113f4 <__swsetup_r+0xd0>)
 801133c:	429c      	cmp	r4, r3
 801133e:	d10f      	bne.n	8011360 <__swsetup_r+0x3c>
 8011340:	686c      	ldr	r4, [r5, #4]
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011348:	0719      	lsls	r1, r3, #28
 801134a:	d42c      	bmi.n	80113a6 <__swsetup_r+0x82>
 801134c:	06dd      	lsls	r5, r3, #27
 801134e:	d411      	bmi.n	8011374 <__swsetup_r+0x50>
 8011350:	2309      	movs	r3, #9
 8011352:	6033      	str	r3, [r6, #0]
 8011354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011358:	81a3      	strh	r3, [r4, #12]
 801135a:	f04f 30ff 	mov.w	r0, #4294967295
 801135e:	e03e      	b.n	80113de <__swsetup_r+0xba>
 8011360:	4b25      	ldr	r3, [pc, #148]	; (80113f8 <__swsetup_r+0xd4>)
 8011362:	429c      	cmp	r4, r3
 8011364:	d101      	bne.n	801136a <__swsetup_r+0x46>
 8011366:	68ac      	ldr	r4, [r5, #8]
 8011368:	e7eb      	b.n	8011342 <__swsetup_r+0x1e>
 801136a:	4b24      	ldr	r3, [pc, #144]	; (80113fc <__swsetup_r+0xd8>)
 801136c:	429c      	cmp	r4, r3
 801136e:	bf08      	it	eq
 8011370:	68ec      	ldreq	r4, [r5, #12]
 8011372:	e7e6      	b.n	8011342 <__swsetup_r+0x1e>
 8011374:	0758      	lsls	r0, r3, #29
 8011376:	d512      	bpl.n	801139e <__swsetup_r+0x7a>
 8011378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801137a:	b141      	cbz	r1, 801138e <__swsetup_r+0x6a>
 801137c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011380:	4299      	cmp	r1, r3
 8011382:	d002      	beq.n	801138a <__swsetup_r+0x66>
 8011384:	4630      	mov	r0, r6
 8011386:	f7ff fbc3 	bl	8010b10 <_free_r>
 801138a:	2300      	movs	r3, #0
 801138c:	6363      	str	r3, [r4, #52]	; 0x34
 801138e:	89a3      	ldrh	r3, [r4, #12]
 8011390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011394:	81a3      	strh	r3, [r4, #12]
 8011396:	2300      	movs	r3, #0
 8011398:	6063      	str	r3, [r4, #4]
 801139a:	6923      	ldr	r3, [r4, #16]
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	89a3      	ldrh	r3, [r4, #12]
 80113a0:	f043 0308 	orr.w	r3, r3, #8
 80113a4:	81a3      	strh	r3, [r4, #12]
 80113a6:	6923      	ldr	r3, [r4, #16]
 80113a8:	b94b      	cbnz	r3, 80113be <__swsetup_r+0x9a>
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113b4:	d003      	beq.n	80113be <__swsetup_r+0x9a>
 80113b6:	4621      	mov	r1, r4
 80113b8:	4630      	mov	r0, r6
 80113ba:	f000 f84d 	bl	8011458 <__smakebuf_r>
 80113be:	89a0      	ldrh	r0, [r4, #12]
 80113c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113c4:	f010 0301 	ands.w	r3, r0, #1
 80113c8:	d00a      	beq.n	80113e0 <__swsetup_r+0xbc>
 80113ca:	2300      	movs	r3, #0
 80113cc:	60a3      	str	r3, [r4, #8]
 80113ce:	6963      	ldr	r3, [r4, #20]
 80113d0:	425b      	negs	r3, r3
 80113d2:	61a3      	str	r3, [r4, #24]
 80113d4:	6923      	ldr	r3, [r4, #16]
 80113d6:	b943      	cbnz	r3, 80113ea <__swsetup_r+0xc6>
 80113d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113dc:	d1ba      	bne.n	8011354 <__swsetup_r+0x30>
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	0781      	lsls	r1, r0, #30
 80113e2:	bf58      	it	pl
 80113e4:	6963      	ldrpl	r3, [r4, #20]
 80113e6:	60a3      	str	r3, [r4, #8]
 80113e8:	e7f4      	b.n	80113d4 <__swsetup_r+0xb0>
 80113ea:	2000      	movs	r0, #0
 80113ec:	e7f7      	b.n	80113de <__swsetup_r+0xba>
 80113ee:	bf00      	nop
 80113f0:	20000150 	.word	0x20000150
 80113f4:	080117a8 	.word	0x080117a8
 80113f8:	080117c8 	.word	0x080117c8
 80113fc:	08011788 	.word	0x08011788

08011400 <abort>:
 8011400:	b508      	push	{r3, lr}
 8011402:	2006      	movs	r0, #6
 8011404:	f000 f898 	bl	8011538 <raise>
 8011408:	2001      	movs	r0, #1
 801140a:	f7f0 ff03 	bl	8002214 <_exit>

0801140e <__swhatbuf_r>:
 801140e:	b570      	push	{r4, r5, r6, lr}
 8011410:	460e      	mov	r6, r1
 8011412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011416:	2900      	cmp	r1, #0
 8011418:	b096      	sub	sp, #88	; 0x58
 801141a:	4614      	mov	r4, r2
 801141c:	461d      	mov	r5, r3
 801141e:	da08      	bge.n	8011432 <__swhatbuf_r+0x24>
 8011420:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011424:	2200      	movs	r2, #0
 8011426:	602a      	str	r2, [r5, #0]
 8011428:	061a      	lsls	r2, r3, #24
 801142a:	d410      	bmi.n	801144e <__swhatbuf_r+0x40>
 801142c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011430:	e00e      	b.n	8011450 <__swhatbuf_r+0x42>
 8011432:	466a      	mov	r2, sp
 8011434:	f000 f89c 	bl	8011570 <_fstat_r>
 8011438:	2800      	cmp	r0, #0
 801143a:	dbf1      	blt.n	8011420 <__swhatbuf_r+0x12>
 801143c:	9a01      	ldr	r2, [sp, #4]
 801143e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011446:	425a      	negs	r2, r3
 8011448:	415a      	adcs	r2, r3
 801144a:	602a      	str	r2, [r5, #0]
 801144c:	e7ee      	b.n	801142c <__swhatbuf_r+0x1e>
 801144e:	2340      	movs	r3, #64	; 0x40
 8011450:	2000      	movs	r0, #0
 8011452:	6023      	str	r3, [r4, #0]
 8011454:	b016      	add	sp, #88	; 0x58
 8011456:	bd70      	pop	{r4, r5, r6, pc}

08011458 <__smakebuf_r>:
 8011458:	898b      	ldrh	r3, [r1, #12]
 801145a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801145c:	079d      	lsls	r5, r3, #30
 801145e:	4606      	mov	r6, r0
 8011460:	460c      	mov	r4, r1
 8011462:	d507      	bpl.n	8011474 <__smakebuf_r+0x1c>
 8011464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	6123      	str	r3, [r4, #16]
 801146c:	2301      	movs	r3, #1
 801146e:	6163      	str	r3, [r4, #20]
 8011470:	b002      	add	sp, #8
 8011472:	bd70      	pop	{r4, r5, r6, pc}
 8011474:	ab01      	add	r3, sp, #4
 8011476:	466a      	mov	r2, sp
 8011478:	f7ff ffc9 	bl	801140e <__swhatbuf_r>
 801147c:	9900      	ldr	r1, [sp, #0]
 801147e:	4605      	mov	r5, r0
 8011480:	4630      	mov	r0, r6
 8011482:	f7fb fce3 	bl	800ce4c <_malloc_r>
 8011486:	b948      	cbnz	r0, 801149c <__smakebuf_r+0x44>
 8011488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801148c:	059a      	lsls	r2, r3, #22
 801148e:	d4ef      	bmi.n	8011470 <__smakebuf_r+0x18>
 8011490:	f023 0303 	bic.w	r3, r3, #3
 8011494:	f043 0302 	orr.w	r3, r3, #2
 8011498:	81a3      	strh	r3, [r4, #12]
 801149a:	e7e3      	b.n	8011464 <__smakebuf_r+0xc>
 801149c:	4b0d      	ldr	r3, [pc, #52]	; (80114d4 <__smakebuf_r+0x7c>)
 801149e:	62b3      	str	r3, [r6, #40]	; 0x28
 80114a0:	89a3      	ldrh	r3, [r4, #12]
 80114a2:	6020      	str	r0, [r4, #0]
 80114a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114a8:	81a3      	strh	r3, [r4, #12]
 80114aa:	9b00      	ldr	r3, [sp, #0]
 80114ac:	6163      	str	r3, [r4, #20]
 80114ae:	9b01      	ldr	r3, [sp, #4]
 80114b0:	6120      	str	r0, [r4, #16]
 80114b2:	b15b      	cbz	r3, 80114cc <__smakebuf_r+0x74>
 80114b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114b8:	4630      	mov	r0, r6
 80114ba:	f000 f86b 	bl	8011594 <_isatty_r>
 80114be:	b128      	cbz	r0, 80114cc <__smakebuf_r+0x74>
 80114c0:	89a3      	ldrh	r3, [r4, #12]
 80114c2:	f023 0303 	bic.w	r3, r3, #3
 80114c6:	f043 0301 	orr.w	r3, r3, #1
 80114ca:	81a3      	strh	r3, [r4, #12]
 80114cc:	89a0      	ldrh	r0, [r4, #12]
 80114ce:	4305      	orrs	r5, r0
 80114d0:	81a5      	strh	r5, [r4, #12]
 80114d2:	e7cd      	b.n	8011470 <__smakebuf_r+0x18>
 80114d4:	0800cbed 	.word	0x0800cbed

080114d8 <_malloc_usable_size_r>:
 80114d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114dc:	1f18      	subs	r0, r3, #4
 80114de:	2b00      	cmp	r3, #0
 80114e0:	bfbc      	itt	lt
 80114e2:	580b      	ldrlt	r3, [r1, r0]
 80114e4:	18c0      	addlt	r0, r0, r3
 80114e6:	4770      	bx	lr

080114e8 <_raise_r>:
 80114e8:	291f      	cmp	r1, #31
 80114ea:	b538      	push	{r3, r4, r5, lr}
 80114ec:	4604      	mov	r4, r0
 80114ee:	460d      	mov	r5, r1
 80114f0:	d904      	bls.n	80114fc <_raise_r+0x14>
 80114f2:	2316      	movs	r3, #22
 80114f4:	6003      	str	r3, [r0, #0]
 80114f6:	f04f 30ff 	mov.w	r0, #4294967295
 80114fa:	bd38      	pop	{r3, r4, r5, pc}
 80114fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114fe:	b112      	cbz	r2, 8011506 <_raise_r+0x1e>
 8011500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011504:	b94b      	cbnz	r3, 801151a <_raise_r+0x32>
 8011506:	4620      	mov	r0, r4
 8011508:	f000 f830 	bl	801156c <_getpid_r>
 801150c:	462a      	mov	r2, r5
 801150e:	4601      	mov	r1, r0
 8011510:	4620      	mov	r0, r4
 8011512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011516:	f000 b817 	b.w	8011548 <_kill_r>
 801151a:	2b01      	cmp	r3, #1
 801151c:	d00a      	beq.n	8011534 <_raise_r+0x4c>
 801151e:	1c59      	adds	r1, r3, #1
 8011520:	d103      	bne.n	801152a <_raise_r+0x42>
 8011522:	2316      	movs	r3, #22
 8011524:	6003      	str	r3, [r0, #0]
 8011526:	2001      	movs	r0, #1
 8011528:	e7e7      	b.n	80114fa <_raise_r+0x12>
 801152a:	2400      	movs	r4, #0
 801152c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011530:	4628      	mov	r0, r5
 8011532:	4798      	blx	r3
 8011534:	2000      	movs	r0, #0
 8011536:	e7e0      	b.n	80114fa <_raise_r+0x12>

08011538 <raise>:
 8011538:	4b02      	ldr	r3, [pc, #8]	; (8011544 <raise+0xc>)
 801153a:	4601      	mov	r1, r0
 801153c:	6818      	ldr	r0, [r3, #0]
 801153e:	f7ff bfd3 	b.w	80114e8 <_raise_r>
 8011542:	bf00      	nop
 8011544:	20000150 	.word	0x20000150

08011548 <_kill_r>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	4d07      	ldr	r5, [pc, #28]	; (8011568 <_kill_r+0x20>)
 801154c:	2300      	movs	r3, #0
 801154e:	4604      	mov	r4, r0
 8011550:	4608      	mov	r0, r1
 8011552:	4611      	mov	r1, r2
 8011554:	602b      	str	r3, [r5, #0]
 8011556:	f7f0 fe4d 	bl	80021f4 <_kill>
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	d102      	bne.n	8011564 <_kill_r+0x1c>
 801155e:	682b      	ldr	r3, [r5, #0]
 8011560:	b103      	cbz	r3, 8011564 <_kill_r+0x1c>
 8011562:	6023      	str	r3, [r4, #0]
 8011564:	bd38      	pop	{r3, r4, r5, pc}
 8011566:	bf00      	nop
 8011568:	200059b8 	.word	0x200059b8

0801156c <_getpid_r>:
 801156c:	f7f0 be3a 	b.w	80021e4 <_getpid>

08011570 <_fstat_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d07      	ldr	r5, [pc, #28]	; (8011590 <_fstat_r+0x20>)
 8011574:	2300      	movs	r3, #0
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	4611      	mov	r1, r2
 801157c:	602b      	str	r3, [r5, #0]
 801157e:	f7f0 fe98 	bl	80022b2 <_fstat>
 8011582:	1c43      	adds	r3, r0, #1
 8011584:	d102      	bne.n	801158c <_fstat_r+0x1c>
 8011586:	682b      	ldr	r3, [r5, #0]
 8011588:	b103      	cbz	r3, 801158c <_fstat_r+0x1c>
 801158a:	6023      	str	r3, [r4, #0]
 801158c:	bd38      	pop	{r3, r4, r5, pc}
 801158e:	bf00      	nop
 8011590:	200059b8 	.word	0x200059b8

08011594 <_isatty_r>:
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	4d06      	ldr	r5, [pc, #24]	; (80115b0 <_isatty_r+0x1c>)
 8011598:	2300      	movs	r3, #0
 801159a:	4604      	mov	r4, r0
 801159c:	4608      	mov	r0, r1
 801159e:	602b      	str	r3, [r5, #0]
 80115a0:	f7f0 fe97 	bl	80022d2 <_isatty>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	d102      	bne.n	80115ae <_isatty_r+0x1a>
 80115a8:	682b      	ldr	r3, [r5, #0]
 80115aa:	b103      	cbz	r3, 80115ae <_isatty_r+0x1a>
 80115ac:	6023      	str	r3, [r4, #0]
 80115ae:	bd38      	pop	{r3, r4, r5, pc}
 80115b0:	200059b8 	.word	0x200059b8

080115b4 <_init>:
 80115b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b6:	bf00      	nop
 80115b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ba:	bc08      	pop	{r3}
 80115bc:	469e      	mov	lr, r3
 80115be:	4770      	bx	lr

080115c0 <_fini>:
 80115c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c2:	bf00      	nop
 80115c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c6:	bc08      	pop	{r3}
 80115c8:	469e      	mov	lr, r3
 80115ca:	4770      	bx	lr
