
F411_chunithm_15.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f4  0800a7f4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7fc  0800a7fc  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006634  20000100  0800a904  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006734  0800a904  00026734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f1  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004586  00000000  00000000  0003c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000408a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00041f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b02c  00000000  00000000  000433a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0cd  00000000  00000000  0005e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094124  00000000  00000000  0007a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e5c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  0010e618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a734 	.word	0x0800a734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	0800a734 	.word	0x0800a734

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <MX_FREERTOS_Init+0x18>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_FREERTOS_Init+0x1c>)
 80004ee:	f006 fef3 	bl	80072d8 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <MX_FREERTOS_Init+0x20>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	0800a7b8 	.word	0x0800a7b8
 8000500:	08000509 	.word	0x08000509
 8000504:	2000011c 	.word	0x2000011c

08000508 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000510:	f009 fbec 	bl	8009cec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f006 ff71 	bl	80073fc <osDelay>
 800051a:	e7fb      	b.n	8000514 <StartDefaultTask+0xc>

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7;
 80005a2:	f248 0380 	movw	r3, #32896	; 0x8080
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005ba:	f000 fc37 	bl	8000e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2105      	movs	r1, #5
 80005c2:	2017      	movs	r0, #23
 80005c4:	f000 fbfb 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005c8:	2017      	movs	r0, #23
 80005ca:	f000 fc14 	bl	8000df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2105      	movs	r1, #5
 80005d2:	2028      	movs	r0, #40	; 0x28
 80005d4:	f000 fbf3 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d8:	2028      	movs	r0, #40	; 0x28
 80005da:	f000 fc0c 	bl	8000df6 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020400 	.word	0x40020400

080005f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f000 fd99 	bl	8001164 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f9a6 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000120 	.word	0x20000120
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C3_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_I2C3_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C3_Init+0x50>)
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_I2C3_Init+0x58>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C3_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2C3_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_I2C3_Init+0x50>)
 800066a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_I2C3_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2C3_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_I2C3_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2C3_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_I2C3_Init+0x50>)
 800068a:	f000 fd6b 	bl	8001164 <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f978 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000174 	.word	0x20000174
 80006a0:	40005c00 	.word	0x40005c00
 80006a4:	000186a0 	.word	0x000186a0

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a42      	ldr	r2, [pc, #264]	; (80007d0 <HAL_I2C_MspInit+0x128>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d12d      	bne.n	8000726 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a40      	ldr	r2, [pc, #256]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ec:	2312      	movs	r3, #18
 80006ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f8:	2304      	movs	r3, #4
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4835      	ldr	r0, [pc, #212]	; (80007d8 <HAL_I2C_MspInit+0x130>)
 8000704:	f000 fb92 	bl	8000e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000724:	e04f      	b.n	80007c6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <HAL_I2C_MspInit+0x134>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d14a      	bne.n	80007c6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076e:	2312      	movs	r3, #18
 8000770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000772:	2301      	movs	r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800077a:	2304      	movs	r3, #4
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <HAL_I2C_MspInit+0x138>)
 8000786:	f000 fb51 	bl	8000e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800078a:	2310      	movs	r3, #16
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078e:	2312      	movs	r3, #18
 8000790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800079a:	2309      	movs	r3, #9
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <HAL_I2C_MspInit+0x130>)
 80007a6:	f000 fb41 	bl	8000e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80007b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_I2C_MspInit+0x12c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40005400 	.word	0x40005400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7)
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	2b80      	cmp	r3, #128	; 0x80
 80007f2:	d115      	bne.n	8000820 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		if (HAL_I2C_Master_Receive(&hi2c1, 0xCA,touchdata1,2,100) == HAL_OK)
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2302      	movs	r3, #2
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <HAL_GPIO_EXTI_Callback+0x78>)
 80007fc:	21ca      	movs	r1, #202	; 0xca
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000800:	f000 fdf4 	bl	80013ec <HAL_I2C_Master_Receive>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <HAL_GPIO_EXTI_Callback+0x2e>
		//(HAL_I2C_Master_Transmit(&hi2c1,0x5B,1,1,100) == HAL_OK)
		{
			//usb_buffer[0] = touchdata1[0];
			usb_buffer[0] = 1;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_GPIO_EXTI_Callback+0x80>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e002      	b.n	8000818 <HAL_GPIO_EXTI_Callback+0x34>

		}
		else
		{
			usb_buffer[0] = 2;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_GPIO_EXTI_Callback+0x80>)
 8000814:	2202      	movs	r2, #2
 8000816:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_GPIO_EXTI_Callback+0x84>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	615a      	str	r2, [r3, #20]
		{
			usb_buffer[1] = 2;
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
	}
}
 800081e:	e019      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == GPIO_PIN_15)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000826:	d115      	bne.n	8000854 <HAL_GPIO_EXTI_Callback+0x70>
		if (HAL_I2C_Master_Receive(&hi2c3, 0xCA,touchdata2,2,100) == HAL_OK)
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_GPIO_EXTI_Callback+0x88>)
 8000830:	21ca      	movs	r1, #202	; 0xca
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000834:	f000 fdda 	bl	80013ec <HAL_I2C_Master_Receive>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d103      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0x62>
			usb_buffer[1] = 1;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_GPIO_EXTI_Callback+0x80>)
 8000840:	2201      	movs	r2, #1
 8000842:	705a      	strb	r2, [r3, #1]
 8000844:	e002      	b.n	800084c <HAL_GPIO_EXTI_Callback+0x68>
			usb_buffer[1] = 2;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <HAL_GPIO_EXTI_Callback+0x80>)
 8000848:	2202      	movs	r2, #2
 800084a:	705a      	strb	r2, [r3, #1]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_GPIO_EXTI_Callback+0x84>)
 800084e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000852:	615a      	str	r2, [r3, #20]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001c8 	.word	0x200001c8
 8000860:	20000120 	.word	0x20000120
 8000864:	200001d0 	.word	0x200001d0
 8000868:	40013c00 	.word	0x40013c00
 800086c:	200001cc 	.word	0x200001cc
 8000870:	20000174 	.word	0x20000174

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 f930 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f81c 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f7ff fe4c 	bl	800051c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000884:	f7ff feb4 	bl	80005f0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000888:	f7ff fee0 	bl	800064c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800088c:	f006 fcda 	bl	8007244 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000890:	f7ff fe28 	bl	80004e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000894:	f006 fcfa 	bl	800728c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS,usb_buffer,2);
 8000898:	2202      	movs	r2, #2
 800089a:	4905      	ldr	r1, [pc, #20]	; (80008b0 <main+0x3c>)
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <main+0x40>)
 800089e:	f005 f8ef 	bl	8005a80 <USBD_CDC_SetTxBuffer>
	  USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <main+0x40>)
 80008a4:	f005 f92c 	bl	8005b00 <USBD_CDC_TransmitPacket>
	  HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 f989 	bl	8000bc0 <HAL_Delay>
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS,usb_buffer,2);
 80008ae:	e7f3      	b.n	8000898 <main+0x24>
 80008b0:	200001d0 	.word	0x200001d0
 80008b4:	20004b2c 	.word	0x20004b2c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 ff2c 	bl	800a724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <SystemClock_Config+0xc8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a26      	ldr	r2, [pc, #152]	; (8000980 <SystemClock_Config+0xc8>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <SystemClock_Config+0xc8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <SystemClock_Config+0xcc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a20      	ldr	r2, [pc, #128]	; (8000984 <SystemClock_Config+0xcc>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <SystemClock_Config+0xcc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000928:	2319      	movs	r3, #25
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800092c:	23c0      	movs	r3, #192	; 0xc0
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fbf3 	bl	8003128 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000948:	f000 f81e 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2103      	movs	r1, #3
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fe55 	bl	8003618 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000974:	f000 f808 	bl	8000988 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3750      	adds	r7, #80	; 0x50
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 f9f0 	bl	8000dbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8b0 	bl	8000b80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a20:	f008 f8fa 	bl	8008c18 <xTaskGetSchedulerState>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d001      	beq.n	8000a2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a2a:	f008 fee5 	bl	80097f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	f000 fb7c 	bl	8001134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a48:	f000 fb74 	bl	8001134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <OTG_FS_IRQHandler+0x10>)
 8000a56:	f001 fa39 	bl	8001ecc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20006008 	.word	0x20006008

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f009 fe03 	bl	800a6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fedb 	bl	8000874 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000acc:	0800a804 	.word	0x0800a804
  ldr r2, =_sbss
 8000ad0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000ad4:	20006734 	.word	0x20006734

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f94f 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff ff40 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f967 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f92f 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200001d4 	.word	0x200001d4

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001d4 	.word	0x200001d4

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff3e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff31 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e159      	b.n	80010fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8148 	bne.w	80010f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a2 	beq.w	80010f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2f0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x202>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1fe>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1fa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2fc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_GPIO_Init+0x300>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1f2>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800101e:	2307      	movs	r3, #7
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x304>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a2f      	ldr	r2, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_GPIO_Init+0x304>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a24      	ldr	r2, [pc, #144]	; (8001130 <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f aea2 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb46 	bl	80007e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e12b      	b.n	80013ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa8c 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011c8:	f002 fbde 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 80011cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a81      	ldr	r2, [pc, #516]	; (80013d8 <HAL_I2C_Init+0x274>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d807      	bhi.n	80011e8 <HAL_I2C_Init+0x84>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a80      	ldr	r2, [pc, #512]	; (80013dc <HAL_I2C_Init+0x278>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	e006      	b.n	80011f6 <HAL_I2C_Init+0x92>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a7d      	ldr	r2, [pc, #500]	; (80013e0 <HAL_I2C_Init+0x27c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0e7      	b.n	80013ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4a78      	ldr	r2, [pc, #480]	; (80013e4 <HAL_I2C_Init+0x280>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9b      	lsrs	r3, r3, #18
 8001208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <HAL_I2C_Init+0x274>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d802      	bhi.n	8001238 <HAL_I2C_Init+0xd4>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3301      	adds	r3, #1
 8001236:	e009      	b.n	800124c <HAL_I2C_Init+0xe8>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_I2C_Init+0x284>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	3301      	adds	r3, #1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800125e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	495c      	ldr	r1, [pc, #368]	; (80013d8 <HAL_I2C_Init+0x274>)
 8001268:	428b      	cmp	r3, r1
 800126a:	d819      	bhi.n	80012a0 <HAL_I2C_Init+0x13c>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e59      	subs	r1, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fbb1 f3f3 	udiv	r3, r1, r3
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001280:	400b      	ands	r3, r1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <HAL_I2C_Init+0x138>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1e59      	subs	r1, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fbb1 f3f3 	udiv	r3, r1, r3
 8001294:	3301      	adds	r3, #1
 8001296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129a:	e051      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 800129c:	2304      	movs	r3, #4
 800129e:	e04f      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_I2C_Init+0x168>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1e58      	subs	r0, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	e012      	b.n	80012f2 <HAL_I2C_Init+0x18e>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	0099      	lsls	r1, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_Init+0x196>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e022      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10e      	bne.n	8001320 <HAL_I2C_Init+0x1bc>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1e58      	subs	r0, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	440b      	add	r3, r1
 8001310:	fbb0 f3f3 	udiv	r3, r0, r3
 8001314:	3301      	adds	r3, #1
 8001316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	e00f      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e58      	subs	r0, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	0099      	lsls	r1, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	fbb0 f3f3 	udiv	r3, r0, r3
 8001336:	3301      	adds	r3, #1
 8001338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	6809      	ldr	r1, [r1, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800136e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6911      	ldr	r1, [r2, #16]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	430b      	orrs	r3, r1
 8001382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	000186a0 	.word	0x000186a0
 80013dc:	001e847f 	.word	0x001e847f
 80013e0:	003d08ff 	.word	0x003d08ff
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	461a      	mov	r2, r3
 80013f8:	460b      	mov	r3, r1
 80013fa:	817b      	strh	r3, [r7, #10]
 80013fc:	4613      	mov	r3, r2
 80013fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fbd2 	bl	8000ba8 <HAL_GetTick>
 8001404:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b20      	cmp	r3, #32
 8001410:	f040 820b 	bne.w	800182a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2319      	movs	r3, #25
 800141a:	2201      	movs	r2, #1
 800141c:	497c      	ldr	r1, [pc, #496]	; (8001610 <HAL_I2C_Master_Receive+0x224>)
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fad8 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800142a:	2302      	movs	r3, #2
 800142c:	e1fe      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_I2C_Master_Receive+0x50>
 8001438:	2302      	movs	r3, #2
 800143a:	e1f7      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d007      	beq.n	8001462 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2222      	movs	r2, #34	; 0x22
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2210      	movs	r2, #16
 800147e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	893a      	ldrh	r2, [r7, #8]
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <HAL_I2C_Master_Receive+0x228>)
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014a4:	8979      	ldrh	r1, [r7, #10]
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f9c4 	bl	8001838 <I2C_MasterRequestRead>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1b8      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d113      	bne.n	80014ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	623b      	str	r3, [r7, #32]
 80014d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e18c      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d11b      	bne.n	800152a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e16c      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152e:	2b02      	cmp	r3, #2
 8001530:	d11b      	bne.n	800156a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001540:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	e14c      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001590:	e138      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001596:	2b03      	cmp	r3, #3
 8001598:	f200 80f1 	bhi.w	800177e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d123      	bne.n	80015ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fae9 	bl	8001b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e139      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ea:	e10b      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d14e      	bne.n	8001692 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	2200      	movs	r2, #0
 80015fc:	4906      	ldr	r1, [pc, #24]	; (8001618 <HAL_I2C_Master_Receive+0x22c>)
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f9e8 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e10e      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
 800160e:	bf00      	nop
 8001610:	00100002 	.word	0x00100002
 8001614:	ffff0000 	.word	0xffff0000
 8001618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001690:	e0b8      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001698:	2200      	movs	r2, #0
 800169a:	4966      	ldr	r1, [pc, #408]	; (8001834 <HAL_I2C_Master_Receive+0x448>)
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f999 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0bf      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	2200      	movs	r2, #0
 80016f6:	494f      	ldr	r1, [pc, #316]	; (8001834 <HAL_I2C_Master_Receive+0x448>)
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f96b 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e091      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800177c:	e042      	b.n	8001804 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f9fc 	bl	8001b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e04c      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d118      	bne.n	8001804 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f aec2 	bne.w	8001592 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
  }
}
 800182c:	4618      	mov	r0, r3
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	00010004 	.word	0x00010004

08001838 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	460b      	mov	r3, r1
 8001846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800185c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d006      	beq.n	8001872 <I2C_MasterRequestRead+0x3a>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d003      	beq.n	8001872 <I2C_MasterRequestRead+0x3a>
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001870:	d108      	bne.n	8001884 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00b      	b.n	800189c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	2b11      	cmp	r3, #17
 800188a:	d107      	bne.n	800189c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f893 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c2:	d103      	bne.n	80018cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e079      	b.n	80019c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d8:	d108      	bne.n	80018ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018da:	897b      	ldrh	r3, [r7, #10]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	e05f      	b.n	80019ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018ec:	897b      	ldrh	r3, [r7, #10]
 80018ee:	11db      	asrs	r3, r3, #7
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 0306 	and.w	r3, r3, #6
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f063 030f 	orn	r3, r3, #15
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4930      	ldr	r1, [pc, #192]	; (80019cc <I2C_MasterRequestRead+0x194>)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f8b9 	bl	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e054      	b.n	80019c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <I2C_MasterRequestRead+0x198>)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f8a9 	bl	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e044      	b.n	80019c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800195e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f831 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00d      	beq.n	8001994 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001986:	d103      	bne.n	8001990 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e017      	b.n	80019c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	11db      	asrs	r3, r3, #7
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0306 	and.w	r3, r3, #6
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f063 030e 	orn	r3, r3, #14
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <I2C_MasterRequestRead+0x198>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f865 	bl	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	00010008 	.word	0x00010008
 80019d0:	00010002 	.word	0x00010002

080019d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e4:	e025      	b.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d021      	beq.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ee:	f7ff f8db 	bl	8000ba8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d302      	bcc.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d116      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e023      	b.n	8001a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	e00c      	b.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4013      	ands	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d0b6      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a90:	e051      	b.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa0:	d123      	bne.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e046      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d021      	beq.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff f859 	bl	8000ba8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d116      	bne.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e020      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10c      	bne.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	e00b      	b.n	8001b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d18d      	bne.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b8c:	e042      	b.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d119      	bne.n	8001bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0210 	mvn.w	r2, #16
 8001ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e029      	b.n	8001c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7fe ffea 	bl	8000ba8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d1b5      	bne.n	8001b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	b08f      	sub	sp, #60	; 0x3c
 8001c30:	af0a      	add	r7, sp, #40	; 0x28
 8001c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e10f      	b.n	8001e5e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f008 fa27 	bl	800a0ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 ffac 	bl	8003bda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	687e      	ldr	r6, [r7, #4]
 8001c8a:	466d      	mov	r5, sp
 8001c8c:	f106 0410 	add.w	r4, r6, #16
 8001c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca0:	1d33      	adds	r3, r6, #4
 8001ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca4:	6838      	ldr	r0, [r7, #0]
 8001ca6:	f001 fe83 	bl	80039b0 <USB_CoreInit>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff9a 	bl	8003bfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e04a      	b.n	8001d64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	333d      	adds	r3, #61	; 0x3d
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	333c      	adds	r3, #60	; 0x3c
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3344      	adds	r3, #68	; 0x44
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3340      	adds	r3, #64	; 0x40
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	334c      	adds	r3, #76	; 0x4c
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	3354      	adds	r3, #84	; 0x54
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	3301      	adds	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3af      	bcc.n	8001cce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	e044      	b.n	8001dfe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3b5      	bcc.n	8001d74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	687e      	ldr	r6, [r7, #4]
 8001e10:	466d      	mov	r5, sp
 8001e12:	f106 0410 	add.w	r4, r6, #16
 8001e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e26:	1d33      	adds	r3, r6, #4
 8001e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2a:	6838      	ldr	r0, [r7, #0]
 8001e2c:	f001 ff32 	bl	8003c94 <USB_DevInit>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00d      	b.n	8001e5e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 f881 	bl	8004f5e <USB_DevDisconnect>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_Start+0x1c>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e020      	b.n	8001ec4 <HAL_PCD_Start+0x5e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d109      	bne.n	8001ea6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d005      	beq.n	8001ea6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fe84 	bl	8003bb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 f831 	bl	8004f1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b08d      	sub	sp, #52	; 0x34
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f8ef 	bl	80050c6 <USB_GetMode>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 848a 	bne.w	8002804 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f853 	bl	8004fa0 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8480 	beq.w	8002802 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f840 	bl	8004fa0 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f002 0202 	and.w	r2, r2, #2
 8001f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f82e 	bl	8004fa0 <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d161      	bne.n	8002012 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0210 	bic.w	r2, r2, #16
 8001f5c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	0c5b      	lsrs	r3, r3, #17
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d124      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d035      	beq.n	8002002 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a38      	ldr	r0, [r7, #32]
 8001faa:	f002 fe65 	bl	8004c78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fba:	441a      	add	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fcc:	441a      	add	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	621a      	str	r2, [r3, #32]
 8001fd2:	e016      	b.n	8002002 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	0c5b      	lsrs	r3, r3, #17
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	2b06      	cmp	r3, #6
 8001fde:	d110      	bne.n	8002002 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6a38      	ldr	r0, [r7, #32]
 8001fec:	f002 fe44 	bl	8004c78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	441a      	add	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0210 	orr.w	r2, r2, #16
 8002010:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f002 ffc2 	bl	8004fa0 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002022:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002026:	f040 80a7 	bne.w	8002178 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f002 ffc7 	bl	8004fc6 <USB_ReadDevAllOutEpInterrupt>
 8002038:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800203a:	e099      	b.n	8002170 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 808e 	beq.w	8002164 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f002 ffeb 	bl	800502e <USB_ReadDevOutEPInterrupt>
 8002058:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002070:	461a      	mov	r2, r3
 8002072:	2301      	movs	r3, #1
 8002074:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fec3 	bl	8002e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002094:	461a      	mov	r2, r3
 8002096:	2308      	movs	r3, #8
 8002098:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 ff99 	bl	8002fd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d030      	beq.n	800212a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d109      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	78db      	ldrb	r3, [r3, #3]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f008 f8c6 	bl	800a2a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	2302      	movs	r3, #2
 8002128:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	2320      	movs	r3, #32
 8002144:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f af62 	bne.w	800203c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f002 ff0f 	bl	8004fa0 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800218c:	f040 80db 	bne.w	8002346 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 ff30 	bl	8004ffa <USB_ReadDevAllInEpInterrupt>
 800219a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021a0:	e0cd      	b.n	800233e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80c2 	beq.w	8002332 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 ff56 	bl	800506a <USB_ReadDevInEPInterrupt>
 80021be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d057      	beq.n	800227a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	2201      	movs	r2, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69f9      	ldr	r1, [r7, #28]
 80021e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ea:	4013      	ands	r3, r2
 80021ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	2301      	movs	r3, #1
 80021fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d132      	bne.n	800226e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	334c      	adds	r3, #76	; 0x4c
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	3348      	adds	r3, #72	; 0x48
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4419      	add	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4403      	add	r3, r0
 800223c:	334c      	adds	r3, #76	; 0x4c
 800223e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d113      	bne.n	800226e <HAL_PCD_IRQHandler+0x3a2>
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3354      	adds	r3, #84	; 0x54
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002266:	461a      	mov	r2, r3
 8002268:	2101      	movs	r1, #1
 800226a:	f002 ff5d 	bl	8005128 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f007 ff9a 	bl	800a1ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002290:	461a      	mov	r2, r3
 8002292:	2308      	movs	r3, #8
 8002294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ac:	461a      	mov	r2, r3
 80022ae:	2310      	movs	r3, #16
 80022b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c8:	461a      	mov	r2, r3
 80022ca:	2340      	movs	r3, #64	; 0x40
 80022cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022da:	6a38      	ldr	r0, [r7, #32]
 80022dc:	f001 fe3e 	bl	8003f5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3338      	adds	r3, #56	; 0x38
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	78db      	ldrb	r3, [r3, #3]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2200      	movs	r2, #0
 8002300:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f007 ffdd 	bl	800a2c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	461a      	mov	r2, r3
 800231c:	2302      	movs	r3, #2
 800231e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800232a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fcdb 	bl	8002ce8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f af2e 	bne.w	80021a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fe28 	bl	8004fa0 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235a:	d122      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002382:	2100      	movs	r1, #0
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fec3 	bl	8003110 <HAL_PCDEx_LPM_Callback>
 800238a:	e002      	b.n	8002392 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f007 ff7b 	bl	800a288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fdfa 	bl	8004fa0 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b6:	d112      	bne.n	80023de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f007 ff37 	bl	800a23c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fddc 	bl	8004fa0 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f2:	f040 80b7 	bne.w	8002564 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2110      	movs	r1, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f001 fda3 	bl	8003f5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	e046      	b.n	80024aa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002428:	461a      	mov	r2, r3
 800242a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800242e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002440:	0151      	lsls	r1, r2, #5
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	440a      	add	r2, r1
 8002446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800244a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800244e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002462:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002474:	0151      	lsls	r1, r2, #5
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	440a      	add	r2, r1
 800247a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800247e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002482:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	440a      	add	r2, r1
 800249a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800249e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	3301      	adds	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3b3      	bcc.n	800241c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e0:	f043 030b 	orr.w	r3, r3, #11
 80024e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f6:	f043 030b 	orr.w	r3, r3, #11
 80024fa:	6453      	str	r3, [r2, #68]	; 0x44
 80024fc:	e015      	b.n	800252a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002510:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002514:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002524:	f043 030b 	orr.w	r3, r3, #11
 8002528:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002538:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800253c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800254e:	461a      	mov	r2, r3
 8002550:	f002 fdea 	bl	8005128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fd19 	bl	8004fa0 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	d124      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fdaf 	bl	80050e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fd64 	bl	8004056 <USB_GetDevSpeed>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681c      	ldr	r4, [r3, #0]
 800259a:	f001 f9e9 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 800259e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	4620      	mov	r0, r4
 80025aa:	f001 fa63 	bl	8003a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f007 fe25 	bl	800a1fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fce9 	bl	8004fa0 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d10a      	bne.n	80025ee <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f007 fe02 	bl	800a1e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f002 0208 	and.w	r2, r2, #8
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 fcd4 	bl	8004fa0 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d122      	bne.n	8002648 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	e014      	b.n	800263e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb27 	bl	8002c86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3301      	adds	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	429a      	cmp	r2, r3
 8002646:	d3e5      	bcc.n	8002614 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fca7 	bl	8004fa0 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800265c:	d13b      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800265e:	2301      	movs	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e02b      	b.n	80026bc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3340      	adds	r3, #64	; 0x40
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d115      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800268a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	da12      	bge.n	80026b6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	333f      	adds	r3, #63	; 0x3f
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fae8 	bl	8002c86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3ce      	bcc.n	8002664 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fc60 	bl	8004fa0 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ea:	d155      	bne.n	8002798 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e045      	b.n	800277e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d12e      	bne.n	8002778 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800271a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	da2b      	bge.n	8002778 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800272c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002730:	429a      	cmp	r2, r3
 8002732:	d121      	bne.n	8002778 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002774:	6053      	str	r3, [r2, #4]
            break;
 8002776:	e007      	b.n	8002788 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3301      	adds	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	429a      	cmp	r2, r3
 8002786:	d3b4      	bcc.n	80026f2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fbff 	bl	8004fa0 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d10a      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f007 fd9c 	bl	800a2ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fbe9 	bl	8004fa0 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d115      	bne.n	8002804 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f007 fd8c 	bl	800a308 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	e000      	b.n	8002804 <HAL_PCD_IRQHandler+0x938>
      return;
 8002802:	bf00      	nop
    }
  }
}
 8002804:	3734      	adds	r7, #52	; 0x34
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}

0800280a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_PCD_SetAddress+0x1a>
 8002820:	2302      	movs	r3, #2
 8002822:	e013      	b.n	800284c <HAL_PCD_SetAddress+0x42>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f002 fb47 	bl	8004ed0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	70fb      	strb	r3, [r7, #3]
 8002866:	460b      	mov	r3, r1
 8002868:	803b      	strh	r3, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002876:	2b00      	cmp	r3, #0
 8002878:	da0f      	bge.n	800289a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	3338      	adds	r3, #56	; 0x38
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	3304      	adds	r3, #4
 8002890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	705a      	strb	r2, [r3, #1]
 8002898:	e00f      	b.n	80028ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028c6:	883a      	ldrh	r2, [r7, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	78ba      	ldrb	r2, [r7, #2]
 80028d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028e4:	78bb      	ldrb	r3, [r7, #2]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_PCD_EP_Open+0xaa>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e00e      	b.n	800291c <HAL_PCD_EP_Open+0xc8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fbc7 	bl	80040a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800291a:	7afb      	ldrb	r3, [r7, #11]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002934:	2b00      	cmp	r3, #0
 8002936:	da0f      	bge.n	8002958 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3338      	adds	r3, #56	; 0x38
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	705a      	strb	r2, [r3, #1]
 8002956:	e00f      	b.n	8002978 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_PCD_EP_Close+0x6e>
 800298e:	2302      	movs	r3, #2
 8002990:	e00e      	b.n	80029b0 <HAL_PCD_EP_Close+0x8c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fc05 	bl	80041b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	460b      	mov	r3, r1
 80029c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2200      	movs	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a14:	7afb      	ldrb	r3, [r7, #11]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	f001 fee4 	bl	80047f8 <USB_EP0StartXfer>
 8002a30:	e008      	b.n	8002a44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	f001 fc92 	bl	8004368 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a70:	681b      	ldr	r3, [r3, #0]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	f003 020f 	and.w	r2, r3, #15
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3338      	adds	r3, #56	; 0x38
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2201      	movs	r2, #1
 8002abc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	f001 fe82 	bl	80047f8 <USB_EP0StartXfer>
 8002af4:	e008      	b.n	8002b08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	f001 fc30 	bl	8004368 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d901      	bls.n	8002b30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e050      	b.n	8002bd2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da0f      	bge.n	8002b58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3338      	adds	r3, #56	; 0x38
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	705a      	strb	r2, [r3, #1]
 8002b56:	e00d      	b.n	8002b74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_EP_SetStall+0x82>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e01e      	b.n	8002bd2 <HAL_PCD_EP_SetStall+0xc0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 f8c0 	bl	8004d28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	b2d9      	uxtb	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f002 fab0 	bl	8005128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d901      	bls.n	8002bf8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e042      	b.n	8002c7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da0f      	bge.n	8002c20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	3338      	adds	r3, #56	; 0x38
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	705a      	strb	r2, [r3, #1]
 8002c1e:	e00f      	b.n	8002c40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_PCD_EP_ClrStall+0x86>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e00e      	b.n	8002c7e <HAL_PCD_EP_ClrStall+0xa4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 f8c8 	bl	8004e04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da0c      	bge.n	8002cb4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	3338      	adds	r3, #56	; 0x38
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	3304      	adds	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e00c      	b.n	8002cce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fee7 	bl	8004aa8 <USB_EPStopXfer>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cde:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3338      	adds	r3, #56	; 0x38
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d901      	bls.n	8002d20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e06c      	b.n	8002dfa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d902      	bls.n	8002d3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3303      	adds	r3, #3
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d44:	e02b      	b.n	8002d9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d902      	bls.n	8002d62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3303      	adds	r3, #3
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f001 ff3b 	bl	8004bfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1a      	ldr	r2, [r3, #32]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	441a      	add	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d809      	bhi.n	8002dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d203      	bcs.n	8002dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1be      	bne.n	8002d46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d811      	bhi.n	8002df8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	6939      	ldr	r1, [r7, #16]
 8002df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002df4:	4013      	ands	r3, r2
 8002df6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	333c      	adds	r3, #60	; 0x3c
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d17b      	bne.n	8002f32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4a61      	ldr	r2, [pc, #388]	; (8002fcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	f240 80b9 	bls.w	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80b3 	beq.w	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e66:	461a      	mov	r2, r3
 8002e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6c:	6093      	str	r3, [r2, #8]
 8002e6e:	e0a7      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e86:	461a      	mov	r2, r3
 8002e88:	2320      	movs	r3, #32
 8002e8a:	6093      	str	r3, [r2, #8]
 8002e8c:	e098      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 8093 	bne.w	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	; (8002fcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d90f      	bls.n	8002ec2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	6093      	str	r3, [r2, #8]
 8002ec0:	e07e      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d114      	bne.n	8002f24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f002 f90a 	bl	8005128 <USB_EP0_OutStart>
 8002f14:	e006      	b.n	8002f24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	441a      	add	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f007 f924 	bl	800a178 <HAL_PCD_DataOutStageCallback>
 8002f30:	e046      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d124      	bne.n	8002f84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	e032      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	2320      	movs	r3, #32
 8002f74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f007 f8fb 	bl	800a178 <HAL_PCD_DataOutStageCallback>
 8002f82:	e01d      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d114      	bne.n	8002fb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fac:	461a      	mov	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f002 f8ba 	bl	8005128 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f007 f8dc 	bl	800a178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	4f54300a 	.word	0x4f54300a
 8002fd0:	4f54310a 	.word	0x4f54310a

08002fd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	333c      	adds	r3, #60	; 0x3c
 8002fec:	3304      	adds	r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a15      	ldr	r2, [pc, #84]	; (800305c <PCD_EP_OutSetupPacket_int+0x88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90e      	bls.n	8003028 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f007 f893 	bl	800a154 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <PCD_EP_OutSetupPacket_int+0x88>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d90c      	bls.n	8003050 <PCD_EP_OutSetupPacket_int+0x7c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	f002 f86c 	bl	8005128 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	4f54300a 	.word	0x4f54300a

08003060 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
 800306c:	4613      	mov	r3, r2
 800306e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800307e:	883b      	ldrh	r3, [r7, #0]
 8003080:	0419      	lsls	r1, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	430a      	orrs	r2, r1
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e028      	b.n	80030e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e00d      	b.n	80030be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4413      	add	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3ec      	bcc.n	80030a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030c8:	883b      	ldrh	r3, [r7, #0]
 80030ca:	0418      	lsls	r0, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4302      	orrs	r2, r0
 80030d8:	3340      	adds	r3, #64	; 0x40
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e267      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b82      	ldr	r3, [pc, #520]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e242      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a75      	ldr	r2, [pc, #468]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6c      	ldr	r2, [pc, #432]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fce2 	bl	8000ba8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fd fcde 	bl	8000ba8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e207      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xc0>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd fcce 	bl	8000ba8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd fcca 	bl	8000ba8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1f3      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b51      	ldr	r3, [pc, #324]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0xe8>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1c7      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4937      	ldr	r1, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCC_OscConfig+0x244>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fd fc83 	bl	8000ba8 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7fd fc7f 	bl	8000ba8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1a8      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4925      	ldr	r1, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x244>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fc62 	bl	8000ba8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fd fc5e 	bl	8000ba8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e187      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d036      	beq.n	8003380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_RCC_OscConfig+0x248>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fd fc42 	bl	8000ba8 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7fd fc3e 	bl	8000ba8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e167      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x200>
 8003346:	e01b      	b.n	8003380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x248>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fd fc2b 	bl	8000ba8 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e00e      	b.n	8003374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7fd fc27 	bl	8000ba8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d907      	bls.n	8003374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e150      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
 8003368:	40023800 	.word	0x40023800
 800336c:	42470000 	.word	0x42470000
 8003370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ea      	bne.n	8003356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8097 	beq.w	80034bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	4b7d      	ldr	r3, [pc, #500]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a7c      	ldr	r2, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
 80033ae:	4b7a      	ldr	r3, [pc, #488]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ca:	4b74      	ldr	r3, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a73      	ldr	r2, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7fd fbe7 	bl	8000ba8 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fd fbe3 	bl	8000ba8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e10c      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x2ea>
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	e01c      	b.n	800344c <HAL_RCC_OscConfig+0x324>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x30c>
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a5e      	ldr	r2, [pc, #376]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0x324>
 8003434:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a57      	ldr	r2, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	4b55      	ldr	r3, [pc, #340]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fd fba8 	bl	8000ba8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fd fba4 	bl	8000ba8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0cb      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	4b49      	ldr	r3, [pc, #292]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ee      	beq.n	800345c <HAL_RCC_OscConfig+0x334>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7fd fb92 	bl	8000ba8 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	e00a      	b.n	800349e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fd fb8e 	bl	8000ba8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0b5      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ee      	bne.n	8003488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a1 	beq.w	8003608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d05c      	beq.n	800358c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d141      	bne.n	800355e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd fb62 	bl	8000ba8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fb5e 	bl	8000ba8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e087      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	491b      	ldr	r1, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd fb37 	bl	8000ba8 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd fb33 	bl	8000ba8 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e05c      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x416>
 800355c:	e054      	b.n	8003608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fb20 	bl	8000ba8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fb1c 	bl	8000ba8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e045      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x444>
 800358a:	e03d      	b.n	8003608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e038      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
 80035a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d028      	beq.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d121      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d11a      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	3b01      	subs	r3, #1
 80035ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0cc      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90c      	bls.n	8003654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800368e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d044      	beq.n	8003738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d119      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e067      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4934      	ldr	r1, [pc, #208]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003708:	f7fd fa4e 	bl	8000ba8 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fd fa4a 	bl	8000ba8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d20c      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd f9ae 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	0800a7dc 	.word	0x0800a7dc
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e8:	b090      	sub	sp, #64	; 0x40
 80037ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d00d      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 8003808:	2b08      	cmp	r3, #8
 800380a:	f200 80a1 	bhi.w	8003950 <HAL_RCC_GetSysClockFreq+0x16c>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x34>
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x3a>
 8003816:	e09b      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_GetSysClockFreq+0x184>)
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800381c:	e09b      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800381e:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003822:	e098      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003824:	4b4f      	ldr	r3, [pc, #316]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800382e:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d028      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	627a      	str	r2, [r7, #36]	; 0x24
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800384c:	2100      	movs	r1, #0
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 8003850:	fb03 f201 	mul.w	r2, r3, r1
 8003854:	2300      	movs	r3, #0
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	4413      	add	r3, r2
 800385c:	4a43      	ldr	r2, [pc, #268]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 800385e:	fba0 1202 	umull	r1, r2, r0, r2
 8003862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003864:	460a      	mov	r2, r1
 8003866:	62ba      	str	r2, [r7, #40]	; 0x28
 8003868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386a:	4413      	add	r3, r2
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	2200      	movs	r2, #0
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800387e:	f7fc fcaf 	bl	80001e0 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4613      	mov	r3, r2
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800388a:	e053      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	2200      	movs	r2, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	617a      	str	r2, [r7, #20]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800389e:	f04f 0b00 	mov.w	fp, #0
 80038a2:	4652      	mov	r2, sl
 80038a4:	465b      	mov	r3, fp
 80038a6:	f04f 0000 	mov.w	r0, #0
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b4:	0150      	lsls	r0, r2, #5
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	ebb2 080a 	subs.w	r8, r2, sl
 80038be:	eb63 090b 	sbc.w	r9, r3, fp
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038d6:	ebb2 0408 	subs.w	r4, r2, r8
 80038da:	eb63 0509 	sbc.w	r5, r3, r9
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	00eb      	lsls	r3, r5, #3
 80038e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ec:	00e2      	lsls	r2, r4, #3
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	eb14 030a 	adds.w	r3, r4, sl
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	eb45 030b 	adc.w	r3, r5, fp
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390a:	4629      	mov	r1, r5
 800390c:	028b      	lsls	r3, r1, #10
 800390e:	4621      	mov	r1, r4
 8003910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003914:	4621      	mov	r1, r4
 8003916:	028a      	lsls	r2, r1, #10
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391e:	2200      	movs	r2, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	60fa      	str	r2, [r7, #12]
 8003924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003928:	f7fc fc5a 	bl	80001e0 <__aeabi_uldivmod>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4613      	mov	r3, r2
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	3301      	adds	r3, #1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetSysClockFreq+0x184>)
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003958:	4618      	mov	r0, r3
 800395a:	3740      	adds	r7, #64	; 0x40
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	00f42400 	.word	0x00f42400
 800396c:	017d7840 	.word	0x017d7840

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_RCC_GetHCLKFreq+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800398c:	f7ff fff0 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800a7ec 	.word	0x0800a7ec

080039b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039b0:	b084      	sub	sp, #16
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	f107 001c 	add.w	r0, r7, #28
 80039be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d122      	bne.n	8003a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 fbee 	bl	80051e4 <USB_CoreReset>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e01a      	b.n	8003a44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f001 fbe2 	bl	80051e4 <USB_CoreReset>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
 8003a36:	e005      	b.n	8003a44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10b      	bne.n	8003a62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f043 0206 	orr.w	r2, r3, #6
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a6e:	b004      	add	sp, #16
 8003a70:	4770      	bx	lr
	...

08003a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d165      	bne.n	8003b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <USB_SetTurnaroundTime+0x11c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d906      	bls.n	8003a9e <USB_SetTurnaroundTime+0x2a>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a40      	ldr	r2, [pc, #256]	; (8003b94 <USB_SetTurnaroundTime+0x120>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d202      	bcs.n	8003a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a98:	230f      	movs	r3, #15
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e062      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <USB_SetTurnaroundTime+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d306      	bcc.n	8003ab4 <USB_SetTurnaroundTime+0x40>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <USB_SetTurnaroundTime+0x124>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d202      	bcs.n	8003ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003aae:	230e      	movs	r3, #14
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e057      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <USB_SetTurnaroundTime+0x124>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d306      	bcc.n	8003aca <USB_SetTurnaroundTime+0x56>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <USB_SetTurnaroundTime+0x128>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d202      	bcs.n	8003aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ac4:	230d      	movs	r3, #13
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e04c      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a33      	ldr	r2, [pc, #204]	; (8003b9c <USB_SetTurnaroundTime+0x128>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d306      	bcc.n	8003ae0 <USB_SetTurnaroundTime+0x6c>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a32      	ldr	r2, [pc, #200]	; (8003ba0 <USB_SetTurnaroundTime+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ada:	230c      	movs	r3, #12
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e041      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <USB_SetTurnaroundTime+0x12c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d906      	bls.n	8003af6 <USB_SetTurnaroundTime+0x82>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a2e      	ldr	r2, [pc, #184]	; (8003ba4 <USB_SetTurnaroundTime+0x130>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d802      	bhi.n	8003af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003af0:	230b      	movs	r3, #11
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e036      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <USB_SetTurnaroundTime+0x130>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d906      	bls.n	8003b0c <USB_SetTurnaroundTime+0x98>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <USB_SetTurnaroundTime+0x134>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d802      	bhi.n	8003b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b06:	230a      	movs	r3, #10
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e02b      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <USB_SetTurnaroundTime+0x134>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d906      	bls.n	8003b22 <USB_SetTurnaroundTime+0xae>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a25      	ldr	r2, [pc, #148]	; (8003bac <USB_SetTurnaroundTime+0x138>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d202      	bcs.n	8003b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b1c:	2309      	movs	r3, #9
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e020      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <USB_SetTurnaroundTime+0x138>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d306      	bcc.n	8003b38 <USB_SetTurnaroundTime+0xc4>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <USB_SetTurnaroundTime+0x13c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d802      	bhi.n	8003b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b32:	2308      	movs	r3, #8
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e015      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <USB_SetTurnaroundTime+0x13c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d906      	bls.n	8003b4e <USB_SetTurnaroundTime+0xda>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <USB_SetTurnaroundTime+0x140>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d202      	bcs.n	8003b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e00a      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b4e:	2306      	movs	r3, #6
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e007      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b5a:	2309      	movs	r3, #9
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e001      	b.n	8003b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b60:	2309      	movs	r3, #9
 8003b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	00d8acbf 	.word	0x00d8acbf
 8003b94:	00e4e1c0 	.word	0x00e4e1c0
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	01067380 	.word	0x01067380
 8003ba0:	011a499f 	.word	0x011a499f
 8003ba4:	01312cff 	.word	0x01312cff
 8003ba8:	014ca43f 	.word	0x014ca43f
 8003bac:	016e3600 	.word	0x016e3600
 8003bb0:	01a6ab1f 	.word	0x01a6ab1f
 8003bb4:	01e84800 	.word	0x01e84800

08003bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d115      	bne.n	8003c4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7fc ffc8 	bl	8000bc0 <HAL_Delay>
      ms++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fa45 	bl	80050c6 <USB_GetMode>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d01e      	beq.n	8003c80 <USB_SetCurrentMode+0x84>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b31      	cmp	r3, #49	; 0x31
 8003c46:	d9f0      	bls.n	8003c2a <USB_SetCurrentMode+0x2e>
 8003c48:	e01a      	b.n	8003c80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d115      	bne.n	8003c7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fc ffaf 	bl	8000bc0 <HAL_Delay>
      ms++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fa2c 	bl	80050c6 <USB_GetMode>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <USB_SetCurrentMode+0x84>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b31      	cmp	r3, #49	; 0x31
 8003c78:	d9f0      	bls.n	8003c5c <USB_SetCurrentMode+0x60>
 8003c7a:	e001      	b.n	8003c80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e005      	b.n	8003c8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b32      	cmp	r3, #50	; 0x32
 8003c84:	d101      	bne.n	8003c8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c94:	b084      	sub	sp, #16
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e009      	b.n	8003cc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0e      	cmp	r3, #14
 8003ccc:	d9f2      	bls.n	8003cb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11c      	bne.n	8003d0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d0c:	e00b      	b.n	8003d26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	461a      	mov	r2, r3
 8003d42:	680b      	ldr	r3, [r1, #0]
 8003d44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10c      	bne.n	8003d66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f965 	bl	8004024 <USB_SetDevSpeed>
 8003d5a:	e008      	b.n	8003d6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f960 	bl	8004024 <USB_SetDevSpeed>
 8003d64:	e003      	b.n	8003d6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d66:	2103      	movs	r1, #3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f95b 	bl	8004024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d6e:	2110      	movs	r1, #16
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f8f3 	bl	8003f5c <USB_FlushTxFifo>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f91f 	bl	8003fc4 <USB_FlushRxFifo>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	461a      	mov	r2, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e043      	b.n	8003e42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd0:	d118      	bne.n	8003e04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	461a      	mov	r2, r3
 8003de6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e013      	b.n	8003e16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e008      	b.n	8003e16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e10:	461a      	mov	r2, r3
 8003e12:	2300      	movs	r3, #0
 8003e14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	461a      	mov	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d3b7      	bcc.n	8003dba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e043      	b.n	8003ed8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e66:	d118      	bne.n	8003e9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e013      	b.n	8003eac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e008      	b.n	8003eac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ed0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3b7      	bcc.n	8003e50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f043 0210 	orr.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <USB_DevInit+0x2c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f043 0208 	orr.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f54:	b004      	add	sp, #16
 8003f56:	4770      	bx	lr
 8003f58:	803c3800 	.word	0x803c3800

08003f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <USB_FlushTxFifo+0x64>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e01b      	b.n	8003fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	daf2      	bge.n	8003f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	019b      	lsls	r3, r3, #6
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <USB_FlushTxFifo+0x64>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e006      	b.n	8003fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d0f0      	beq.n	8003f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	00030d40 	.word	0x00030d40

08003fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a11      	ldr	r2, [pc, #68]	; (8004020 <USB_FlushRxFifo+0x5c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e018      	b.n	8004014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	daf2      	bge.n	8003fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <USB_FlushRxFifo+0x5c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e006      	b.n	8004014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b10      	cmp	r3, #16
 8004010:	d0f0      	beq.n	8003ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	00030d40 	.word	0x00030d40

08004024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0306 	and.w	r3, r3, #6
 800406e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
 800407a:	e00a      	b.n	8004092 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d002      	beq.n	8004088 <USB_GetDevSpeed+0x32>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d102      	bne.n	800408e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004088:	2302      	movs	r3, #2
 800408a:	75fb      	strb	r3, [r7, #23]
 800408c:	e001      	b.n	8004092 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800408e:	230f      	movs	r3, #15
 8004090:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
}
 8004094:	4618      	mov	r0, r3
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13a      	bne.n	8004132 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040da:	4313      	orrs	r3, r2
 80040dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d155      	bne.n	80041a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	791b      	ldrb	r3, [r3, #4]
 800410e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004110:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	059b      	lsls	r3, r3, #22
 8004116:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004118:	4313      	orrs	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e036      	b.n	80041a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004150:	4313      	orrs	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11a      	bne.n	80041a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	791b      	ldrb	r3, [r3, #4]
 8004184:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004186:	430b      	orrs	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d161      	bne.n	8004290 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e2:	d11f      	bne.n	8004224 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004202:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	b29b      	uxth	r3, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004244:	4013      	ands	r3, r2
 8004246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004268:	4013      	ands	r3, r2
 800426a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	0159      	lsls	r1, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	440b      	add	r3, r1
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	4619      	mov	r1, r3
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <USB_DeactivateEndpoint+0x1b0>)
 800428a:	4013      	ands	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
 800428e:	e060      	b.n	8004352 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a6:	d11f      	bne.n	80042e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	43db      	mvns	r3, r3
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004308:	4013      	ands	r3, r2
 800430a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	43db      	mvns	r3, r3
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432c:	4013      	ands	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0159      	lsls	r1, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	440b      	add	r3, r1
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	4619      	mov	r1, r3
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <USB_DeactivateEndpoint+0x1b4>)
 800434e:	4013      	ands	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	ec337800 	.word	0xec337800
 8004364:	eff37800 	.word	0xeff37800

08004368 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 815c 	bne.w	8004642 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d132      	bne.n	80043f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	0cdb      	lsrs	r3, r3, #19
 80043f2:	04db      	lsls	r3, r3, #19
 80043f4:	6113      	str	r3, [r2, #16]
 80043f6:	e074      	b.n	80044e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	0cdb      	lsrs	r3, r3, #19
 8004414:	04db      	lsls	r3, r3, #19
 8004416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004436:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800443a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6999      	ldr	r1, [r3, #24]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	440b      	add	r3, r1
 8004454:	1e59      	subs	r1, r3, #1
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	fbb1 f3f3 	udiv	r3, r1, r3
 800445e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004460:	4b9d      	ldr	r3, [pc, #628]	; (80046d8 <USB_EPStartXfer+0x370>)
 8004462:	400b      	ands	r3, r1
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	0148      	lsls	r0, r1, #5
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	4401      	add	r1, r0
 800446c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	0148      	lsls	r0, r1, #5
 800448e:	69f9      	ldr	r1, [r7, #28]
 8004490:	4401      	add	r1, r0
 8004492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	791b      	ldrb	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d11f      	bne.n	80044e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d14b      	bne.n	8004580 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	791b      	ldrb	r3, [r3, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d128      	bne.n	800455e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e00f      	b.n	800455e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e133      	b.n	80047e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800459e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	791b      	ldrb	r3, [r3, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d015      	beq.n	80045d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 811b 	beq.w	80047e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	69f9      	ldr	r1, [r7, #28]
 80045ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ce:	4313      	orrs	r3, r2
 80045d0:	634b      	str	r3, [r1, #52]	; 0x34
 80045d2:	e109      	b.n	80047e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d110      	bne.n	8004606 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e00f      	b.n	8004626 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004624:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6919      	ldr	r1, [r3, #16]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	b298      	uxth	r0, r3
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	4603      	mov	r3, r0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fade 	bl	8004bfc <USB_WritePacket>
 8004640:	e0d2      	b.n	80047e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465c:	0cdb      	lsrs	r3, r3, #19
 800465e:	04db      	lsls	r3, r3, #19
 8004660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	440a      	add	r2, r1
 8004678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004680:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004684:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d126      	bne.n	80046dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	0148      	lsls	r0, r1, #5
 80046a8:	69f9      	ldr	r1, [r7, #28]
 80046aa:	4401      	add	r1, r0
 80046ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046b0:	4313      	orrs	r3, r2
 80046b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d2:	6113      	str	r3, [r2, #16]
 80046d4:	e03a      	b.n	800474c <USB_EPStartXfer+0x3e4>
 80046d6:	bf00      	nop
 80046d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	1e5a      	subs	r2, r3, #1
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	8afa      	ldrh	r2, [r7, #22]
 80046f8:	fb03 f202 	mul.w	r2, r3, r2
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	8afb      	ldrh	r3, [r7, #22]
 8004710:	04d9      	lsls	r1, r3, #19
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <USB_EPStartXfer+0x48c>)
 8004714:	400b      	ands	r3, r1
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	0148      	lsls	r0, r1, #5
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	4401      	add	r1, r0
 800471e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004722:	4313      	orrs	r3, r2
 8004724:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	0148      	lsls	r0, r1, #5
 8004740:	69f9      	ldr	r1, [r7, #28]
 8004742:	4401      	add	r1, r0
 8004744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004748:	4313      	orrs	r3, r2
 800474a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10d      	bne.n	800476e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	460a      	mov	r2, r1
 800476c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	791b      	ldrb	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d128      	bne.n	80047c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00f      	b.n	80047c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	1ff80000 	.word	0x1ff80000

080047f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b01      	cmp	r3, #1
 8004816:	f040 80ce 	bne.w	80049b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d132      	bne.n	8004888 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	0cdb      	lsrs	r3, r3, #19
 8004882:	04db      	lsls	r3, r3, #19
 8004884:	6113      	str	r3, [r2, #16]
 8004886:	e04e      	b.n	8004926 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a2:	0cdb      	lsrs	r3, r3, #19
 80048a4:	04db      	lsls	r3, r3, #19
 80048a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004916:	6939      	ldr	r1, [r7, #16]
 8004918:	0148      	lsls	r0, r1, #5
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	4401      	add	r1, r0
 800491e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d11e      	bne.n	800496a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e097      	b.n	8004a9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004988:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8083 	beq.w	8004a9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	6979      	ldr	r1, [r7, #20]
 80049ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b0:	4313      	orrs	r3, r2
 80049b2:	634b      	str	r3, [r1, #52]	; 0x34
 80049b4:	e071      	b.n	8004a9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d0:	0cdb      	lsrs	r3, r3, #19
 80049d2:	04db      	lsls	r3, r3, #19
 80049d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	6939      	ldr	r1, [r7, #16]
 8004a4a:	0148      	lsls	r0, r1, #5
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	4401      	add	r1, r0
 8004a50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d10d      	bne.n	8004a7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6919      	ldr	r1, [r3, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	460a      	mov	r2, r1
 8004a78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d14a      	bne.n	8004b5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ade:	f040 8086 	bne.w	8004bee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d902      	bls.n	8004b40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b3e:	e056      	b.n	8004bee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b58:	d0e7      	beq.n	8004b2a <USB_EPStopXfer+0x82>
 8004b5a:	e048      	b.n	8004bee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b74:	d13b      	bne.n	8004bee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d902      	bls.n	8004bd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bd2:	e00c      	b.n	8004bee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bec:	d0e7      	beq.n	8004bbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	71fb      	strb	r3, [r7, #7]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d123      	bne.n	8004c6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c22:	88bb      	ldrh	r3, [r7, #4]
 8004c24:	3303      	adds	r3, #3
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e018      	b.n	8004c62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	031a      	lsls	r2, r3, #12
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3e2      	bcc.n	8004c30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3724      	adds	r7, #36	; 0x24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b08b      	sub	sp, #44	; 0x2c
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	e014      	b.n	8004cce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3e6      	bcc.n	8004ca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cd6:	8bfb      	ldrh	r3, [r7, #30]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	701a      	strb	r2, [r3, #0]
      i++;
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	3301      	adds	r3, #1
 8004d06:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d0e:	8bfb      	ldrh	r3, [r7, #30]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ea      	bne.n	8004cf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	372c      	adds	r7, #44	; 0x2c
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d12c      	bne.n	8004d9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db12      	blt.n	8004d7c <USB_EPSetStall+0x54>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e02b      	b.n	8004df6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db12      	blt.n	8004dd6 <USB_EPSetStall+0xae>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004df4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d128      	bne.n	8004e72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <USB_EPClearStall+0x4c>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	791b      	ldrb	r3, [r3, #4]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d138      	bne.n	8004ec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e027      	b.n	8004ec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	791b      	ldrb	r3, [r3, #4]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d003      	beq.n	8004ea2 <USB_EPClearStall+0x9e>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	791b      	ldrb	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d10f      	bne.n	8004ec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ef2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f4a:	f023 0302 	bic.w	r3, r3, #2
 8004f4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	0c1b      	lsrs	r3, r3, #16
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	b29b      	uxth	r3, r3
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800505c:	68bb      	ldr	r3, [r7, #8]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	01db      	lsls	r3, r3, #7
 800509c:	b2db      	uxtb	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050b8:	68bb      	ldr	r3, [r7, #8]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005100:	f023 0307 	bic.w	r3, r3, #7
 8005104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	460b      	mov	r3, r1
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	333c      	adds	r3, #60	; 0x3c
 800513e:	3304      	adds	r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <USB_EP0_OutStart+0xb8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d90a      	bls.n	8005162 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515c:	d101      	bne.n	8005162 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e037      	b.n	80051d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	f043 0318 	orr.w	r3, r3, #24
 8005194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	4f54300a 	.word	0x4f54300a

080051e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <USB_CoreReset+0x64>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e01b      	b.n	800523a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	daf2      	bge.n	80051f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <USB_CoreReset+0x64>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e006      	b.n	800523a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d0f0      	beq.n	800521a <USB_CoreReset+0x36>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	00030d40 	.word	0x00030d40

0800524c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005258:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800525c:	f005 f9ec 	bl	800a638 <USBD_static_malloc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	32b0      	adds	r2, #176	; 0xb0
 8005272:	2100      	movs	r1, #0
 8005274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005278:	2302      	movs	r3, #2
 800527a:	e0d4      	b.n	8005426 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800527c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005280:	2100      	movs	r1, #0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f005 fa4e 	bl	800a724 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	32b0      	adds	r2, #176	; 0xb0
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	32b0      	adds	r2, #176	; 0xb0
 80052a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7c1b      	ldrb	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d138      	bne.n	8005326 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052b4:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <USBD_CDC_Init+0x1e4>)
 80052b6:	7819      	ldrb	r1, [r3, #0]
 80052b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052bc:	2202      	movs	r2, #2
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f005 f897 	bl	800a3f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052c4:	4b5a      	ldr	r3, [pc, #360]	; (8005430 <USBD_CDC_Init+0x1e4>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	2201      	movs	r2, #1
 80052dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052de:	4b55      	ldr	r3, [pc, #340]	; (8005434 <USBD_CDC_Init+0x1e8>)
 80052e0:	7819      	ldrb	r1, [r3, #0]
 80052e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e6:	2202      	movs	r2, #2
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f005 f882 	bl	800a3f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052ee:	4b51      	ldr	r3, [pc, #324]	; (8005434 <USBD_CDC_Init+0x1e8>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005306:	2201      	movs	r2, #1
 8005308:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800530a:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <USBD_CDC_Init+0x1ec>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3326      	adds	r3, #38	; 0x26
 8005320:	2210      	movs	r2, #16
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e035      	b.n	8005392 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005326:	4b42      	ldr	r3, [pc, #264]	; (8005430 <USBD_CDC_Init+0x1e4>)
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	2202      	movs	r2, #2
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f005 f85f 	bl	800a3f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005334:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <USBD_CDC_Init+0x1e4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3324      	adds	r3, #36	; 0x24
 800534a:	2201      	movs	r2, #1
 800534c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800534e:	4b39      	ldr	r3, [pc, #228]	; (8005434 <USBD_CDC_Init+0x1e8>)
 8005350:	7819      	ldrb	r1, [r3, #0]
 8005352:	2340      	movs	r3, #64	; 0x40
 8005354:	2202      	movs	r2, #2
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f005 f84b 	bl	800a3f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800535c:	4b35      	ldr	r3, [pc, #212]	; (8005434 <USBD_CDC_Init+0x1e8>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005374:	2201      	movs	r2, #1
 8005376:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005378:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <USBD_CDC_Init+0x1ec>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3326      	adds	r3, #38	; 0x26
 800538e:	2210      	movs	r2, #16
 8005390:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005392:	4b29      	ldr	r3, [pc, #164]	; (8005438 <USBD_CDC_Init+0x1ec>)
 8005394:	7819      	ldrb	r1, [r3, #0]
 8005396:	2308      	movs	r3, #8
 8005398:	2203      	movs	r2, #3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f005 f829 	bl	800a3f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <USBD_CDC_Init+0x1ec>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3324      	adds	r3, #36	; 0x24
 80053b6:	2201      	movs	r2, #1
 80053b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	33b0      	adds	r3, #176	; 0xb0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e018      	b.n	8005426 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7c1b      	ldrb	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <USBD_CDC_Init+0x1e8>)
 80053fe:	7819      	ldrb	r1, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f005 f8e0 	bl	800a5d0 <USBD_LL_PrepareReceive>
 8005410:	e008      	b.n	8005424 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <USBD_CDC_Init+0x1e8>)
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f005 f8d6 	bl	800a5d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000093 	.word	0x20000093
 8005434:	20000094 	.word	0x20000094
 8005438:	20000095 	.word	0x20000095

0800543c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005448:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <USBD_CDC_DeInit+0xf8>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f004 fff5 	bl	800a43e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005454:	4b37      	ldr	r3, [pc, #220]	; (8005534 <USBD_CDC_DeInit+0xf8>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3324      	adds	r3, #36	; 0x24
 800546a:	2200      	movs	r2, #0
 800546c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <USBD_CDC_DeInit+0xfc>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f004 ffe2 	bl	800a43e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800547a:	4b2f      	ldr	r3, [pc, #188]	; (8005538 <USBD_CDC_DeInit+0xfc>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <USBD_CDC_DeInit+0x100>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f004 ffce 	bl	800a43e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <USBD_CDC_DeInit+0x100>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054bc:	4b1f      	ldr	r3, [pc, #124]	; (800553c <USBD_CDC_DeInit+0x100>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3326      	adds	r3, #38	; 0x26
 80054d2:	2200      	movs	r2, #0
 80054d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	32b0      	adds	r2, #176	; 0xb0
 80054e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01f      	beq.n	8005528 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	33b0      	adds	r3, #176	; 0xb0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	32b0      	adds	r2, #176	; 0xb0
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	4618      	mov	r0, r3
 800550c:	f005 f8a2 	bl	800a654 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	32b0      	adds	r2, #176	; 0xb0
 800551a:	2100      	movs	r1, #0
 800551c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000093 	.word	0x20000093
 8005538:	20000094 	.word	0x20000094
 800553c:	20000095 	.word	0x20000095

08005540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	32b0      	adds	r2, #176	; 0xb0
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800556c:	2303      	movs	r3, #3
 800556e:	e0bf      	b.n	80056f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005578:	2b00      	cmp	r3, #0
 800557a:	d050      	beq.n	800561e <USBD_CDC_Setup+0xde>
 800557c:	2b20      	cmp	r3, #32
 800557e:	f040 80af 	bne.w	80056e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d03a      	beq.n	8005600 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b25b      	sxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	da1b      	bge.n	80055cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	33b0      	adds	r3, #176	; 0xb0
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	88d2      	ldrh	r2, [r2, #6]
 80055b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88db      	ldrh	r3, [r3, #6]
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	bf28      	it	cs
 80055ba:	2307      	movcs	r3, #7
 80055bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	89fa      	ldrh	r2, [r7, #14]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fd89 	bl	80070dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055ca:	e090      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	785a      	ldrb	r2, [r3, #1]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b3f      	cmp	r3, #63	; 0x3f
 80055dc:	d803      	bhi.n	80055e6 <USBD_CDC_Setup+0xa6>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	e000      	b.n	80055e8 <USBD_CDC_Setup+0xa8>
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055ee:	6939      	ldr	r1, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055f6:	461a      	mov	r2, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fd9b 	bl	8007134 <USBD_CtlPrepareRx>
      break;
 80055fe:	e076      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	33b0      	adds	r3, #176	; 0xb0
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	7850      	ldrb	r0, [r2, #1]
 8005616:	2200      	movs	r2, #0
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	4798      	blx	r3
      break;
 800561c:	e067      	b.n	80056ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b0b      	cmp	r3, #11
 8005624:	d851      	bhi.n	80056ca <USBD_CDC_Setup+0x18a>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <USBD_CDC_Setup+0xec>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800565d 	.word	0x0800565d
 8005630:	080056d9 	.word	0x080056d9
 8005634:	080056cb 	.word	0x080056cb
 8005638:	080056cb 	.word	0x080056cb
 800563c:	080056cb 	.word	0x080056cb
 8005640:	080056cb 	.word	0x080056cb
 8005644:	080056cb 	.word	0x080056cb
 8005648:	080056cb 	.word	0x080056cb
 800564c:	080056cb 	.word	0x080056cb
 8005650:	080056cb 	.word	0x080056cb
 8005654:	08005687 	.word	0x08005687
 8005658:	080056b1 	.word	0x080056b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d107      	bne.n	8005678 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005668:	f107 030a 	add.w	r3, r7, #10
 800566c:	2202      	movs	r2, #2
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fd33 	bl	80070dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005676:	e032      	b.n	80056de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fcbd 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8005680:	2303      	movs	r3, #3
 8005682:	75fb      	strb	r3, [r7, #23]
          break;
 8005684:	e02b      	b.n	80056de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d107      	bne.n	80056a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005692:	f107 030d 	add.w	r3, r7, #13
 8005696:	2201      	movs	r2, #1
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fd1e 	bl	80070dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056a0:	e01d      	b.n	80056de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 fca8 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
          break;
 80056ae:	e016      	b.n	80056de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d00f      	beq.n	80056dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fc9b 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056c8:	e008      	b.n	80056dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fc94 	bl	8006ffa <USBD_CtlError>
          ret = USBD_FAIL;
 80056d2:	2303      	movs	r3, #3
 80056d4:	75fb      	strb	r3, [r7, #23]
          break;
 80056d6:	e002      	b.n	80056de <USBD_CDC_Setup+0x19e>
          break;
 80056d8:	bf00      	nop
 80056da:	e008      	b.n	80056ee <USBD_CDC_Setup+0x1ae>
          break;
 80056dc:	bf00      	nop
      }
      break;
 80056de:	e006      	b.n	80056ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fc89 	bl	8006ffa <USBD_CtlError>
      ret = USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
      break;
 80056ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800570a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32b0      	adds	r2, #176	; 0xb0
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	e065      	b.n	80057ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	32b0      	adds	r2, #176	; 0xb0
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3318      	adds	r3, #24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3318      	adds	r3, #24
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 010f 	and.w	r1, r3, #15
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	460b      	mov	r3, r1
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4403      	add	r3, r0
 8005774:	3348      	adds	r3, #72	; 0x48
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fbb2 f1f3 	udiv	r1, r2, r3
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005782:	2b00      	cmp	r3, #0
 8005784:	d112      	bne.n	80057ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3318      	adds	r3, #24
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800579e:	78f9      	ldrb	r1, [r7, #3]
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f004 fef2 	bl	800a58e <USBD_LL_Transmit>
 80057aa:	e01f      	b.n	80057ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	33b0      	adds	r3, #176	; 0xb0
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	33b0      	adds	r3, #176	; 0xb0
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	32b0      	adds	r2, #176	; 0xb0
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	; 0xb0
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e01a      	b.n	800585e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f004 fef0 	bl	800a612 <USBD_LL_GetRxDataSize>
 8005832:	4602      	mov	r2, r0
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	33b0      	adds	r3, #176	; 0xb0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005858:	4611      	mov	r1, r2
 800585a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	32b0      	adds	r2, #176	; 0xb0
 8005878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	e025      	b.n	80058d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	33b0      	adds	r3, #176	; 0xb0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <USBD_CDC_EP0_RxReady+0x6c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058a2:	2bff      	cmp	r3, #255	; 0xff
 80058a4:	d015      	beq.n	80058d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	33b0      	adds	r3, #176	; 0xb0
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80058be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058c6:	b292      	uxth	r2, r2
 80058c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058e4:	2182      	movs	r1, #130	; 0x82
 80058e6:	4818      	ldr	r0, [pc, #96]	; (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058e8:	f000 fd4f 	bl	800638a <USBD_GetEpDesc>
 80058ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058ee:	2101      	movs	r1, #1
 80058f0:	4815      	ldr	r0, [pc, #84]	; (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058f2:	f000 fd4a 	bl	800638a <USBD_GetEpDesc>
 80058f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058f8:	2181      	movs	r1, #129	; 0x81
 80058fa:	4813      	ldr	r0, [pc, #76]	; (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058fc:	f000 fd45 	bl	800638a <USBD_GetEpDesc>
 8005900:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2210      	movs	r2, #16
 800590c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591c:	711a      	strb	r2, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	711a      	strb	r2, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2243      	movs	r2, #67	; 0x43
 800593a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000050 	.word	0x20000050

0800594c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005954:	2182      	movs	r1, #130	; 0x82
 8005956:	4818      	ldr	r0, [pc, #96]	; (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005958:	f000 fd17 	bl	800638a <USBD_GetEpDesc>
 800595c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800595e:	2101      	movs	r1, #1
 8005960:	4815      	ldr	r0, [pc, #84]	; (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005962:	f000 fd12 	bl	800638a <USBD_GetEpDesc>
 8005966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005968:	2181      	movs	r1, #129	; 0x81
 800596a:	4813      	ldr	r0, [pc, #76]	; (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800596c:	f000 fd0d 	bl	800638a <USBD_GetEpDesc>
 8005970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2210      	movs	r2, #16
 800597c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2200      	movs	r2, #0
 8005988:	711a      	strb	r2, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f042 0202 	orr.w	r2, r2, #2
 8005990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	711a      	strb	r2, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0202 	orr.w	r2, r2, #2
 80059a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2243      	movs	r2, #67	; 0x43
 80059aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059ac:	4b02      	ldr	r3, [pc, #8]	; (80059b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000050 	.word	0x20000050

080059bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059c4:	2182      	movs	r1, #130	; 0x82
 80059c6:	4818      	ldr	r0, [pc, #96]	; (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059c8:	f000 fcdf 	bl	800638a <USBD_GetEpDesc>
 80059cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059ce:	2101      	movs	r1, #1
 80059d0:	4815      	ldr	r0, [pc, #84]	; (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059d2:	f000 fcda 	bl	800638a <USBD_GetEpDesc>
 80059d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059d8:	2181      	movs	r1, #129	; 0x81
 80059da:	4813      	ldr	r0, [pc, #76]	; (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059dc:	f000 fcd5 	bl	800638a <USBD_GetEpDesc>
 80059e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2210      	movs	r2, #16
 80059ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059fc:	711a      	strb	r2, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a10:	711a      	strb	r2, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2243      	movs	r2, #67	; 0x43
 8005a1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a1c:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000050 	.word	0x20000050

08005a2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	220a      	movs	r2, #10
 8005a38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e009      	b.n	8005a74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	33b0      	adds	r3, #176	; 0xb0
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	32b0      	adds	r2, #176	; 0xb0
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e008      	b.n	8005ab8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	32b0      	adds	r2, #176	; 0xb0
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e004      	b.n	8005af2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	32b0      	adds	r2, #176	; 0xb0
 8005b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	32b0      	adds	r2, #176	; 0xb0
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e025      	b.n	8005b7e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11f      	bne.n	8005b7c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b44:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <USBD_CDC_TransmitPacket+0x88>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4403      	add	r3, r0
 8005b5e:	3318      	adds	r3, #24
 8005b60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <USBD_CDC_TransmitPacket+0x88>)
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f004 fd0b 	bl	800a58e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000093 	.word	0x20000093

08005b8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32b0      	adds	r2, #176	; 0xb0
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	32b0      	adds	r2, #176	; 0xb0
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e018      	b.n	8005bec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	7c1b      	ldrb	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <USBD_CDC_ReceivePacket+0x68>)
 8005bc4:	7819      	ldrb	r1, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f004 fcfd 	bl	800a5d0 <USBD_LL_PrepareReceive>
 8005bd6:	e008      	b.n	8005bea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <USBD_CDC_ReceivePacket+0x68>)
 8005bda:	7819      	ldrb	r1, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be2:	2340      	movs	r3, #64	; 0x40
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f004 fcf3 	bl	800a5d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000094 	.word	0x20000094

08005bf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e01f      	b.n	8005c50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	79fa      	ldrb	r2, [r7, #7]
 8005c42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f004 fb6d 	bl	800a324 <USBD_LL_Init>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e025      	b.n	8005cbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32ae      	adds	r2, #174	; 0xae
 8005c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00f      	beq.n	8005cac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32ae      	adds	r2, #174	; 0xae
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f107 020e 	add.w	r2, r7, #14
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f004 fb75 	bl	800a3bc <USBD_LL_Start>
 8005cd2:	4603      	mov	r3, r0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4611      	mov	r1, r2
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	4611      	mov	r1, r2
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f908 	bl	8006f86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d01a      	beq.n	8005dd0 <USBD_LL_SetupStage+0x72>
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d822      	bhi.n	8005de4 <USBD_LL_SetupStage+0x86>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <USBD_LL_SetupStage+0x4a>
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00a      	beq.n	8005dbc <USBD_LL_SetupStage+0x5e>
 8005da6:	e01d      	b.n	8005de4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fb5f 	bl	8006474 <USBD_StdDevReq>
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dba:	e020      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fbc7 	bl	8006558 <USBD_StdItfReq>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	e016      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc29 	bl	8006630 <USBD_StdEPReq>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
      break;
 8005de2:	e00c      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f004 fb42 	bl	800a47c <USBD_LL_StallEP>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	bf00      	nop
  }

  return ret;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	460b      	mov	r3, r1
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d16e      	bne.n	8005efe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	f040 8098 	bne.w	8005f64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d913      	bls.n	8005e68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	1ad2      	subs	r2, r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	bf28      	it	cs
 8005e5a:	4613      	movcs	r3, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f001 f984 	bl	800716e <USBD_CtlContinueRx>
 8005e66:	e07d      	b.n	8005f64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d014      	beq.n	8005ea0 <USBD_LL_DataOutStage+0x98>
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d81d      	bhi.n	8005eb6 <USBD_LL_DataOutStage+0xae>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <USBD_LL_DataOutStage+0x7c>
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d003      	beq.n	8005e8a <USBD_LL_DataOutStage+0x82>
 8005e82:	e018      	b.n	8005eb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75bb      	strb	r3, [r7, #22]
            break;
 8005e88:	e018      	b.n	8005ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fa5e 	bl	8006356 <USBD_CoreFindIF>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	75bb      	strb	r3, [r7, #22]
            break;
 8005e9e:	e00d      	b.n	8005ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fa60 	bl	8006370 <USBD_CoreFindEP>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75bb      	strb	r3, [r7, #22]
            break;
 8005eb4:	e002      	b.n	8005ebc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75bb      	strb	r3, [r7, #22]
            break;
 8005eba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ebc:	7dbb      	ldrb	r3, [r7, #22]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d119      	bne.n	8005ef6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d113      	bne.n	8005ef6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ece:	7dba      	ldrb	r2, [r7, #22]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	32ae      	adds	r2, #174	; 0xae
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ede:	7dba      	ldrb	r2, [r7, #22]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	32ae      	adds	r2, #174	; 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f001 f94a 	bl	8007190 <USBD_CtlSendStatus>
 8005efc:	e032      	b.n	8005f64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fa31 	bl	8006370 <USBD_CoreFindEP>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	2bff      	cmp	r3, #255	; 0xff
 8005f16:	d025      	beq.n	8005f64 <USBD_LL_DataOutStage+0x15c>
 8005f18:	7dbb      	ldrb	r3, [r7, #22]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d122      	bne.n	8005f64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d117      	bne.n	8005f5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f2a:	7dba      	ldrb	r2, [r7, #22]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	32ae      	adds	r2, #174	; 0xae
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f3a:	7dba      	ldrb	r2, [r7, #22]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f42:	7dba      	ldrb	r2, [r7, #22]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	32ae      	adds	r2, #174	; 0xae
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	7afa      	ldrb	r2, [r7, #11]
 8005f50:	4611      	mov	r1, r2
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	4798      	blx	r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	e000      	b.n	8005f66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	460b      	mov	r3, r1
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d16f      	bne.n	8006062 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3314      	adds	r3, #20
 8005f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d15a      	bne.n	8006048 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d914      	bls.n	8005fc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 f8ac 	bl	8007112 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f004 fb05 	bl	800a5d0 <USBD_LL_PrepareReceive>
 8005fc6:	e03f      	b.n	8006048 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d11c      	bne.n	800600e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d316      	bcc.n	800600e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d20f      	bcs.n	800600e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 f88d 	bl	8007112 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f004 fae2 	bl	800a5d0 <USBD_LL_PrepareReceive>
 800600c:	e01c      	b.n	8006048 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b03      	cmp	r3, #3
 8006018:	d10f      	bne.n	800603a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f004 fa1d 	bl	800a47c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 f8b7 	bl	80071b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d03a      	beq.n	80060c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fe42 	bl	8005cdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006060:	e032      	b.n	80060c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006062:	7afb      	ldrb	r3, [r7, #11]
 8006064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006068:	b2db      	uxtb	r3, r3
 800606a:	4619      	mov	r1, r3
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f97f 	bl	8006370 <USBD_CoreFindEP>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2bff      	cmp	r3, #255	; 0xff
 800607a:	d025      	beq.n	80060c8 <USBD_LL_DataInStage+0x15a>
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d122      	bne.n	80060c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b03      	cmp	r3, #3
 800608c:	d11c      	bne.n	80060c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800608e:	7dfa      	ldrb	r2, [r7, #23]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d014      	beq.n	80060c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800609e:	7dfa      	ldrb	r2, [r7, #23]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060a6:	7dfa      	ldrb	r2, [r7, #23]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	32ae      	adds	r2, #174	; 0xae
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	7afa      	ldrb	r2, [r7, #11]
 80060b4:	4611      	mov	r1, r2
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060be:	7dbb      	ldrb	r3, [r7, #22]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060c4:	7dbb      	ldrb	r3, [r7, #22]
 80060c6:	e000      	b.n	80060ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d014      	beq.n	8006138 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6852      	ldr	r2, [r2, #4]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	4611      	mov	r1, r2
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006138:	2340      	movs	r3, #64	; 0x40
 800613a:	2200      	movs	r2, #0
 800613c:	2100      	movs	r1, #0
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f004 f957 	bl	800a3f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	; 0x80
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f004 f949 	bl	800a3f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2240      	movs	r2, #64	; 0x40
 800616a:	621a      	str	r2, [r3, #32]

  return ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2204      	movs	r2, #4
 80061b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d106      	bne.n	80061e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d110      	bne.n	8006228 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	32ae      	adds	r2, #174	; 0xae
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006250:	2303      	movs	r3, #3
 8006252:	e01c      	b.n	800628e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d115      	bne.n	800628c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	32ae      	adds	r2, #174	; 0xae
 800626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	32ae      	adds	r2, #174	; 0xae
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4611      	mov	r1, r2
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32ae      	adds	r2, #174	; 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01c      	b.n	80062f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d115      	bne.n	80062f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32ae      	adds	r2, #174	; 0xae
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32ae      	adds	r2, #174	; 0xae
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	4611      	mov	r1, r2
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00e      	beq.n	800634c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006362:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800637c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	885b      	ldrh	r3, [r3, #2]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d920      	bls.n	80063f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063ba:	e013      	b.n	80063e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063bc:	f107 030a 	add.w	r3, r7, #10
 80063c0:	4619      	mov	r1, r3
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f000 f81b 	bl	80063fe <USBD_GetNextDesc>
 80063c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d108      	bne.n	80063e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	789b      	ldrb	r3, [r3, #2]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d008      	beq.n	80063f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	885b      	ldrh	r3, [r3, #2]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	897b      	ldrh	r3, [r7, #10]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d8e5      	bhi.n	80063bc <USBD_GetEpDesc+0x32>
 80063f0:	e000      	b.n	80063f4 <USBD_GetEpDesc+0x6a>
          break;
 80063f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063f4:	693b      	ldr	r3, [r7, #16]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	881a      	ldrh	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	4413      	add	r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4413      	add	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	3301      	adds	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006456:	8a3b      	ldrh	r3, [r7, #16]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	b21a      	sxth	r2, r3
 800645c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006460:	4313      	orrs	r3, r2
 8006462:	b21b      	sxth	r3, r3
 8006464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006466:	89fb      	ldrh	r3, [r7, #14]
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d005      	beq.n	800649a <USBD_StdDevReq+0x26>
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d857      	bhi.n	8006542 <USBD_StdDevReq+0xce>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00f      	beq.n	80064b6 <USBD_StdDevReq+0x42>
 8006496:	2b20      	cmp	r3, #32
 8006498:	d153      	bne.n	8006542 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	32ae      	adds	r2, #174	; 0xae
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e04a      	b.n	800654c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b09      	cmp	r3, #9
 80064bc:	d83b      	bhi.n	8006536 <USBD_StdDevReq+0xc2>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <USBD_StdDevReq+0x50>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	08006519 	.word	0x08006519
 80064c8:	0800652d 	.word	0x0800652d
 80064cc:	08006537 	.word	0x08006537
 80064d0:	08006523 	.word	0x08006523
 80064d4:	08006537 	.word	0x08006537
 80064d8:	080064f7 	.word	0x080064f7
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	08006537 	.word	0x08006537
 80064e4:	0800650f 	.word	0x0800650f
 80064e8:	08006501 	.word	0x08006501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa3c 	bl	800696c <USBD_GetDescriptor>
          break;
 80064f4:	e024      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fba1 	bl	8006c40 <USBD_SetAddress>
          break;
 80064fe:	e01f      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fbe0 	bl	8006cc8 <USBD_SetConfig>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
          break;
 800650c:	e018      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fc83 	bl	8006e1c <USBD_GetConfig>
          break;
 8006516:	e013      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fcb4 	bl	8006e88 <USBD_GetStatus>
          break;
 8006520:	e00e      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fce3 	bl	8006ef0 <USBD_SetFeature>
          break;
 800652a:	e009      	b.n	8006540 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fd07 	bl	8006f42 <USBD_ClrFeature>
          break;
 8006534:	e004      	b.n	8006540 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fd5e 	bl	8006ffa <USBD_CtlError>
          break;
 800653e:	bf00      	nop
      }
      break;
 8006540:	e004      	b.n	800654c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fd58 	bl	8006ffa <USBD_CtlError>
      break;
 800654a:	bf00      	nop
  }

  return ret;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d005      	beq.n	800657e <USBD_StdItfReq+0x26>
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d852      	bhi.n	800661c <USBD_StdItfReq+0xc4>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <USBD_StdItfReq+0x26>
 800657a:	2b20      	cmp	r3, #32
 800657c:	d14e      	bne.n	800661c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	2b02      	cmp	r3, #2
 800658a:	d840      	bhi.n	800660e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	889b      	ldrh	r3, [r3, #4]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d836      	bhi.n	8006604 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	889b      	ldrh	r3, [r3, #4]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fed9 	bl	8006356 <USBD_CoreFindIF>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2bff      	cmp	r3, #255	; 0xff
 80065ac:	d01d      	beq.n	80065ea <USBD_StdItfReq+0x92>
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d11a      	bne.n	80065ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065b4:	7bba      	ldrb	r2, [r7, #14]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	32ae      	adds	r2, #174	; 0xae
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00f      	beq.n	80065e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065c4:	7bba      	ldrb	r2, [r7, #14]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065cc:	7bba      	ldrb	r2, [r7, #14]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32ae      	adds	r2, #174	; 0xae
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065e2:	e004      	b.n	80065ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065e8:	e001      	b.n	80065ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065ea:	2303      	movs	r3, #3
 80065ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d110      	bne.n	8006618 <USBD_StdItfReq+0xc0>
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10d      	bne.n	8006618 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fdc7 	bl	8007190 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006602:	e009      	b.n	8006618 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fcf7 	bl	8006ffa <USBD_CtlError>
          break;
 800660c:	e004      	b.n	8006618 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fcf2 	bl	8006ffa <USBD_CtlError>
          break;
 8006616:	e000      	b.n	800661a <USBD_StdItfReq+0xc2>
          break;
 8006618:	bf00      	nop
      }
      break;
 800661a:	e004      	b.n	8006626 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fceb 	bl	8006ffa <USBD_CtlError>
      break;
 8006624:	bf00      	nop
  }

  return ret;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	889b      	ldrh	r3, [r3, #4]
 8006642:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d007      	beq.n	8006660 <USBD_StdEPReq+0x30>
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	f200 817f 	bhi.w	8006954 <USBD_StdEPReq+0x324>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02a      	beq.n	80066b0 <USBD_StdEPReq+0x80>
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 817a 	bne.w	8006954 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff fe83 	bl	8006370 <USBD_CoreFindEP>
 800666a:	4603      	mov	r3, r0
 800666c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800666e:	7b7b      	ldrb	r3, [r7, #13]
 8006670:	2bff      	cmp	r3, #255	; 0xff
 8006672:	f000 8174 	beq.w	800695e <USBD_StdEPReq+0x32e>
 8006676:	7b7b      	ldrb	r3, [r7, #13]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f040 8170 	bne.w	800695e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800667e:	7b7a      	ldrb	r2, [r7, #13]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006686:	7b7a      	ldrb	r2, [r7, #13]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	32ae      	adds	r2, #174	; 0xae
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8163 	beq.w	800695e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006698:	7b7a      	ldrb	r2, [r7, #13]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	32ae      	adds	r2, #174	; 0xae
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066ae:	e156      	b.n	800695e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d008      	beq.n	80066ca <USBD_StdEPReq+0x9a>
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	f300 8145 	bgt.w	8006948 <USBD_StdEPReq+0x318>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 809b 	beq.w	80067fa <USBD_StdEPReq+0x1ca>
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d03c      	beq.n	8006742 <USBD_StdEPReq+0x112>
 80066c8:	e13e      	b.n	8006948 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d002      	beq.n	80066dc <USBD_StdEPReq+0xac>
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d016      	beq.n	8006708 <USBD_StdEPReq+0xd8>
 80066da:	e02c      	b.n	8006736 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00d      	beq.n	80066fe <USBD_StdEPReq+0xce>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d00a      	beq.n	80066fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f003 fec5 	bl	800a47c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f003 fec1 	bl	800a47c <USBD_LL_StallEP>
 80066fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066fc:	e020      	b.n	8006740 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fc7a 	bl	8006ffa <USBD_CtlError>
              break;
 8006706:	e01b      	b.n	8006740 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	885b      	ldrh	r3, [r3, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10e      	bne.n	800672e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <USBD_StdEPReq+0xfe>
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d008      	beq.n	800672e <USBD_StdEPReq+0xfe>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	88db      	ldrh	r3, [r3, #6]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f003 fea7 	bl	800a47c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fd2e 	bl	8007190 <USBD_CtlSendStatus>

              break;
 8006734:	e004      	b.n	8006740 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fc5e 	bl	8006ffa <USBD_CtlError>
              break;
 800673e:	bf00      	nop
          }
          break;
 8006740:	e107      	b.n	8006952 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d002      	beq.n	8006754 <USBD_StdEPReq+0x124>
 800674e:	2b03      	cmp	r3, #3
 8006750:	d016      	beq.n	8006780 <USBD_StdEPReq+0x150>
 8006752:	e04b      	b.n	80067ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <USBD_StdEPReq+0x146>
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d00a      	beq.n	8006776 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f003 fe89 	bl	800a47c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f003 fe85 	bl	800a47c <USBD_LL_StallEP>
 8006772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006774:	e040      	b.n	80067f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fc3e 	bl	8006ffa <USBD_CtlError>
              break;
 800677e:	e03b      	b.n	80067f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	885b      	ldrh	r3, [r3, #2]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d136      	bne.n	80067f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 fe8f 	bl	800a4ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fcf7 	bl	8007190 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fde2 	bl	8006370 <USBD_CoreFindEP>
 80067ac:	4603      	mov	r3, r0
 80067ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067b0:	7b7b      	ldrb	r3, [r7, #13]
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d01f      	beq.n	80067f6 <USBD_StdEPReq+0x1c6>
 80067b6:	7b7b      	ldrb	r3, [r7, #13]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11c      	bne.n	80067f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067c4:	7b7a      	ldrb	r2, [r7, #13]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	; 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067d4:	7b7a      	ldrb	r2, [r7, #13]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32ae      	adds	r2, #174	; 0xae
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4798      	blx	r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067ea:	e004      	b.n	80067f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc03 	bl	8006ffa <USBD_CtlError>
              break;
 80067f4:	e000      	b.n	80067f8 <USBD_StdEPReq+0x1c8>
              break;
 80067f6:	bf00      	nop
          }
          break;
 80067f8:	e0ab      	b.n	8006952 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d002      	beq.n	800680c <USBD_StdEPReq+0x1dc>
 8006806:	2b03      	cmp	r3, #3
 8006808:	d032      	beq.n	8006870 <USBD_StdEPReq+0x240>
 800680a:	e097      	b.n	800693c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <USBD_StdEPReq+0x1f2>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d004      	beq.n	8006822 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fbed 	bl	8006ffa <USBD_CtlError>
                break;
 8006820:	e091      	b.n	8006946 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da0b      	bge.n	8006842 <USBD_StdEPReq+0x212>
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	3310      	adds	r3, #16
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	3304      	adds	r3, #4
 8006840:	e00b      	b.n	800685a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	3304      	adds	r3, #4
 800685a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2202      	movs	r2, #2
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fc37 	bl	80070dc <USBD_CtlSendData>
              break;
 800686e:	e06a      	b.n	8006946 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	da11      	bge.n	800689c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	f003 020f 	and.w	r2, r3, #15
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	3324      	adds	r3, #36	; 0x24
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d117      	bne.n	80068c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fbb0 	bl	8006ffa <USBD_CtlError>
                  break;
 800689a:	e054      	b.n	8006946 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fb9d 	bl	8006ffa <USBD_CtlError>
                  break;
 80068c0:	e041      	b.n	8006946 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da0b      	bge.n	80068e2 <USBD_StdEPReq+0x2b2>
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	3310      	adds	r3, #16
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	3304      	adds	r3, #4
 80068e0:	e00b      	b.n	80068fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	3304      	adds	r3, #4
 80068fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <USBD_StdEPReq+0x2d8>
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b80      	cmp	r3, #128	; 0x80
 8006906:	d103      	bne.n	8006910 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e00e      	b.n	800692e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f003 fdef 	bl	800a4f8 <USBD_LL_IsStallEP>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e002      	b.n	800692e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2202      	movs	r2, #2
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fbd1 	bl	80070dc <USBD_CtlSendData>
              break;
 800693a:	e004      	b.n	8006946 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fb5b 	bl	8006ffa <USBD_CtlError>
              break;
 8006944:	bf00      	nop
          }
          break;
 8006946:	e004      	b.n	8006952 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb55 	bl	8006ffa <USBD_CtlError>
          break;
 8006950:	bf00      	nop
      }
      break;
 8006952:	e005      	b.n	8006960 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb4f 	bl	8006ffa <USBD_CtlError>
      break;
 800695c:	e000      	b.n	8006960 <USBD_StdEPReq+0x330>
      break;
 800695e:	bf00      	nop
  }

  return ret;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	2b06      	cmp	r3, #6
 800698e:	f200 8128 	bhi.w	8006be2 <USBD_GetDescriptor+0x276>
 8006992:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBD_GetDescriptor+0x2c>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006be3 	.word	0x08006be3
 80069a8:	08006be3 	.word	0x08006be3
 80069ac:	08006b83 	.word	0x08006b83
 80069b0:	08006baf 	.word	0x08006baf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7c12      	ldrb	r2, [r2, #16]
 80069c0:	f107 0108 	add.w	r1, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
      break;
 80069ca:	e112      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2202      	movs	r2, #2
 80069ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069ee:	e100      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	f107 0208 	add.w	r2, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	2202      	movs	r2, #2
 8006a08:	701a      	strb	r2, [r3, #0]
      break;
 8006a0a:	e0f2      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	f200 80ac 	bhi.w	8006b70 <USBD_GetDescriptor+0x204>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_GetDescriptor+0xb4>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a39 	.word	0x08006a39
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006ad5 	.word	0x08006ad5
 8006a30:	08006b09 	.word	0x08006b09
 8006a34:	08006b3d 	.word	0x08006b3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5a:	e091      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 facb 	bl	8006ffa <USBD_CtlError>
            err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6a:	e089      	b.n	8006b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	7c12      	ldrb	r2, [r2, #16]
 8006a84:	f107 0108 	add.w	r1, r7, #8
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8e:	e077      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fab1 	bl	8006ffa <USBD_CtlError>
            err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9e:	e06f      	b.n	8006b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	7c12      	ldrb	r2, [r2, #16]
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
 8006ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ac2:	e05d      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa97 	bl	8006ffa <USBD_CtlError>
            err++;
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ad2:	e055      	b.n	8006b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	7c12      	ldrb	r2, [r2, #16]
 8006aec:	f107 0108 	add.w	r1, r7, #8
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af6:	e043      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa7d 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	3301      	adds	r3, #1
 8006b04:	72fb      	strb	r3, [r7, #11]
          break;
 8006b06:	e03b      	b.n	8006b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7c12      	ldrb	r2, [r2, #16]
 8006b20:	f107 0108 	add.w	r1, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b2a:	e029      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa63 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	3301      	adds	r3, #1
 8006b38:	72fb      	strb	r3, [r7, #11]
          break;
 8006b3a:	e021      	b.n	8006b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	7c12      	ldrb	r2, [r2, #16]
 8006b54:	f107 0108 	add.w	r1, r7, #8
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
 8006b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b5e:	e00f      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa49 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b6e:	e007      	b.n	8006b80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa41 	bl	8006ffa <USBD_CtlError>
          err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b7e:	bf00      	nop
      }
      break;
 8006b80:	e037      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7c1b      	ldrb	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f107 0208 	add.w	r2, r7, #8
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b9c:	e029      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa2a 	bl	8006ffa <USBD_CtlError>
        err++;
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	72fb      	strb	r3, [r7, #11]
      break;
 8006bac:	e021      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
 8006bc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	2207      	movs	r2, #7
 8006bce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bd0:	e00f      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fa10 	bl	8006ffa <USBD_CtlError>
        err++;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	72fb      	strb	r3, [r7, #11]
      break;
 8006be0:	e007      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa08 	bl	8006ffa <USBD_CtlError>
      err++;
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	3301      	adds	r3, #1
 8006bee:	72fb      	strb	r3, [r7, #11]
      break;
 8006bf0:	bf00      	nop
  }

  if (err != 0U)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11e      	bne.n	8006c36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	88db      	ldrh	r3, [r3, #6]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d016      	beq.n	8006c2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00e      	beq.n	8006c24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88da      	ldrh	r2, [r3, #6]
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf28      	it	cs
 8006c10:	4613      	movcs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c16:	893b      	ldrh	r3, [r7, #8]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa5d 	bl	80070dc <USBD_CtlSendData>
 8006c22:	e009      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9e7 	bl	8006ffa <USBD_CtlError>
 8006c2c:	e004      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 faae 	bl	8007190 <USBD_CtlSendStatus>
 8006c34:	e000      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
    return;
 8006c36:	bf00      	nop
  }
}
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop

08006c40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	889b      	ldrh	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d131      	bne.n	8006cb6 <USBD_SetAddress+0x76>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d12d      	bne.n	8006cb6 <USBD_SetAddress+0x76>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	885b      	ldrh	r3, [r3, #2]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d829      	bhi.n	8006cb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d104      	bne.n	8006c84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9bc 	bl	8006ffa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	e01d      	b.n	8006cc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f003 fc5d 	bl	800a550 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa7a 	bl	8007190 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006caa:	e009      	b.n	8006cc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb4:	e004      	b.n	8006cc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f99e 	bl	8006ffa <USBD_CtlError>
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	4b4e      	ldr	r3, [pc, #312]	; (8006e18 <USBD_SetConfig+0x150>)
 8006cde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ce0:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <USBD_SetConfig+0x150>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d905      	bls.n	8006cf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f985 	bl	8006ffa <USBD_CtlError>
    return USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e08c      	b.n	8006e0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d002      	beq.n	8006d06 <USBD_SetConfig+0x3e>
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d029      	beq.n	8006d58 <USBD_SetConfig+0x90>
 8006d04:	e075      	b.n	8006df2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d06:	4b44      	ldr	r3, [pc, #272]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d020      	beq.n	8006d50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d0e:	4b42      	ldr	r3, [pc, #264]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d18:	4b3f      	ldr	r3, [pc, #252]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fe ffe7 	bl	8005cf2 <USBD_SetClassConfig>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f962 	bl	8006ffa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d3e:	e065      	b.n	8006e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa25 	bl	8007190 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d4e:	e05d      	b.n	8006e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa1d 	bl	8007190 <USBD_CtlSendStatus>
      break;
 8006d56:	e059      	b.n	8006e0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d58:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d112      	bne.n	8006d86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d68:	4b2b      	ldr	r3, [pc, #172]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d72:	4b29      	ldr	r3, [pc, #164]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fe ffd6 	bl	8005d2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa06 	bl	8007190 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d84:	e042      	b.n	8006e0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <USBD_SetConfig+0x150>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d02a      	beq.n	8006dea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fe ffc4 	bl	8005d2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006da2:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <USBD_SetConfig+0x150>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <USBD_SetConfig+0x150>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fe ff9d 	bl	8005cf2 <USBD_SetClassConfig>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00f      	beq.n	8006de2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f918 	bl	8006ffa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fe ffa9 	bl	8005d2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006de0:	e014      	b.n	8006e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f9d4 	bl	8007190 <USBD_CtlSendStatus>
      break;
 8006de8:	e010      	b.n	8006e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9d0 	bl	8007190 <USBD_CtlSendStatus>
      break;
 8006df0:	e00c      	b.n	8006e0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f900 	bl	8006ffa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <USBD_SetConfig+0x150>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe ff92 	bl	8005d2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e06:	2303      	movs	r3, #3
 8006e08:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0a:	bf00      	nop
  }

  return ret;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200001d8 	.word	0x200001d8

08006e1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d004      	beq.n	8006e38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f8e2 	bl	8006ffa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e36:	e023      	b.n	8006e80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	dc02      	bgt.n	8006e4a <USBD_GetConfig+0x2e>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc03      	bgt.n	8006e50 <USBD_GetConfig+0x34>
 8006e48:	e015      	b.n	8006e76 <USBD_GetConfig+0x5a>
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d00b      	beq.n	8006e66 <USBD_GetConfig+0x4a>
 8006e4e:	e012      	b.n	8006e76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f93c 	bl	80070dc <USBD_CtlSendData>
        break;
 8006e64:	e00c      	b.n	8006e80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f934 	bl	80070dc <USBD_CtlSendData>
        break;
 8006e74:	e004      	b.n	8006e80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f8be 	bl	8006ffa <USBD_CtlError>
        break;
 8006e7e:	bf00      	nop
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d81e      	bhi.n	8006ede <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	88db      	ldrh	r3, [r3, #6]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d004      	beq.n	8006eb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8a5 	bl	8006ffa <USBD_CtlError>
        break;
 8006eb0:	e01a      	b.n	8006ee8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 0202 	orr.w	r2, r3, #2
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f900 	bl	80070dc <USBD_CtlSendData>
      break;
 8006edc:	e004      	b.n	8006ee8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f88a 	bl	8006ffa <USBD_CtlError>
      break;
 8006ee6:	bf00      	nop
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f940 	bl	8007190 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f10:	e013      	b.n	8006f3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	885b      	ldrh	r3, [r3, #2]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d10b      	bne.n	8006f32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	889b      	ldrh	r3, [r3, #4]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f930 	bl	8007190 <USBD_CtlSendStatus>
}
 8006f30:	e003      	b.n	8006f3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f860 	bl	8006ffa <USBD_CtlError>
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d80b      	bhi.n	8006f72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d10c      	bne.n	8006f7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f910 	bl	8007190 <USBD_CtlSendStatus>
      }
      break;
 8006f70:	e004      	b.n	8006f7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f840 	bl	8006ffa <USBD_CtlError>
      break;
 8006f7a:	e000      	b.n	8006f7e <USBD_ClrFeature+0x3c>
      break;
 8006f7c:	bf00      	nop
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	781a      	ldrb	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3301      	adds	r3, #1
 8006fae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fa41 	bl	8006438 <SWAPBYTE>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fa34 	bl	8006438 <SWAPBYTE>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff fa27 	bl	8006438 <SWAPBYTE>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	80da      	strh	r2, [r3, #6]
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f003 fa38 	bl	800a47c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f003 fa34 	bl	800a47c <USBD_LL_StallEP>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d036      	beq.n	80070a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007036:	6938      	ldr	r0, [r7, #16]
 8007038:	f000 f836 	bl	80070a8 <USBD_GetLen>
 800703c:	4603      	mov	r3, r0
 800703e:	3301      	adds	r3, #1
 8007040:	b29b      	uxth	r3, r3
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4413      	add	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	701a      	strb	r2, [r3, #0]
  idx++;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	3301      	adds	r3, #1
 800705a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	2203      	movs	r2, #3
 8007064:	701a      	strb	r2, [r3, #0]
  idx++;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	3301      	adds	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800706c:	e013      	b.n	8007096 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	4413      	add	r3, r2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]
    idx++;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	3301      	adds	r3, #1
 8007084:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	4413      	add	r3, r2
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	3301      	adds	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e7      	bne.n	800706e <USBD_GetString+0x52>
 800709e:	e000      	b.n	80070a2 <USBD_GetString+0x86>
    return;
 80070a0:	bf00      	nop
  }
}
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070b8:	e005      	b.n	80070c6 <USBD_GetLen+0x1e>
  {
    len++;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	3301      	adds	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f5      	bne.n	80070ba <USBD_GetLen+0x12>
  }

  return len;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f003 fa43 	bl	800a58e <USBD_LL_Transmit>

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	2100      	movs	r1, #0
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f003 fa32 	bl	800a58e <USBD_LL_Transmit>

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2203      	movs	r2, #3
 8007144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f003 fa36 	bl	800a5d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	2100      	movs	r1, #0
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f003 fa25 	bl	800a5d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2204      	movs	r2, #4
 800719c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071a0:	2300      	movs	r3, #0
 80071a2:	2200      	movs	r2, #0
 80071a4:	2100      	movs	r1, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f003 f9f1 	bl	800a58e <USBD_LL_Transmit>

  return USBD_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2205      	movs	r2, #5
 80071c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f003 f9ff 	bl	800a5d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <__NVIC_SetPriority>:
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	db0a      	blt.n	8007206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	490c      	ldr	r1, [pc, #48]	; (8007228 <__NVIC_SetPriority+0x4c>)
 80071f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fa:	0112      	lsls	r2, r2, #4
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	440b      	add	r3, r1
 8007200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007204:	e00a      	b.n	800721c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	4908      	ldr	r1, [pc, #32]	; (800722c <__NVIC_SetPriority+0x50>)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	3b04      	subs	r3, #4
 8007214:	0112      	lsls	r2, r2, #4
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	440b      	add	r3, r1
 800721a:	761a      	strb	r2, [r3, #24]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	e000e100 	.word	0xe000e100
 800722c:	e000ed00 	.word	0xe000ed00

08007230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007234:	2100      	movs	r1, #0
 8007236:	f06f 0004 	mvn.w	r0, #4
 800723a:	f7ff ffcf 	bl	80071dc <__NVIC_SetPriority>
#endif
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800724a:	f3ef 8305 	mrs	r3, IPSR
 800724e:	603b      	str	r3, [r7, #0]
  return(result);
 8007250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007256:	f06f 0305 	mvn.w	r3, #5
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	e00c      	b.n	8007278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <osKernelInitialize+0x44>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <osKernelInitialize+0x44>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800726c:	2300      	movs	r3, #0
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	e002      	b.n	8007278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007278:	687b      	ldr	r3, [r7, #4]
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	200001dc 	.word	0x200001dc

0800728c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	603b      	str	r3, [r7, #0]
  return(result);
 8007298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800729e:	f06f 0305 	mvn.w	r3, #5
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e010      	b.n	80072c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <osKernelStart+0x48>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d109      	bne.n	80072c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072ae:	f7ff ffbf 	bl	8007230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <osKernelStart+0x48>)
 80072b4:	2202      	movs	r2, #2
 80072b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072b8:	f001 f866 	bl	8008388 <vTaskStartScheduler>
      stat = osOK;
 80072bc:	2300      	movs	r3, #0
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	e002      	b.n	80072c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072c8:	687b      	ldr	r3, [r7, #4]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200001dc 	.word	0x200001dc

080072d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e8:	f3ef 8305 	mrs	r3, IPSR
 80072ec:	617b      	str	r3, [r7, #20]
  return(result);
 80072ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d17e      	bne.n	80073f2 <osThreadNew+0x11a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d07b      	beq.n	80073f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072fa:	2380      	movs	r3, #128	; 0x80
 80072fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072fe:	2318      	movs	r3, #24
 8007300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d045      	beq.n	800739e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <osThreadNew+0x48>
        name = attr->name;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <osThreadNew+0x6e>
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b38      	cmp	r3, #56	; 0x38
 8007338:	d805      	bhi.n	8007346 <osThreadNew+0x6e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <osThreadNew+0x72>
        return (NULL);
 8007346:	2300      	movs	r3, #0
 8007348:	e054      	b.n	80073f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00e      	beq.n	8007380 <osThreadNew+0xa8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b5b      	cmp	r3, #91	; 0x5b
 8007368:	d90a      	bls.n	8007380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800736e:	2b00      	cmp	r3, #0
 8007370:	d006      	beq.n	8007380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <osThreadNew+0xa8>
        mem = 1;
 800737a:	2301      	movs	r3, #1
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	e010      	b.n	80073a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10c      	bne.n	80073a2 <osThreadNew+0xca>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <osThreadNew+0xca>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <osThreadNew+0xca>
          mem = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e001      	b.n	80073a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d110      	bne.n	80073ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b0:	9202      	str	r2, [sp, #8]
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fe0c 	bl	8007fdc <xTaskCreateStatic>
 80073c4:	4603      	mov	r3, r0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e013      	b.n	80073f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d110      	bne.n	80073f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f107 0310 	add.w	r3, r7, #16
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fe57 	bl	8008096 <xTaskCreate>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d001      	beq.n	80073f2 <osThreadNew+0x11a>
            hTask = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073f2:	693b      	ldr	r3, [r7, #16]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3728      	adds	r7, #40	; 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007404:	f3ef 8305 	mrs	r3, IPSR
 8007408:	60bb      	str	r3, [r7, #8]
  return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <osDelay+0x1c>
    stat = osErrorISR;
 8007410:	f06f 0305 	mvn.w	r3, #5
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e007      	b.n	8007428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 ff7c 	bl	8008320 <vTaskDelay>
    }
  }

  return (stat);
 8007428:	68fb      	ldr	r3, [r7, #12]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4a07      	ldr	r2, [pc, #28]	; (8007460 <vApplicationGetIdleTaskMemory+0x2c>)
 8007444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4a06      	ldr	r2, [pc, #24]	; (8007464 <vApplicationGetIdleTaskMemory+0x30>)
 800744a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2280      	movs	r2, #128	; 0x80
 8007450:	601a      	str	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	200001e0 	.word	0x200001e0
 8007464:	2000023c 	.word	0x2000023c

08007468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a07      	ldr	r2, [pc, #28]	; (8007494 <vApplicationGetTimerTaskMemory+0x2c>)
 8007478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4a06      	ldr	r2, [pc, #24]	; (8007498 <vApplicationGetTimerTaskMemory+0x30>)
 800747e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007486:	601a      	str	r2, [r3, #0]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	2000043c 	.word	0x2000043c
 8007498:	20000498 	.word	0x20000498

0800749c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f103 0208 	add.w	r2, r3, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f04f 32ff 	mov.w	r2, #4294967295
 80074b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 0208 	add.w	r2, r3, #8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f103 0208 	add.w	r2, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d103      	bne.n	800755e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e00c      	b.n	8007578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3308      	adds	r3, #8
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e002      	b.n	800756c <vListInsert+0x2e>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	d2f6      	bcs.n	8007566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6892      	ldr	r2, [r2, #8]
 80075c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6852      	ldr	r2, [r2, #4]
 80075d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d103      	bne.n	80075e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800762e:	f002 f851 	bl	80096d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	441a      	add	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	3b01      	subs	r3, #1
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	441a      	add	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	22ff      	movs	r2, #255	; 0xff
 8007672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d114      	bne.n	80076ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01a      	beq.n	80076c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3310      	adds	r3, #16
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f903 	bl	800889c <xTaskRemoveFromEventList>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d012      	beq.n	80076c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <xQueueGenericReset+0xcc>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	e009      	b.n	80076c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3310      	adds	r3, #16
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fef2 	bl	800749c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3324      	adds	r3, #36	; 0x24
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff feed 	bl	800749c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076c2:	f002 f837 	bl	8009734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076c6:	2301      	movs	r3, #1
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	; 0x38
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <xQueueGenericCreateStatic+0x52>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <xQueueGenericCreateStatic+0x56>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <xQueueGenericCreateStatic+0x58>
 800772a:	2300      	movs	r3, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	623b      	str	r3, [r7, #32]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <xQueueGenericCreateStatic+0x7e>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <xQueueGenericCreateStatic+0x82>
 8007752:	2301      	movs	r3, #1
 8007754:	e000      	b.n	8007758 <xQueueGenericCreateStatic+0x84>
 8007756:	2300      	movs	r3, #0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	61fb      	str	r3, [r7, #28]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007772:	2350      	movs	r3, #80	; 0x50
 8007774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b50      	cmp	r3, #80	; 0x50
 800777a:	d00a      	beq.n	8007792 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	61bb      	str	r3, [r7, #24]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007792:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f805 	bl	80077c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077bc:	4618      	mov	r0, r3
 80077be:	3730      	adds	r7, #48	; 0x30
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e002      	b.n	80077e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077f2:	2101      	movs	r1, #1
 80077f4:	69b8      	ldr	r0, [r7, #24]
 80077f6:	f7ff ff05 	bl	8007604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08e      	sub	sp, #56	; 0x38
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericSend+0x32>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <xQueueGenericSend+0x40>
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <xQueueGenericSend+0x44>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <xQueueGenericSend+0x46>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <xQueueGenericSend+0x60>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d103      	bne.n	800787a <xQueueGenericSend+0x6e>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <xQueueGenericSend+0x72>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <xQueueGenericSend+0x74>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <xQueueGenericSend+0x8e>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	623b      	str	r3, [r7, #32]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800789a:	f001 f9bd 	bl	8008c18 <xTaskGetSchedulerState>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <xQueueGenericSend+0x9e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <xQueueGenericSend+0xa2>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <xQueueGenericSend+0xa4>
 80078ae:	2300      	movs	r3, #0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <xQueueGenericSend+0xbe>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	61fb      	str	r3, [r7, #28]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ca:	f001 ff03 	bl	80096d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <xQueueGenericSend+0xd4>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d129      	bne.n	8007934 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e6:	f000 fa0b 	bl	8007d00 <prvCopyDataToQueue>
 80078ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	3324      	adds	r3, #36	; 0x24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 ffcf 	bl	800889c <xTaskRemoveFromEventList>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d013      	beq.n	800792c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007904:	4b3f      	ldr	r3, [pc, #252]	; (8007a04 <xQueueGenericSend+0x1f8>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	e00a      	b.n	800792c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800791c:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <xQueueGenericSend+0x1f8>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800792c:	f001 ff02 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	e063      	b.n	80079fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800793a:	f001 fefb 	bl	8009734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800793e:	2300      	movs	r3, #0
 8007940:	e05c      	b.n	80079fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	4618      	mov	r0, r3
 800794e:	f001 f809 	bl	8008964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007952:	2301      	movs	r3, #1
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007956:	f001 feed 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800795a:	f000 fd7b 	bl	8008454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795e:	f001 feb9 	bl	80096d4 <vPortEnterCritical>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007968:	b25b      	sxtb	r3, r3
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d103      	bne.n	8007978 <xQueueGenericSend+0x16c>
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797e:	b25b      	sxtb	r3, r3
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d103      	bne.n	800798e <xQueueGenericSend+0x182>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800798e:	f001 fed1 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007992:	1d3a      	adds	r2, r7, #4
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fff8 	bl	8008990 <xTaskCheckForTimeOut>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d124      	bne.n	80079f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a8:	f000 faa2 	bl	8007ef0 <prvIsQueueFull>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	3310      	adds	r3, #16
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 ff1e 	bl	80087fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c2:	f000 fa2d 	bl	8007e20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079c6:	f000 fd53 	bl	8008470 <xTaskResumeAll>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f47f af7c 	bne.w	80078ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <xQueueGenericSend+0x1f8>)
 80079d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	e772      	b.n	80078ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e6:	f000 fa1b 	bl	8007e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ea:	f000 fd41 	bl	8008470 <xTaskResumeAll>
 80079ee:	e76c      	b.n	80078ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f2:	f000 fa15 	bl	8007e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f6:	f000 fd3b 	bl	8008470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3738      	adds	r7, #56	; 0x38
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b090      	sub	sp, #64	; 0x40
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <xQueueGenericSendFromISR+0x3c>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <xQueueGenericSendFromISR+0x40>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <xQueueGenericSendFromISR+0x42>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d103      	bne.n	8007a72 <xQueueGenericSendFromISR+0x6a>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <xQueueGenericSendFromISR+0x6e>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <xQueueGenericSendFromISR+0x70>
 8007a76:	2300      	movs	r3, #0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	623b      	str	r3, [r7, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a92:	f001 ff01 	bl	8009898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a96:	f3ef 8211 	mrs	r2, BASEPRI
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	61fa      	str	r2, [r7, #28]
 8007aac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007aae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <xQueueGenericSendFromISR+0xbc>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d12f      	bne.n	8007b24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ada:	f000 f911 	bl	8007d00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ade:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d112      	bne.n	8007b0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fed1 	bl	800889c <xTaskRemoveFromEventList>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00e      	beq.n	8007b1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	e007      	b.n	8007b1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b12:	3301      	adds	r3, #1
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	b25a      	sxtb	r2, r3
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b22:	e001      	b.n	8007b28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3740      	adds	r7, #64	; 0x40
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	; 0x30
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <xQueueReceive+0x30>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	623b      	str	r3, [r7, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <xQueueReceive+0x3e>
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <xQueueReceive+0x42>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <xQueueReceive+0x44>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <xQueueReceive+0x5e>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	61fb      	str	r3, [r7, #28]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9e:	f001 f83b 	bl	8008c18 <xTaskGetSchedulerState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xQueueReceive+0x6e>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueReceive+0x72>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueReceive+0x74>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueReceive+0x8e>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	61bb      	str	r3, [r7, #24]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bce:	f001 fd81 	bl	80096d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01f      	beq.n	8007c1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be2:	f000 f8f7 	bl	8007dd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fe4e 	bl	800889c <xTaskRemoveFromEventList>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c06:	4b3d      	ldr	r3, [pc, #244]	; (8007cfc <xQueueReceive+0x1bc>)
 8007c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c16:	f001 fd8d 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e069      	b.n	8007cf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c24:	f001 fd86 	bl	8009734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e062      	b.n	8007cf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fe94 	bl	8008964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c40:	f001 fd78 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c44:	f000 fc06 	bl	8008454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c48:	f001 fd44 	bl	80096d4 <vPortEnterCritical>
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c58:	d103      	bne.n	8007c62 <xQueueReceive+0x122>
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c68:	b25b      	sxtb	r3, r3
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d103      	bne.n	8007c78 <xQueueReceive+0x138>
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c78:	f001 fd5c 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c7c:	1d3a      	adds	r2, r7, #4
 8007c7e:	f107 0310 	add.w	r3, r7, #16
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fe83 	bl	8008990 <xTaskCheckForTimeOut>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d123      	bne.n	8007cd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c92:	f000 f917 	bl	8007ec4 <prvIsQueueEmpty>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d017      	beq.n	8007ccc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fda9 	bl	80087fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cac:	f000 f8b8 	bl	8007e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb0:	f000 fbde 	bl	8008470 <xTaskResumeAll>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d189      	bne.n	8007bce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cba:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <xQueueReceive+0x1bc>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	e780      	b.n	8007bce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cce:	f000 f8a7 	bl	8007e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd2:	f000 fbcd 	bl	8008470 <xTaskResumeAll>
 8007cd6:	e77a      	b.n	8007bce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cda:	f000 f8a1 	bl	8007e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cde:	f000 fbc7 	bl	8008470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce4:	f000 f8ee 	bl	8007ec4 <prvIsQueueEmpty>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f43f af6f 	beq.w	8007bce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3730      	adds	r7, #48	; 0x30
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d14d      	bne.n	8007dc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 ff92 	bl	8008c54 <xTaskPriorityDisinherit>
 8007d30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	609a      	str	r2, [r3, #8]
 8007d38:	e043      	b.n	8007dc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d119      	bne.n	8007d74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6858      	ldr	r0, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	f002 fcdc 	bl	800a708 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	441a      	add	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d32b      	bcc.n	8007dc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	e026      	b.n	8007dc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68d8      	ldr	r0, [r3, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	f002 fcc2 	bl	800a708 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	425b      	negs	r3, r3
 8007d8e:	441a      	add	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d207      	bcs.n	8007db0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	425b      	negs	r3, r3
 8007daa:	441a      	add	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d105      	bne.n	8007dc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d018      	beq.n	8007e18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	441a      	add	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d303      	bcc.n	8007e08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68d9      	ldr	r1, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	461a      	mov	r2, r3
 8007e12:	6838      	ldr	r0, [r7, #0]
 8007e14:	f002 fc78 	bl	800a708 <memcpy>
	}
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e28:	f001 fc54 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e34:	e011      	b.n	8007e5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d012      	beq.n	8007e64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fd2a 	bl	800889c <xTaskRemoveFromEventList>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e4e:	f000 fe01 	bl	8008a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dce9      	bgt.n	8007e36 <prvUnlockQueue+0x16>
 8007e62:	e000      	b.n	8007e66 <prvUnlockQueue+0x46>
					break;
 8007e64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	22ff      	movs	r2, #255	; 0xff
 8007e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e6e:	f001 fc61 	bl	8009734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e72:	f001 fc2f 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e7e:	e011      	b.n	8007ea4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d012      	beq.n	8007eae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3310      	adds	r3, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fd05 	bl	800889c <xTaskRemoveFromEventList>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e98:	f000 fddc 	bl	8008a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dce9      	bgt.n	8007e80 <prvUnlockQueue+0x60>
 8007eac:	e000      	b.n	8007eb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	22ff      	movs	r2, #255	; 0xff
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eb8:	f001 fc3c 	bl	8009734 <vPortExitCritical>
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ecc:	f001 fc02 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e001      	b.n	8007ee2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ee2:	f001 fc27 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ef8:	f001 fbec 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d102      	bne.n	8007f0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e001      	b.n	8007f12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f12:	f001 fc0f 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007f16:	68fb      	ldr	r3, [r7, #12]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e014      	b.n	8007f5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f3c:	490c      	ldr	r1, [pc, #48]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f46:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f52:	e006      	b.n	8007f62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b07      	cmp	r3, #7
 8007f5e:	d9e7      	bls.n	8007f30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000898 	.word	0x20000898

08007f74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f84:	f001 fba6 	bl	80096d4 <vPortEnterCritical>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f8e:	b25b      	sxtb	r3, r3
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d103      	bne.n	8007f9e <vQueueWaitForMessageRestricted+0x2a>
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa4:	b25b      	sxtb	r3, r3
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d103      	bne.n	8007fb4 <vQueueWaitForMessageRestricted+0x40>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fb4:	f001 fbbe 	bl	8009734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fc3b 	bl	8008844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff ff26 	bl	8007e20 <prvUnlockQueue>
	}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	623b      	str	r3, [r7, #32]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xTaskCreateStatic+0x46>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	61fb      	str	r3, [r7, #28]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008022:	235c      	movs	r3, #92	; 0x5c
 8008024:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b5c      	cmp	r3, #92	; 0x5c
 800802a:	d00a      	beq.n	8008042 <xTaskCreateStatic+0x66>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61bb      	str	r3, [r7, #24]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008042:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01e      	beq.n	8008088 <xTaskCreateStatic+0xac>
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008058:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	2202      	movs	r2, #2
 800805e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008062:	2300      	movs	r3, #0
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	f107 0314 	add.w	r3, r7, #20
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f850 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008082:	f000 f8dd 	bl	8008240 <prvAddNewTaskToReadyList>
 8008086:	e001      	b.n	800808c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800808c:	697b      	ldr	r3, [r7, #20]
	}
 800808e:	4618      	mov	r0, r3
 8008090:	3728      	adds	r7, #40	; 0x28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008096:	b580      	push	{r7, lr}
 8008098:	b08c      	sub	sp, #48	; 0x30
 800809a:	af04      	add	r7, sp, #16
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	603b      	str	r3, [r7, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fc34 	bl	8009918 <pvPortMalloc>
 80080b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00e      	beq.n	80080d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080b8:	205c      	movs	r0, #92	; 0x5c
 80080ba:	f001 fc2d 	bl	8009918 <pvPortMalloc>
 80080be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
 80080cc:	e005      	b.n	80080da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ce:	6978      	ldr	r0, [r7, #20]
 80080d0:	f001 fcee 	bl	8009ab0 <vPortFree>
 80080d4:	e001      	b.n	80080da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d017      	beq.n	8008110 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f80e 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008104:	69f8      	ldr	r0, [r7, #28]
 8008106:	f000 f89b 	bl	8008240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e002      	b.n	8008116 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295
 8008114:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008116:	69bb      	ldr	r3, [r7, #24]
	}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	461a      	mov	r2, r3
 8008138:	21a5      	movs	r1, #165	; 0xa5
 800813a:	f002 faf3 	bl	800a724 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008148:	3b01      	subs	r3, #1
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	617b      	str	r3, [r7, #20]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01f      	beq.n	80081be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	e012      	b.n	80081aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	3334      	adds	r3, #52	; 0x34
 8008194:	460a      	mov	r2, r1
 8008196:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d006      	beq.n	80081b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61fb      	str	r3, [r7, #28]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2b0f      	cmp	r3, #15
 80081ae:	d9e9      	bls.n	8008184 <prvInitialiseNewTask+0x64>
 80081b0:	e000      	b.n	80081b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80081b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081bc:	e003      	b.n	80081c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	2b37      	cmp	r3, #55	; 0x37
 80081ca:	d901      	bls.n	80081d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081cc:	2337      	movs	r3, #55	; 0x37
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	2200      	movs	r2, #0
 80081e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff f978 	bl	80074dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	3318      	adds	r3, #24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff f973 	bl	80074dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	2200      	movs	r2, #0
 8008210:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	68f9      	ldr	r1, [r7, #12]
 800821e:	69b8      	ldr	r0, [r7, #24]
 8008220:	f001 f928 	bl	8009474 <pxPortInitialiseStack>
 8008224:	4602      	mov	r2, r0
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008236:	bf00      	nop
 8008238:	3720      	adds	r7, #32
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008248:	f001 fa44 	bl	80096d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800824c:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <prvAddNewTaskToReadyList+0xc4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3301      	adds	r3, #1
 8008252:	4a2c      	ldr	r2, [pc, #176]	; (8008304 <prvAddNewTaskToReadyList+0xc4>)
 8008254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008256:	4b2c      	ldr	r3, [pc, #176]	; (8008308 <prvAddNewTaskToReadyList+0xc8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800825e:	4a2a      	ldr	r2, [pc, #168]	; (8008308 <prvAddNewTaskToReadyList+0xc8>)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <prvAddNewTaskToReadyList+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d110      	bne.n	800828e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800826c:	f000 fc16 	bl	8008a9c <prvInitialiseTaskLists>
 8008270:	e00d      	b.n	800828e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008272:	4b26      	ldr	r3, [pc, #152]	; (800830c <prvAddNewTaskToReadyList+0xcc>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800827a:	4b23      	ldr	r3, [pc, #140]	; (8008308 <prvAddNewTaskToReadyList+0xc8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	429a      	cmp	r2, r3
 8008286:	d802      	bhi.n	800828e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008288:	4a1f      	ldr	r2, [pc, #124]	; (8008308 <prvAddNewTaskToReadyList+0xc8>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800828e:	4b20      	ldr	r3, [pc, #128]	; (8008310 <prvAddNewTaskToReadyList+0xd0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <prvAddNewTaskToReadyList+0xd0>)
 8008296:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <prvAddNewTaskToReadyList+0xd0>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <prvAddNewTaskToReadyList+0xd4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d903      	bls.n	80082b4 <prvAddNewTaskToReadyList+0x74>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <prvAddNewTaskToReadyList+0xd4>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a15      	ldr	r2, [pc, #84]	; (8008318 <prvAddNewTaskToReadyList+0xd8>)
 80082c2:	441a      	add	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	f7ff f913 	bl	80074f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082d0:	f001 fa30 	bl	8009734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082d4:	4b0d      	ldr	r3, [pc, #52]	; (800830c <prvAddNewTaskToReadyList+0xcc>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <prvAddNewTaskToReadyList+0xc8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d207      	bcs.n	80082fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <prvAddNewTaskToReadyList+0xdc>)
 80082ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000dac 	.word	0x20000dac
 8008308:	200008d8 	.word	0x200008d8
 800830c:	20000db8 	.word	0x20000db8
 8008310:	20000dc8 	.word	0x20000dc8
 8008314:	20000db4 	.word	0x20000db4
 8008318:	200008dc 	.word	0x200008dc
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <vTaskDelay+0x60>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <vTaskDelay+0x30>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	60bb      	str	r3, [r7, #8]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008350:	f000 f880 	bl	8008454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fcea 	bl	8008d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800835c:	f000 f888 	bl	8008470 <xTaskResumeAll>
 8008360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d107      	bne.n	8008378 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <vTaskDelay+0x64>)
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000dd4 	.word	0x20000dd4
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008396:	463a      	mov	r2, r7
 8008398:	1d39      	adds	r1, r7, #4
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff f848 	bl	8007434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	9202      	str	r2, [sp, #8]
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	460a      	mov	r2, r1
 80083b6:	4921      	ldr	r1, [pc, #132]	; (800843c <vTaskStartScheduler+0xb4>)
 80083b8:	4821      	ldr	r0, [pc, #132]	; (8008440 <vTaskStartScheduler+0xb8>)
 80083ba:	f7ff fe0f 	bl	8007fdc <xTaskCreateStatic>
 80083be:	4603      	mov	r3, r0
 80083c0:	4a20      	ldr	r2, [pc, #128]	; (8008444 <vTaskStartScheduler+0xbc>)
 80083c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083c4:	4b1f      	ldr	r3, [pc, #124]	; (8008444 <vTaskStartScheduler+0xbc>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083cc:	2301      	movs	r3, #1
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	e001      	b.n	80083d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d102      	bne.n	80083e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083dc:	f000 fcfc 	bl	8008dd8 <xTimerCreateTimerTask>
 80083e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d116      	bne.n	8008416 <vTaskStartScheduler+0x8e>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	613b      	str	r3, [r7, #16]
}
 80083fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <vTaskStartScheduler+0xc0>)
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008402:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008404:	4b11      	ldr	r3, [pc, #68]	; (800844c <vTaskStartScheduler+0xc4>)
 8008406:	2201      	movs	r2, #1
 8008408:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <vTaskStartScheduler+0xc8>)
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008410:	f001 f8be 	bl	8009590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008414:	e00e      	b.n	8008434 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d10a      	bne.n	8008434 <vTaskStartScheduler+0xac>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	60fb      	str	r3, [r7, #12]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <vTaskStartScheduler+0xaa>
}
 8008434:	bf00      	nop
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	0800a758 	.word	0x0800a758
 8008440:	08008a6d 	.word	0x08008a6d
 8008444:	20000dd0 	.word	0x20000dd0
 8008448:	20000dcc 	.word	0x20000dcc
 800844c:	20000db8 	.word	0x20000db8
 8008450:	20000db0 	.word	0x20000db0

08008454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <vTaskSuspendAll+0x18>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a03      	ldr	r2, [pc, #12]	; (800846c <vTaskSuspendAll+0x18>)
 8008460:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008462:	bf00      	nop
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000dd4 	.word	0x20000dd4

08008470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800847a:	2300      	movs	r3, #0
 800847c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800847e:	4b42      	ldr	r3, [pc, #264]	; (8008588 <xTaskResumeAll+0x118>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10a      	bne.n	800849c <xTaskResumeAll+0x2c>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	603b      	str	r3, [r7, #0]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800849c:	f001 f91a 	bl	80096d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084a0:	4b39      	ldr	r3, [pc, #228]	; (8008588 <xTaskResumeAll+0x118>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4a38      	ldr	r2, [pc, #224]	; (8008588 <xTaskResumeAll+0x118>)
 80084a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084aa:	4b37      	ldr	r3, [pc, #220]	; (8008588 <xTaskResumeAll+0x118>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d162      	bne.n	8008578 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084b2:	4b36      	ldr	r3, [pc, #216]	; (800858c <xTaskResumeAll+0x11c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d05e      	beq.n	8008578 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084ba:	e02f      	b.n	800851c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084bc:	4b34      	ldr	r3, [pc, #208]	; (8008590 <xTaskResumeAll+0x120>)
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3318      	adds	r3, #24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff f871 	bl	80075b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff f86c 	bl	80075b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084dc:	4b2d      	ldr	r3, [pc, #180]	; (8008594 <xTaskResumeAll+0x124>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d903      	bls.n	80084ec <xTaskResumeAll+0x7c>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <xTaskResumeAll+0x124>)
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a27      	ldr	r2, [pc, #156]	; (8008598 <xTaskResumeAll+0x128>)
 80084fa:	441a      	add	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fe fff7 	bl	80074f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b23      	ldr	r3, [pc, #140]	; (800859c <xTaskResumeAll+0x12c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <xTaskResumeAll+0x130>)
 8008518:	2201      	movs	r2, #1
 800851a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800851c:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <xTaskResumeAll+0x120>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1cb      	bne.n	80084bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800852a:	f000 fb55 	bl	8008bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <xTaskResumeAll+0x134>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800853a:	f000 f847 	bl	80085cc <xTaskIncrementTick>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008544:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <xTaskResumeAll+0x130>)
 8008546:	2201      	movs	r2, #1
 8008548:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f1      	bne.n	800853a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008556:	4b13      	ldr	r3, [pc, #76]	; (80085a4 <xTaskResumeAll+0x134>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800855c:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <xTaskResumeAll+0x130>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008568:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <xTaskResumeAll+0x138>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008578:	f001 f8dc 	bl	8009734 <vPortExitCritical>

	return xAlreadyYielded;
 800857c:	68bb      	ldr	r3, [r7, #8]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000dd4 	.word	0x20000dd4
 800858c:	20000dac 	.word	0x20000dac
 8008590:	20000d6c 	.word	0x20000d6c
 8008594:	20000db4 	.word	0x20000db4
 8008598:	200008dc 	.word	0x200008dc
 800859c:	200008d8 	.word	0x200008d8
 80085a0:	20000dc0 	.word	0x20000dc0
 80085a4:	20000dbc 	.word	0x20000dbc
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <xTaskGetTickCount+0x1c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085b8:	687b      	ldr	r3, [r7, #4]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000db0 	.word	0x20000db0

080085cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d6:	4b4f      	ldr	r3, [pc, #316]	; (8008714 <xTaskIncrementTick+0x148>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f040 808f 	bne.w	80086fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085e0:	4b4d      	ldr	r3, [pc, #308]	; (8008718 <xTaskIncrementTick+0x14c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085e8:	4a4b      	ldr	r2, [pc, #300]	; (8008718 <xTaskIncrementTick+0x14c>)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d120      	bne.n	8008636 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085f4:	4b49      	ldr	r3, [pc, #292]	; (800871c <xTaskIncrementTick+0x150>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <xTaskIncrementTick+0x48>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	603b      	str	r3, [r7, #0]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xTaskIncrementTick+0x46>
 8008614:	4b41      	ldr	r3, [pc, #260]	; (800871c <xTaskIncrementTick+0x150>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	4b41      	ldr	r3, [pc, #260]	; (8008720 <xTaskIncrementTick+0x154>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a3f      	ldr	r2, [pc, #252]	; (800871c <xTaskIncrementTick+0x150>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <xTaskIncrementTick+0x154>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <xTaskIncrementTick+0x158>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a3d      	ldr	r2, [pc, #244]	; (8008724 <xTaskIncrementTick+0x158>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	f000 fad1 	bl	8008bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008636:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <xTaskIncrementTick+0x15c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	429a      	cmp	r2, r3
 800863e:	d349      	bcc.n	80086d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	4b36      	ldr	r3, [pc, #216]	; (800871c <xTaskIncrementTick+0x150>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	4b37      	ldr	r3, [pc, #220]	; (8008728 <xTaskIncrementTick+0x15c>)
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	601a      	str	r2, [r3, #0]
					break;
 8008652:	e03f      	b.n	80086d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008654:	4b31      	ldr	r3, [pc, #196]	; (800871c <xTaskIncrementTick+0x150>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d203      	bcs.n	8008674 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800866c:	4a2e      	ldr	r2, [pc, #184]	; (8008728 <xTaskIncrementTick+0x15c>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008672:	e02f      	b.n	80086d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3304      	adds	r3, #4
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe ff99 	bl	80075b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3318      	adds	r3, #24
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe ff90 	bl	80075b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <xTaskIncrementTick+0x160>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d903      	bls.n	80086a4 <xTaskIncrementTick+0xd8>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a22      	ldr	r2, [pc, #136]	; (800872c <xTaskIncrementTick+0x160>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <xTaskIncrementTick+0x164>)
 80086b2:	441a      	add	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe ff1b 	bl	80074f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c4:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <xTaskIncrementTick+0x168>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d3b8      	bcc.n	8008640 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d2:	e7b5      	b.n	8008640 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b17      	ldr	r3, [pc, #92]	; (8008734 <xTaskIncrementTick+0x168>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4915      	ldr	r1, [pc, #84]	; (8008730 <xTaskIncrementTick+0x164>)
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d901      	bls.n	80086f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <xTaskIncrementTick+0x16c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086f8:	2301      	movs	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e004      	b.n	8008708 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskIncrementTick+0x170>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	4a0d      	ldr	r2, [pc, #52]	; (800873c <xTaskIncrementTick+0x170>)
 8008706:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008708:	697b      	ldr	r3, [r7, #20]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000dd4 	.word	0x20000dd4
 8008718:	20000db0 	.word	0x20000db0
 800871c:	20000d64 	.word	0x20000d64
 8008720:	20000d68 	.word	0x20000d68
 8008724:	20000dc4 	.word	0x20000dc4
 8008728:	20000dcc 	.word	0x20000dcc
 800872c:	20000db4 	.word	0x20000db4
 8008730:	200008dc 	.word	0x200008dc
 8008734:	200008d8 	.word	0x200008d8
 8008738:	20000dc0 	.word	0x20000dc0
 800873c:	20000dbc 	.word	0x20000dbc

08008740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008746:	4b28      	ldr	r3, [pc, #160]	; (80087e8 <vTaskSwitchContext+0xa8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800874e:	4b27      	ldr	r3, [pc, #156]	; (80087ec <vTaskSwitchContext+0xac>)
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008754:	e041      	b.n	80087da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008756:	4b25      	ldr	r3, [pc, #148]	; (80087ec <vTaskSwitchContext+0xac>)
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875c:	4b24      	ldr	r3, [pc, #144]	; (80087f0 <vTaskSwitchContext+0xb0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e010      	b.n	8008786 <vTaskSwitchContext+0x46>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <vTaskSwitchContext+0x40>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	607b      	str	r3, [r7, #4]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <vTaskSwitchContext+0x3e>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3b01      	subs	r3, #1
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	491b      	ldr	r1, [pc, #108]	; (80087f4 <vTaskSwitchContext+0xb4>)
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0e4      	beq.n	8008764 <vTaskSwitchContext+0x24>
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <vTaskSwitchContext+0xb4>)
 80087a6:	4413      	add	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	605a      	str	r2, [r3, #4]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3308      	adds	r3, #8
 80087bc:	429a      	cmp	r2, r3
 80087be:	d104      	bne.n	80087ca <vTaskSwitchContext+0x8a>
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	605a      	str	r2, [r3, #4]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <vTaskSwitchContext+0xb8>)
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vTaskSwitchContext+0xb0>)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6013      	str	r3, [r2, #0]
}
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20000dd4 	.word	0x20000dd4
 80087ec:	20000dc0 	.word	0x20000dc0
 80087f0:	20000db4 	.word	0x20000db4
 80087f4:	200008dc 	.word	0x200008dc
 80087f8:	200008d8 	.word	0x200008d8

080087fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60fb      	str	r3, [r7, #12]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vTaskPlaceOnEventList+0x44>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3318      	adds	r3, #24
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7fe fe87 	bl	800753e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008830:	2101      	movs	r1, #1
 8008832:	6838      	ldr	r0, [r7, #0]
 8008834:	f000 fa7c 	bl	8008d30 <prvAddCurrentTaskToDelayedList>
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	200008d8 	.word	0x200008d8

08008844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	617b      	str	r3, [r7, #20]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vTaskPlaceOnEventListRestricted+0x54>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3318      	adds	r3, #24
 8008872:	4619      	mov	r1, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7fe fe3e 	bl	80074f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008880:	f04f 33ff 	mov.w	r3, #4294967295
 8008884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	68b8      	ldr	r0, [r7, #8]
 800888a:	f000 fa51 	bl	8008d30 <prvAddCurrentTaskToDelayedList>
	}
 800888e:	bf00      	nop
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200008d8 	.word	0x200008d8

0800889c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3318      	adds	r3, #24
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fe6f 	bl	80075b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d2:	4b1e      	ldr	r3, [pc, #120]	; (800894c <xTaskRemoveFromEventList+0xb0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d11d      	bne.n	8008916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fe66 	bl	80075b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e8:	4b19      	ldr	r3, [pc, #100]	; (8008950 <xTaskRemoveFromEventList+0xb4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d903      	bls.n	80088f8 <xTaskRemoveFromEventList+0x5c>
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4a16      	ldr	r2, [pc, #88]	; (8008950 <xTaskRemoveFromEventList+0xb4>)
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4a13      	ldr	r2, [pc, #76]	; (8008954 <xTaskRemoveFromEventList+0xb8>)
 8008906:	441a      	add	r2, r3
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	3304      	adds	r3, #4
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7fe fdf1 	bl	80074f6 <vListInsertEnd>
 8008914:	e005      	b.n	8008922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3318      	adds	r3, #24
 800891a:	4619      	mov	r1, r3
 800891c:	480e      	ldr	r0, [pc, #56]	; (8008958 <xTaskRemoveFromEventList+0xbc>)
 800891e:	f7fe fdea 	bl	80074f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <xTaskRemoveFromEventList+0xc0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	429a      	cmp	r2, r3
 800892e:	d905      	bls.n	800893c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <xTaskRemoveFromEventList+0xc4>)
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e001      	b.n	8008940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008940:	697b      	ldr	r3, [r7, #20]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000dd4 	.word	0x20000dd4
 8008950:	20000db4 	.word	0x20000db4
 8008954:	200008dc 	.word	0x200008dc
 8008958:	20000d6c 	.word	0x20000d6c
 800895c:	200008d8 	.word	0x200008d8
 8008960:	20000dc0 	.word	0x20000dc0

08008964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <vTaskInternalSetTimeOutState+0x24>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <vTaskInternalSetTimeOutState+0x28>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20000dc4 	.word	0x20000dc4
 800898c:	20000db0 	.word	0x20000db0

08008990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089d2:	f000 fe7f 	bl	80096d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089d6:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <xTaskCheckForTimeOut+0xbc>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d102      	bne.n	80089f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]
 80089f4:	e023      	b.n	8008a3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <xTaskCheckForTimeOut+0xc0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d007      	beq.n	8008a12 <xTaskCheckForTimeOut+0x82>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d302      	bcc.n	8008a12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e015      	b.n	8008a3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d20b      	bcs.n	8008a34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff ff9b 	bl	8008964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e004      	b.n	8008a3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a3e:	f000 fe79 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8008a42:	69fb      	ldr	r3, [r7, #28]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3720      	adds	r7, #32
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000db0 	.word	0x20000db0
 8008a50:	20000dc4 	.word	0x20000dc4

08008a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a58:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <vTaskMissedYield+0x14>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	20000dc0 	.word	0x20000dc0

08008a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a74:	f000 f852 	bl	8008b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <prvIdleTask+0x28>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d9f9      	bls.n	8008a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <prvIdleTask+0x2c>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a90:	e7f0      	b.n	8008a74 <prvIdleTask+0x8>
 8008a92:	bf00      	nop
 8008a94:	200008dc 	.word	0x200008dc
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	607b      	str	r3, [r7, #4]
 8008aa6:	e00c      	b.n	8008ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <prvInitialiseTaskLists+0x60>)
 8008ab4:	4413      	add	r3, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fcf0 	bl	800749c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b37      	cmp	r3, #55	; 0x37
 8008ac6:	d9ef      	bls.n	8008aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ac8:	480d      	ldr	r0, [pc, #52]	; (8008b00 <prvInitialiseTaskLists+0x64>)
 8008aca:	f7fe fce7 	bl	800749c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ace:	480d      	ldr	r0, [pc, #52]	; (8008b04 <prvInitialiseTaskLists+0x68>)
 8008ad0:	f7fe fce4 	bl	800749c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ad4:	480c      	ldr	r0, [pc, #48]	; (8008b08 <prvInitialiseTaskLists+0x6c>)
 8008ad6:	f7fe fce1 	bl	800749c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ada:	480c      	ldr	r0, [pc, #48]	; (8008b0c <prvInitialiseTaskLists+0x70>)
 8008adc:	f7fe fcde 	bl	800749c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ae0:	480b      	ldr	r0, [pc, #44]	; (8008b10 <prvInitialiseTaskLists+0x74>)
 8008ae2:	f7fe fcdb 	bl	800749c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <prvInitialiseTaskLists+0x78>)
 8008ae8:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <prvInitialiseTaskLists+0x64>)
 8008aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <prvInitialiseTaskLists+0x7c>)
 8008aee:	4a05      	ldr	r2, [pc, #20]	; (8008b04 <prvInitialiseTaskLists+0x68>)
 8008af0:	601a      	str	r2, [r3, #0]
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200008dc 	.word	0x200008dc
 8008b00:	20000d3c 	.word	0x20000d3c
 8008b04:	20000d50 	.word	0x20000d50
 8008b08:	20000d6c 	.word	0x20000d6c
 8008b0c:	20000d80 	.word	0x20000d80
 8008b10:	20000d98 	.word	0x20000d98
 8008b14:	20000d64 	.word	0x20000d64
 8008b18:	20000d68 	.word	0x20000d68

08008b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b22:	e019      	b.n	8008b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b24:	f000 fdd6 	bl	80096d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <prvCheckTasksWaitingTermination+0x50>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd3b 	bl	80075b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <prvCheckTasksWaitingTermination+0x54>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	4a0b      	ldr	r2, [pc, #44]	; (8008b70 <prvCheckTasksWaitingTermination+0x54>)
 8008b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b44:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <prvCheckTasksWaitingTermination+0x58>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <prvCheckTasksWaitingTermination+0x58>)
 8008b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b4e:	f000 fdf1 	bl	8009734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f810 	bl	8008b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <prvCheckTasksWaitingTermination+0x58>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e1      	bne.n	8008b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000d80 	.word	0x20000d80
 8008b70:	20000dac 	.word	0x20000dac
 8008b74:	20000d94 	.word	0x20000d94

08008b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d108      	bne.n	8008b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 ff8e 	bl	8009ab0 <vPortFree>
				vPortFree( pxTCB );
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 ff8b 	bl	8009ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b9a:	e018      	b.n	8008bce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d103      	bne.n	8008bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 ff82 	bl	8009ab0 <vPortFree>
	}
 8008bac:	e00f      	b.n	8008bce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d00a      	beq.n	8008bce <prvDeleteTCB+0x56>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	60fb      	str	r3, [r7, #12]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <prvDeleteTCB+0x54>
	}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bde:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <prvResetNextTaskUnblockTime+0x38>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <prvResetNextTaskUnblockTime+0x3c>)
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295
 8008bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bf0:	e008      	b.n	8008c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf2:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <prvResetNextTaskUnblockTime+0x38>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a04      	ldr	r2, [pc, #16]	; (8008c14 <prvResetNextTaskUnblockTime+0x3c>)
 8008c02:	6013      	str	r3, [r2, #0]
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000d64 	.word	0x20000d64
 8008c14:	20000dcc 	.word	0x20000dcc

08008c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <xTaskGetSchedulerState+0x34>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d102      	bne.n	8008c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c26:	2301      	movs	r3, #1
 8008c28:	607b      	str	r3, [r7, #4]
 8008c2a:	e008      	b.n	8008c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <xTaskGetSchedulerState+0x38>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c34:	2302      	movs	r3, #2
 8008c36:	607b      	str	r3, [r7, #4]
 8008c38:	e001      	b.n	8008c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c3e:	687b      	ldr	r3, [r7, #4]
	}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000db8 	.word	0x20000db8
 8008c50:	20000dd4 	.word	0x20000dd4

08008c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d056      	beq.n	8008d18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c6a:	4b2e      	ldr	r3, [pc, #184]	; (8008d24 <xTaskPriorityDisinherit+0xd0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d00a      	beq.n	8008c8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60fb      	str	r3, [r7, #12]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d02c      	beq.n	8008d18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d128      	bne.n	8008d18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fc70 	bl	80075b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <xTaskPriorityDisinherit+0xd4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d903      	bls.n	8008cf8 <xTaskPriorityDisinherit+0xa4>
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <xTaskPriorityDisinherit+0xd4>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4a09      	ldr	r2, [pc, #36]	; (8008d2c <xTaskPriorityDisinherit+0xd8>)
 8008d06:	441a      	add	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fe fbf1 	bl	80074f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d18:	697b      	ldr	r3, [r7, #20]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200008d8 	.word	0x200008d8
 8008d28:	20000db4 	.word	0x20000db4
 8008d2c:	200008dc 	.word	0x200008dc

08008d30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d3a:	4b21      	ldr	r3, [pc, #132]	; (8008dc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d40:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe fc32 	bl	80075b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d52:	d10a      	bne.n	8008d6a <prvAddCurrentTaskToDelayedList+0x3a>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d5a:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4619      	mov	r1, r3
 8008d62:	4819      	ldr	r0, [pc, #100]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d64:	f7fe fbc7 	bl	80074f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d68:	e026      	b.n	8008db8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d72:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d209      	bcs.n	8008d96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe fbd5 	bl	800753e <vListInsert>
}
 8008d94:	e010      	b.n	8008db8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d96:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fe fbcb 	bl	800753e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d202      	bcs.n	8008db8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008db2:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6013      	str	r3, [r2, #0]
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000db0 	.word	0x20000db0
 8008dc4:	200008d8 	.word	0x200008d8
 8008dc8:	20000d98 	.word	0x20000d98
 8008dcc:	20000d68 	.word	0x20000d68
 8008dd0:	20000d64 	.word	0x20000d64
 8008dd4:	20000dcc 	.word	0x20000dcc

08008dd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008de2:	f000 fb07 	bl	80093f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008de6:	4b1c      	ldr	r3, [pc, #112]	; (8008e58 <xTimerCreateTimerTask+0x80>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d021      	beq.n	8008e32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008df6:	1d3a      	adds	r2, r7, #4
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	f107 030c 	add.w	r3, r7, #12
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fe fb31 	bl	8007468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	2302      	movs	r3, #2
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	460a      	mov	r2, r1
 8008e18:	4910      	ldr	r1, [pc, #64]	; (8008e5c <xTimerCreateTimerTask+0x84>)
 8008e1a:	4811      	ldr	r0, [pc, #68]	; (8008e60 <xTimerCreateTimerTask+0x88>)
 8008e1c:	f7ff f8de 	bl	8007fdc <xTaskCreateStatic>
 8008e20:	4603      	mov	r3, r0
 8008e22:	4a10      	ldr	r2, [pc, #64]	; (8008e64 <xTimerCreateTimerTask+0x8c>)
 8008e24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <xTimerCreateTimerTask+0x8c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	613b      	str	r3, [r7, #16]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e4e:	697b      	ldr	r3, [r7, #20]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20000e08 	.word	0x20000e08
 8008e5c:	0800a760 	.word	0x0800a760
 8008e60:	08008f9d 	.word	0x08008f9d
 8008e64:	20000e0c 	.word	0x20000e0c

08008e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08a      	sub	sp, #40	; 0x28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	623b      	str	r3, [r7, #32]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <xTimerGenericCommand+0x98>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d02a      	beq.n	8008ef4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b05      	cmp	r3, #5
 8008eae:	dc18      	bgt.n	8008ee2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eb0:	f7ff feb2 	bl	8008c18 <xTaskGetSchedulerState>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d109      	bne.n	8008ece <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <xTimerGenericCommand+0x98>)
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f107 0110 	add.w	r1, r7, #16
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec6:	f7fe fca1 	bl	800780c <xQueueGenericSend>
 8008eca:	6278      	str	r0, [r7, #36]	; 0x24
 8008ecc:	e012      	b.n	8008ef4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <xTimerGenericCommand+0x98>)
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f107 0110 	add.w	r1, r7, #16
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f7fe fc97 	bl	800780c <xQueueGenericSend>
 8008ede:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee0:	e008      	b.n	8008ef4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <xTimerGenericCommand+0x98>)
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f107 0110 	add.w	r1, r7, #16
 8008eea:	2300      	movs	r3, #0
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	f7fe fd8b 	bl	8007a08 <xQueueGenericSendFromISR>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000e08 	.word	0x20000e08

08008f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0e:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <prvProcessExpiredTimer+0x94>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fb47 	bl	80075b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d022      	beq.n	8008f76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	18d1      	adds	r1, r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	6978      	ldr	r0, [r7, #20]
 8008f3e:	f000 f8d1 	bl	80090e4 <prvInsertTimerInActiveList>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01f      	beq.n	8008f88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	2100      	movs	r1, #0
 8008f52:	6978      	ldr	r0, [r7, #20]
 8008f54:	f7ff ff88 	bl	8008e68 <xTimerGenericCommand>
 8008f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d113      	bne.n	8008f88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	6978      	ldr	r0, [r7, #20]
 8008f8e:	4798      	blx	r3
}
 8008f90:	bf00      	nop
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000e00 	.word	0x20000e00

08008f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fa4:	f107 0308 	add.w	r3, r7, #8
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 f857 	bl	800905c <prvGetNextExpireTime>
 8008fae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f803 	bl	8008fc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fba:	f000 f8d5 	bl	8009168 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fbe:	e7f1      	b.n	8008fa4 <prvTimerTask+0x8>

08008fc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fca:	f7ff fa43 	bl	8008454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f866 	bl	80090a4 <prvSampleTimeNow>
 8008fd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d130      	bne.n	8009042 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <prvProcessTimerOrBlockTask+0x3c>
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d806      	bhi.n	8008ffc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fee:	f7ff fa3f 	bl	8008470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff ff85 	bl	8008f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ffa:	e024      	b.n	8009046 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009002:	4b13      	ldr	r3, [pc, #76]	; (8009050 <prvProcessTimerOrBlockTask+0x90>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <prvProcessTimerOrBlockTask+0x50>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <prvProcessTimerOrBlockTask+0x52>
 8009010:	2300      	movs	r3, #0
 8009012:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <prvProcessTimerOrBlockTask+0x94>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	f7fe ffa7 	bl	8007f74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009026:	f7ff fa23 	bl	8008470 <xTaskResumeAll>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009030:	4b09      	ldr	r3, [pc, #36]	; (8009058 <prvProcessTimerOrBlockTask+0x98>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
}
 8009040:	e001      	b.n	8009046 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009042:	f7ff fa15 	bl	8008470 <xTaskResumeAll>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000e04 	.word	0x20000e04
 8009054:	20000e08 	.word	0x20000e08
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009064:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <prvGetNextExpireTime+0x44>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <prvGetNextExpireTime+0x16>
 800906e:	2201      	movs	r2, #1
 8009070:	e000      	b.n	8009074 <prvGetNextExpireTime+0x18>
 8009072:	2200      	movs	r2, #0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <prvGetNextExpireTime+0x44>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	e001      	b.n	8009090 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009090:	68fb      	ldr	r3, [r7, #12]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20000e00 	.word	0x20000e00

080090a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090ac:	f7ff fa7e 	bl	80085ac <xTaskGetTickCount>
 80090b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <prvSampleTimeNow+0x3c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d205      	bcs.n	80090c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090bc:	f000 f936 	bl	800932c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	e002      	b.n	80090ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090ce:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <prvSampleTimeNow+0x3c>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000e10 	.word	0x20000e10

080090e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d812      	bhi.n	8009130 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	429a      	cmp	r2, r3
 8009116:	d302      	bcc.n	800911e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	e01b      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800911e:	4b10      	ldr	r3, [pc, #64]	; (8009160 <prvInsertTimerInActiveList+0x7c>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fe fa08 	bl	800753e <vListInsert>
 800912e:	e012      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d206      	bcs.n	8009146 <prvInsertTimerInActiveList+0x62>
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d302      	bcc.n	8009146 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e007      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <prvInsertTimerInActiveList+0x80>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7fe f9f4 	bl	800753e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009156:	697b      	ldr	r3, [r7, #20]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000e04 	.word	0x20000e04
 8009164:	20000e00 	.word	0x20000e00

08009168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	; 0x38
 800916c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800916e:	e0ca      	b.n	8009306 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da18      	bge.n	80091a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009176:	1d3b      	adds	r3, r7, #4
 8009178:	3304      	adds	r3, #4
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	61fb      	str	r3, [r7, #28]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919e:	6850      	ldr	r0, [r2, #4]
 80091a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a2:	6892      	ldr	r2, [r2, #8]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f2c0 80aa 	blt.w	8009304 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe f9f5 	bl	80075b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091c6:	463b      	mov	r3, r7
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff ff6b 	bl	80090a4 <prvSampleTimeNow>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	f200 8097 	bhi.w	8009306 <prvProcessReceivedCommands+0x19e>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <prvProcessReceivedCommands+0x78>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	08009209 	.word	0x08009209
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009209 	.word	0x08009209
 80091ec:	0800927d 	.word	0x0800927d
 80091f0:	08009291 	.word	0x08009291
 80091f4:	080092db 	.word	0x080092db
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009209 	.word	0x08009209
 8009200:	0800927d 	.word	0x0800927d
 8009204:	08009291 	.word	0x08009291
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800920e:	f043 0301 	orr.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	18d1      	adds	r1, r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009228:	f7ff ff5c 	bl	80090e4 <prvInsertTimerInActiveList>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d069      	beq.n	8009306 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009238:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05e      	beq.n	8009306 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	441a      	add	r2, r3
 8009250:	2300      	movs	r3, #0
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	2100      	movs	r1, #0
 8009258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925a:	f7ff fe05 	bl	8008e68 <xTimerGenericCommand>
 800925e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d14f      	bne.n	8009306 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61bb      	str	r3, [r7, #24]
}
 8009278:	bf00      	nop
 800927a:	e7fe      	b.n	800927a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800928e:	e03a      	b.n	8009306 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	617b      	str	r3, [r7, #20]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	699a      	ldr	r2, [r3, #24]
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	18d1      	adds	r1, r2, r3
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d4:	f7ff ff06 	bl	80090e4 <prvInsertTimerInActiveList>
					break;
 80092d8:	e015      	b.n	8009306 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d103      	bne.n	80092f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80092e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ea:	f000 fbe1 	bl	8009ab0 <vPortFree>
 80092ee:	e00a      	b.n	8009306 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f6:	f023 0301 	bic.w	r3, r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009302:	e000      	b.n	8009306 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009304:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009306:	4b08      	ldr	r3, [pc, #32]	; (8009328 <prvProcessReceivedCommands+0x1c0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	1d39      	adds	r1, r7, #4
 800930c:	2200      	movs	r2, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fc16 	bl	8007b40 <xQueueReceive>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	f47f af2a 	bne.w	8009170 <prvProcessReceivedCommands+0x8>
	}
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	3730      	adds	r7, #48	; 0x30
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000e08 	.word	0x20000e08

0800932c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009332:	e048      	b.n	80093c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009334:	4b2d      	ldr	r3, [pc, #180]	; (80093ec <prvSwitchTimerLists+0xc0>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800933e:	4b2b      	ldr	r3, [pc, #172]	; (80093ec <prvSwitchTimerLists+0xc0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3304      	adds	r3, #4
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe f92f 	bl	80075b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d02e      	beq.n	80093c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	429a      	cmp	r2, r3
 8009378:	d90e      	bls.n	8009398 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009386:	4b19      	ldr	r3, [pc, #100]	; (80093ec <prvSwitchTimerLists+0xc0>)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3304      	adds	r3, #4
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f7fe f8d4 	bl	800753e <vListInsert>
 8009396:	e016      	b.n	80093c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009398:	2300      	movs	r3, #0
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2300      	movs	r3, #0
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	2100      	movs	r1, #0
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fd60 	bl	8008e68 <xTimerGenericCommand>
 80093a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	603b      	str	r3, [r7, #0]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <prvSwitchTimerLists+0xc0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1b1      	bne.n	8009334 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <prvSwitchTimerLists+0xc0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <prvSwitchTimerLists+0xc4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a04      	ldr	r2, [pc, #16]	; (80093ec <prvSwitchTimerLists+0xc0>)
 80093dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <prvSwitchTimerLists+0xc4>)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	6013      	str	r3, [r2, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20000e00 	.word	0x20000e00
 80093f0:	20000e04 	.word	0x20000e04

080093f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093fa:	f000 f96b 	bl	80096d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <prvCheckForValidListAndQueue+0x60>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d120      	bne.n	8009448 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009406:	4814      	ldr	r0, [pc, #80]	; (8009458 <prvCheckForValidListAndQueue+0x64>)
 8009408:	f7fe f848 	bl	800749c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800940c:	4813      	ldr	r0, [pc, #76]	; (800945c <prvCheckForValidListAndQueue+0x68>)
 800940e:	f7fe f845 	bl	800749c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <prvCheckForValidListAndQueue+0x6c>)
 8009414:	4a10      	ldr	r2, [pc, #64]	; (8009458 <prvCheckForValidListAndQueue+0x64>)
 8009416:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009418:	4b12      	ldr	r3, [pc, #72]	; (8009464 <prvCheckForValidListAndQueue+0x70>)
 800941a:	4a10      	ldr	r2, [pc, #64]	; (800945c <prvCheckForValidListAndQueue+0x68>)
 800941c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800941e:	2300      	movs	r3, #0
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	4b11      	ldr	r3, [pc, #68]	; (8009468 <prvCheckForValidListAndQueue+0x74>)
 8009424:	4a11      	ldr	r2, [pc, #68]	; (800946c <prvCheckForValidListAndQueue+0x78>)
 8009426:	2110      	movs	r1, #16
 8009428:	200a      	movs	r0, #10
 800942a:	f7fe f953 	bl	80076d4 <xQueueGenericCreateStatic>
 800942e:	4603      	mov	r3, r0
 8009430:	4a08      	ldr	r2, [pc, #32]	; (8009454 <prvCheckForValidListAndQueue+0x60>)
 8009432:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009434:	4b07      	ldr	r3, [pc, #28]	; (8009454 <prvCheckForValidListAndQueue+0x60>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <prvCheckForValidListAndQueue+0x60>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	490b      	ldr	r1, [pc, #44]	; (8009470 <prvCheckForValidListAndQueue+0x7c>)
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fd6c 	bl	8007f20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009448:	f000 f974 	bl	8009734 <vPortExitCritical>
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000e08 	.word	0x20000e08
 8009458:	20000dd8 	.word	0x20000dd8
 800945c:	20000dec 	.word	0x20000dec
 8009460:	20000e00 	.word	0x20000e00
 8009464:	20000e04 	.word	0x20000e04
 8009468:	20000eb4 	.word	0x20000eb4
 800946c:	20000e14 	.word	0x20000e14
 8009470:	0800a768 	.word	0x0800a768

08009474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3b04      	subs	r3, #4
 8009484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800948c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3b04      	subs	r3, #4
 8009492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094a4:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <pxPortInitialiseStack+0x64>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b14      	subs	r3, #20
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f06f 0202 	mvn.w	r2, #2
 80094c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3b20      	subs	r3, #32
 80094c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094ca:	68fb      	ldr	r3, [r7, #12]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	080094dd 	.word	0x080094dd

080094dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094e6:	4b12      	ldr	r3, [pc, #72]	; (8009530 <prvTaskExitError+0x54>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	d00a      	beq.n	8009506 <prvTaskExitError+0x2a>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	60fb      	str	r3, [r7, #12]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <prvTaskExitError+0x28>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	60bb      	str	r3, [r7, #8]
}
 8009518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800951a:	bf00      	nop
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0fc      	beq.n	800951c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009522:	bf00      	nop
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	20000098 	.word	0x20000098
	...

08009540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <pxCurrentTCBConst2>)
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6808      	ldr	r0, [r1, #0]
 8009546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	f380 8809 	msr	PSP, r0
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	4770      	bx	lr
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst2>:
 8009560:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009568:	4808      	ldr	r0, [pc, #32]	; (800958c <prvPortStartFirstTask+0x24>)
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	6800      	ldr	r0, [r0, #0]
 800956e:	f380 8808 	msr	MSP, r0
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8814 	msr	CONTROL, r0
 800957a:	b662      	cpsie	i
 800957c:	b661      	cpsie	f
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	df00      	svc	0
 8009588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800958a:	bf00      	nop
 800958c:	e000ed08 	.word	0xe000ed08

08009590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009596:	4b46      	ldr	r3, [pc, #280]	; (80096b0 <xPortStartScheduler+0x120>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a46      	ldr	r2, [pc, #280]	; (80096b4 <xPortStartScheduler+0x124>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10a      	bne.n	80095b6 <xPortStartScheduler+0x26>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <xPortStartScheduler+0x120>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a3f      	ldr	r2, [pc, #252]	; (80096b8 <xPortStartScheduler+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10a      	bne.n	80095d6 <xPortStartScheduler+0x46>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095d6:	4b39      	ldr	r3, [pc, #228]	; (80096bc <xPortStartScheduler+0x12c>)
 80095d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b31      	ldr	r3, [pc, #196]	; (80096c0 <xPortStartScheduler+0x130>)
 80095fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <xPortStartScheduler+0x134>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009604:	e009      	b.n	800961a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <xPortStartScheduler+0x134>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3b01      	subs	r3, #1
 800960c:	4a2d      	ldr	r2, [pc, #180]	; (80096c4 <xPortStartScheduler+0x134>)
 800960e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	b2db      	uxtb	r3, r3
 8009618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d0ef      	beq.n	8009606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009626:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <xPortStartScheduler+0x134>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f1c3 0307 	rsb	r3, r3, #7
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00a      	beq.n	8009648 <xPortStartScheduler+0xb8>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60bb      	str	r3, [r7, #8]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009648:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <xPortStartScheduler+0x134>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <xPortStartScheduler+0x134>)
 8009650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009652:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <xPortStartScheduler+0x134>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <xPortStartScheduler+0x134>)
 800965c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	b2da      	uxtb	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <xPortStartScheduler+0x138>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a17      	ldr	r2, [pc, #92]	; (80096c8 <xPortStartScheduler+0x138>)
 800966c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009672:	4b15      	ldr	r3, [pc, #84]	; (80096c8 <xPortStartScheduler+0x138>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a14      	ldr	r2, [pc, #80]	; (80096c8 <xPortStartScheduler+0x138>)
 8009678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800967c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800967e:	f000 f8dd 	bl	800983c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <xPortStartScheduler+0x13c>)
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009688:	f000 f8fc 	bl	8009884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800968c:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <xPortStartScheduler+0x140>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0f      	ldr	r2, [pc, #60]	; (80096d0 <xPortStartScheduler+0x140>)
 8009692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009698:	f7ff ff66 	bl	8009568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800969c:	f7ff f850 	bl	8008740 <vTaskSwitchContext>
	prvTaskExitError();
 80096a0:	f7ff ff1c 	bl	80094dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	e000ed00 	.word	0xe000ed00
 80096b4:	410fc271 	.word	0x410fc271
 80096b8:	410fc270 	.word	0x410fc270
 80096bc:	e000e400 	.word	0xe000e400
 80096c0:	20000f04 	.word	0x20000f04
 80096c4:	20000f08 	.word	0x20000f08
 80096c8:	e000ed20 	.word	0xe000ed20
 80096cc:	20000098 	.word	0x20000098
 80096d0:	e000ef34 	.word	0xe000ef34

080096d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	607b      	str	r3, [r7, #4]
}
 80096ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <vPortEnterCritical+0x58>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <vPortEnterCritical+0x58>)
 80096f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <vPortEnterCritical+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10f      	bne.n	8009720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009700:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <vPortEnterCritical+0x5c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <vPortEnterCritical+0x4c>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	603b      	str	r3, [r7, #0]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vPortEnterCritical+0x4a>
	}
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000098 	.word	0x20000098
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <vPortExitCritical+0x50>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <vPortExitCritical+0x24>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	607b      	str	r3, [r7, #4]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <vPortExitCritical+0x50>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	4a09      	ldr	r2, [pc, #36]	; (8009784 <vPortExitCritical+0x50>)
 8009760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <vPortExitCritical+0x50>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <vPortExitCritical+0x42>
 800976a:	2300      	movs	r3, #0
 800976c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	f383 8811 	msr	BASEPRI, r3
}
 8009774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000098 	.word	0x20000098
	...

08009790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	f380 8811 	msr	BASEPRI, r0
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f7fe ffbe 	bl	8008740 <vTaskSwitchContext>
 80097c4:	f04f 0000 	mov.w	r0, #0
 80097c8:	f380 8811 	msr	BASEPRI, r0
 80097cc:	bc09      	pop	{r0, r3}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d6:	f01e 0f10 	tst.w	lr, #16
 80097da:	bf08      	it	eq
 80097dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e0:	f380 8809 	msr	PSP, r0
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst>:
 80097f0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	607b      	str	r3, [r7, #4]
}
 8009810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009812:	f7fe fedb 	bl	80085cc <xTaskIncrementTick>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <xPortSysTickHandler+0x40>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f383 8811 	msr	BASEPRI, r3
}
 800982e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <vPortSetupTimerInterrupt+0x38>)
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <vPortSetupTimerInterrupt+0x3c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a0a      	ldr	r2, [pc, #40]	; (800987c <vPortSetupTimerInterrupt+0x40>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	4a09      	ldr	r2, [pc, #36]	; (8009880 <vPortSetupTimerInterrupt+0x44>)
 800985a:	3b01      	subs	r3, #1
 800985c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800985e:	4b04      	ldr	r3, [pc, #16]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	e000e010 	.word	0xe000e010
 8009874:	e000e018 	.word	0xe000e018
 8009878:	20000000 	.word	0x20000000
 800987c:	10624dd3 	.word	0x10624dd3
 8009880:	e000e014 	.word	0xe000e014

08009884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009894 <vPortEnableVFP+0x10>
 8009888:	6801      	ldr	r1, [r0, #0]
 800988a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800988e:	6001      	str	r1, [r0, #0]
 8009890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009892:	bf00      	nop
 8009894:	e000ed88 	.word	0xe000ed88

08009898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b0f      	cmp	r3, #15
 80098a8:	d914      	bls.n	80098d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098aa:	4a17      	ldr	r2, [pc, #92]	; (8009908 <vPortValidateInterruptPriority+0x70>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098b4:	4b15      	ldr	r3, [pc, #84]	; (800990c <vPortValidateInterruptPriority+0x74>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	7afa      	ldrb	r2, [r7, #11]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d20a      	bcs.n	80098d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098d4:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <vPortValidateInterruptPriority+0x78>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <vPortValidateInterruptPriority+0x7c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d90a      	bls.n	80098fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	603b      	str	r3, [r7, #0]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <vPortValidateInterruptPriority+0x60>
	}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	e000e3f0 	.word	0xe000e3f0
 800990c:	20000f04 	.word	0x20000f04
 8009910:	e000ed0c 	.word	0xe000ed0c
 8009914:	20000f08 	.word	0x20000f08

08009918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009924:	f7fe fd96 	bl	8008454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009928:	4b5b      	ldr	r3, [pc, #364]	; (8009a98 <pvPortMalloc+0x180>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009930:	f000 f920 	bl	8009b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009934:	4b59      	ldr	r3, [pc, #356]	; (8009a9c <pvPortMalloc+0x184>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8093 	bne.w	8009a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01d      	beq.n	8009984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009948:	2208      	movs	r2, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b00      	cmp	r3, #0
 8009958:	d014      	beq.n	8009984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f023 0307 	bic.w	r3, r3, #7
 8009960:	3308      	adds	r3, #8
 8009962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <pvPortMalloc+0x6c>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	617b      	str	r3, [r7, #20]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d06e      	beq.n	8009a68 <pvPortMalloc+0x150>
 800998a:	4b45      	ldr	r3, [pc, #276]	; (8009aa0 <pvPortMalloc+0x188>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d869      	bhi.n	8009a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009994:	4b43      	ldr	r3, [pc, #268]	; (8009aa4 <pvPortMalloc+0x18c>)
 8009996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009998:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <pvPortMalloc+0x18c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800999e:	e004      	b.n	80099aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d903      	bls.n	80099bc <pvPortMalloc+0xa4>
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1f1      	bne.n	80099a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099bc:	4b36      	ldr	r3, [pc, #216]	; (8009a98 <pvPortMalloc+0x180>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d050      	beq.n	8009a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2208      	movs	r2, #8
 80099cc:	4413      	add	r3, r2
 80099ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	2308      	movs	r3, #8
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d91f      	bls.n	8009a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <pvPortMalloc+0xf8>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	613b      	str	r3, [r7, #16]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a22:	69b8      	ldr	r0, [r7, #24]
 8009a24:	f000 f908 	bl	8009c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a28:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1b      	ldr	r2, [pc, #108]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d203      	bcs.n	8009a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <pvPortMalloc+0x184>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x194>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	4a11      	ldr	r2, [pc, #68]	; (8009aac <pvPortMalloc+0x194>)
 8009a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a68:	f7fe fd02 	bl	8008470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <pvPortMalloc+0x174>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60fb      	str	r3, [r7, #12]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <pvPortMalloc+0x172>
	return pvReturn;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3728      	adds	r7, #40	; 0x28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20004b14 	.word	0x20004b14
 8009a9c:	20004b28 	.word	0x20004b28
 8009aa0:	20004b18 	.word	0x20004b18
 8009aa4:	20004b0c 	.word	0x20004b0c
 8009aa8:	20004b1c 	.word	0x20004b1c
 8009aac:	20004b20 	.word	0x20004b20

08009ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04d      	beq.n	8009b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	425b      	negs	r3, r3
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <vPortFree+0xb8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <vPortFree+0x44>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <vPortFree+0x62>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60bb      	str	r3, [r7, #8]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <vPortFree+0xb8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01e      	beq.n	8009b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11a      	bne.n	8009b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <vPortFree+0xb8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	43db      	mvns	r3, r3
 8009b32:	401a      	ands	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b38:	f7fe fc8c 	bl	8008454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <vPortFree+0xbc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4413      	add	r3, r2
 8009b46:	4a09      	ldr	r2, [pc, #36]	; (8009b6c <vPortFree+0xbc>)
 8009b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f000 f874 	bl	8009c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <vPortFree+0xc0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <vPortFree+0xc0>)
 8009b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b5a:	f7fe fc89 	bl	8008470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b5e:	bf00      	nop
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20004b28 	.word	0x20004b28
 8009b6c:	20004b18 	.word	0x20004b18
 8009b70:	20004b24 	.word	0x20004b24

08009b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <prvHeapInit+0xac>)
 8009b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00c      	beq.n	8009ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <prvHeapInit+0xac>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <prvHeapInit+0xb0>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <prvHeapInit+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvHeapInit+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <prvHeapInit+0xb4>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvHeapInit+0xb8>)
 8009c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <prvHeapInit+0xbc>)
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvHeapInit+0xc0>)
 8009c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20000f0c 	.word	0x20000f0c
 8009c24:	20004b0c 	.word	0x20004b0c
 8009c28:	20004b14 	.word	0x20004b14
 8009c2c:	20004b1c 	.word	0x20004b1c
 8009c30:	20004b18 	.word	0x20004b18
 8009c34:	20004b28 	.word	0x20004b28

08009c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c40:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <prvInsertBlockIntoFreeList+0xac>)
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <prvInsertBlockIntoFreeList+0x14>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d8f7      	bhi.n	8009c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d108      	bne.n	8009c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d118      	bne.n	8009cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d00d      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d002      	beq.n	8009cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20004b0c 	.word	0x20004b0c
 8009ce8:	20004b14 	.word	0x20004b14

08009cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4912      	ldr	r1, [pc, #72]	; (8009d3c <MX_USB_DEVICE_Init+0x50>)
 8009cf4:	4812      	ldr	r0, [pc, #72]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009cf6:	f7fb ff7f 	bl	8005bf8 <USBD_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d00:	f7f6 fe42 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d04:	490f      	ldr	r1, [pc, #60]	; (8009d44 <MX_USB_DEVICE_Init+0x58>)
 8009d06:	480e      	ldr	r0, [pc, #56]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d08:	f7fb ffa6 	bl	8005c58 <USBD_RegisterClass>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d12:	f7f6 fe39 	bl	8000988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d16:	490c      	ldr	r1, [pc, #48]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009d18:	4809      	ldr	r0, [pc, #36]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d1a:	f7fb fe97 	bl	8005a4c <USBD_CDC_RegisterInterface>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d24:	f7f6 fe30 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <MX_USB_DEVICE_Init+0x54>)
 8009d2a:	f7fb ffcb 	bl	8005cc4 <USBD_Start>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d34:	f7f6 fe28 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	200000b0 	.word	0x200000b0
 8009d40:	20004b2c 	.word	0x20004b2c
 8009d44:	20000018 	.word	0x20000018
 8009d48:	2000009c 	.word	0x2000009c

08009d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d50:	2200      	movs	r2, #0
 8009d52:	4905      	ldr	r1, [pc, #20]	; (8009d68 <CDC_Init_FS+0x1c>)
 8009d54:	4805      	ldr	r0, [pc, #20]	; (8009d6c <CDC_Init_FS+0x20>)
 8009d56:	f7fb fe93 	bl	8005a80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d5a:	4905      	ldr	r1, [pc, #20]	; (8009d70 <CDC_Init_FS+0x24>)
 8009d5c:	4803      	ldr	r0, [pc, #12]	; (8009d6c <CDC_Init_FS+0x20>)
 8009d5e:	f7fb feb1 	bl	8005ac4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20005608 	.word	0x20005608
 8009d6c:	20004b2c 	.word	0x20004b2c
 8009d70:	20004e08 	.word	0x20004e08

08009d74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
 8009d90:	4613      	mov	r3, r2
 8009d92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b23      	cmp	r3, #35	; 0x23
 8009d98:	d84a      	bhi.n	8009e30 <CDC_Control_FS+0xac>
 8009d9a:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <CDC_Control_FS+0x1c>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009e31 	.word	0x08009e31
 8009da4:	08009e31 	.word	0x08009e31
 8009da8:	08009e31 	.word	0x08009e31
 8009dac:	08009e31 	.word	0x08009e31
 8009db0:	08009e31 	.word	0x08009e31
 8009db4:	08009e31 	.word	0x08009e31
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e31 	.word	0x08009e31
 8009dc4:	08009e31 	.word	0x08009e31
 8009dc8:	08009e31 	.word	0x08009e31
 8009dcc:	08009e31 	.word	0x08009e31
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	08009e31 	.word	0x08009e31
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e31 	.word	0x08009e31
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e31 	.word	0x08009e31
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e31 	.word	0x08009e31
 8009e28:	08009e31 	.word	0x08009e31
 8009e2c:	08009e31 	.word	0x08009e31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e30:	bf00      	nop
  }

  return (USBD_OK);
 8009e32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4805      	ldr	r0, [pc, #20]	; (8009e64 <CDC_Receive_FS+0x24>)
 8009e4e:	f7fb fe39 	bl	8005ac4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e52:	4804      	ldr	r0, [pc, #16]	; (8009e64 <CDC_Receive_FS+0x24>)
 8009e54:	f7fb fe9a 	bl	8005b8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20004b2c 	.word	0x20004b2c

08009e68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
	...

08009e8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2212      	movs	r2, #18
 8009e9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e9e:	4b03      	ldr	r3, [pc, #12]	; (8009eac <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	200000cc 	.word	0x200000cc

08009eb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6039      	str	r1, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ec2:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	200000e0 	.word	0x200000e0

08009ed4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4907      	ldr	r1, [pc, #28]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009eea:	4808      	ldr	r0, [pc, #32]	; (8009f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009eec:	f7fd f896 	bl	800701c <USBD_GetString>
 8009ef0:	e004      	b.n	8009efc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ef6:	4805      	ldr	r0, [pc, #20]	; (8009f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009ef8:	f7fd f890 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20005e08 	.word	0x20005e08
 8009f0c:	0800a770 	.word	0x0800a770

08009f10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	4904      	ldr	r1, [pc, #16]	; (8009f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f20:	4804      	ldr	r0, [pc, #16]	; (8009f34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f22:	f7fd f87b 	bl	800701c <USBD_GetString>
  return USBD_StrDesc;
 8009f26:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20005e08 	.word	0x20005e08
 8009f34:	0800a788 	.word	0x0800a788

08009f38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	221a      	movs	r2, #26
 8009f48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f4a:	f000 f843 	bl	8009fd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f4e:	4b02      	ldr	r3, [pc, #8]	; (8009f58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	200000e4 	.word	0x200000e4

08009f5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	6039      	str	r1, [r7, #0]
 8009f66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d105      	bne.n	8009f7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	4907      	ldr	r1, [pc, #28]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f72:	4808      	ldr	r0, [pc, #32]	; (8009f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f74:	f7fd f852 	bl	800701c <USBD_GetString>
 8009f78:	e004      	b.n	8009f84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4904      	ldr	r1, [pc, #16]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f7e:	4805      	ldr	r0, [pc, #20]	; (8009f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f80:	f7fd f84c 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20005e08 	.word	0x20005e08
 8009f94:	0800a79c 	.word	0x0800a79c

08009f98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4907      	ldr	r1, [pc, #28]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fae:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fb0:	f7fd f834 	bl	800701c <USBD_GetString>
 8009fb4:	e004      	b.n	8009fc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4904      	ldr	r1, [pc, #16]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fba:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fbc:	f7fd f82e 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20005e08 	.word	0x20005e08
 8009fd0:	0800a7a8 	.word	0x0800a7a8

08009fd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fda:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <Get_SerialNum+0x44>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <Get_SerialNum+0x48>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fe6:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <Get_SerialNum+0x4c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d009      	beq.n	800a00e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ffa:	2208      	movs	r2, #8
 8009ffc:	4909      	ldr	r1, [pc, #36]	; (800a024 <Get_SerialNum+0x50>)
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 f814 	bl	800a02c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a004:	2204      	movs	r2, #4
 800a006:	4908      	ldr	r1, [pc, #32]	; (800a028 <Get_SerialNum+0x54>)
 800a008:	68b8      	ldr	r0, [r7, #8]
 800a00a:	f000 f80f 	bl	800a02c <IntToUnicode>
  }
}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	1fff7a10 	.word	0x1fff7a10
 800a01c:	1fff7a14 	.word	0x1fff7a14
 800a020:	1fff7a18 	.word	0x1fff7a18
 800a024:	200000e6 	.word	0x200000e6
 800a028:	200000f6 	.word	0x200000f6

0800a02c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a03e:	2300      	movs	r3, #0
 800a040:	75fb      	strb	r3, [r7, #23]
 800a042:	e027      	b.n	800a094 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	0f1b      	lsrs	r3, r3, #28
 800a048:	2b09      	cmp	r3, #9
 800a04a:	d80b      	bhi.n	800a064 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0f1b      	lsrs	r3, r3, #28
 800a050:	b2da      	uxtb	r2, r3
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4619      	mov	r1, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	440b      	add	r3, r1
 800a05c:	3230      	adds	r2, #48	; 0x30
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	e00a      	b.n	800a07a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	0f1b      	lsrs	r3, r3, #28
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4619      	mov	r1, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	440b      	add	r3, r1
 800a074:	3237      	adds	r2, #55	; 0x37
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	3301      	adds	r3, #1
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4413      	add	r3, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	3301      	adds	r3, #1
 800a092:	75fb      	strb	r3, [r7, #23]
 800a094:	7dfa      	ldrb	r2, [r7, #23]
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3d3      	bcc.n	800a044 <IntToUnicode+0x18>
  }
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
	...

0800a0ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08a      	sub	sp, #40	; 0x28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0b4:	f107 0314 	add.w	r3, r7, #20
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	605a      	str	r2, [r3, #4]
 800a0be:	609a      	str	r2, [r3, #8]
 800a0c0:	60da      	str	r2, [r3, #12]
 800a0c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0cc:	d13a      	bne.n	800a144 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	4a1d      	ldr	r2, [pc, #116]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	613b      	str	r3, [r7, #16]
 800a0e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0fc:	230a      	movs	r3, #10
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a100:	f107 0314 	add.w	r3, r7, #20
 800a104:	4619      	mov	r1, r3
 800a106:	4812      	ldr	r0, [pc, #72]	; (800a150 <HAL_PCD_MspInit+0xa4>)
 800a108:	f7f6 fe90 	bl	8000e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a110:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a116:	6353      	str	r3, [r2, #52]	; 0x34
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a120:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a126:	6453      	str	r3, [r2, #68]	; 0x44
 800a128:	4b08      	ldr	r3, [pc, #32]	; (800a14c <HAL_PCD_MspInit+0xa0>)
 800a12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a134:	2200      	movs	r2, #0
 800a136:	2105      	movs	r1, #5
 800a138:	2043      	movs	r0, #67	; 0x43
 800a13a:	f7f6 fe40 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a13e:	2043      	movs	r0, #67	; 0x43
 800a140:	f7f6 fe59 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a144:	bf00      	nop
 800a146:	3728      	adds	r7, #40	; 0x28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	40023800 	.word	0x40023800
 800a150:	40020000 	.word	0x40020000

0800a154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fb fdf7 	bl	8005d5e <USBD_LL_SetupStage>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	440b      	add	r3, r1
 800a198:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7fb fe31 	bl	8005e08 <USBD_LL_DataOutStage>
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	334c      	adds	r3, #76	; 0x4c
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f7fb feca 	bl	8005f6e <USBD_LL_DataInStage>
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fb fffe 	bl	80061f2 <USBD_LL_SOF>
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a206:	2301      	movs	r3, #1
 800a208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d001      	beq.n	800a216 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a212:	f7f6 fbb9 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a21c:	7bfa      	ldrb	r2, [r7, #15]
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7fb ffa8 	bl	8006176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fb ff50 	bl	80060d2 <USBD_LL_Reset>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fb ffa3 	bl	8006196 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a262:	f043 0301 	orr.w	r3, r3, #1
 800a266:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <HAL_PCD_SuspendCallback+0x48>)
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	4a03      	ldr	r2, [pc, #12]	; (800a284 <HAL_PCD_SuspendCallback+0x48>)
 800a276:	f043 0306 	orr.w	r3, r3, #6
 800a27a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	e000ed00 	.word	0xe000ed00

0800a288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a296:	4618      	mov	r0, r3
 800a298:	f7fb ff93 	bl	80061c2 <USBD_LL_Resume>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fb ffeb 	bl	8006296 <USBD_LL_IsoOUTIncomplete>
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fb ffa7 	bl	8006232 <USBD_LL_IsoINIncomplete>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fb fffd 	bl	80062fa <USBD_LL_DevConnected>
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a316:	4618      	mov	r0, r3
 800a318:	f7fb fffa 	bl	8006310 <USBD_LL_DevDisconnected>
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d13c      	bne.n	800a3ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a334:	4a20      	ldr	r2, [pc, #128]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a1e      	ldr	r2, [pc, #120]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a340:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a344:	4b1c      	ldr	r3, [pc, #112]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a346:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a34a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a34c:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a34e:	2204      	movs	r2, #4
 800a350:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a352:	4b19      	ldr	r3, [pc, #100]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a354:	2202      	movs	r2, #2
 800a356:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a35e:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a360:	2202      	movs	r2, #2
 800a362:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a364:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a366:	2200      	movs	r2, #0
 800a368:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a36a:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a370:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a372:	2200      	movs	r2, #0
 800a374:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a378:	2200      	movs	r2, #0
 800a37a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a37c:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a382:	480d      	ldr	r0, [pc, #52]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a384:	f7f7 fc52 	bl	8001c2c <HAL_PCD_Init>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a38e:	f7f6 fafb 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a392:	2180      	movs	r1, #128	; 0x80
 800a394:	4808      	ldr	r0, [pc, #32]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a396:	f7f8 feaa 	bl	80030ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a39a:	2240      	movs	r2, #64	; 0x40
 800a39c:	2100      	movs	r1, #0
 800a39e:	4806      	ldr	r0, [pc, #24]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a3a0:	f7f8 fe5e 	bl	8003060 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a3a4:	2280      	movs	r2, #128	; 0x80
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4803      	ldr	r0, [pc, #12]	; (800a3b8 <USBD_LL_Init+0x94>)
 800a3aa:	f7f8 fe59 	bl	8003060 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20006008 	.word	0x20006008

0800a3bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7f7 fd47 	bl	8001e66 <HAL_PCD_Start>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f942 	bl	800a668 <USBD_Get_USB_Status>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	461a      	mov	r2, r3
 800a400:	4603      	mov	r3, r0
 800a402:	70fb      	strb	r3, [r7, #3]
 800a404:	460b      	mov	r3, r1
 800a406:	70bb      	strb	r3, [r7, #2]
 800a408:	4613      	mov	r3, r2
 800a40a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a41a:	78bb      	ldrb	r3, [r7, #2]
 800a41c:	883a      	ldrh	r2, [r7, #0]
 800a41e:	78f9      	ldrb	r1, [r7, #3]
 800a420:	f7f8 fa18 	bl	8002854 <HAL_PCD_EP_Open>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f91c 	bl	800a668 <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f8 fa61 	bl	8002924 <HAL_PCD_EP_Close>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f8fd 	bl	800a668 <USBD_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a496:	78fa      	ldrb	r2, [r7, #3]
 800a498:	4611      	mov	r1, r2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f8 fb39 	bl	8002b12 <HAL_PCD_EP_SetStall>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f8de 	bl	800a668 <USBD_Get_USB_Status>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7f8 fb7e 	bl	8002bda <HAL_PCD_EP_ClrStall>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 f8bf 	bl	800a668 <USBD_Get_USB_Status>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a50a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a50c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da0b      	bge.n	800a52c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	4613      	mov	r3, r2
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	333e      	adds	r3, #62	; 0x3e
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	e00b      	b.n	800a544 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	4613      	mov	r3, r2
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a542:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f8 f94b 	bl	800280a <HAL_PCD_SetAddress>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f874 	bl	800a668 <USBD_Get_USB_Status>
 800a580:	4603      	mov	r3, r0
 800a582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a584:	7bbb      	ldrb	r3, [r7, #14]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	460b      	mov	r3, r1
 800a59c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5ac:	7af9      	ldrb	r1, [r7, #11]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	f7f8 fa64 	bl	8002a7e <HAL_PCD_EP_Transmit>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 f853 	bl	800a668 <USBD_Get_USB_Status>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	607a      	str	r2, [r7, #4]
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5ee:	7af9      	ldrb	r1, [r7, #11]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	f7f8 f9e0 	bl	80029b8 <HAL_PCD_EP_Receive>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f832 	bl	800a668 <USBD_Get_USB_Status>
 800a604:	4603      	mov	r3, r0
 800a606:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a608:	7dbb      	ldrb	r3, [r7, #22]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	4611      	mov	r1, r2
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f8 fa10 	bl	8002a4e <HAL_PCD_EP_GetRxCount>
 800a62e:	4603      	mov	r3, r0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a640:	4b03      	ldr	r3, [pc, #12]	; (800a650 <USBD_static_malloc+0x18>)
}
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20006514 	.word	0x20006514

0800a654 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]

}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d817      	bhi.n	800a6ac <USBD_Get_USB_Status+0x44>
 800a67c:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <USBD_Get_USB_Status+0x1c>)
 800a67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a682:	bf00      	nop
 800a684:	0800a695 	.word	0x0800a695
 800a688:	0800a69b 	.word	0x0800a69b
 800a68c:	0800a6a1 	.word	0x0800a6a1
 800a690:	0800a6a7 	.word	0x0800a6a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
    break;
 800a698:	e00b      	b.n	800a6b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a69a:	2303      	movs	r3, #3
 800a69c:	73fb      	strb	r3, [r7, #15]
    break;
 800a69e:	e008      	b.n	800a6b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a4:	e005      	b.n	800a6b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6aa:	e002      	b.n	800a6b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b0:	bf00      	nop
  }
  return usb_status;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <__libc_init_array>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4d0d      	ldr	r5, [pc, #52]	; (800a6f8 <__libc_init_array+0x38>)
 800a6c4:	4c0d      	ldr	r4, [pc, #52]	; (800a6fc <__libc_init_array+0x3c>)
 800a6c6:	1b64      	subs	r4, r4, r5
 800a6c8:	10a4      	asrs	r4, r4, #2
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	42a6      	cmp	r6, r4
 800a6ce:	d109      	bne.n	800a6e4 <__libc_init_array+0x24>
 800a6d0:	4d0b      	ldr	r5, [pc, #44]	; (800a700 <__libc_init_array+0x40>)
 800a6d2:	4c0c      	ldr	r4, [pc, #48]	; (800a704 <__libc_init_array+0x44>)
 800a6d4:	f000 f82e 	bl	800a734 <_init>
 800a6d8:	1b64      	subs	r4, r4, r5
 800a6da:	10a4      	asrs	r4, r4, #2
 800a6dc:	2600      	movs	r6, #0
 800a6de:	42a6      	cmp	r6, r4
 800a6e0:	d105      	bne.n	800a6ee <__libc_init_array+0x2e>
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e8:	4798      	blx	r3
 800a6ea:	3601      	adds	r6, #1
 800a6ec:	e7ee      	b.n	800a6cc <__libc_init_array+0xc>
 800a6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f2:	4798      	blx	r3
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	e7f2      	b.n	800a6de <__libc_init_array+0x1e>
 800a6f8:	0800a7fc 	.word	0x0800a7fc
 800a6fc:	0800a7fc 	.word	0x0800a7fc
 800a700:	0800a7fc 	.word	0x0800a7fc
 800a704:	0800a800 	.word	0x0800a800

0800a708 <memcpy>:
 800a708:	440a      	add	r2, r1
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a710:	d100      	bne.n	800a714 <memcpy+0xc>
 800a712:	4770      	bx	lr
 800a714:	b510      	push	{r4, lr}
 800a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71e:	4291      	cmp	r1, r2
 800a720:	d1f9      	bne.n	800a716 <memcpy+0xe>
 800a722:	bd10      	pop	{r4, pc}

0800a724 <memset>:
 800a724:	4402      	add	r2, r0
 800a726:	4603      	mov	r3, r0
 800a728:	4293      	cmp	r3, r2
 800a72a:	d100      	bne.n	800a72e <memset+0xa>
 800a72c:	4770      	bx	lr
 800a72e:	f803 1b01 	strb.w	r1, [r3], #1
 800a732:	e7f9      	b.n	800a728 <memset+0x4>

0800a734 <_init>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr

0800a740 <_fini>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr
